// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package api

import (
	"strings"

	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
)

// FactoryABI is the input ABI used to generate the binding from.
const FactoryABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"_dao\",\"type\":\"address\"},{\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"changeAdresses\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"HubOf\",\"outputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"miners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createHub\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createMiner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hubs\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"MinerOf\",\"outputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"TokenAddress\",\"type\":\"address\"},{\"name\":\"_dao\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogCreate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogCr\",\"type\":\"event\"}]"

// FactoryBin is the compiled bytecode used for deploying new contracts.
const FactoryBin = `0x6060604052341561000f57600080fd5b6040516040806124d783398101604052808051919060200180519150505b60008054600160a060020a03808516600160a060020a03199283161790925560018054928416929091169190911790555b50505b612467806100706000396000f300606060405236156100675763ffffffff60e060020a6000350416631ec597af811461006c5780634b72831c14610093578063648ec7b9146100ce578063940ee748146101095780639493b9b014610138578063ca3106ae14610167578063eca939d6146101a2575b600080fd5b341561007757600080fd5b610091600160a060020a03600435811690602435166101dd565b005b341561009e57600080fd5b6100b2600160a060020a036004351661022e565b604051600160a060020a03909116815260200160405180910390f35b34156100d957600080fd5b6100b2600160a060020a036004351661024f565b604051600160a060020a03909116815260200160405180910390f35b341561011457600080fd5b6100b261026a565b604051600160a060020a03909116815260200160405180910390f35b341561014357600080fd5b6100b26102e6565b604051600160a060020a03909116815260200160405180910390f35b341561017257600080fd5b6100b2600160a060020a0360043516610362565b604051600160a060020a03909116815260200160405180910390f35b34156101ad57600080fd5b6100b2600160a060020a036004351661037d565b604051600160a060020a03909116815260200160405180910390f35b60015433600160a060020a039081169116146101f857600080fd5b60018054600160a060020a03808516600160a060020a03199283161790925560028054928416929091169190911790555b5b5050565b600160a060020a03808216600090815260036020526040902054165b919050565b600460205260009081526040902054600160a060020a031681565b600033816102778261039e565b600160a060020a03838116600090815260036020526040908190208054600160a060020a0319169284169290921790915590915060008051602061241c833981519152908290849051600160a060020a039283168152911660208201526040908101905180910390a15b505090565b600033816102f38261040d565b600160a060020a03838116600090815260046020526040908190208054600160a060020a0319169284169290921790915590915060008051602061241c833981519152908290849051600160a060020a039283168152911660208201526040908101905180910390a15b505090565b600360205260009081526040902054600160a060020a031681565b600160a060020a03808216600090815260046020526040902054165b919050565b6001546002546000805490928492600160a060020a039182169290821691166103c561047c565b600160a060020a0394851681529284166020840152908316604080840191909152921660608201526080019051809103906000f080151561040557600080fd5b90505b919050565b6001546002546000805490928492600160a060020a039182169290821691166103c561048c565b600160a060020a0394851681529284166020840152908316604080840191909152921660608201526080019051809103906000f080151561040557600080fd5b90505b919050565b604051610f788061049d83390190565b6040516110078061141583390190560060606040526000600855341561001457600080fd5b604051608080610f78833981016040528080519190602001805191906020018051919060200180519150505b5b60008054600160a060020a03191633600160a060020a03161790555b60008054600160a060020a0319908116600160a060020a0387811691909117909255600180548216868416178155600380548316868516179055600280548316338516178155600b805467ffffffffffffffff19164267ffffffffffffffff161790556004805490931693851693909317909155670de0b6b3a76400006005908155601e600755600c55620d2f00600a55600e8054909160ff1990911690835b02179055505b505050505b610e61806101176000396000f300606060405236156100f65763ffffffff60e060020a600035041663055ad42e81146100fb5780630a3cb663146101325780630b3eeac8146101575780631e1683af1461016c57806327ebcf0e146101815780633ccfd60b146101b057806342c6498a146101c55780634d78511c146101f4578063565f6c49146102095780638da5cb5b1461022e578063906db9ff1461025d57806390a74e2c1461028c57806391030cb6146102b157806398fabd3a146102d6578063a9059cbb14610305578063b8afaa4814610329578063bd73820d1461034e578063c83dd23114610363578063e8a3791914610392578063f2fde38b146103b9575b600080fd5b341561010657600080fd5b61010e6103da565b6040518082600481111561011e57fe5b60ff16815260200191505060405180910390f35b341561013d57600080fd5b6101456103e3565b60405190815260200160405180910390f35b341561016257600080fd5b61016a6103e9565b005b341561017757600080fd5b61016a610519565b005b341561018c57600080fd5b6101946106b0565b604051600160a060020a03909116815260200160405180910390f35b34156101bb57600080fd5b61016a6106bf565b005b34156101d057600080fd5b6101d86107f8565b6040516001604060020a03909116815260200160405180910390f35b34156101ff57600080fd5b61016a610807565b005b341561021457600080fd5b6101456109c8565b60405190815260200160405180910390f35b341561023957600080fd5b6101946109ce565b604051600160a060020a03909116815260200160405180910390f35b341561026857600080fd5b6101d86109dd565b6040516001604060020a03909116815260200160405180910390f35b341561029757600080fd5b6101456109ec565b60405190815260200160405180910390f35b34156102bc57600080fd5b6101456109f2565b60405190815260200160405180910390f35b34156102e157600080fd5b6101946109f8565b604051600160a060020a03909116815260200160405180910390f35b341561031057600080fd5b61016a600160a060020a0360043516602435610a07565b005b341561033457600080fd5b610145610b77565b60405190815260200160405180910390f35b341561035957600080fd5b61016a610b7d565b005b341561036e57600080fd5b610194610c16565b604051600160a060020a03909116815260200160405180910390f35b341561039d57600080fd5b6103a5610c25565b604051901515815260200160405180910390f35b34156103c457600080fd5b61016a600160a060020a0360043516610dca565b005b600e5460ff1681565b600a5481565b60015460009033600160a060020a0390811691161461040757600080fd5b60035b600e5460ff16600481111561041b57fe5b1461042557600080fd5b600a546009546001604060020a03160142101561044157600080fd5b50600854600454600154600160a060020a039182169163a9059cbb91168360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156104ab57600080fd5b6102c65a03f115156104bc57600080fd5b50505060405180515050600e80546004919060ff19166001835b0217905550600e54600080516020610e168339815191529060ff166040518082600481111561050157fe5b60ff16815260200191505060405180910390a15b5b50565b60015433600160a060020a0390811691161461053457600080fd5b60015b600e5460ff16600481111561054857fe5b1461055257600080fd5b600454600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156105ab57600080fd5b6102c65a03f115156105bc57600080fd5b505050604051805160085550600980546001604060020a031916426001604060020a0316179055600e80546003919060ff19166001835b0217905550600e54600080516020610e168339815191529060ff166040518082600481111561061e57fe5b60ff16815260200191505060405180910390a1629e3400600a55600354600160a060020a0316634a5de1653060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561069157600080fd5b6102c65a03f115156106a257600080fd5b505050604051805150505b5b565b600454600160a060020a031681565b6000805433600160a060020a039081169116146106db57600080fd5b60025b600e5460ff1660048111156106ef57fe5b146106f957600080fd5b600454600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561075257600080fd5b6102c65a03f1151561076357600080fd5b505050604051805160045460008054929450600160a060020a03918216935063a9059cbb929091169084906040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156107d857600080fd5b6102c65a03f115156107e957600080fd5b505050604051805150505b5b50565b600b546001604060020a031681565b60005433600160a060020a0390811691161461082257600080fd5b60015b600e5460ff16600481111561083657fe5b1461084057600080fd5b600c546008546103e891025b6006805492909104909101600d55600090819055600855600a546009546001604060020a031601421061087e57600080fd5b600454600154600d54600160a060020a039283169263a9059cbb92169060006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156108e757600080fd5b6102c65a03f115156108f857600080fd5b50505060405180515050600354600160a060020a0316634a5de1653060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561095b57600080fd5b6102c65a03f1151561096c57600080fd5b50505060405180515050600e80546002919060ff19166001835b0217905550600e54600080516020610e168339815191529060ff16604051808260048111156109b157fe5b60ff16815260200191505060405180910390a15b5b565b60055481565b600054600160a060020a031681565b6009546001604060020a031681565b60065481565b60075481565b600154600160a060020a031681565b6000805481908190819033600160a060020a03908116911614610a2957600080fd5b60015b600e5460ff166004811115610a3d57fe5b14610a4757600080fd5b60075460649086025b6008546006546004549390920496508601945084019250848603915081830190600160a060020a03166370a082313360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610ac657600080fd5b6102c65a03f11515610ad757600080fd5b5050506040518051905010151515610aee57600080fd5b6008839055600454600160a060020a031663095ea7b3878360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610b5257600080fd5b6102c65a03f11515610b6357600080fd5b505050604051805150505b5b505050505050565b60085481565b60015433600160a060020a03908116911614610b9857600080fd5b60035b600e5460ff166004811115610bac57fe5b14610bb657600080fd5b60006008819055600655600e80546002919060ff1916600183610986565b0217905550600e54600080516020610e168339815191529060ff16604051808260048111156109b157fe5b60ff16815260200191505060405180910390a15b5b565b600254600160a060020a031681565b600060025b600e5460ff166004811115610c3b57fe5b14610c4557600080fd5b600554600454600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610ca157600080fd5b6102c65a03f11515610cb257600080fd5b50505060405180519050111515610cc857600080fd5b600554600655600980546001604060020a031916426001604060020a039081169190911791829055600354600160a060020a031691633f05852c9130911660006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526001604060020a03166024820152604401602060405180830381600087803b1515610d5b57600080fd5b6102c65a03f11515610d6c57600080fd5b50505060405180515050600e80546001919060ff191682805b0217905550600e54600080516020610e168339815191529060ff1660405180826004811115610db057fe5b60ff16815260200191505060405180910390a15060015b90565b60005433600160a060020a03908116911614610de557600080fd5b600160a060020a038116156105155760008054600160a060020a031916600160a060020a0383161790555b5b5b5056008d9efa3fab1bd6476defa44f520afbf9337886a4947021fd7f2775e0efaf4571a165627a7a7230582073fec031345938d0a3cc9027f9b1984c6d88a5df3c0206c3b93b9110fbea2399002960606040526000600855600d80546002919060ff19166001835b0217905550341561002957600080fd5b604051608080611007833981016040528080519190602001805191906020018051919060200180519150505b5b60008054600160a060020a03191633600160a060020a03161790555b60008054600160a060020a0319908116600160a060020a0387811691909117909255600180548216868416179055600380548216858416179055600280548216338416179055600b805467ffffffffffffffff19164267ffffffffffffffff1617905560048054909116918316919091179055670de0b6b3a76400006005908155600c5562069780600a555b505050505b610ef5806101126000396000f300606060405236156100f65763ffffffff60e060020a600035041663055ad42e81146100fb5780630a3cb663146101325780630b3eeac8146101575780631e1683af1461016c5780631ea41c2c1461018157806327ebcf0e146101a65780633ccfd60b146101d557806342c6498a146101ea5780634d78511c14610219578063565f6c491461022e5780635caf77d9146102535780638da5cb5b14610274578063906db9ff146102a357806390a74e2c146102d257806398fabd3a146102f7578063b8afaa4814610326578063bd73820d1461034b578063c83dd23114610360578063dd1dcd9f1461038f578063f2fde38b146103b9575b600080fd5b341561010657600080fd5b61010e6103da565b6040518082600481111561011e57fe5b60ff16815260200191505060405180910390f35b341561013d57600080fd5b6101456103e3565b60405190815260200160405180910390f35b341561016257600080fd5b61016a6103e9565b005b341561017757600080fd5b61016a610519565b005b341561018c57600080fd5b6101456106b0565b60405190815260200160405180910390f35b34156101b157600080fd5b6101b96106b6565b604051600160a060020a03909116815260200160405180910390f35b34156101e057600080fd5b61016a6106c5565b005b34156101f557600080fd5b6101fd610869565b6040516001604060020a03909116815260200160405180910390f35b341561022457600080fd5b61016a610878565b005b341561023957600080fd5b610145610a38565b60405190815260200160405180910390f35b341561025e57600080fd5b61016a600160a060020a0360043516610a3e565b005b341561027f57600080fd5b6101b9610bab565b604051600160a060020a03909116815260200160405180910390f35b34156102ae57600080fd5b6101fd610bba565b6040516001604060020a03909116815260200160405180910390f35b34156102dd57600080fd5b610145610bc9565b60405190815260200160405180910390f35b341561030257600080fd5b6101b9610bcf565b604051600160a060020a03909116815260200160405180910390f35b341561033157600080fd5b610145610bde565b60405190815260200160405180910390f35b341561035657600080fd5b61016a610be4565b005b341561036b57600080fd5b6101b9610c7e565b604051600160a060020a03909116815260200160405180910390f35b341561039a57600080fd5b6103a5600435610c8d565b604051901515815260200160405180910390f35b34156103c457600080fd5b61016a600160a060020a0360043516610e5e565b005b600d5460ff1681565b600a5481565b60015460009033600160a060020a0390811691161461040757600080fd5b60035b600d5460ff16600481111561041b57fe5b1461042557600080fd5b600a546009546001604060020a03160142101561044157600080fd5b50600854600454600154600160a060020a039182169163a9059cbb91168360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156104ab57600080fd5b6102c65a03f115156104bc57600080fd5b50505060405180515050600d80546004919060ff19166001835b0217905550600d54600080516020610eaa8339815191529060ff166040518082600481111561050157fe5b60ff16815260200191505060405180910390a15b5b50565b60015433600160a060020a0390811691161461053457600080fd5b60015b600d5460ff16600481111561054857fe5b1461055257600080fd5b600454600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156105ab57600080fd5b6102c65a03f115156105bc57600080fd5b505050604051805160085550600980546001604060020a031916426001604060020a0316179055600d80546003919060ff19166001835b0217905550600d54600080516020610eaa8339815191529060ff166040518082600481111561061e57fe5b60ff16815260200191505060405180910390a1629e3400600a55600354600160a060020a031663aaf22fe43060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561069157600080fd5b6102c65a03f115156106a257600080fd5b505050604051805150505b5b565b60075481565b600454600160a060020a031681565b6000805433600160a060020a039081169116146106e157600080fd5b600754600454600160a060020a03166370a082313360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561073d57600080fd5b6102c65a03f1151561074e57600080fd5b505050604051805190501015151561076557600080fd5b600454600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156107be57600080fd5b6102c65a03f115156107cf57600080fd5b505050604051805160075460045460008054929093039450600160a060020a03908116935063a9059cbb9291169084906040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561084957600080fd5b6102c65a03f1151561085a57600080fd5b505050604051805150505b5b50565b600b546001604060020a031681565b6000805433600160a060020a0390811691161461089457600080fd5b60015b600d5460ff1660048111156108a857fe5b146108b257600080fd5b600a546009546001604060020a0316014210156108ce57600080fd5b600c546006546103e891025b600060068190556007819055600454600154939092049350600160a060020a039182169263a9059cbb92169084906040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561095257600080fd5b6102c65a03f1151561096357600080fd5b50505060405180515050600354600160a060020a031663aaf22fe43060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156109c657600080fd5b6102c65a03f115156109d757600080fd5b50505060405180515050600d80546002919060ff19166001836104d6565b0217905550600d54600080516020610eaa8339815191529060ff166040518082600481111561050157fe5b60ff16815260200191505060405180910390a15b5b50565b60055481565b6000805433600160a060020a03908116911614610a5a57600080fd5b600454600160a060020a031663dd62ed3e833060006040516020015260405160e060020a63ffffffff8516028152600160a060020a03928316600482015291166024820152604401602060405180830381600087803b1515610abb57600080fd5b6102c65a03f11515610acc57600080fd5b5050506040518051600454909250600160a060020a031690506323b872dd83308460006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b1515610b4557600080fd5b6102c65a03f11515610b5657600080fd5b50505060405180519050507f419b5dbcc6505f17449a288ecca83a531350bf94db30fcd124c25b18792fcf938282604051600160a060020a03909216825260208201526040908101905180910390a15b5b5050565b600054600160a060020a031681565b6009546001604060020a031681565b60065481565b600154600160a060020a031681565b60085481565b60015433600160a060020a03908116911614610bff57600080fd5b60035b600d5460ff166004811115610c1357fe5b14610c1d57600080fd5b600060088190556006819055600755600d80546002919060ff19166001835b0217905550600d54600080516020610eaa8339815191529060ff1660405180826004811115610c6757fe5b60ff16815260200191505060405180910390a15b5b565b600254600160a060020a031681565b6000805433600160a060020a03908116911614610ca957600080fd5b60025b600d5460ff166004811115610cbd57fe5b14610cc757600080fd5b600554600454600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610d2357600080fd5b6102c65a03f11515610d3457600080fd5b50505060405180519050111515610d4a57600080fd5b60078290556005548201600655600980546001604060020a031916426001604060020a039081169190911791829055600354600160a060020a031691630941d2e6913091168560006040516020015260405160e060020a63ffffffff8616028152600160a060020a0390931660048401526001604060020a0390911660248301526044820152606401602060405180830381600087803b1515610dec57600080fd5b6102c65a03f11515610dfd57600080fd5b50505060405180515050600d80546001919060ff191682805b0217905550600d54600080516020610eaa8339815191529060ff1660405180826004811115610e4157fe5b60ff16815260200191505060405180910390a15060015b5b919050565b60005433600160a060020a03908116911614610e7957600080fd5b600160a060020a038116156105155760008054600160a060020a031916600160a060020a0383161790555b5b5b5056008d9efa3fab1bd6476defa44f520afbf9337886a4947021fd7f2775e0efaf4571a165627a7a723058207904fbce1df92f623737a4abdbff9081e22df79191aa68020bbfe7cc4ede677300298de687d79afed482a1e50c9852295e4bb171d06f1ad1d2c1db1634c4363a401da165627a7a723058208f22baa0f235223bd96020ad48ad3c5039ec7b2791db6033f2b4d00d87a3b41f0029`

// DeployFactory deploys a new Ethereum contract, binding an instance of Factory to it.
func DeployFactory(auth *bind.TransactOpts, backend bind.ContractBackend, TokenAddress common.Address, _dao common.Address) (common.Address, *types.Transaction, *Factory, error) {
	parsed, err := abi.JSON(strings.NewReader(FactoryABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(FactoryBin), backend, TokenAddress, _dao)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Factory{FactoryCaller: FactoryCaller{contract: contract}, FactoryTransactor: FactoryTransactor{contract: contract}}, nil
}

// Factory is an auto generated Go binding around an Ethereum contract.
type Factory struct {
	FactoryCaller     // Read-only binding to the contract
	FactoryTransactor // Write-only binding to the contract
}

// FactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type FactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type FactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type FactorySession struct {
	Contract     *Factory          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// FactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type FactoryCallerSession struct {
	Contract *FactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// FactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type FactoryTransactorSession struct {
	Contract     *FactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// FactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type FactoryRaw struct {
	Contract *Factory // Generic contract binding to access the raw methods on
}

// FactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type FactoryCallerRaw struct {
	Contract *FactoryCaller // Generic read-only contract binding to access the raw methods on
}

// FactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type FactoryTransactorRaw struct {
	Contract *FactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewFactory creates a new instance of Factory, bound to a specific deployed contract.
func NewFactory(address common.Address, backend bind.ContractBackend) (*Factory, error) {
	contract, err := bindFactory(address, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Factory{FactoryCaller: FactoryCaller{contract: contract}, FactoryTransactor: FactoryTransactor{contract: contract}}, nil
}

// NewFactoryCaller creates a new read-only instance of Factory, bound to a specific deployed contract.
func NewFactoryCaller(address common.Address, caller bind.ContractCaller) (*FactoryCaller, error) {
	contract, err := bindFactory(address, caller, nil)
	if err != nil {
		return nil, err
	}
	return &FactoryCaller{contract: contract}, nil
}

// NewFactoryTransactor creates a new write-only instance of Factory, bound to a specific deployed contract.
func NewFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*FactoryTransactor, error) {
	contract, err := bindFactory(address, nil, transactor)
	if err != nil {
		return nil, err
	}
	return &FactoryTransactor{contract: contract}, nil
}

// bindFactory binds a generic wrapper to an already deployed contract.
func bindFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(FactoryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Factory *FactoryRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Factory.Contract.FactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Factory *FactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Factory.Contract.FactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Factory *FactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Factory.Contract.FactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Factory *FactoryCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Factory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Factory *FactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Factory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Factory *FactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Factory.Contract.contract.Transact(opts, method, params...)
}

// HubOf is a free data retrieval call binding the contract method 0x4b72831c.
//
// Solidity: function HubOf(_owner address) constant returns(_wallet address)
func (_Factory *FactoryCaller) HubOf(opts *bind.CallOpts, _owner common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Factory.contract.Call(opts, out, "HubOf", _owner)
	return *ret0, err
}

// HubOf is a free data retrieval call binding the contract method 0x4b72831c.
//
// Solidity: function HubOf(_owner address) constant returns(_wallet address)
func (_Factory *FactorySession) HubOf(_owner common.Address) (common.Address, error) {
	return _Factory.Contract.HubOf(&_Factory.CallOpts, _owner)
}

// HubOf is a free data retrieval call binding the contract method 0x4b72831c.
//
// Solidity: function HubOf(_owner address) constant returns(_wallet address)
func (_Factory *FactoryCallerSession) HubOf(_owner common.Address) (common.Address, error) {
	return _Factory.Contract.HubOf(&_Factory.CallOpts, _owner)
}

// MinerOf is a free data retrieval call binding the contract method 0xeca939d6.
//
// Solidity: function MinerOf(_owner address) constant returns(_wallet address)
func (_Factory *FactoryCaller) MinerOf(opts *bind.CallOpts, _owner common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Factory.contract.Call(opts, out, "MinerOf", _owner)
	return *ret0, err
}

// MinerOf is a free data retrieval call binding the contract method 0xeca939d6.
//
// Solidity: function MinerOf(_owner address) constant returns(_wallet address)
func (_Factory *FactorySession) MinerOf(_owner common.Address) (common.Address, error) {
	return _Factory.Contract.MinerOf(&_Factory.CallOpts, _owner)
}

// MinerOf is a free data retrieval call binding the contract method 0xeca939d6.
//
// Solidity: function MinerOf(_owner address) constant returns(_wallet address)
func (_Factory *FactoryCallerSession) MinerOf(_owner common.Address) (common.Address, error) {
	return _Factory.Contract.MinerOf(&_Factory.CallOpts, _owner)
}

// Hubs is a free data retrieval call binding the contract method 0xca3106ae.
//
// Solidity: function hubs( address) constant returns(address)
func (_Factory *FactoryCaller) Hubs(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Factory.contract.Call(opts, out, "hubs", arg0)
	return *ret0, err
}

// Hubs is a free data retrieval call binding the contract method 0xca3106ae.
//
// Solidity: function hubs( address) constant returns(address)
func (_Factory *FactorySession) Hubs(arg0 common.Address) (common.Address, error) {
	return _Factory.Contract.Hubs(&_Factory.CallOpts, arg0)
}

// Hubs is a free data retrieval call binding the contract method 0xca3106ae.
//
// Solidity: function hubs( address) constant returns(address)
func (_Factory *FactoryCallerSession) Hubs(arg0 common.Address) (common.Address, error) {
	return _Factory.Contract.Hubs(&_Factory.CallOpts, arg0)
}

// Miners is a free data retrieval call binding the contract method 0x648ec7b9.
//
// Solidity: function miners( address) constant returns(address)
func (_Factory *FactoryCaller) Miners(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Factory.contract.Call(opts, out, "miners", arg0)
	return *ret0, err
}

// Miners is a free data retrieval call binding the contract method 0x648ec7b9.
//
// Solidity: function miners( address) constant returns(address)
func (_Factory *FactorySession) Miners(arg0 common.Address) (common.Address, error) {
	return _Factory.Contract.Miners(&_Factory.CallOpts, arg0)
}

// Miners is a free data retrieval call binding the contract method 0x648ec7b9.
//
// Solidity: function miners( address) constant returns(address)
func (_Factory *FactoryCallerSession) Miners(arg0 common.Address) (common.Address, error) {
	return _Factory.Contract.Miners(&_Factory.CallOpts, arg0)
}

// ChangeAdresses is a paid mutator transaction binding the contract method 0x1ec597af.
//
// Solidity: function changeAdresses(_dao address, _whitelist address) returns()
func (_Factory *FactoryTransactor) ChangeAdresses(opts *bind.TransactOpts, _dao common.Address, _whitelist common.Address) (*types.Transaction, error) {
	return _Factory.contract.Transact(opts, "changeAdresses", _dao, _whitelist)
}

// ChangeAdresses is a paid mutator transaction binding the contract method 0x1ec597af.
//
// Solidity: function changeAdresses(_dao address, _whitelist address) returns()
func (_Factory *FactorySession) ChangeAdresses(_dao common.Address, _whitelist common.Address) (*types.Transaction, error) {
	return _Factory.Contract.ChangeAdresses(&_Factory.TransactOpts, _dao, _whitelist)
}

// ChangeAdresses is a paid mutator transaction binding the contract method 0x1ec597af.
//
// Solidity: function changeAdresses(_dao address, _whitelist address) returns()
func (_Factory *FactoryTransactorSession) ChangeAdresses(_dao common.Address, _whitelist common.Address) (*types.Transaction, error) {
	return _Factory.Contract.ChangeAdresses(&_Factory.TransactOpts, _dao, _whitelist)
}

// CreateHub is a paid mutator transaction binding the contract method 0x940ee748.
//
// Solidity: function createHub() returns(address)
func (_Factory *FactoryTransactor) CreateHub(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Factory.contract.Transact(opts, "createHub")
}

// CreateHub is a paid mutator transaction binding the contract method 0x940ee748.
//
// Solidity: function createHub() returns(address)
func (_Factory *FactorySession) CreateHub() (*types.Transaction, error) {
	return _Factory.Contract.CreateHub(&_Factory.TransactOpts)
}

// CreateHub is a paid mutator transaction binding the contract method 0x940ee748.
//
// Solidity: function createHub() returns(address)
func (_Factory *FactoryTransactorSession) CreateHub() (*types.Transaction, error) {
	return _Factory.Contract.CreateHub(&_Factory.TransactOpts)
}

// CreateMiner is a paid mutator transaction binding the contract method 0x9493b9b0.
//
// Solidity: function createMiner() returns(address)
func (_Factory *FactoryTransactor) CreateMiner(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Factory.contract.Transact(opts, "createMiner")
}

// CreateMiner is a paid mutator transaction binding the contract method 0x9493b9b0.
//
// Solidity: function createMiner() returns(address)
func (_Factory *FactorySession) CreateMiner() (*types.Transaction, error) {
	return _Factory.Contract.CreateMiner(&_Factory.TransactOpts)
}

// CreateMiner is a paid mutator transaction binding the contract method 0x9493b9b0.
//
// Solidity: function createMiner() returns(address)
func (_Factory *FactoryTransactorSession) CreateMiner() (*types.Transaction, error) {
	return _Factory.Contract.CreateMiner(&_Factory.TransactOpts)
}
