// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package api

import (
	"strings"

	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
)

// FactoryABI is the input ABI used to generate the binding from.
const FactoryABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"_dao\",\"type\":\"address\"},{\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"changeAdresses\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"HubOf\",\"outputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"miners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createHub\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createMiner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hubs\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"MinerOf\",\"outputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"TokenAddress\",\"type\":\"address\"},{\"name\":\"_dao\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogCreate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogCr\",\"type\":\"event\"}]"

// FactoryBin is the compiled bytecode used for deploying new contracts.
const FactoryBin = `0x6060604052341561000f57600080fd5b60405160408061254b83398101604052808051919060200180519150505b60008054600160a060020a03808516600160a060020a03199283161790925560018054928416929091169190911790555b50505b6124db806100706000396000f300606060405236156100805763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631ec597af81146100855780634b72831c146100ac578063648ec7b9146100e7578063940ee748146101225780639493b9b014610151578063ca3106ae14610180578063eca939d6146101bb575b600080fd5b341561009057600080fd5b6100aa600160a060020a03600435811690602435166101f6565b005b34156100b757600080fd5b6100cb600160a060020a0360043516610254565b604051600160a060020a03909116815260200160405180910390f35b34156100f257600080fd5b6100cb600160a060020a0360043516610275565b604051600160a060020a03909116815260200160405180910390f35b341561012d57600080fd5b6100cb610290565b604051600160a060020a03909116815260200160405180910390f35b341561015c57600080fd5b6100cb61032b565b604051600160a060020a03909116815260200160405180910390f35b341561018b57600080fd5b6100cb600160a060020a03600435166103c6565b604051600160a060020a03909116815260200160405180910390f35b34156101c657600080fd5b6100cb600160a060020a03600435166103e1565b604051600160a060020a03909116815260200160405180910390f35b60015433600160a060020a0390811691161461021157600080fd5b60018054600160a060020a0380851673ffffffffffffffffffffffffffffffffffffffff199283161790925560028054928416929091169190911790555b5b5050565b600160a060020a03808216600090815260036020526040902054165b919050565b600460205260009081526040902054600160a060020a031681565b6000338161029d82610402565b600160a060020a0383811660009081526003602052604090819020805473ffffffffffffffffffffffffffffffffffffffff1916928416929092179091559091507f8de687d79afed482a1e50c9852295e4bb171d06f1ad1d2c1db1634c4363a401d908290849051600160a060020a039283168152911660208201526040908101905180910390a15b505090565b6000338161033882610471565b600160a060020a0383811660009081526004602052604090819020805473ffffffffffffffffffffffffffffffffffffffff1916928416929092179091559091507f8de687d79afed482a1e50c9852295e4bb171d06f1ad1d2c1db1634c4363a401d908290849051600160a060020a039283168152911660208201526040908101905180910390a15b505090565b600360205260009081526040902054600160a060020a031681565b600160a060020a03808216600090815260046020526040902054165b919050565b6001546002546000805490928492600160a060020a039182169290821691166104296104e0565b600160a060020a0394851681529284166020840152908316604080840191909152921660608201526080019051809103906000f080151561046957600080fd5b90505b919050565b6001546002546000805490928492600160a060020a039182169290821691166104296104f0565b600160a060020a0394851681529284166020840152908316604080840191909152921660608201526080019051809103906000f080151561046957600080fd5b90505b919050565b604051610f908061050183390190565b60405161101f8061149183390190560060606040526000600855341561001457600080fd5b604051608080610f90833981016040528080519190602001805191906020018051919060200180519150505b5b60008054600160a060020a03191633600160a060020a03161790555b60008054600160a060020a0319908116600160a060020a0387811691909117909255600180548216868416178155600380548316868516179055600280548316338516178155600b805467ffffffffffffffff19164267ffffffffffffffff161790556004805490931693851693909317909155670de0b6b3a76400006005908155601e600755600c55620d2f00600a55600e8054909160ff1990911690835b02179055505b505050505b610e79806101176000396000f300606060405236156100f65763ffffffff60e060020a600035041663055ad42e81146100fb5780630a3cb663146101325780630b3eeac8146101575780631e1683af1461016c57806327ebcf0e146101815780633ccfd60b146101b057806342c6498a146101c55780634d78511c146101f5578063565f6c491461020a5780638da5cb5b1461022f578063906db9ff1461025e57806390a74e2c1461028e57806391030cb6146102b357806398fabd3a146102d8578063a9059cbb14610307578063b8afaa481461032b578063bd73820d14610350578063c83dd23114610365578063e8a3791914610394578063f2fde38b146103bb575b600080fd5b341561010657600080fd5b61010e6103dc565b6040518082600481111561011e57fe5b60ff16815260200191505060405180910390f35b341561013d57600080fd5b6101456103e5565b60405190815260200160405180910390f35b341561016257600080fd5b61016a6103eb565b005b341561017757600080fd5b61016a61051c565b005b341561018c57600080fd5b6101946106b5565b604051600160a060020a03909116815260200160405180910390f35b34156101bb57600080fd5b61016a6106c4565b005b34156101d057600080fd5b6101d86107fd565b60405167ffffffffffffffff909116815260200160405180910390f35b341561020057600080fd5b61016a61080d565b005b341561021557600080fd5b6101456109cf565b60405190815260200160405180910390f35b341561023a57600080fd5b6101946109d5565b604051600160a060020a03909116815260200160405180910390f35b341561026957600080fd5b6101d86109e4565b60405167ffffffffffffffff909116815260200160405180910390f35b341561029957600080fd5b6101456109f4565b60405190815260200160405180910390f35b34156102be57600080fd5b6101456109fa565b60405190815260200160405180910390f35b34156102e357600080fd5b610194610a00565b604051600160a060020a03909116815260200160405180910390f35b341561031257600080fd5b61016a600160a060020a0360043516602435610a0f565b005b341561033657600080fd5b610145610b7f565b60405190815260200160405180910390f35b341561035b57600080fd5b61016a610b85565b005b341561037057600080fd5b610194610c1e565b604051600160a060020a03909116815260200160405180910390f35b341561039f57600080fd5b6103a7610c2d565b604051901515815260200160405180910390f35b34156103c657600080fd5b61016a600160a060020a0360043516610dd5565b005b600e5460ff1681565b600a5481565b60015460009033600160a060020a0390811691161461040957600080fd5b60035b600e5460ff16600481111561041d57fe5b1461042757600080fd5b600a5460095467ffffffffffffffff160142101561044457600080fd5b50600854600454600154600160a060020a039182169163a9059cbb91168360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156104ae57600080fd5b6102c65a03f115156104bf57600080fd5b50505060405180515050600e80546004919060ff19166001835b0217905550600e54600080516020610e2e8339815191529060ff166040518082600481111561050457fe5b60ff16815260200191505060405180910390a15b5b50565b60015433600160a060020a0390811691161461053757600080fd5b60015b600e5460ff16600481111561054b57fe5b1461055557600080fd5b600454600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156105ae57600080fd5b6102c65a03f115156105bf57600080fd5b5050506040518051600855506009805467ffffffffffffffff19164267ffffffffffffffff16179055600e80546003919060ff19166001835b0217905550600e54600080516020610e2e8339815191529060ff166040518082600481111561062357fe5b60ff16815260200191505060405180910390a1629e3400600a55600354600160a060020a0316634a5de1653060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561069657600080fd5b6102c65a03f115156106a757600080fd5b505050604051805150505b5b565b600454600160a060020a031681565b6000805433600160a060020a039081169116146106e057600080fd5b60025b600e5460ff1660048111156106f457fe5b146106fe57600080fd5b600454600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561075757600080fd5b6102c65a03f1151561076857600080fd5b505050604051805160045460008054929450600160a060020a03918216935063a9059cbb929091169084906040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156107dd57600080fd5b6102c65a03f115156107ee57600080fd5b505050604051805150505b5b50565b600b5467ffffffffffffffff1681565b60005433600160a060020a0390811691161461082857600080fd5b60015b600e5460ff16600481111561083c57fe5b1461084657600080fd5b600c546008546103e891025b6006805492909104909101600d55600090819055600855600a5460095467ffffffffffffffff1601421061088557600080fd5b600454600154600d54600160a060020a039283169263a9059cbb92169060006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156108ee57600080fd5b6102c65a03f115156108ff57600080fd5b50505060405180515050600354600160a060020a0316634a5de1653060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561096257600080fd5b6102c65a03f1151561097357600080fd5b50505060405180515050600e80546002919060ff19166001835b0217905550600e54600080516020610e2e8339815191529060ff16604051808260048111156109b857fe5b60ff16815260200191505060405180910390a15b5b565b60055481565b600054600160a060020a031681565b60095467ffffffffffffffff1681565b60065481565b60075481565b600154600160a060020a031681565b6000805481908190819033600160a060020a03908116911614610a3157600080fd5b60015b600e5460ff166004811115610a4557fe5b14610a4f57600080fd5b60075460649086025b6008546006546004549390920496508601945084019250848603915081830190600160a060020a03166370a082313360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610ace57600080fd5b6102c65a03f11515610adf57600080fd5b5050506040518051905010151515610af657600080fd5b6008839055600454600160a060020a031663095ea7b3878360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610b5a57600080fd5b6102c65a03f11515610b6b57600080fd5b505050604051805150505b5b505050505050565b60085481565b60015433600160a060020a03908116911614610ba057600080fd5b60035b600e5460ff166004811115610bb457fe5b14610bbe57600080fd5b60006008819055600655600e80546002919060ff191660018361098d565b0217905550600e54600080516020610e2e8339815191529060ff16604051808260048111156109b857fe5b60ff16815260200191505060405180910390a15b5b565b600254600160a060020a031681565b600060025b600e5460ff166004811115610c4357fe5b14610c4d57600080fd5b600554600454600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610ca957600080fd5b6102c65a03f11515610cba57600080fd5b50505060405180519050111515610cd057600080fd5b6005546006556009805467ffffffffffffffff19164267ffffffffffffffff9081169190911791829055600354600160a060020a031691633f05852c9130911660006040516020015260405160e060020a63ffffffff8516028152600160a060020a03909216600483015267ffffffffffffffff166024820152604401602060405180830381600087803b1515610d6657600080fd5b6102c65a03f11515610d7757600080fd5b50505060405180515050600e80546001919060ff191682805b0217905550600e54600080516020610e2e8339815191529060ff1660405180826004811115610dbb57fe5b60ff16815260200191505060405180910390a15060015b90565b60005433600160a060020a03908116911614610df057600080fd5b600160a060020a03811615610518576000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b5b5056008d9efa3fab1bd6476defa44f520afbf9337886a4947021fd7f2775e0efaf4571a165627a7a723058204d6c1f2f65767613bac7ec48e17bf241c07d3cb9bfd06d34f1728d16790bb54e002960606040526000600855600d80546002919060ff19166001835b0217905550341561002957600080fd5b60405160808061101f833981016040528080519190602001805191906020018051919060200180519150505b5b60008054600160a060020a03191633600160a060020a03161790555b60008054600160a060020a0319908116600160a060020a0387811691909117909255600180548216868416179055600380548216858416179055600280548216338416179055600b805467ffffffffffffffff19164267ffffffffffffffff1617905560048054909116918316919091179055670de0b6b3a76400006005908155600c5562069780600a555b505050505b610f0d806101126000396000f300606060405236156100f65763ffffffff60e060020a600035041663055ad42e81146100fb5780630a3cb663146101325780630b3eeac8146101575780631e1683af1461016c5780631ea41c2c1461018157806327ebcf0e146101a65780633ccfd60b146101d557806342c6498a146101ea5780634d78511c1461021a578063565f6c491461022f5780635caf77d9146102545780638da5cb5b14610275578063906db9ff146102a457806390a74e2c146102d457806398fabd3a146102f9578063b8afaa4814610328578063bd73820d1461034d578063c83dd23114610362578063dd1dcd9f14610391578063f2fde38b146103bb575b600080fd5b341561010657600080fd5b61010e6103dc565b6040518082600481111561011e57fe5b60ff16815260200191505060405180910390f35b341561013d57600080fd5b6101456103e5565b60405190815260200160405180910390f35b341561016257600080fd5b61016a6103eb565b005b341561017757600080fd5b61016a61051c565b005b341561018c57600080fd5b6101456106b5565b60405190815260200160405180910390f35b34156101b157600080fd5b6101b96106bb565b604051600160a060020a03909116815260200160405180910390f35b34156101e057600080fd5b61016a6106ca565b005b34156101f557600080fd5b6101fd61086e565b60405167ffffffffffffffff909116815260200160405180910390f35b341561022557600080fd5b61016a61087e565b005b341561023a57600080fd5b610145610a3f565b60405190815260200160405180910390f35b341561025f57600080fd5b61016a600160a060020a0360043516610a45565b005b341561028057600080fd5b6101b9610bb2565b604051600160a060020a03909116815260200160405180910390f35b34156102af57600080fd5b6101fd610bc1565b60405167ffffffffffffffff909116815260200160405180910390f35b34156102df57600080fd5b610145610bd1565b60405190815260200160405180910390f35b341561030457600080fd5b6101b9610bd7565b604051600160a060020a03909116815260200160405180910390f35b341561033357600080fd5b610145610be6565b60405190815260200160405180910390f35b341561035857600080fd5b61016a610bec565b005b341561036d57600080fd5b6101b9610c86565b604051600160a060020a03909116815260200160405180910390f35b341561039c57600080fd5b6103a7600435610c95565b604051901515815260200160405180910390f35b34156103c657600080fd5b61016a600160a060020a0360043516610e69565b005b600d5460ff1681565b600a5481565b60015460009033600160a060020a0390811691161461040957600080fd5b60035b600d5460ff16600481111561041d57fe5b1461042757600080fd5b600a5460095467ffffffffffffffff160142101561044457600080fd5b50600854600454600154600160a060020a039182169163a9059cbb91168360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156104ae57600080fd5b6102c65a03f115156104bf57600080fd5b50505060405180515050600d80546004919060ff19166001835b0217905550600d54600080516020610ec28339815191529060ff166040518082600481111561050457fe5b60ff16815260200191505060405180910390a15b5b50565b60015433600160a060020a0390811691161461053757600080fd5b60015b600d5460ff16600481111561054b57fe5b1461055557600080fd5b600454600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156105ae57600080fd5b6102c65a03f115156105bf57600080fd5b5050506040518051600855506009805467ffffffffffffffff19164267ffffffffffffffff16179055600d80546003919060ff19166001835b0217905550600d54600080516020610ec28339815191529060ff166040518082600481111561062357fe5b60ff16815260200191505060405180910390a1629e3400600a55600354600160a060020a031663aaf22fe43060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561069657600080fd5b6102c65a03f115156106a757600080fd5b505050604051805150505b5b565b60075481565b600454600160a060020a031681565b6000805433600160a060020a039081169116146106e657600080fd5b600754600454600160a060020a03166370a082313360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561074257600080fd5b6102c65a03f1151561075357600080fd5b505050604051805190501015151561076a57600080fd5b600454600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156107c357600080fd5b6102c65a03f115156107d457600080fd5b505050604051805160075460045460008054929093039450600160a060020a03908116935063a9059cbb9291169084906040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561084e57600080fd5b6102c65a03f1151561085f57600080fd5b505050604051805150505b5b50565b600b5467ffffffffffffffff1681565b6000805433600160a060020a0390811691161461089a57600080fd5b60015b600d5460ff1660048111156108ae57fe5b146108b857600080fd5b600a5460095467ffffffffffffffff16014210156108d557600080fd5b600c546006546103e891025b600060068190556007819055600454600154939092049350600160a060020a039182169263a9059cbb92169084906040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561095957600080fd5b6102c65a03f1151561096a57600080fd5b50505060405180515050600354600160a060020a031663aaf22fe43060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156109cd57600080fd5b6102c65a03f115156109de57600080fd5b50505060405180515050600d80546002919060ff19166001836104d9565b0217905550600d54600080516020610ec28339815191529060ff166040518082600481111561050457fe5b60ff16815260200191505060405180910390a15b5b50565b60055481565b6000805433600160a060020a03908116911614610a6157600080fd5b600454600160a060020a031663dd62ed3e833060006040516020015260405160e060020a63ffffffff8516028152600160a060020a03928316600482015291166024820152604401602060405180830381600087803b1515610ac257600080fd5b6102c65a03f11515610ad357600080fd5b5050506040518051600454909250600160a060020a031690506323b872dd83308460006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b1515610b4c57600080fd5b6102c65a03f11515610b5d57600080fd5b50505060405180519050507f419b5dbcc6505f17449a288ecca83a531350bf94db30fcd124c25b18792fcf938282604051600160a060020a03909216825260208201526040908101905180910390a15b5b5050565b600054600160a060020a031681565b60095467ffffffffffffffff1681565b60065481565b600154600160a060020a031681565b60085481565b60015433600160a060020a03908116911614610c0757600080fd5b60035b600d5460ff166004811115610c1b57fe5b14610c2557600080fd5b600060088190556006819055600755600d80546002919060ff19166001835b0217905550600d54600080516020610ec28339815191529060ff1660405180826004811115610c6f57fe5b60ff16815260200191505060405180910390a15b5b565b600254600160a060020a031681565b6000805433600160a060020a03908116911614610cb157600080fd5b60025b600d5460ff166004811115610cc557fe5b14610ccf57600080fd5b600554600454600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610d2b57600080fd5b6102c65a03f11515610d3c57600080fd5b50505060405180519050111515610d5257600080fd5b600782905560055482016006556009805467ffffffffffffffff19164267ffffffffffffffff9081169190911791829055600354600160a060020a031691630941d2e6913091168560006040516020015260405160e060020a63ffffffff8616028152600160a060020a03909316600484015267ffffffffffffffff90911660248301526044820152606401602060405180830381600087803b1515610df757600080fd5b6102c65a03f11515610e0857600080fd5b50505060405180515050600d80546001919060ff191682805b0217905550600d54600080516020610ec28339815191529060ff1660405180826004811115610e4c57fe5b60ff16815260200191505060405180910390a15060015b5b919050565b60005433600160a060020a03908116911614610e8457600080fd5b600160a060020a03811615610518576000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b5b5056008d9efa3fab1bd6476defa44f520afbf9337886a4947021fd7f2775e0efaf4571a165627a7a723058207dc7d06ab88e5e8a5b9855a8cc3c78f357314ca7309174bf3e34e9b26d0eb2460029a165627a7a72305820013cf140dcbf90810ab5ba07b2723e9ea5840a050a45a502886cbe996675ab1a0029`

// DeployFactory deploys a new Ethereum contract, binding an instance of Factory to it.
func DeployFactory(auth *bind.TransactOpts, backend bind.ContractBackend, TokenAddress common.Address, _dao common.Address) (common.Address, *types.Transaction, *Factory, error) {
	parsed, err := abi.JSON(strings.NewReader(FactoryABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(FactoryBin), backend, TokenAddress, _dao)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Factory{FactoryCaller: FactoryCaller{contract: contract}, FactoryTransactor: FactoryTransactor{contract: contract}}, nil
}

// Factory is an auto generated Go binding around an Ethereum contract.
type Factory struct {
	FactoryCaller     // Read-only binding to the contract
	FactoryTransactor // Write-only binding to the contract
}

// FactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type FactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type FactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type FactorySession struct {
	Contract     *Factory          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// FactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type FactoryCallerSession struct {
	Contract *FactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// FactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type FactoryTransactorSession struct {
	Contract     *FactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// FactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type FactoryRaw struct {
	Contract *Factory // Generic contract binding to access the raw methods on
}

// FactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type FactoryCallerRaw struct {
	Contract *FactoryCaller // Generic read-only contract binding to access the raw methods on
}

// FactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type FactoryTransactorRaw struct {
	Contract *FactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewFactory creates a new instance of Factory, bound to a specific deployed contract.
func NewFactory(address common.Address, backend bind.ContractBackend) (*Factory, error) {
	contract, err := bindFactory(address, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Factory{FactoryCaller: FactoryCaller{contract: contract}, FactoryTransactor: FactoryTransactor{contract: contract}}, nil
}

// NewFactoryCaller creates a new read-only instance of Factory, bound to a specific deployed contract.
func NewFactoryCaller(address common.Address, caller bind.ContractCaller) (*FactoryCaller, error) {
	contract, err := bindFactory(address, caller, nil)
	if err != nil {
		return nil, err
	}
	return &FactoryCaller{contract: contract}, nil
}

// NewFactoryTransactor creates a new write-only instance of Factory, bound to a specific deployed contract.
func NewFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*FactoryTransactor, error) {
	contract, err := bindFactory(address, nil, transactor)
	if err != nil {
		return nil, err
	}
	return &FactoryTransactor{contract: contract}, nil
}

// bindFactory binds a generic wrapper to an already deployed contract.
func bindFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(FactoryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Factory *FactoryRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Factory.Contract.FactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Factory *FactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Factory.Contract.FactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Factory *FactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Factory.Contract.FactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Factory *FactoryCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Factory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Factory *FactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Factory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Factory *FactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Factory.Contract.contract.Transact(opts, method, params...)
}

// HubOf is a free data retrieval call binding the contract method 0x4b72831c.
//
// Solidity: function HubOf(_owner address) constant returns(_wallet address)
func (_Factory *FactoryCaller) HubOf(opts *bind.CallOpts, _owner common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Factory.contract.Call(opts, out, "HubOf", _owner)
	return *ret0, err
}

// HubOf is a free data retrieval call binding the contract method 0x4b72831c.
//
// Solidity: function HubOf(_owner address) constant returns(_wallet address)
func (_Factory *FactorySession) HubOf(_owner common.Address) (common.Address, error) {
	return _Factory.Contract.HubOf(&_Factory.CallOpts, _owner)
}

// HubOf is a free data retrieval call binding the contract method 0x4b72831c.
//
// Solidity: function HubOf(_owner address) constant returns(_wallet address)
func (_Factory *FactoryCallerSession) HubOf(_owner common.Address) (common.Address, error) {
	return _Factory.Contract.HubOf(&_Factory.CallOpts, _owner)
}

// MinerOf is a free data retrieval call binding the contract method 0xeca939d6.
//
// Solidity: function MinerOf(_owner address) constant returns(_wallet address)
func (_Factory *FactoryCaller) MinerOf(opts *bind.CallOpts, _owner common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Factory.contract.Call(opts, out, "MinerOf", _owner)
	return *ret0, err
}

// MinerOf is a free data retrieval call binding the contract method 0xeca939d6.
//
// Solidity: function MinerOf(_owner address) constant returns(_wallet address)
func (_Factory *FactorySession) MinerOf(_owner common.Address) (common.Address, error) {
	return _Factory.Contract.MinerOf(&_Factory.CallOpts, _owner)
}

// MinerOf is a free data retrieval call binding the contract method 0xeca939d6.
//
// Solidity: function MinerOf(_owner address) constant returns(_wallet address)
func (_Factory *FactoryCallerSession) MinerOf(_owner common.Address) (common.Address, error) {
	return _Factory.Contract.MinerOf(&_Factory.CallOpts, _owner)
}

// Hubs is a free data retrieval call binding the contract method 0xca3106ae.
//
// Solidity: function hubs( address) constant returns(address)
func (_Factory *FactoryCaller) Hubs(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Factory.contract.Call(opts, out, "hubs", arg0)
	return *ret0, err
}

// Hubs is a free data retrieval call binding the contract method 0xca3106ae.
//
// Solidity: function hubs( address) constant returns(address)
func (_Factory *FactorySession) Hubs(arg0 common.Address) (common.Address, error) {
	return _Factory.Contract.Hubs(&_Factory.CallOpts, arg0)
}

// Hubs is a free data retrieval call binding the contract method 0xca3106ae.
//
// Solidity: function hubs( address) constant returns(address)
func (_Factory *FactoryCallerSession) Hubs(arg0 common.Address) (common.Address, error) {
	return _Factory.Contract.Hubs(&_Factory.CallOpts, arg0)
}

// Miners is a free data retrieval call binding the contract method 0x648ec7b9.
//
// Solidity: function miners( address) constant returns(address)
func (_Factory *FactoryCaller) Miners(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Factory.contract.Call(opts, out, "miners", arg0)
	return *ret0, err
}

// Miners is a free data retrieval call binding the contract method 0x648ec7b9.
//
// Solidity: function miners( address) constant returns(address)
func (_Factory *FactorySession) Miners(arg0 common.Address) (common.Address, error) {
	return _Factory.Contract.Miners(&_Factory.CallOpts, arg0)
}

// Miners is a free data retrieval call binding the contract method 0x648ec7b9.
//
// Solidity: function miners( address) constant returns(address)
func (_Factory *FactoryCallerSession) Miners(arg0 common.Address) (common.Address, error) {
	return _Factory.Contract.Miners(&_Factory.CallOpts, arg0)
}

// ChangeAdresses is a paid mutator transaction binding the contract method 0x1ec597af.
//
// Solidity: function changeAdresses(_dao address, _whitelist address) returns()
func (_Factory *FactoryTransactor) ChangeAdresses(opts *bind.TransactOpts, _dao common.Address, _whitelist common.Address) (*types.Transaction, error) {
	return _Factory.contract.Transact(opts, "changeAdresses", _dao, _whitelist)
}

// ChangeAdresses is a paid mutator transaction binding the contract method 0x1ec597af.
//
// Solidity: function changeAdresses(_dao address, _whitelist address) returns()
func (_Factory *FactorySession) ChangeAdresses(_dao common.Address, _whitelist common.Address) (*types.Transaction, error) {
	return _Factory.Contract.ChangeAdresses(&_Factory.TransactOpts, _dao, _whitelist)
}

// ChangeAdresses is a paid mutator transaction binding the contract method 0x1ec597af.
//
// Solidity: function changeAdresses(_dao address, _whitelist address) returns()
func (_Factory *FactoryTransactorSession) ChangeAdresses(_dao common.Address, _whitelist common.Address) (*types.Transaction, error) {
	return _Factory.Contract.ChangeAdresses(&_Factory.TransactOpts, _dao, _whitelist)
}

// CreateHub is a paid mutator transaction binding the contract method 0x940ee748.
//
// Solidity: function createHub() returns(address)
func (_Factory *FactoryTransactor) CreateHub(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Factory.contract.Transact(opts, "createHub")
}

// CreateHub is a paid mutator transaction binding the contract method 0x940ee748.
//
// Solidity: function createHub() returns(address)
func (_Factory *FactorySession) CreateHub() (*types.Transaction, error) {
	return _Factory.Contract.CreateHub(&_Factory.TransactOpts)
}

// CreateHub is a paid mutator transaction binding the contract method 0x940ee748.
//
// Solidity: function createHub() returns(address)
func (_Factory *FactoryTransactorSession) CreateHub() (*types.Transaction, error) {
	return _Factory.Contract.CreateHub(&_Factory.TransactOpts)
}

// CreateMiner is a paid mutator transaction binding the contract method 0x9493b9b0.
//
// Solidity: function createMiner() returns(address)
func (_Factory *FactoryTransactor) CreateMiner(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Factory.contract.Transact(opts, "createMiner")
}

// CreateMiner is a paid mutator transaction binding the contract method 0x9493b9b0.
//
// Solidity: function createMiner() returns(address)
func (_Factory *FactorySession) CreateMiner() (*types.Transaction, error) {
	return _Factory.Contract.CreateMiner(&_Factory.TransactOpts)
}

// CreateMiner is a paid mutator transaction binding the contract method 0x9493b9b0.
//
// Solidity: function createMiner() returns(address)
func (_Factory *FactoryTransactorSession) CreateMiner() (*types.Transaction, error) {
	return _Factory.Contract.CreateMiner(&_Factory.TransactOpts)
}
