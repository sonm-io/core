// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package api

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// MarketABI is the input ABI used to generate the binding from.
const MarketABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deals\",\"outputs\":[{\"name\":\"supplierID\",\"type\":\"address\"},{\"name\":\"consumerID\",\"type\":\"address\"},{\"name\":\"masterID\",\"type\":\"address\"},{\"name\":\"askID\",\"type\":\"uint256\"},{\"name\":\"bidID\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"endTime\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"blockedBalance\",\"type\":\"uint256\"},{\"name\":\"totalPayout\",\"type\":\"uint256\"},{\"name\":\"lastBillTS\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"name\":\"orderType\",\"type\":\"uint8\"},{\"name\":\"orderStatus\",\"type\":\"uint8\"},{\"name\":\"author\",\"type\":\"address\"},{\"name\":\"counterparty\",\"type\":\"address\"},{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"identityLevel\",\"type\":\"uint8\"},{\"name\":\"blacklist\",\"type\":\"address\"},{\"name\":\"tag\",\"type\":\"bytes32\"},{\"name\":\"frozenSum\",\"type\":\"uint256\"},{\"name\":\"dealID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_blacklist\",\"type\":\"address\"},{\"name\":\"_oracle\",\"type\":\"address\"},{\"name\":\"_profileRegistry\",\"type\":\"address\"},{\"name\":\"_benchmarksQuantity\",\"type\":\"uint256\"},{\"name\":\"_netflagsQuantity\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"orderID\",\"type\":\"uint256\"}],\"name\":\"OrderPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"orderID\",\"type\":\"uint256\"}],\"name\":\"OrderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dealID\",\"type\":\"uint256\"}],\"name\":\"DealOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dealID\",\"type\":\"uint256\"}],\"name\":\"DealUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dealID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"paidAmount\",\"type\":\"uint256\"}],\"name\":\"Billed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"changeRequestID\",\"type\":\"uint256\"}],\"name\":\"DealChangeRequestSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"changeRequestID\",\"type\":\"uint256\"}],\"name\":\"DealChangeRequestUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"worker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"master\",\"type\":\"address\"}],\"name\":\"WorkerAnnounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"worker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"master\",\"type\":\"address\"}],\"name\":\"WorkerConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"worker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"master\",\"type\":\"address\"}],\"name\":\"WorkerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"NumBenchmarksUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"NumNetflagsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderType\",\"type\":\"uint8\"},{\"name\":\"_id_counterparty\",\"type\":\"address\"},{\"name\":\"_duration\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_netflags\",\"type\":\"bool[]\"},{\"name\":\"_identityLevel\",\"type\":\"uint8\"},{\"name\":\"_blacklist\",\"type\":\"address\"},{\"name\":\"_tag\",\"type\":\"bytes32\"},{\"name\":\"_benchmarks\",\"type\":\"uint64[]\"}],\"name\":\"PlaceOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orderID\",\"type\":\"uint256\"}],\"name\":\"CancelOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"askID\",\"type\":\"uint256\"},{\"name\":\"buyoutDuration\",\"type\":\"uint256\"}],\"name\":\"QuickBuy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_askID\",\"type\":\"uint256\"},{\"name\":\"_bidID\",\"type\":\"uint256\"}],\"name\":\"OpenDeal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dealID\",\"type\":\"uint256\"},{\"name\":\"blacklisted\",\"type\":\"uint8\"}],\"name\":\"CloseDeal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dealID\",\"type\":\"uint256\"}],\"name\":\"Bill\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dealID\",\"type\":\"uint256\"},{\"name\":\"newPrice\",\"type\":\"uint256\"},{\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"CreateChangeRequest\",\"outputs\":[{\"name\":\"changeRequestID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"changeRequestID\",\"type\":\"uint256\"}],\"name\":\"CancelChangeRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_master\",\"type\":\"address\"}],\"name\":\"RegisterWorker\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_worker\",\"type\":\"address\"}],\"name\":\"ConfirmWorker\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_worker\",\"type\":\"address\"},{\"name\":\"_master\",\"type\":\"address\"}],\"name\":\"RemoveWorker\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"orderID\",\"type\":\"uint256\"}],\"name\":\"GetOrderInfo\",\"outputs\":[{\"name\":\"orderType\",\"type\":\"uint8\"},{\"name\":\"author\",\"type\":\"address\"},{\"name\":\"counterparty\",\"type\":\"address\"},{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"netflags\",\"type\":\"bool[]\"},{\"name\":\"identityLevel\",\"type\":\"uint8\"},{\"name\":\"blacklist\",\"type\":\"address\"},{\"name\":\"tag\",\"type\":\"bytes32\"},{\"name\":\"benchmarks\",\"type\":\"uint64[]\"},{\"name\":\"frozenSum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"orderID\",\"type\":\"uint256\"}],\"name\":\"GetOrderParams\",\"outputs\":[{\"name\":\"orderStatus\",\"type\":\"uint8\"},{\"name\":\"dealID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"dealID\",\"type\":\"uint256\"}],\"name\":\"GetDealInfo\",\"outputs\":[{\"name\":\"benchmarks\",\"type\":\"uint64[]\"},{\"name\":\"supplierID\",\"type\":\"address\"},{\"name\":\"consumerID\",\"type\":\"address\"},{\"name\":\"masterID\",\"type\":\"address\"},{\"name\":\"askID\",\"type\":\"uint256\"},{\"name\":\"bidID\",\"type\":\"uint256\"},{\"name\":\"startTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"dealID\",\"type\":\"uint256\"}],\"name\":\"GetDealParams\",\"outputs\":[{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"endTime\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"blockedBalance\",\"type\":\"uint256\"},{\"name\":\"totalPayout\",\"type\":\"uint256\"},{\"name\":\"lastBillTS\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_worker\",\"type\":\"address\"}],\"name\":\"GetMaster\",\"outputs\":[{\"name\":\"master\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"changeRequestID\",\"type\":\"uint256\"}],\"name\":\"GetChangeRequestInfo\",\"outputs\":[{\"name\":\"dealID\",\"type\":\"uint256\"},{\"name\":\"requestType\",\"type\":\"uint8\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetDealsAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetOrdersAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetChangeRequestsAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetBenchmarksQuantity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetNetflagsQuantity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPR\",\"type\":\"address\"}],\"name\":\"SetProfileRegistryAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBL\",\"type\":\"address\"}],\"name\":\"SetBlacklistAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOracle\",\"type\":\"address\"}],\"name\":\"SetOracleAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newQuantity\",\"type\":\"uint256\"}],\"name\":\"SetBenchmarksQuantity\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newQuantity\",\"type\":\"uint256\"}],\"name\":\"SetNetflagsQuantity\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"KillMarket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// MarketBin is the compiled bytecode used for deploying new contracts.
const MarketBin = `0x60806040526000805460a060020a60ff02191681556005819055600681905560075534801561002d57600080fd5b5060405160c0806153ce83398101604090815281516020830151918301516060840151608085015160a09095015160008054600160a060020a0319908116331790915560018054600160a060020a0396871690831617905560028054968616968216969096179095556003805493851693861693909317909255600480549390911692909316919091179091556008919091556009556152fc806100d26000396000f3006080604052600436106101a85763ffffffff60e060020a60003504166303988f8481146101ad5780630adef86c146102735780631a3d5f82146102a8578063289e77b3146102c9578063348843cf146103065780633a9072271461032d5780633c1cbb34146103705780633f4ba83a1461038e5780634fabdd4b146103a55780635ad5f6ae1461040b5780635c975abb146104d7578063616451c5146104ec57806363fb292914610552578063715018a6146105675780638456cb591461057c5780638bce1fdf146105915780638da5cb5b146105ac57806391e75fc0146105c1578063935c9ad2146105d95780639a1ea609146105f1578063a70a7af014610609578063a85c38ef1461062a578063b1defc89146106de578063b4bf396e146106f9578063c4b22e7d1461070e578063c86c16f214610723578063d0cca9221461073b578063d362343214610759578063d85e677614610780578063de4e86c5146107a1578063e217866c146107b6578063e45ea8d3146108dd578063e67d7dd8146108f2578063ef78b8d3146109bb578063f1bf6fd5146109d3578063f2fde38b146109f4575b600080fd5b3480156101b957600080fd5b506101c5600435610a15565b604051808e600160a060020a0316600160a060020a031681526020018d600160a060020a0316600160a060020a031681526020018c600160a060020a0316600160a060020a031681526020018b81526020018a815260200189815260200188815260200187815260200186815260200185600281111561024157fe5b60ff1681526020018481526020018381526020018281526020019d505050505050505050505050505060405180910390f35b34801561027f57600080fd5b50610294600160a060020a0360043516610a93565b604080519115158252519081900360200190f35b3480156102b457600080fd5b50610294600160a060020a0360043516610b44565b3480156102d557600080fd5b506102ea600160a060020a0360043516610c1e565b60408051600160a060020a039092168252519081900360200190f35b34801561031257600080fd5b5061031b610c8c565b60408051918252519081900360200190f35b34801561033957600080fd5b50610345600435610c93565b6040518083600281111561035557fe5b60ff1681526020018281526020019250505060405180910390f35b34801561037c57600080fd5b5061031b600435602435604435610ebe565b34801561039a57600080fd5b506103a3611646565b005b3480156103b157600080fd5b506103bd6004356116bc565b604051808881526020018781526020018681526020018560028111156103df57fe5b60ff16815260200184815260200183815260200182815260200197505050505050505060405180910390f35b34801561041757600080fd5b50610423600435611700565b604051808060200188600160a060020a0316600160a060020a0316815260200187600160a060020a0316600160a060020a0316815260200186600160a060020a0316600160a060020a03168152602001858152602001848152602001838152602001828103825289818151815260200191508051906020019060200280838360005b838110156104bd5781810151838201526020016104a5565b505050509050019850505050505050505060405180910390f35b3480156104e357600080fd5b506102946117ef565b3480156104f857600080fd5b506105046004356117ff565b6040518086815260200185600281111561051a57fe5b60ff16815260200184815260200183815260200182600481111561053a57fe5b60ff1681526020019550505050505060405180910390f35b34801561055e57600080fd5b5061031b611836565b34801561057357600080fd5b506103a361183c565b34801561058857600080fd5b506103a361189b565b34801561059d57600080fd5b506103a3600435602435611916565b3480156105b857600080fd5b506102ea611e6c565b3480156105cd57600080fd5b50610294600435611e7b565b3480156105e557600080fd5b50610294600435611ed5565b3480156105fd57600080fd5b50610294600435612025565b34801561061557600080fd5b50610294600160a060020a0360043516612298565b34801561063657600080fd5b5061064260043561236d565b604051808c600281111561065257fe5b60ff1681526020018b600281111561066657fe5b60ff168152600160a060020a03808c1660208301528a166040820152606081018990526080810188905260a00186600481111561069f57fe5b60ff168152600160a060020a0390951660208601525060408085019390935260608401919091526080830152519081900360a001975095505050505050f35b3480156106ea57600080fd5b506103a36004356024356123d6565b34801561070557600080fd5b5061031b613380565b34801561071a57600080fd5b506103a3613386565b34801561072f57600080fd5b506102946004356134c4565b34801561074757600080fd5b5061029460043560ff602435166134d9565b34801561076557600080fd5b50610294600160a060020a03600435811690602435166135fd565b34801561078c57600080fd5b50610294600160a060020a03600435166136bd565b3480156107ad57600080fd5b5061031b6136fa565b3480156107c257600080fd5b506107ce600435613700565b604051808c60028111156107de57fe5b60ff168152600160a060020a03808d1660208301528b166040820152606081018a90526080810189905260a081019060c00187600481111561081c57fe5b60ff168152600160a060020a038716602080830191909152604082018790526080820185905260a0848303810184528a51908301528951606083019260c001918b8101910280838360005b8381101561087f578181015183820152602001610867565b50505050905001838103825285818151815260200191508051906020019060200280838360005b838110156108be5781810151838201526020016108a6565b505050509050019d505050505050505050505050505060405180910390f35b3480156108e957600080fd5b5061031b61398d565b3480156108fe57600080fd5b50604080516020600460843581810135838102808601850190965280855261031b95833560ff169560248035600160a060020a03169660443596606435963696919560a4959490910192829190850190849080828437505060408051602060608901358a01803582810280850184018652818552999c8b3560ff169c848d0135600160a060020a03169c968701359b919a509850608090950196509294508101928291850190849080828437509497506139939650505050505050565b3480156109c757600080fd5b50610294600435613d86565b3480156109df57600080fd5b50610294600160a060020a0360043516613de0565b348015610a0057600080fd5b506103a3600160a060020a0360043516613e1d565b600b602081905260009182526040909120600181015460028201546003830154600484015460058501546006860154600787015460088801546009890154600a8a01549a8a0154600c8b0154600d909b0154600160a060020a039a8b169c998b169b9a9098169996989597949693959294919360ff9093169290918d565b60008054600160a060020a03163314610aab57600080fd5b81600160a060020a031663eb91d37e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610ae957600080fd5b505af1158015610afd573d6000803e3d6000fd5b505050506040513d6020811015610b1357600080fd5b50511515610b2057600080fd5b5060038054600160a060020a031916600160a060020a03831617905560015b919050565b6000805460a060020a900460ff1615610b5c57600080fd5b336000908152601160209081526040808320600160a060020a038616845290915290205460ff161515600114610b9157600080fd5b600160a060020a0382166000818152600f602090815260408083208054600160a060020a0319163390811790915580845260108352818420805460ff19908116600117909155601184528285208686529093528184208054909316909255519092917f4940ef08d5aed63b7d3d3db293d69d6ed1d624995b90e9e944839c8ea0ae450d91a3506001919050565b600160a060020a038082166000908152600f60205260408120549091161580610c615750600160a060020a038083166000818152600f6020526040902054909116145b15610c6d575080610b3f565b50600160a060020a039081166000908152600f60205260409020541690565b6008545b90565b600080610c9e614fe5565b6000848152600a60205260409081902081516101a081019092528054829060ff166002811115610cca57fe5b6002811115610cd557fe5b81528154602090910190610100900460ff166002811115610cf257fe5b6002811115610cfd57fe5b81528154600160a060020a036201000090910481166020808401919091526001840154909116604080840191909152600284015460608401526003840154608084015260048401805482518185028101850190935280835260a0909401939192909190830182828015610daf57602002820191906000526020600020906000905b825461010083900a900460ff161515815260206001928301818104948501949093039092029101808411610d7e5790505b5050509183525050600582015460209091019060ff166004811115610dd057fe5b6004811115610ddb57fe5b815260058201546101009004600160a060020a031660208083019190915260068301546040808401919091526007840180548251818502810185019093528083526060909401939192909190830182828015610e8a57602002820191906000526020600020906000905b82829054906101000a900467ffffffffffffffff1667ffffffffffffffff1681526020019060080190602082600701049283019260010382029150808411610e455790505b5050505050815260200160088201548152602001600982015481525050905080602001518161018001519250925050915091565b600080610ec961504f565b6000868152600b6020526040902060020154600160a060020a0316331480610f0a57506000868152600b6020526040902060030154600160a060020a031633145b80610f2e57506000868152600b6020526040902060010154600160a060020a031633145b1515610f3957600080fd5b60016000878152600b60205260409020600a015460ff166002811115610f5b57fe5b14610f6557600080fd5b610f6e86613e40565b15610f7e578315610f7e57600080fd5b600754610f9290600163ffffffff613e5616565b6007556000868152600b6020526040902060020154600160a060020a0316331415610fc05760019150610fc5565b600291505b60a060405190810160405280878152602001836002811115610fe357fe5b81526020810187905260408101869052606001600190526007546000908152600d60209081526040909120825181559082015160018083018054909160ff199091169083600281111561103257fe5b0217905550604082015181600201556060820151816003015560808201518160040160006101000a81548160ff0219169083600481111561106f57fe5b0217905550506007546040519091507f7ff56b2eb3ce318aad93d0ba39a3e4a406992a136f9554f17f6bcc43509275d190600090a260018260028111156110b257fe5b1415611394576000868152600e60205260409020600101546040516000805160206152b183398151915290600090a26000868152600e60209081526040808320600180820180548652600d8552838620600401805460ff191660029081179091556007549091559154855293829020825160a08101909352805483529384015491939284019160ff169081111561114557fe5b600281111561115057fe5b8152600282015460208201526003820154604082015260048083015460609092019160ff169081111561117f57fe5b600481111561118a57fe5b9052506000878152600b6020526040902060060154909150841480156111c057506000868152600b602052604090206007015485115b15611231576007546000908152600d602052604090206004908101805460ff191690911790556111ef866134c4565b506000868152600b60209081526040808320600701889055600e9091528120600101556007546040516000805160206152b183398151915290600090a2611333565b60018160800151600481111561124357fe5b148015611254575083816060015110155b8015611264575084816040015111155b15611329576007546000908152600d602081815260408084206004908101805460ff1990811683179091558b8652600e808552838720805488529585528387208301805490921690921790558a85529091529054905190916000805160206152b183398151915291a26000868152600e60205260408120818155600101556112eb866134c4565b506040808201516000888152600b602052828120600780820193909355600601879055905491516000805160206152b18339815191529190a2611333565b600754925061163d565b6000868152600e6020818152604080842060010180548552600d8352818520600401805460ff191660021790558a8552929091529054905190916000805160206152b183398151915291a26007546000878152600e60205260409020600101555b60028260028111156113a257fe5b14156115fd576000868152600e6020526040812001546040516000805160206152b183398151915290600090a26000868152600e6020908152604080832080548452600d8352818420600401805460ff191660029081179091556007548255600191820154855293829020825160a0810190935280548352908101549193909284019160ff169081111561143257fe5b600281111561143d57fe5b8152600282015460208201526003820154604082015260048083015460609092019160ff169081111561146c57fe5b600481111561147757fe5b9052506000878152600b6020526040902060060154909150841480156114ad57506000868152600b602052604090206007015485105b1561151d576007546000908152600d602052604090206004908101805460ff191690911790556114dc866134c4565b506000868152600b60209081526040808320600701889055600e90915281208101556007546040516000805160206152b183398151915290600090a26115fd565b60018160800151600481111561152f57fe5b148015611540575083816060015111155b8015611550575084816040015110155b15611329576007546000908152600d602052604090206004908101805460ff191660018302179055506000868152600e60205260409020600101546040516000805160206152b183398151915290600090a26000868152600e60205260408120818155600101556115c0866134c4565b506000868152600b60205260408082206007808201899055606085015160069092019190915554905190916000805160206152b183398151915291a25b6000868152600b6020526040902060068101546008909101546116259163ffffffff613e5616565b6000878152600b602052604090206009015560075492505b50509392505050565b600054600160a060020a0316331461165d57600080fd5b60005460a060020a900460ff16151561167557600080fd5b6000805474ff0000000000000000000000000000000000000000191681556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b339190a1565b6000908152600b60208190526040909120600681015460078201546009830154600a84015494840154600c850154600d9095015493969295919460ff909216939092565b6000818152600b6020908152604080832060018101546002820154600383015460048401546005850154600886015486548851818b0281018b0190995280895260609a998a998a998a998a998a999298600160a060020a0392831698918316979390921695919490939189918301828280156117cf57602002820191906000526020600020906000905b82829054906101000a900467ffffffffffffffff1667ffffffffffffffff168152602001906008019060208260070104928301926001038202915080841161178a5790505b505050505096509650965096509650965096509650919395979092949650565b60005460a060020a900460ff1681565b6000908152600d602052604090208054600182015460028301546003840154600490940154929460ff928316949193919290911690565b60055490565b600054600160a060020a0316331461185357600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a260008054600160a060020a0319169055565b600054600160a060020a031633146118b257600080fd5b60005460a060020a900460ff16156118c957600080fd5b6000805474ff0000000000000000000000000000000000000000191660a060020a1781556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff6259190a1565b61191e614fe5565b60005460a060020a900460ff161561193557600080fd5b6000838152600a60205260409081902081516101a081019092528054829060ff16600281111561196157fe5b600281111561196c57fe5b81528154602090910190610100900460ff16600281111561198957fe5b600281111561199457fe5b81528154600160a060020a036201000090910481166020808401919091526001840154909116604080840191909152600284015460608401526003840154608084015260048401805482518185028101850190935280835260a0909401939192909190830182828015611a4657602002820191906000526020600020906000905b825461010083900a900460ff161515815260206001928301818104948501949093039092029101808411611a155790505b5050509183525050600582015460209091019060ff166004811115611a6757fe5b6004811115611a7257fe5b815260058201546101009004600160a060020a031660208083019190915260068301546040808401919091526007840180548251818502810185019093528083526060909401939192909190830182828015611b2157602002820191906000526020600020906000905b82829054906101000a900467ffffffffffffffff1667ffffffffffffffff1681526020019060080190602082600701049283019260010382029150808411611adc5790505b5050509183525050600882015460208201526009909101546040909101529050600281516002811115611b5057fe5b14611b5a57600080fd5b600281602001516002811115611b6c57fe5b14611b7657600080fd5b6080810151821115611b8757600080fd5b8060e001516004811115611b9757fe5b60048054604080517f23eee3e6000000000000000000000000000000000000000000000000000000008152339381019390935251600160a060020a03909116916323eee3e69160248083019260209291908290030181600087803b158015611bfe57600080fd5b505af1158015611c12573d6000803e3d6000fd5b505050506040513d6020811015611c2857600080fd5b50516004811115611c3557fe5b1015611c4057600080fd5b6002546040820151600160a060020a039091169063968f600c903390611c6590610c1e565b6040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182600160a060020a0316600160a060020a0316815260200192505050602060405180830381600087803b158015611cc957600080fd5b505af1158015611cdd573d6000803e3d6000fd5b505050506040513d6020811015611cf357600080fd5b5051158015611d865750600254604080830151815160e260020a6325a3d803028152600160a060020a039182166004820152336024820152915192169163968f600c916044808201926020929091908290030181600087803b158015611d5857600080fd5b505af1158015611d6c573d6000803e3d6000fd5b505050506040513d6020811015611d8257600080fd5b5051155b1515611d9157600080fd5b6002546101008201516040805160e260020a6325a3d803028152600160a060020a0392831660048201523360248201529051919092169163968f600c9160448083019260209291908290030181600087803b158015611def57600080fd5b505af1158015611e03573d6000803e3d6000fd5b505050506040513d6020811015611e1957600080fd5b505115611e2557600080fd5b611e556001611e378360400151610c1e565b848460a001518560c001516001600080600102896101400151613993565b50611e6783611e62611836565b6123d6565b505050565b600054600160a060020a031681565b60008054600160a060020a03163314611e9357600080fd5b6009548211611ea157600080fd5b60405182907f1bd10793763c43c1a677f0975376032cebc657fd07cfd7c58ded8e8cce79f1c490600090a250600955600190565b600554600090821115611ee757600080fd5b60026000838152600a6020526040902054610100900460ff166002811115611f0b57fe5b14611f1557600080fd5b6000828152600a6020526040902054620100009004600160a060020a03163314611f3e57600080fd5b6001546000838152600a6020908152604080832060080154815160e060020a63a9059cbb02815233600482015260248101919091529051600160a060020a039094169363a9059cbb93604480840194938390030190829087803b158015611fa457600080fd5b505af1158015611fb8573d6000803e3d6000fd5b505050506040513d6020811015611fce57600080fd5b50511515611fdb57600080fd5b6000828152600a6020526040808220805461ff0019166101001790555183917fb8b459bc0688c37baf5f735d17f1711684bc14ab7db116f88bc18bf409b9309a91a2506001919050565b600061202f61504f565b6000838152600d6020908152604091829020825160a08101909352805483526001810154909183019060ff16600281111561206657fe5b600281111561207157fe5b8152600282015460208201526003820154604082015260048083015460609092019160ff16908111156120a057fe5b60048111156120ab57fe5b90525080516000908152600b6020526040902060010154909150600160a060020a03163314806120f6575080516000908152600b6020526040902060030154600160a060020a031633145b8061211c575080516000908152600b6020526040902060020154600160a060020a031633145b151561212757600080fd5b60048160800151600481111561213957fe5b141561214457600080fd5b60028160200151600281111561215657fe5b14156121e75780516000908152600b6020526040902060020154600160a060020a03163314156121a1576000838152600d60205260409020600401805460ff191660031790556121be565b6000838152600d60205260409020600401805460ff191660021790555b80516000908152600e60205260408082208290555184916000805160206152b183398151915291a25b6001816020015160028111156121f957fe5b141561228f5780516000908152600b6020526040902060020154600160a060020a0316331415612244576000838152600d60205260409020600401805460ff19166002179055612261565b6000838152600d60205260409020600401805460ff191660031790555b80516000908152600e602052604081206001015560405183906000805160206152b183398151915290600090a25b50600192915050565b6000805460a060020a900460ff16156122b057600080fd5b336122ba81610c1e565b600160a060020a0316146122cd57600080fd5b3360009081526010602052604090205460ff16156122ea57600080fd5b81600160a060020a03166122fd83610c1e565b600160a060020a03161461231057600080fd5b600160a060020a0382166000818152601160209081526040808320338085529252808320805460ff191660011790555190917fe398d33bf7e881cdfc9f34c743822904d4e45a0be0db740dd88cb132e4ce2ed991a3506001919050565b600a602052600090815260409020805460018201546002830154600384015460058501546006860154600887015460099097015460ff80881698610100808a04831699600160a060020a036201000090910481169981169897969384169591909304909216928b565b6123de614fe5565b6123e6614fe5565b60008054819081908190819060a060020a900460ff161561240657600080fd5b6000898152600a60205260409081902081516101a081019092528054829060ff16600281111561243257fe5b600281111561243d57fe5b81528154602090910190610100900460ff16600281111561245a57fe5b600281111561246557fe5b81528154600160a060020a036201000090910481166020808401919091526001840154909116604080840191909152600284015460608401526003840154608084015260048401805482518185028101850190935280835260a090940193919290919083018282801561251757602002820191906000526020600020906000905b825461010083900a900460ff1615158152602060019283018181049485019490930390920291018084116124e65790505b5050509183525050600582015460209091019060ff16600481111561253857fe5b600481111561254357fe5b815260058201546101009004600160a060020a0316602080830191909152600683015460408084019190915260078401805482518185028101850190935280835260609094019391929091908301828280156125f257602002820191906000526020600020906000905b82829054906101000a900467ffffffffffffffff1667ffffffffffffffff16815260200190600801906020826007010492830192600103820291508084116125ad5790505b5050509183525050600882015460208083019190915260099092015460409182015260008b8152600a9092529081902081516101a0810190925280549299509091829060ff16600281111561264357fe5b600281111561264e57fe5b81528154602090910190610100900460ff16600281111561266b57fe5b600281111561267657fe5b81528154600160a060020a036201000090910481166020808401919091526001840154909116604080840191909152600284015460608401526003840154608084015260048401805482518185028101850190935280835260a090940193919290919083018282801561272857602002820191906000526020600020906000905b825461010083900a900460ff1615158152602060019283018181049485019490930390920291018084116126f75790505b5050509183525050600582015460209091019060ff16600481111561274957fe5b600481111561275457fe5b815260058201546101009004600160a060020a03166020808301919091526006830154604080840191909152600784018054825181850281018501909352808352606090940193919290919083018282801561280357602002820191906000526020600020906000905b82829054906101000a900467ffffffffffffffff1667ffffffffffffffff16815260200190600801906020826007010492830192600103820291508084116127be5790505b505050918352505060088201546020820152600990910154604090910152955060028760200151600281111561283557fe5b148015612851575060028660200151600281111561284f57fe5b145b151561285c57600080fd5b6060870151600160a060020a03161580612897575061287e8660400151610c1e565b600160a060020a03168760600151600160a060020a0316145b80156128d957506060860151600160a060020a031615806128d957506128c08760400151610c1e565b600160a060020a03168660600151600160a060020a0316145b15156128e457600080fd5b6002875160028111156128f357fe5b146128fd57600080fd5b60018651600281111561290c57fe5b1461291657600080fd5b6002546101008701516040890151600160a060020a039092169163968f600c919061294090610c1e565b6040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182600160a060020a0316600160a060020a0316815260200192505050602060405180830381600087803b1580156129a457600080fd5b505af11580156129b8573d6000803e3d6000fd5b505050506040513d60208110156129ce57600080fd5b5051158015612a6a57506002546101008701516040808a0151815160e260020a6325a3d803028152600160a060020a03938416600482015290831660248201529051919092169163968f600c9160448083019260209291908290030181600087803b158015612a3c57600080fd5b505af1158015612a50573d6000803e3d6000fd5b505050506040513d6020811015612a6657600080fd5b5051155b8015612b2c575060025460408088015190890151600160a060020a039092169163968f600c9190612a9a90610c1e565b6040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182600160a060020a0316600160a060020a0316815260200192505050602060405180830381600087803b158015612afe57600080fd5b505af1158015612b12573d6000803e3d6000fd5b505050506040513d6020811015612b2857600080fd5b5051155b8015612bc2575060025460408088015189820151825160e260020a6325a3d803028152600160a060020a0392831660048201529082166024820152915192169163968f600c916044808201926020929091908290030181600087803b158015612b9457600080fd5b505af1158015612ba8573d6000803e3d6000fd5b505050506040513d6020811015612bbe57600080fd5b5051155b8015612c5b5750600254610100880151604080890151815160e260020a6325a3d803028152600160a060020a03938416600482015290831660248201529051919092169163968f600c9160448083019260209291908290030181600087803b158015612c2d57600080fd5b505af1158015612c41573d6000803e3d6000fd5b505050506040513d6020811015612c5757600080fd5b5051155b8015612d0357506002546040880151600160a060020a039091169063968f600c90612c8590610c1e565b6040808a0151815160e060020a63ffffffff8616028152600160a060020a039384166004820152921660248301525160448083019260209291908290030181600087803b158015612cd557600080fd5b505af1158015612ce9573d6000803e3d6000fd5b505050506040513d6020811015612cff57600080fd5b5051155b8015612d99575060025460408089015188820151825160e260020a6325a3d803028152600160a060020a0392831660048201529082166024820152915192169163968f600c916044808201926020929091908290030181600087803b158015612d6b57600080fd5b505af1158015612d7f573d6000803e3d6000fd5b505050506040513d6020811015612d9557600080fd5b5051155b1515612da457600080fd5b60a080870151908801511115612db957600080fd5b608080870151908801511015612dce57600080fd5b8660e001516004811115612dde57fe5b600480546040808a015181517f23eee3e6000000000000000000000000000000000000000000000000000000008152600160a060020a039182169481019490945290519116916323eee3e69160248083019260209291908290030181600087803b158015612e4b57600080fd5b505af1158015612e5f573d6000803e3d6000fd5b505050506040513d6020811015612e7557600080fd5b50516004811115612e8257fe5b1015612e8d57600080fd5b8560e001516004811115612e9d57fe5b600480546040808b015181517f23eee3e6000000000000000000000000000000000000000000000000000000008152600160a060020a039182169481019490945290519116916323eee3e69160248083019260209291908290030181600087803b158015612f0a57600080fd5b505af1158015612f1e573d6000803e3d6000fd5b505050506040513d6020811015612f3457600080fd5b50516004811115612f4157fe5b1015612f4c57600080fd5b6009548760c00151511015612f6e57612f688760c00151613e63565b60c08801525b6009548660c00151511015612f9057612f8a8760c00151613e63565b60c08701525b600094505b8660c0015151851015612ff65760c0860151805186908110612fb357fe5b906020019060200201511580612fe0575060c0870151805186908110612fd557fe5b906020019060200201515b1515612feb57600080fd5b600190940193612f95565b60085487610140015151101561301b57613014876101400151613eed565b6101408801525b60085486610140015151101561304057613039866101400151613eed565b6101408701525b600094505b866101400151518510156130b65761014086015180518690811061306557fe5b9060200190602002015167ffffffffffffffff168761014001518681518110151561308c57fe5b6020908102909101015167ffffffffffffffff1610156130ab57600080fd5b600190940193613045565b6006546130ca90600163ffffffff613e5616565b60065560408701516130db90610c1e565b60008a8152600a6020526040808220805461010061ff0019918216811783558d855283852080549092161781556006546009928301819055910155519195508a917fb8b459bc0688c37baf5f735d17f1711684bc14ab7db116f88bc18bf409b9309a9190a260405188907fb8b459bc0688c37baf5f735d17f1711684bc14ab7db116f88bc18bf409b9309a90600090a26080870151429350600092501561319557608086015161319290849063ffffffff613e5616565b91505b85610160015190506101c06040519081016040528088610140015181526020018860400151600160a060020a031681526020018760400151600160a060020a0316815260200185600160a060020a031681526020018a8152602001898152602001876080015181526020018860a0015181526020018481526020018381526020016001600281111561322357fe5b81526020018281526020016000815260200142815250600b60006006548152602001908152602001600020600082015181600001908051906020019061326a92919061507b565b50602082015160018281018054600160a060020a0319908116600160a060020a0394851617909155604085015160028086018054841692861692909217909155606086015160038601805490931694169390931790556080840151600484015560a0840151600584015560c0840151600684015560e0840151600784015561010084015160088401556101208401516009840155610140840151600a840180549193909260ff199092169190849081111561332157fe5b0217905550610160820151600b820155610180820151600c8201556101a090910151600d909101556006546040517fb9ffc65567b7238dd641372277b8c93ed03df73945932dd84fd3cbb33f3eddbf90600090a2505050505050505050565b60075490565b600054600160a060020a0316331461339d57600080fd5b60015460008054604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a039485169463a9059cbb9493169285926370a082319260248083019360209383900390910190829087803b15801561341157600080fd5b505af1158015613425573d6000803e3d6000fd5b505050506040513d602081101561343b57600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a03909316600484015260248301919091525160448083019260209291908290030181600087803b15801561348a57600080fd5b505af115801561349e573d6000803e3d6000fd5b505050506040513d60208110156134b457600080fd5b5050600054600160a060020a0316ff5b60006134cf82613f75565b5061228f82614668565b600060016000848152600b60205260409020600a015460ff1660028111156134fd57fe5b1461350757600080fd5b6000838152600b6020526040902060010154600160a060020a031633148061354857506000838152600b6020526040902060020154600160a060020a031633145b8061356c57506000838152600b6020526040902060030154600160a060020a031633145b151561357757600080fd5b6000838152600b60205260409020600681015460089091015461359f9163ffffffff613e5616565b42116135cb576000838152600b6020526040902060020154600160a060020a031633146135cb57600080fd5b6135d58383614aaa565b6135de83613f75565b506135e883614c7f565b6135f183614d96565b50600190505b92915050565b6000805460a060020a900460ff161561361557600080fd5b81600160a060020a031661362884610c1e565b600160a060020a0316148015613658575033600160a060020a0384161480613658575033600160a060020a038316145b151561366357600080fd5b600160a060020a038084166000818152600f60205260408082208054600160a060020a031916905551928516927f7822736ed69a5fe0ad6dc2c6669e8053495d711118e5435b047f9b83deda4c379190a350600192915050565b60008054600160a060020a031633146136d557600080fd5b5060028054600160a060020a038316600160a060020a03199091161790556001919050565b60095490565b6000806000806000606060008060006060600061371b614fe5565b60008d8152600a60205260409081902081516101a081019092528054829060ff16600281111561374757fe5b600281111561375257fe5b81528154602090910190610100900460ff16600281111561376f57fe5b600281111561377a57fe5b81528154600160a060020a036201000090910481166020808401919091526001840154909116604080840191909152600284015460608401526003840154608084015260048401805482518185028101850190935280835260a090940193919290919083018282801561382c57602002820191906000526020600020906000905b825461010083900a900460ff1615158152602060019283018181049485019490930390920291018084116137fb5790505b5050509183525050600582015460209091019060ff16600481111561384d57fe5b600481111561385857fe5b815260058201546101009004600160a060020a03166020808301919091526006830154604080840191909152600784018054825181850281018501909352808352606090940193919290919083018282801561390757602002820191906000526020600020906000905b82829054906101000a900467ffffffffffffffff1667ffffffffffffffff16815260200190600801906020826007010492830192600103820291508084116138c25790505b5050505050815260200160088201548152602001600982015481525050905080600001518160400151826060015183608001518460a001518560c001518660e001518761010001518861012001518961014001518a61016001518595508191509b509b509b509b509b509b509b509b509b509b509b505091939597999b90929496989a50565b60065490565b6000805481908190819060a060020a900460ff16156139b157600080fd5b60018860048111156139bf57fe5b10156139ca57600080fd5b600954895111156139da57600080fd5b600854855111156139ea57600080fd5b600092505b8451831015613a38576780000000000000008584815181101515613a0f57fe5b6020908102909101015167ffffffffffffffff1610613a2d57600080fd5b6001909201916139ef565b6000915060018d6002811115613a4a57fe5b1415613b39578a1515613a6a57613a638a610e10614e61565b9150613a8f565b620151808b1015613a7f57613a638a8c614e61565b613a8c8a62015180614e61565b91505b600154604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018590529051600160a060020a03909216916323b872dd916064808201926020929091908290030181600087803b158015613b0257600080fd5b505af1158015613b16573d6000803e3d6000fd5b505050506040513d6020811015613b2c57600080fd5b50511515613b3957600080fd5b600554613b4d90600163ffffffff613e5616565b6005819055604080516101a08101909152909150808e6002811115613b6e57fe5b81526020016002815260200133600160a060020a031681526020018d600160a060020a031681526020018c81526020018b81526020018a8152602001896004811115613bb657fe5b8152600160a060020a03891660208083019190915260408083018a90526060830189905260808301869052600060a0909301839052848352600a909152902081518154829060ff19166001836002811115613c0d57fe5b021790555060208201518154829061ff001916610100836002811115613c2f57fe5b02179055506040820151815475ffffffffffffffffffffffffffffffffffffffff0000191662010000600160a060020a03928316021782556060830151600183018054600160a060020a031916919092161790556080820151600282015560a0820151600382015560c08201518051613cb2916004840191602090910190615136565b5060e082015160058201805460ff19166001836004811115613cd057fe5b02179055506101008281015160058301805474ffffffffffffffffffffffffffffffffffffffff001916600160a060020a0390921690920217905561012082015160068201556101408201518051613d3291600784019160209091019061507b565b5061016082015160088201556101809091015160099091015560405181907fffa896d8919f0556f53ace1395617969a3b53ab5271a085e28ac0c4a3724e63d90600090a29c9b505050505050505050505050565b60008054600160a060020a03163314613d9e57600080fd5b6008548211613dac57600080fd5b60405182907f1acf16d0a0451282e1d2cac3f5473ca7c931bcda610ff6e061041af50e2abc1390600090a250600855600190565b60008054600160a060020a03163314613df857600080fd5b5060048054600160a060020a038316600160a060020a03199091161790556001919050565b600054600160a060020a03163314613e3457600080fd5b613e3d81614f25565b50565b6000908152600b60205260409020600601541590565b818101828110156135f757fe5b6060806000600954604051908082528060200260200182016040528015613e94578160200160208202803883390190505b509150600090505b8351811015613ee2578381815181101515613eb357fe5b906020019060200201518282815181101515613ecb57fe5b911515602092830290910190910152600101613e9c565b8192505b5050919050565b6060806000600854604051908082528060200260200182016040528015613f1e578160200160208202803883390190505b509150600090505b8351811015613ee2578381815181101515613f3d57fe5b906020019060200201518282815181101515613f5557fe5b67ffffffffffffffff909216602092830290910190910152600101613f26565b6000613f7f6151d7565b600060016000858152600b60205260409020600a015460ff166002811115613fa357fe5b14613fad57600080fd5b6000848152600b6020526040902060010154600160a060020a0316331480613fee57506000848152600b6020526040902060020154600160a060020a031633145b8061401257506000848152600b6020526040902060030154600160a060020a031633145b151561401d57600080fd5b6000848152600b6020908152604091829020825181546101e0938102820184019094526101c0810184815290939192849284918401828280156140b357602002820191906000526020600020906000905b82829054906101000a900467ffffffffffffffff1667ffffffffffffffff168152602001906008019060208260070104928301926001038202915080841161406e5790505b50505091835250506001820154600160a060020a039081166020830152600280840154821660408401526003840154909116606083015260048301546080830152600583015460a0830152600683015460c0830152600783015460e083015260088301546101008301526009830154610120830152600a8301546101409092019160ff169081111561414157fe5b600281111561414c57fe5b8152602001600b8201548152602001600c8201548152602001600d82015481525050915061417984613e40565b1580156141905750816101200151826101a0015110155b1561419e5760019250613ee6565b6141a784613e40565b1580156141b8575081610120015142115b80156141cd5750816101200151826101a00151105b15614203576141fc8260e001516141f7846101a00151856101200151614f9590919063ffffffff16565b614e61565b9050614226565b6142238260e001516141f7846101a0015142614f9590919063ffffffff16565b90505b81610160015181111561452f5761016082015161424a90829063ffffffff614f9516565b60015460408085015181517f70a08231000000000000000000000000000000000000000000000000000000008152600160a060020a03918216600482015291519216916370a08231916024808201926020929091908290030181600087803b1580156142b557600080fd5b505af11580156142c9573d6000803e3d6000fd5b505050506040513d60208110156142df57600080fd5b5051106143f7576001546040830151610160840151600160a060020a03909216916323b872dd9190309061431a90869063ffffffff614f9516565b6040805160e060020a63ffffffff8716028152600160a060020a0394851660048201529290931660248301526044820152905160648083019260209291908290030181600087803b15801561436e57600080fd5b505af1158015614382573d6000803e3d6000fd5b505050506040513d602081101561439857600080fd5b505115156143a557600080fd5b6143df6143c083610160015183614f9590919063ffffffff16565b6000868152600b6020819052604090912001549063ffffffff613e5616565b6000858152600b60208190526040909120015561452f565b6000848152600b60208190526040808320909101549051909186917f51f87cd83a2ce6c4ff7957861f7aba400dc3857d2325e0c94cc69f468874515c9190a361443f84614c7f565b60015460608301516101608401516040805160e060020a63a9059cbb028152600160a060020a039384166004820152602481019290925251919092169163a9059cbb9160448083019260209291908290030181600087803b1580156144a357600080fd5b505af11580156144b7573d6000803e3d6000fd5b505050506040513d60208110156144cd57600080fd5b505115156144da57600080fd5b6000848152600b6020526040902042600d820155610160830151600c909101546145099163ffffffff613e5616565b6000858152600b602081905260408220600c810193909355919091015560019250613ee6565b60015460608301516040805160e060020a63a9059cbb028152600160a060020a039283166004820152602481018590529051919092169163a9059cbb9160448083019260209291908290030181600087803b15801561458d57600080fd5b505af11580156145a1573d6000803e3d6000fd5b505050506040513d60208110156145b757600080fd5b505115156145c457600080fd5b6000848152600b6020819052604090912001546145e7908263ffffffff614f9516565b6000858152600b6020819052604090912090810191909155600c0154614613908263ffffffff613e5616565b6000858152600b6020526040808220600c81019390935542600d909301929092559051829186917f51f87cd83a2ce6c4ff7957861f7aba400dc3857d2325e0c94cc69f468874515c9190a35060019392505050565b6000806146736151d7565b6000848152600b60209081526040808320815181546101e0948102820185019093526101c0810183815290939192849284919084018282801561470957602002820191906000526020600020906000905b82829054906101000a900467ffffffffffffffff1667ffffffffffffffff16815260200190600801906020826007010492830192600103820291508084116146c45790505b50505091835250506001820154600160a060020a039081166020830152600280840154821660408401526003840154909116606083015260048301546080830152600583015460a0830152600683015460c0830152600783015460e083015260088301546101008301526009830154610120830152600a8301546101409092019160ff169081111561479757fe5b60028111156147a257fe5b8152602001600b8201548152602001600c8201548152602001600d8201548152505091506147cf85613e40565b1561480057600282610140015160028111156147e757fe5b14156147f65760019350614aa2565b610e10925061485b565b8161012001514211156148165760019350614aa2565b6101208201516201518090614831904263ffffffff614f9516565b10156148545761012082015161484d904263ffffffff614f9516565b925061485b565b6201518092505b6000858152600b60208190526040909120015460e083015161487d9085614e61565b1115614a9d576148b7600b6000878152602001908152602001600020600b01546148ab8460e0015186614e61565b9063ffffffff614f9516565b60015460408085015181517f70a08231000000000000000000000000000000000000000000000000000000008152600160a060020a039182166004820152915193945084939216916370a08231916024808201926020929091908290030181600087803b15801561492757600080fd5b505af115801561493b573d6000803e3d6000fd5b505050506040513d602081101561495157600080fd5b505110614a425760015460408084015181517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a0391821660048201523060248201526044810185905291519216916323b872dd916064808201926020929091908290030181600087803b1580156149d057600080fd5b505af11580156149e4573d6000803e3d6000fd5b505050506040513d60208110156149fa57600080fd5b50511515614a0757600080fd5b6000858152600b602081905260409091200154614a2a908263ffffffff613e5616565b6000868152600b602081905260409091200155614a9d565b6000858152600b60208190526040808320909101549051909187917f51f87cd83a2ce6c4ff7957861f7aba400dc3857d2325e0c94cc69f468874515c9190a3614a8a85614c7f565b614a9385614d96565b5060019350614aa2565b600193505b505050919050565b6000828152600b6020526040902060020154600160a060020a0316331480614add57506000816002811115614adb57fe5b145b1515614ae857600080fd5b6001816002811115614af657fe5b1415614bb457600280546000848152600b602090815260408083209485015460019095015481517f473b736f000000000000000000000000000000000000000000000000000000008152600160a060020a03968716600482015290861660248201529051949093169363473b736f93604480820194918390030190829087803b158015614b8257600080fd5b505af1158015614b96573d6000803e3d6000fd5b505050506040513d6020811015614bac57600080fd5b50614c7b9050565b6002816002811115614bc257fe5b1415614c7b57600280546000848152600b602090815260408083209485015460039095015481517f473b736f000000000000000000000000000000000000000000000000000000008152600160a060020a03968716600482015290861660248201529051949093169363473b736f93604480820194918390030190829087803b158015614c4e57600080fd5b505af1158015614c62573d6000803e3d6000fd5b505050506040513d6020811015614c7857600080fd5b50505b5050565b60026000828152600b60205260409020600a015460ff166002811115614ca157fe5b1415614cac57613e3d565b60016000828152600b60205260409020600a015460ff166002811115614cce57fe5b14614cd857600080fd5b6000818152600b6020526040902060020154600160a060020a0316331480614d1957506000818152600b6020526040902060010154600160a060020a031633145b80614d3d57506000818152600b6020526040902060030154600160a060020a031633145b1515614d4857600080fd5b6000818152600b6020526040808220600a8101805460ff19166002179055426009909101555182917f0b27183934cfdbeb1fbbe288c2e163ed7aa8f458a954054970f78446bccb36e091a250565b6000818152600b602081905260408220015415614e59576001546000838152600b602081815260408084206002810154930154815160e060020a63a9059cbb028152600160a060020a03948516600482015260248101919091529051929094169363a9059cbb93604480830194928390030190829087803b158015614e1a57600080fd5b505af1158015614e2e573d6000803e3d6000fd5b505050506040513d6020811015614e4457600080fd5b50506000828152600b60208190526040822001555b506001919050565b600080600360009054906101000a9004600160a060020a0316600160a060020a031663eb91d37e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015614eb757600080fd5b505af1158015614ecb573d6000803e3d6000fd5b505050506040513d6020811015614ee157600080fd5b50519050614f1d670de0b6b3a7640000614f1185614f05858963ffffffff614fa716565b9063ffffffff614fa716565b9063ffffffff614fd016565b949350505050565b600160a060020a0381161515614f3a57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360008054600160a060020a031916600160a060020a0392909216919091179055565b600082821115614fa157fe5b50900390565b6000821515614fb8575060006135f7565b50818102818382811515614fc857fe5b04146135f757fe5b60008183811515614fdd57fe5b049392505050565b604080516101a081019091528060008152602001600081526000602082018190526040820181905260608083018290526080830182905260a083015260c0909101908152600060208201819052604082018190526060808301526080820181905260a09091015290565b6040805160a0810182526000808252602082018190529181018290526060810182905290608082015290565b828054828255906000526020600020906003016004900481019282156151265791602002820160005b838211156150f057835183826101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555092602001926008016020816007010492830192600103026150a4565b80156151245782816101000a81549067ffffffffffffffff02191690556008016020816007010492830192600103026150f0565b505b5061513292915061526d565b5090565b82805482825590600052602060002090601f016020900481019282156151cb5791602002820160005b8382111561519c57835183826101000a81548160ff021916908315150217905550926020019260010160208160000104928301926001030261515f565b80156151c95782816101000a81549060ff021916905560010160208160000104928301926001030261519c565b505b50615132929150615292565b6101c060405190810160405280606081526020016000600160a060020a031681526020016000600160a060020a031681526020016000600160a060020a031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000600281111561525257fe5b81526020016000815260200160008152602001600081525090565b610c9091905b8082111561513257805467ffffffffffffffff19168155600101615273565b610c9091905b8082111561513257805460ff1916815560010161529856004b92d35447745e95b7344414a41ae94984787d0ebcd2c12021169197bb59af39a165627a7a72305820408bfacbeecd1fc4ca7528f2c7ac1eb0ff6868c895f4511b583e9f0b0cb030580029`

// DeployMarket deploys a new Ethereum contract, binding an instance of Market to it.
func DeployMarket(auth *bind.TransactOpts, backend bind.ContractBackend, _token common.Address, _blacklist common.Address, _oracle common.Address, _profileRegistry common.Address, _benchmarksQuantity *big.Int, _netflagsQuantity *big.Int) (common.Address, *types.Transaction, *Market, error) {
	parsed, err := abi.JSON(strings.NewReader(MarketABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(MarketBin), backend, _token, _blacklist, _oracle, _profileRegistry, _benchmarksQuantity, _netflagsQuantity)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Market{MarketCaller: MarketCaller{contract: contract}, MarketTransactor: MarketTransactor{contract: contract}, MarketFilterer: MarketFilterer{contract: contract}}, nil
}

// Market is an auto generated Go binding around an Ethereum contract.
type Market struct {
	MarketCaller     // Read-only binding to the contract
	MarketTransactor // Write-only binding to the contract
	MarketFilterer   // Log filterer for contract events
}

// MarketCaller is an auto generated read-only Go binding around an Ethereum contract.
type MarketCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MarketTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MarketTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MarketFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MarketFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MarketSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MarketSession struct {
	Contract     *Market           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MarketCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MarketCallerSession struct {
	Contract *MarketCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// MarketTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MarketTransactorSession struct {
	Contract     *MarketTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MarketRaw is an auto generated low-level Go binding around an Ethereum contract.
type MarketRaw struct {
	Contract *Market // Generic contract binding to access the raw methods on
}

// MarketCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MarketCallerRaw struct {
	Contract *MarketCaller // Generic read-only contract binding to access the raw methods on
}

// MarketTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MarketTransactorRaw struct {
	Contract *MarketTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMarket creates a new instance of Market, bound to a specific deployed contract.
func NewMarket(address common.Address, backend bind.ContractBackend) (*Market, error) {
	contract, err := bindMarket(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Market{MarketCaller: MarketCaller{contract: contract}, MarketTransactor: MarketTransactor{contract: contract}, MarketFilterer: MarketFilterer{contract: contract}}, nil
}

// NewMarketCaller creates a new read-only instance of Market, bound to a specific deployed contract.
func NewMarketCaller(address common.Address, caller bind.ContractCaller) (*MarketCaller, error) {
	contract, err := bindMarket(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MarketCaller{contract: contract}, nil
}

// NewMarketTransactor creates a new write-only instance of Market, bound to a specific deployed contract.
func NewMarketTransactor(address common.Address, transactor bind.ContractTransactor) (*MarketTransactor, error) {
	contract, err := bindMarket(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MarketTransactor{contract: contract}, nil
}

// NewMarketFilterer creates a new log filterer instance of Market, bound to a specific deployed contract.
func NewMarketFilterer(address common.Address, filterer bind.ContractFilterer) (*MarketFilterer, error) {
	contract, err := bindMarket(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MarketFilterer{contract: contract}, nil
}

// bindMarket binds a generic wrapper to an already deployed contract.
func bindMarket(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MarketABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Market *MarketRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Market.Contract.MarketCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Market *MarketRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Market.Contract.MarketTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Market *MarketRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Market.Contract.MarketTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Market *MarketCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Market.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Market *MarketTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Market.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Market *MarketTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Market.Contract.contract.Transact(opts, method, params...)
}

// GetBenchmarksQuantity is a free data retrieval call binding the contract method 0x348843cf.
//
// Solidity: function GetBenchmarksQuantity() constant returns(uint256)
func (_Market *MarketCaller) GetBenchmarksQuantity(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Market.contract.Call(opts, out, "GetBenchmarksQuantity")
	return *ret0, err
}

// GetBenchmarksQuantity is a free data retrieval call binding the contract method 0x348843cf.
//
// Solidity: function GetBenchmarksQuantity() constant returns(uint256)
func (_Market *MarketSession) GetBenchmarksQuantity() (*big.Int, error) {
	return _Market.Contract.GetBenchmarksQuantity(&_Market.CallOpts)
}

// GetBenchmarksQuantity is a free data retrieval call binding the contract method 0x348843cf.
//
// Solidity: function GetBenchmarksQuantity() constant returns(uint256)
func (_Market *MarketCallerSession) GetBenchmarksQuantity() (*big.Int, error) {
	return _Market.Contract.GetBenchmarksQuantity(&_Market.CallOpts)
}

// GetChangeRequestInfo is a free data retrieval call binding the contract method 0x616451c5.
//
// Solidity: function GetChangeRequestInfo(changeRequestID uint256) constant returns(dealID uint256, requestType uint8, price uint256, duration uint256, status uint8)
func (_Market *MarketCaller) GetChangeRequestInfo(opts *bind.CallOpts, changeRequestID *big.Int) (struct {
	DealID      *big.Int
	RequestType uint8
	Price       *big.Int
	Duration    *big.Int
	Status      uint8
}, error) {
	ret := new(struct {
		DealID      *big.Int
		RequestType uint8
		Price       *big.Int
		Duration    *big.Int
		Status      uint8
	})
	out := ret
	err := _Market.contract.Call(opts, out, "GetChangeRequestInfo", changeRequestID)
	return *ret, err
}

// GetChangeRequestInfo is a free data retrieval call binding the contract method 0x616451c5.
//
// Solidity: function GetChangeRequestInfo(changeRequestID uint256) constant returns(dealID uint256, requestType uint8, price uint256, duration uint256, status uint8)
func (_Market *MarketSession) GetChangeRequestInfo(changeRequestID *big.Int) (struct {
	DealID      *big.Int
	RequestType uint8
	Price       *big.Int
	Duration    *big.Int
	Status      uint8
}, error) {
	return _Market.Contract.GetChangeRequestInfo(&_Market.CallOpts, changeRequestID)
}

// GetChangeRequestInfo is a free data retrieval call binding the contract method 0x616451c5.
//
// Solidity: function GetChangeRequestInfo(changeRequestID uint256) constant returns(dealID uint256, requestType uint8, price uint256, duration uint256, status uint8)
func (_Market *MarketCallerSession) GetChangeRequestInfo(changeRequestID *big.Int) (struct {
	DealID      *big.Int
	RequestType uint8
	Price       *big.Int
	Duration    *big.Int
	Status      uint8
}, error) {
	return _Market.Contract.GetChangeRequestInfo(&_Market.CallOpts, changeRequestID)
}

// GetChangeRequestsAmount is a free data retrieval call binding the contract method 0xb4bf396e.
//
// Solidity: function GetChangeRequestsAmount() constant returns(uint256)
func (_Market *MarketCaller) GetChangeRequestsAmount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Market.contract.Call(opts, out, "GetChangeRequestsAmount")
	return *ret0, err
}

// GetChangeRequestsAmount is a free data retrieval call binding the contract method 0xb4bf396e.
//
// Solidity: function GetChangeRequestsAmount() constant returns(uint256)
func (_Market *MarketSession) GetChangeRequestsAmount() (*big.Int, error) {
	return _Market.Contract.GetChangeRequestsAmount(&_Market.CallOpts)
}

// GetChangeRequestsAmount is a free data retrieval call binding the contract method 0xb4bf396e.
//
// Solidity: function GetChangeRequestsAmount() constant returns(uint256)
func (_Market *MarketCallerSession) GetChangeRequestsAmount() (*big.Int, error) {
	return _Market.Contract.GetChangeRequestsAmount(&_Market.CallOpts)
}

// GetDealInfo is a free data retrieval call binding the contract method 0x5ad5f6ae.
//
// Solidity: function GetDealInfo(dealID uint256) constant returns(benchmarks uint64[], supplierID address, consumerID address, masterID address, askID uint256, bidID uint256, startTime uint256)
func (_Market *MarketCaller) GetDealInfo(opts *bind.CallOpts, dealID *big.Int) (struct {
	Benchmarks []uint64
	SupplierID common.Address
	ConsumerID common.Address
	MasterID   common.Address
	AskID      *big.Int
	BidID      *big.Int
	StartTime  *big.Int
}, error) {
	ret := new(struct {
		Benchmarks []uint64
		SupplierID common.Address
		ConsumerID common.Address
		MasterID   common.Address
		AskID      *big.Int
		BidID      *big.Int
		StartTime  *big.Int
	})
	out := ret
	err := _Market.contract.Call(opts, out, "GetDealInfo", dealID)
	return *ret, err
}

// GetDealInfo is a free data retrieval call binding the contract method 0x5ad5f6ae.
//
// Solidity: function GetDealInfo(dealID uint256) constant returns(benchmarks uint64[], supplierID address, consumerID address, masterID address, askID uint256, bidID uint256, startTime uint256)
func (_Market *MarketSession) GetDealInfo(dealID *big.Int) (struct {
	Benchmarks []uint64
	SupplierID common.Address
	ConsumerID common.Address
	MasterID   common.Address
	AskID      *big.Int
	BidID      *big.Int
	StartTime  *big.Int
}, error) {
	return _Market.Contract.GetDealInfo(&_Market.CallOpts, dealID)
}

// GetDealInfo is a free data retrieval call binding the contract method 0x5ad5f6ae.
//
// Solidity: function GetDealInfo(dealID uint256) constant returns(benchmarks uint64[], supplierID address, consumerID address, masterID address, askID uint256, bidID uint256, startTime uint256)
func (_Market *MarketCallerSession) GetDealInfo(dealID *big.Int) (struct {
	Benchmarks []uint64
	SupplierID common.Address
	ConsumerID common.Address
	MasterID   common.Address
	AskID      *big.Int
	BidID      *big.Int
	StartTime  *big.Int
}, error) {
	return _Market.Contract.GetDealInfo(&_Market.CallOpts, dealID)
}

// GetDealParams is a free data retrieval call binding the contract method 0x4fabdd4b.
//
// Solidity: function GetDealParams(dealID uint256) constant returns(duration uint256, price uint256, endTime uint256, status uint8, blockedBalance uint256, totalPayout uint256, lastBillTS uint256)
func (_Market *MarketCaller) GetDealParams(opts *bind.CallOpts, dealID *big.Int) (struct {
	Duration       *big.Int
	Price          *big.Int
	EndTime        *big.Int
	Status         uint8
	BlockedBalance *big.Int
	TotalPayout    *big.Int
	LastBillTS     *big.Int
}, error) {
	ret := new(struct {
		Duration       *big.Int
		Price          *big.Int
		EndTime        *big.Int
		Status         uint8
		BlockedBalance *big.Int
		TotalPayout    *big.Int
		LastBillTS     *big.Int
	})
	out := ret
	err := _Market.contract.Call(opts, out, "GetDealParams", dealID)
	return *ret, err
}

// GetDealParams is a free data retrieval call binding the contract method 0x4fabdd4b.
//
// Solidity: function GetDealParams(dealID uint256) constant returns(duration uint256, price uint256, endTime uint256, status uint8, blockedBalance uint256, totalPayout uint256, lastBillTS uint256)
func (_Market *MarketSession) GetDealParams(dealID *big.Int) (struct {
	Duration       *big.Int
	Price          *big.Int
	EndTime        *big.Int
	Status         uint8
	BlockedBalance *big.Int
	TotalPayout    *big.Int
	LastBillTS     *big.Int
}, error) {
	return _Market.Contract.GetDealParams(&_Market.CallOpts, dealID)
}

// GetDealParams is a free data retrieval call binding the contract method 0x4fabdd4b.
//
// Solidity: function GetDealParams(dealID uint256) constant returns(duration uint256, price uint256, endTime uint256, status uint8, blockedBalance uint256, totalPayout uint256, lastBillTS uint256)
func (_Market *MarketCallerSession) GetDealParams(dealID *big.Int) (struct {
	Duration       *big.Int
	Price          *big.Int
	EndTime        *big.Int
	Status         uint8
	BlockedBalance *big.Int
	TotalPayout    *big.Int
	LastBillTS     *big.Int
}, error) {
	return _Market.Contract.GetDealParams(&_Market.CallOpts, dealID)
}

// GetDealsAmount is a free data retrieval call binding the contract method 0xe45ea8d3.
//
// Solidity: function GetDealsAmount() constant returns(uint256)
func (_Market *MarketCaller) GetDealsAmount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Market.contract.Call(opts, out, "GetDealsAmount")
	return *ret0, err
}

// GetDealsAmount is a free data retrieval call binding the contract method 0xe45ea8d3.
//
// Solidity: function GetDealsAmount() constant returns(uint256)
func (_Market *MarketSession) GetDealsAmount() (*big.Int, error) {
	return _Market.Contract.GetDealsAmount(&_Market.CallOpts)
}

// GetDealsAmount is a free data retrieval call binding the contract method 0xe45ea8d3.
//
// Solidity: function GetDealsAmount() constant returns(uint256)
func (_Market *MarketCallerSession) GetDealsAmount() (*big.Int, error) {
	return _Market.Contract.GetDealsAmount(&_Market.CallOpts)
}

// GetMaster is a free data retrieval call binding the contract method 0x289e77b3.
//
// Solidity: function GetMaster(_worker address) constant returns(master address)
func (_Market *MarketCaller) GetMaster(opts *bind.CallOpts, _worker common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Market.contract.Call(opts, out, "GetMaster", _worker)
	return *ret0, err
}

// GetMaster is a free data retrieval call binding the contract method 0x289e77b3.
//
// Solidity: function GetMaster(_worker address) constant returns(master address)
func (_Market *MarketSession) GetMaster(_worker common.Address) (common.Address, error) {
	return _Market.Contract.GetMaster(&_Market.CallOpts, _worker)
}

// GetMaster is a free data retrieval call binding the contract method 0x289e77b3.
//
// Solidity: function GetMaster(_worker address) constant returns(master address)
func (_Market *MarketCallerSession) GetMaster(_worker common.Address) (common.Address, error) {
	return _Market.Contract.GetMaster(&_Market.CallOpts, _worker)
}

// GetNetflagsQuantity is a free data retrieval call binding the contract method 0xde4e86c5.
//
// Solidity: function GetNetflagsQuantity() constant returns(uint256)
func (_Market *MarketCaller) GetNetflagsQuantity(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Market.contract.Call(opts, out, "GetNetflagsQuantity")
	return *ret0, err
}

// GetNetflagsQuantity is a free data retrieval call binding the contract method 0xde4e86c5.
//
// Solidity: function GetNetflagsQuantity() constant returns(uint256)
func (_Market *MarketSession) GetNetflagsQuantity() (*big.Int, error) {
	return _Market.Contract.GetNetflagsQuantity(&_Market.CallOpts)
}

// GetNetflagsQuantity is a free data retrieval call binding the contract method 0xde4e86c5.
//
// Solidity: function GetNetflagsQuantity() constant returns(uint256)
func (_Market *MarketCallerSession) GetNetflagsQuantity() (*big.Int, error) {
	return _Market.Contract.GetNetflagsQuantity(&_Market.CallOpts)
}

// GetOrderInfo is a free data retrieval call binding the contract method 0xe217866c.
//
// Solidity: function GetOrderInfo(orderID uint256) constant returns(orderType uint8, author address, counterparty address, duration uint256, price uint256, netflags bool[], identityLevel uint8, blacklist address, tag bytes32, benchmarks uint64[], frozenSum uint256)
func (_Market *MarketCaller) GetOrderInfo(opts *bind.CallOpts, orderID *big.Int) (struct {
	OrderType     uint8
	Author        common.Address
	Counterparty  common.Address
	Duration      *big.Int
	Price         *big.Int
	Netflags      []bool
	IdentityLevel uint8
	Blacklist     common.Address
	Tag           [32]byte
	Benchmarks    []uint64
	FrozenSum     *big.Int
}, error) {
	ret := new(struct {
		OrderType     uint8
		Author        common.Address
		Counterparty  common.Address
		Duration      *big.Int
		Price         *big.Int
		Netflags      []bool
		IdentityLevel uint8
		Blacklist     common.Address
		Tag           [32]byte
		Benchmarks    []uint64
		FrozenSum     *big.Int
	})
	out := ret
	err := _Market.contract.Call(opts, out, "GetOrderInfo", orderID)
	return *ret, err
}

// GetOrderInfo is a free data retrieval call binding the contract method 0xe217866c.
//
// Solidity: function GetOrderInfo(orderID uint256) constant returns(orderType uint8, author address, counterparty address, duration uint256, price uint256, netflags bool[], identityLevel uint8, blacklist address, tag bytes32, benchmarks uint64[], frozenSum uint256)
func (_Market *MarketSession) GetOrderInfo(orderID *big.Int) (struct {
	OrderType     uint8
	Author        common.Address
	Counterparty  common.Address
	Duration      *big.Int
	Price         *big.Int
	Netflags      []bool
	IdentityLevel uint8
	Blacklist     common.Address
	Tag           [32]byte
	Benchmarks    []uint64
	FrozenSum     *big.Int
}, error) {
	return _Market.Contract.GetOrderInfo(&_Market.CallOpts, orderID)
}

// GetOrderInfo is a free data retrieval call binding the contract method 0xe217866c.
//
// Solidity: function GetOrderInfo(orderID uint256) constant returns(orderType uint8, author address, counterparty address, duration uint256, price uint256, netflags bool[], identityLevel uint8, blacklist address, tag bytes32, benchmarks uint64[], frozenSum uint256)
func (_Market *MarketCallerSession) GetOrderInfo(orderID *big.Int) (struct {
	OrderType     uint8
	Author        common.Address
	Counterparty  common.Address
	Duration      *big.Int
	Price         *big.Int
	Netflags      []bool
	IdentityLevel uint8
	Blacklist     common.Address
	Tag           [32]byte
	Benchmarks    []uint64
	FrozenSum     *big.Int
}, error) {
	return _Market.Contract.GetOrderInfo(&_Market.CallOpts, orderID)
}

// GetOrderParams is a free data retrieval call binding the contract method 0x3a907227.
//
// Solidity: function GetOrderParams(orderID uint256) constant returns(orderStatus uint8, dealID uint256)
func (_Market *MarketCaller) GetOrderParams(opts *bind.CallOpts, orderID *big.Int) (struct {
	OrderStatus uint8
	DealID      *big.Int
}, error) {
	ret := new(struct {
		OrderStatus uint8
		DealID      *big.Int
	})
	out := ret
	err := _Market.contract.Call(opts, out, "GetOrderParams", orderID)
	return *ret, err
}

// GetOrderParams is a free data retrieval call binding the contract method 0x3a907227.
//
// Solidity: function GetOrderParams(orderID uint256) constant returns(orderStatus uint8, dealID uint256)
func (_Market *MarketSession) GetOrderParams(orderID *big.Int) (struct {
	OrderStatus uint8
	DealID      *big.Int
}, error) {
	return _Market.Contract.GetOrderParams(&_Market.CallOpts, orderID)
}

// GetOrderParams is a free data retrieval call binding the contract method 0x3a907227.
//
// Solidity: function GetOrderParams(orderID uint256) constant returns(orderStatus uint8, dealID uint256)
func (_Market *MarketCallerSession) GetOrderParams(orderID *big.Int) (struct {
	OrderStatus uint8
	DealID      *big.Int
}, error) {
	return _Market.Contract.GetOrderParams(&_Market.CallOpts, orderID)
}

// GetOrdersAmount is a free data retrieval call binding the contract method 0x63fb2929.
//
// Solidity: function GetOrdersAmount() constant returns(uint256)
func (_Market *MarketCaller) GetOrdersAmount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Market.contract.Call(opts, out, "GetOrdersAmount")
	return *ret0, err
}

// GetOrdersAmount is a free data retrieval call binding the contract method 0x63fb2929.
//
// Solidity: function GetOrdersAmount() constant returns(uint256)
func (_Market *MarketSession) GetOrdersAmount() (*big.Int, error) {
	return _Market.Contract.GetOrdersAmount(&_Market.CallOpts)
}

// GetOrdersAmount is a free data retrieval call binding the contract method 0x63fb2929.
//
// Solidity: function GetOrdersAmount() constant returns(uint256)
func (_Market *MarketCallerSession) GetOrdersAmount() (*big.Int, error) {
	return _Market.Contract.GetOrdersAmount(&_Market.CallOpts)
}

// Deals is a free data retrieval call binding the contract method 0x03988f84.
//
// Solidity: function deals( uint256) constant returns(supplierID address, consumerID address, masterID address, askID uint256, bidID uint256, duration uint256, price uint256, startTime uint256, endTime uint256, status uint8, blockedBalance uint256, totalPayout uint256, lastBillTS uint256)
func (_Market *MarketCaller) Deals(opts *bind.CallOpts, arg0 *big.Int) (struct {
	SupplierID     common.Address
	ConsumerID     common.Address
	MasterID       common.Address
	AskID          *big.Int
	BidID          *big.Int
	Duration       *big.Int
	Price          *big.Int
	StartTime      *big.Int
	EndTime        *big.Int
	Status         uint8
	BlockedBalance *big.Int
	TotalPayout    *big.Int
	LastBillTS     *big.Int
}, error) {
	ret := new(struct {
		SupplierID     common.Address
		ConsumerID     common.Address
		MasterID       common.Address
		AskID          *big.Int
		BidID          *big.Int
		Duration       *big.Int
		Price          *big.Int
		StartTime      *big.Int
		EndTime        *big.Int
		Status         uint8
		BlockedBalance *big.Int
		TotalPayout    *big.Int
		LastBillTS     *big.Int
	})
	out := ret
	err := _Market.contract.Call(opts, out, "deals", arg0)
	return *ret, err
}

// Deals is a free data retrieval call binding the contract method 0x03988f84.
//
// Solidity: function deals( uint256) constant returns(supplierID address, consumerID address, masterID address, askID uint256, bidID uint256, duration uint256, price uint256, startTime uint256, endTime uint256, status uint8, blockedBalance uint256, totalPayout uint256, lastBillTS uint256)
func (_Market *MarketSession) Deals(arg0 *big.Int) (struct {
	SupplierID     common.Address
	ConsumerID     common.Address
	MasterID       common.Address
	AskID          *big.Int
	BidID          *big.Int
	Duration       *big.Int
	Price          *big.Int
	StartTime      *big.Int
	EndTime        *big.Int
	Status         uint8
	BlockedBalance *big.Int
	TotalPayout    *big.Int
	LastBillTS     *big.Int
}, error) {
	return _Market.Contract.Deals(&_Market.CallOpts, arg0)
}

// Deals is a free data retrieval call binding the contract method 0x03988f84.
//
// Solidity: function deals( uint256) constant returns(supplierID address, consumerID address, masterID address, askID uint256, bidID uint256, duration uint256, price uint256, startTime uint256, endTime uint256, status uint8, blockedBalance uint256, totalPayout uint256, lastBillTS uint256)
func (_Market *MarketCallerSession) Deals(arg0 *big.Int) (struct {
	SupplierID     common.Address
	ConsumerID     common.Address
	MasterID       common.Address
	AskID          *big.Int
	BidID          *big.Int
	Duration       *big.Int
	Price          *big.Int
	StartTime      *big.Int
	EndTime        *big.Int
	Status         uint8
	BlockedBalance *big.Int
	TotalPayout    *big.Int
	LastBillTS     *big.Int
}, error) {
	return _Market.Contract.Deals(&_Market.CallOpts, arg0)
}

// Orders is a free data retrieval call binding the contract method 0xa85c38ef.
//
// Solidity: function orders( uint256) constant returns(orderType uint8, orderStatus uint8, author address, counterparty address, duration uint256, price uint256, identityLevel uint8, blacklist address, tag bytes32, frozenSum uint256, dealID uint256)
func (_Market *MarketCaller) Orders(opts *bind.CallOpts, arg0 *big.Int) (struct {
	OrderType     uint8
	OrderStatus   uint8
	Author        common.Address
	Counterparty  common.Address
	Duration      *big.Int
	Price         *big.Int
	IdentityLevel uint8
	Blacklist     common.Address
	Tag           [32]byte
	FrozenSum     *big.Int
	DealID        *big.Int
}, error) {
	ret := new(struct {
		OrderType     uint8
		OrderStatus   uint8
		Author        common.Address
		Counterparty  common.Address
		Duration      *big.Int
		Price         *big.Int
		IdentityLevel uint8
		Blacklist     common.Address
		Tag           [32]byte
		FrozenSum     *big.Int
		DealID        *big.Int
	})
	out := ret
	err := _Market.contract.Call(opts, out, "orders", arg0)
	return *ret, err
}

// Orders is a free data retrieval call binding the contract method 0xa85c38ef.
//
// Solidity: function orders( uint256) constant returns(orderType uint8, orderStatus uint8, author address, counterparty address, duration uint256, price uint256, identityLevel uint8, blacklist address, tag bytes32, frozenSum uint256, dealID uint256)
func (_Market *MarketSession) Orders(arg0 *big.Int) (struct {
	OrderType     uint8
	OrderStatus   uint8
	Author        common.Address
	Counterparty  common.Address
	Duration      *big.Int
	Price         *big.Int
	IdentityLevel uint8
	Blacklist     common.Address
	Tag           [32]byte
	FrozenSum     *big.Int
	DealID        *big.Int
}, error) {
	return _Market.Contract.Orders(&_Market.CallOpts, arg0)
}

// Orders is a free data retrieval call binding the contract method 0xa85c38ef.
//
// Solidity: function orders( uint256) constant returns(orderType uint8, orderStatus uint8, author address, counterparty address, duration uint256, price uint256, identityLevel uint8, blacklist address, tag bytes32, frozenSum uint256, dealID uint256)
func (_Market *MarketCallerSession) Orders(arg0 *big.Int) (struct {
	OrderType     uint8
	OrderStatus   uint8
	Author        common.Address
	Counterparty  common.Address
	Duration      *big.Int
	Price         *big.Int
	IdentityLevel uint8
	Blacklist     common.Address
	Tag           [32]byte
	FrozenSum     *big.Int
	DealID        *big.Int
}, error) {
	return _Market.Contract.Orders(&_Market.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Market *MarketCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Market.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Market *MarketSession) Owner() (common.Address, error) {
	return _Market.Contract.Owner(&_Market.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Market *MarketCallerSession) Owner() (common.Address, error) {
	return _Market.Contract.Owner(&_Market.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() constant returns(bool)
func (_Market *MarketCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Market.contract.Call(opts, out, "paused")
	return *ret0, err
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() constant returns(bool)
func (_Market *MarketSession) Paused() (bool, error) {
	return _Market.Contract.Paused(&_Market.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() constant returns(bool)
func (_Market *MarketCallerSession) Paused() (bool, error) {
	return _Market.Contract.Paused(&_Market.CallOpts)
}

// Bill is a paid mutator transaction binding the contract method 0xc86c16f2.
//
// Solidity: function Bill(dealID uint256) returns(bool)
func (_Market *MarketTransactor) Bill(opts *bind.TransactOpts, dealID *big.Int) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "Bill", dealID)
}

// Bill is a paid mutator transaction binding the contract method 0xc86c16f2.
//
// Solidity: function Bill(dealID uint256) returns(bool)
func (_Market *MarketSession) Bill(dealID *big.Int) (*types.Transaction, error) {
	return _Market.Contract.Bill(&_Market.TransactOpts, dealID)
}

// Bill is a paid mutator transaction binding the contract method 0xc86c16f2.
//
// Solidity: function Bill(dealID uint256) returns(bool)
func (_Market *MarketTransactorSession) Bill(dealID *big.Int) (*types.Transaction, error) {
	return _Market.Contract.Bill(&_Market.TransactOpts, dealID)
}

// CancelChangeRequest is a paid mutator transaction binding the contract method 0x9a1ea609.
//
// Solidity: function CancelChangeRequest(changeRequestID uint256) returns(bool)
func (_Market *MarketTransactor) CancelChangeRequest(opts *bind.TransactOpts, changeRequestID *big.Int) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "CancelChangeRequest", changeRequestID)
}

// CancelChangeRequest is a paid mutator transaction binding the contract method 0x9a1ea609.
//
// Solidity: function CancelChangeRequest(changeRequestID uint256) returns(bool)
func (_Market *MarketSession) CancelChangeRequest(changeRequestID *big.Int) (*types.Transaction, error) {
	return _Market.Contract.CancelChangeRequest(&_Market.TransactOpts, changeRequestID)
}

// CancelChangeRequest is a paid mutator transaction binding the contract method 0x9a1ea609.
//
// Solidity: function CancelChangeRequest(changeRequestID uint256) returns(bool)
func (_Market *MarketTransactorSession) CancelChangeRequest(changeRequestID *big.Int) (*types.Transaction, error) {
	return _Market.Contract.CancelChangeRequest(&_Market.TransactOpts, changeRequestID)
}

// CancelOrder is a paid mutator transaction binding the contract method 0x935c9ad2.
//
// Solidity: function CancelOrder(orderID uint256) returns(bool)
func (_Market *MarketTransactor) CancelOrder(opts *bind.TransactOpts, orderID *big.Int) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "CancelOrder", orderID)
}

// CancelOrder is a paid mutator transaction binding the contract method 0x935c9ad2.
//
// Solidity: function CancelOrder(orderID uint256) returns(bool)
func (_Market *MarketSession) CancelOrder(orderID *big.Int) (*types.Transaction, error) {
	return _Market.Contract.CancelOrder(&_Market.TransactOpts, orderID)
}

// CancelOrder is a paid mutator transaction binding the contract method 0x935c9ad2.
//
// Solidity: function CancelOrder(orderID uint256) returns(bool)
func (_Market *MarketTransactorSession) CancelOrder(orderID *big.Int) (*types.Transaction, error) {
	return _Market.Contract.CancelOrder(&_Market.TransactOpts, orderID)
}

// CloseDeal is a paid mutator transaction binding the contract method 0xd0cca922.
//
// Solidity: function CloseDeal(dealID uint256, blacklisted uint8) returns(bool)
func (_Market *MarketTransactor) CloseDeal(opts *bind.TransactOpts, dealID *big.Int, blacklisted uint8) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "CloseDeal", dealID, blacklisted)
}

// CloseDeal is a paid mutator transaction binding the contract method 0xd0cca922.
//
// Solidity: function CloseDeal(dealID uint256, blacklisted uint8) returns(bool)
func (_Market *MarketSession) CloseDeal(dealID *big.Int, blacklisted uint8) (*types.Transaction, error) {
	return _Market.Contract.CloseDeal(&_Market.TransactOpts, dealID, blacklisted)
}

// CloseDeal is a paid mutator transaction binding the contract method 0xd0cca922.
//
// Solidity: function CloseDeal(dealID uint256, blacklisted uint8) returns(bool)
func (_Market *MarketTransactorSession) CloseDeal(dealID *big.Int, blacklisted uint8) (*types.Transaction, error) {
	return _Market.Contract.CloseDeal(&_Market.TransactOpts, dealID, blacklisted)
}

// ConfirmWorker is a paid mutator transaction binding the contract method 0x1a3d5f82.
//
// Solidity: function ConfirmWorker(_worker address) returns(bool)
func (_Market *MarketTransactor) ConfirmWorker(opts *bind.TransactOpts, _worker common.Address) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "ConfirmWorker", _worker)
}

// ConfirmWorker is a paid mutator transaction binding the contract method 0x1a3d5f82.
//
// Solidity: function ConfirmWorker(_worker address) returns(bool)
func (_Market *MarketSession) ConfirmWorker(_worker common.Address) (*types.Transaction, error) {
	return _Market.Contract.ConfirmWorker(&_Market.TransactOpts, _worker)
}

// ConfirmWorker is a paid mutator transaction binding the contract method 0x1a3d5f82.
//
// Solidity: function ConfirmWorker(_worker address) returns(bool)
func (_Market *MarketTransactorSession) ConfirmWorker(_worker common.Address) (*types.Transaction, error) {
	return _Market.Contract.ConfirmWorker(&_Market.TransactOpts, _worker)
}

// CreateChangeRequest is a paid mutator transaction binding the contract method 0x3c1cbb34.
//
// Solidity: function CreateChangeRequest(dealID uint256, newPrice uint256, newDuration uint256) returns(changeRequestID uint256)
func (_Market *MarketTransactor) CreateChangeRequest(opts *bind.TransactOpts, dealID *big.Int, newPrice *big.Int, newDuration *big.Int) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "CreateChangeRequest", dealID, newPrice, newDuration)
}

// CreateChangeRequest is a paid mutator transaction binding the contract method 0x3c1cbb34.
//
// Solidity: function CreateChangeRequest(dealID uint256, newPrice uint256, newDuration uint256) returns(changeRequestID uint256)
func (_Market *MarketSession) CreateChangeRequest(dealID *big.Int, newPrice *big.Int, newDuration *big.Int) (*types.Transaction, error) {
	return _Market.Contract.CreateChangeRequest(&_Market.TransactOpts, dealID, newPrice, newDuration)
}

// CreateChangeRequest is a paid mutator transaction binding the contract method 0x3c1cbb34.
//
// Solidity: function CreateChangeRequest(dealID uint256, newPrice uint256, newDuration uint256) returns(changeRequestID uint256)
func (_Market *MarketTransactorSession) CreateChangeRequest(dealID *big.Int, newPrice *big.Int, newDuration *big.Int) (*types.Transaction, error) {
	return _Market.Contract.CreateChangeRequest(&_Market.TransactOpts, dealID, newPrice, newDuration)
}

// KillMarket is a paid mutator transaction binding the contract method 0xc4b22e7d.
//
// Solidity: function KillMarket() returns()
func (_Market *MarketTransactor) KillMarket(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "KillMarket")
}

// KillMarket is a paid mutator transaction binding the contract method 0xc4b22e7d.
//
// Solidity: function KillMarket() returns()
func (_Market *MarketSession) KillMarket() (*types.Transaction, error) {
	return _Market.Contract.KillMarket(&_Market.TransactOpts)
}

// KillMarket is a paid mutator transaction binding the contract method 0xc4b22e7d.
//
// Solidity: function KillMarket() returns()
func (_Market *MarketTransactorSession) KillMarket() (*types.Transaction, error) {
	return _Market.Contract.KillMarket(&_Market.TransactOpts)
}

// OpenDeal is a paid mutator transaction binding the contract method 0xb1defc89.
//
// Solidity: function OpenDeal(_askID uint256, _bidID uint256) returns()
func (_Market *MarketTransactor) OpenDeal(opts *bind.TransactOpts, _askID *big.Int, _bidID *big.Int) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "OpenDeal", _askID, _bidID)
}

// OpenDeal is a paid mutator transaction binding the contract method 0xb1defc89.
//
// Solidity: function OpenDeal(_askID uint256, _bidID uint256) returns()
func (_Market *MarketSession) OpenDeal(_askID *big.Int, _bidID *big.Int) (*types.Transaction, error) {
	return _Market.Contract.OpenDeal(&_Market.TransactOpts, _askID, _bidID)
}

// OpenDeal is a paid mutator transaction binding the contract method 0xb1defc89.
//
// Solidity: function OpenDeal(_askID uint256, _bidID uint256) returns()
func (_Market *MarketTransactorSession) OpenDeal(_askID *big.Int, _bidID *big.Int) (*types.Transaction, error) {
	return _Market.Contract.OpenDeal(&_Market.TransactOpts, _askID, _bidID)
}

// PlaceOrder is a paid mutator transaction binding the contract method 0xe67d7dd8.
//
// Solidity: function PlaceOrder(_orderType uint8, _id_counterparty address, _duration uint256, _price uint256, _netflags bool[], _identityLevel uint8, _blacklist address, _tag bytes32, _benchmarks uint64[]) returns(uint256)
func (_Market *MarketTransactor) PlaceOrder(opts *bind.TransactOpts, _orderType uint8, _id_counterparty common.Address, _duration *big.Int, _price *big.Int, _netflags []bool, _identityLevel uint8, _blacklist common.Address, _tag [32]byte, _benchmarks []uint64) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "PlaceOrder", _orderType, _id_counterparty, _duration, _price, _netflags, _identityLevel, _blacklist, _tag, _benchmarks)
}

// PlaceOrder is a paid mutator transaction binding the contract method 0xe67d7dd8.
//
// Solidity: function PlaceOrder(_orderType uint8, _id_counterparty address, _duration uint256, _price uint256, _netflags bool[], _identityLevel uint8, _blacklist address, _tag bytes32, _benchmarks uint64[]) returns(uint256)
func (_Market *MarketSession) PlaceOrder(_orderType uint8, _id_counterparty common.Address, _duration *big.Int, _price *big.Int, _netflags []bool, _identityLevel uint8, _blacklist common.Address, _tag [32]byte, _benchmarks []uint64) (*types.Transaction, error) {
	return _Market.Contract.PlaceOrder(&_Market.TransactOpts, _orderType, _id_counterparty, _duration, _price, _netflags, _identityLevel, _blacklist, _tag, _benchmarks)
}

// PlaceOrder is a paid mutator transaction binding the contract method 0xe67d7dd8.
//
// Solidity: function PlaceOrder(_orderType uint8, _id_counterparty address, _duration uint256, _price uint256, _netflags bool[], _identityLevel uint8, _blacklist address, _tag bytes32, _benchmarks uint64[]) returns(uint256)
func (_Market *MarketTransactorSession) PlaceOrder(_orderType uint8, _id_counterparty common.Address, _duration *big.Int, _price *big.Int, _netflags []bool, _identityLevel uint8, _blacklist common.Address, _tag [32]byte, _benchmarks []uint64) (*types.Transaction, error) {
	return _Market.Contract.PlaceOrder(&_Market.TransactOpts, _orderType, _id_counterparty, _duration, _price, _netflags, _identityLevel, _blacklist, _tag, _benchmarks)
}

// QuickBuy is a paid mutator transaction binding the contract method 0x8bce1fdf.
//
// Solidity: function QuickBuy(askID uint256, buyoutDuration uint256) returns()
func (_Market *MarketTransactor) QuickBuy(opts *bind.TransactOpts, askID *big.Int, buyoutDuration *big.Int) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "QuickBuy", askID, buyoutDuration)
}

// QuickBuy is a paid mutator transaction binding the contract method 0x8bce1fdf.
//
// Solidity: function QuickBuy(askID uint256, buyoutDuration uint256) returns()
func (_Market *MarketSession) QuickBuy(askID *big.Int, buyoutDuration *big.Int) (*types.Transaction, error) {
	return _Market.Contract.QuickBuy(&_Market.TransactOpts, askID, buyoutDuration)
}

// QuickBuy is a paid mutator transaction binding the contract method 0x8bce1fdf.
//
// Solidity: function QuickBuy(askID uint256, buyoutDuration uint256) returns()
func (_Market *MarketTransactorSession) QuickBuy(askID *big.Int, buyoutDuration *big.Int) (*types.Transaction, error) {
	return _Market.Contract.QuickBuy(&_Market.TransactOpts, askID, buyoutDuration)
}

// RegisterWorker is a paid mutator transaction binding the contract method 0xa70a7af0.
//
// Solidity: function RegisterWorker(_master address) returns(bool)
func (_Market *MarketTransactor) RegisterWorker(opts *bind.TransactOpts, _master common.Address) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "RegisterWorker", _master)
}

// RegisterWorker is a paid mutator transaction binding the contract method 0xa70a7af0.
//
// Solidity: function RegisterWorker(_master address) returns(bool)
func (_Market *MarketSession) RegisterWorker(_master common.Address) (*types.Transaction, error) {
	return _Market.Contract.RegisterWorker(&_Market.TransactOpts, _master)
}

// RegisterWorker is a paid mutator transaction binding the contract method 0xa70a7af0.
//
// Solidity: function RegisterWorker(_master address) returns(bool)
func (_Market *MarketTransactorSession) RegisterWorker(_master common.Address) (*types.Transaction, error) {
	return _Market.Contract.RegisterWorker(&_Market.TransactOpts, _master)
}

// RemoveWorker is a paid mutator transaction binding the contract method 0xd3623432.
//
// Solidity: function RemoveWorker(_worker address, _master address) returns(bool)
func (_Market *MarketTransactor) RemoveWorker(opts *bind.TransactOpts, _worker common.Address, _master common.Address) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "RemoveWorker", _worker, _master)
}

// RemoveWorker is a paid mutator transaction binding the contract method 0xd3623432.
//
// Solidity: function RemoveWorker(_worker address, _master address) returns(bool)
func (_Market *MarketSession) RemoveWorker(_worker common.Address, _master common.Address) (*types.Transaction, error) {
	return _Market.Contract.RemoveWorker(&_Market.TransactOpts, _worker, _master)
}

// RemoveWorker is a paid mutator transaction binding the contract method 0xd3623432.
//
// Solidity: function RemoveWorker(_worker address, _master address) returns(bool)
func (_Market *MarketTransactorSession) RemoveWorker(_worker common.Address, _master common.Address) (*types.Transaction, error) {
	return _Market.Contract.RemoveWorker(&_Market.TransactOpts, _worker, _master)
}

// SetBenchmarksQuantity is a paid mutator transaction binding the contract method 0xef78b8d3.
//
// Solidity: function SetBenchmarksQuantity(_newQuantity uint256) returns(bool)
func (_Market *MarketTransactor) SetBenchmarksQuantity(opts *bind.TransactOpts, _newQuantity *big.Int) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "SetBenchmarksQuantity", _newQuantity)
}

// SetBenchmarksQuantity is a paid mutator transaction binding the contract method 0xef78b8d3.
//
// Solidity: function SetBenchmarksQuantity(_newQuantity uint256) returns(bool)
func (_Market *MarketSession) SetBenchmarksQuantity(_newQuantity *big.Int) (*types.Transaction, error) {
	return _Market.Contract.SetBenchmarksQuantity(&_Market.TransactOpts, _newQuantity)
}

// SetBenchmarksQuantity is a paid mutator transaction binding the contract method 0xef78b8d3.
//
// Solidity: function SetBenchmarksQuantity(_newQuantity uint256) returns(bool)
func (_Market *MarketTransactorSession) SetBenchmarksQuantity(_newQuantity *big.Int) (*types.Transaction, error) {
	return _Market.Contract.SetBenchmarksQuantity(&_Market.TransactOpts, _newQuantity)
}

// SetBlacklistAddress is a paid mutator transaction binding the contract method 0xd85e6776.
//
// Solidity: function SetBlacklistAddress(_newBL address) returns(bool)
func (_Market *MarketTransactor) SetBlacklistAddress(opts *bind.TransactOpts, _newBL common.Address) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "SetBlacklistAddress", _newBL)
}

// SetBlacklistAddress is a paid mutator transaction binding the contract method 0xd85e6776.
//
// Solidity: function SetBlacklistAddress(_newBL address) returns(bool)
func (_Market *MarketSession) SetBlacklistAddress(_newBL common.Address) (*types.Transaction, error) {
	return _Market.Contract.SetBlacklistAddress(&_Market.TransactOpts, _newBL)
}

// SetBlacklistAddress is a paid mutator transaction binding the contract method 0xd85e6776.
//
// Solidity: function SetBlacklistAddress(_newBL address) returns(bool)
func (_Market *MarketTransactorSession) SetBlacklistAddress(_newBL common.Address) (*types.Transaction, error) {
	return _Market.Contract.SetBlacklistAddress(&_Market.TransactOpts, _newBL)
}

// SetNetflagsQuantity is a paid mutator transaction binding the contract method 0x91e75fc0.
//
// Solidity: function SetNetflagsQuantity(_newQuantity uint256) returns(bool)
func (_Market *MarketTransactor) SetNetflagsQuantity(opts *bind.TransactOpts, _newQuantity *big.Int) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "SetNetflagsQuantity", _newQuantity)
}

// SetNetflagsQuantity is a paid mutator transaction binding the contract method 0x91e75fc0.
//
// Solidity: function SetNetflagsQuantity(_newQuantity uint256) returns(bool)
func (_Market *MarketSession) SetNetflagsQuantity(_newQuantity *big.Int) (*types.Transaction, error) {
	return _Market.Contract.SetNetflagsQuantity(&_Market.TransactOpts, _newQuantity)
}

// SetNetflagsQuantity is a paid mutator transaction binding the contract method 0x91e75fc0.
//
// Solidity: function SetNetflagsQuantity(_newQuantity uint256) returns(bool)
func (_Market *MarketTransactorSession) SetNetflagsQuantity(_newQuantity *big.Int) (*types.Transaction, error) {
	return _Market.Contract.SetNetflagsQuantity(&_Market.TransactOpts, _newQuantity)
}

// SetOracleAddress is a paid mutator transaction binding the contract method 0x0adef86c.
//
// Solidity: function SetOracleAddress(_newOracle address) returns(bool)
func (_Market *MarketTransactor) SetOracleAddress(opts *bind.TransactOpts, _newOracle common.Address) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "SetOracleAddress", _newOracle)
}

// SetOracleAddress is a paid mutator transaction binding the contract method 0x0adef86c.
//
// Solidity: function SetOracleAddress(_newOracle address) returns(bool)
func (_Market *MarketSession) SetOracleAddress(_newOracle common.Address) (*types.Transaction, error) {
	return _Market.Contract.SetOracleAddress(&_Market.TransactOpts, _newOracle)
}

// SetOracleAddress is a paid mutator transaction binding the contract method 0x0adef86c.
//
// Solidity: function SetOracleAddress(_newOracle address) returns(bool)
func (_Market *MarketTransactorSession) SetOracleAddress(_newOracle common.Address) (*types.Transaction, error) {
	return _Market.Contract.SetOracleAddress(&_Market.TransactOpts, _newOracle)
}

// SetProfileRegistryAddress is a paid mutator transaction binding the contract method 0xf1bf6fd5.
//
// Solidity: function SetProfileRegistryAddress(_newPR address) returns(bool)
func (_Market *MarketTransactor) SetProfileRegistryAddress(opts *bind.TransactOpts, _newPR common.Address) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "SetProfileRegistryAddress", _newPR)
}

// SetProfileRegistryAddress is a paid mutator transaction binding the contract method 0xf1bf6fd5.
//
// Solidity: function SetProfileRegistryAddress(_newPR address) returns(bool)
func (_Market *MarketSession) SetProfileRegistryAddress(_newPR common.Address) (*types.Transaction, error) {
	return _Market.Contract.SetProfileRegistryAddress(&_Market.TransactOpts, _newPR)
}

// SetProfileRegistryAddress is a paid mutator transaction binding the contract method 0xf1bf6fd5.
//
// Solidity: function SetProfileRegistryAddress(_newPR address) returns(bool)
func (_Market *MarketTransactorSession) SetProfileRegistryAddress(_newPR common.Address) (*types.Transaction, error) {
	return _Market.Contract.SetProfileRegistryAddress(&_Market.TransactOpts, _newPR)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Market *MarketTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Market *MarketSession) Pause() (*types.Transaction, error) {
	return _Market.Contract.Pause(&_Market.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Market *MarketTransactorSession) Pause() (*types.Transaction, error) {
	return _Market.Contract.Pause(&_Market.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Market *MarketTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Market *MarketSession) RenounceOwnership() (*types.Transaction, error) {
	return _Market.Contract.RenounceOwnership(&_Market.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Market *MarketTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Market.Contract.RenounceOwnership(&_Market.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(_newOwner address) returns()
func (_Market *MarketTransactor) TransferOwnership(opts *bind.TransactOpts, _newOwner common.Address) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "transferOwnership", _newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(_newOwner address) returns()
func (_Market *MarketSession) TransferOwnership(_newOwner common.Address) (*types.Transaction, error) {
	return _Market.Contract.TransferOwnership(&_Market.TransactOpts, _newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(_newOwner address) returns()
func (_Market *MarketTransactorSession) TransferOwnership(_newOwner common.Address) (*types.Transaction, error) {
	return _Market.Contract.TransferOwnership(&_Market.TransactOpts, _newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Market *MarketTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Market *MarketSession) Unpause() (*types.Transaction, error) {
	return _Market.Contract.Unpause(&_Market.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Market *MarketTransactorSession) Unpause() (*types.Transaction, error) {
	return _Market.Contract.Unpause(&_Market.TransactOpts)
}

// MarketBilledIterator is returned from FilterBilled and is used to iterate over the raw logs and unpacked data for Billed events raised by the Market contract.
type MarketBilledIterator struct {
	Event *MarketBilled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketBilledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketBilled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketBilled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketBilledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketBilledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketBilled represents a Billed event raised by the Market contract.
type MarketBilled struct {
	DealID     *big.Int
	PaidAmount *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterBilled is a free log retrieval operation binding the contract event 0x51f87cd83a2ce6c4ff7957861f7aba400dc3857d2325e0c94cc69f468874515c.
//
// Solidity: e Billed(dealID indexed uint256, paidAmount indexed uint256)
func (_Market *MarketFilterer) FilterBilled(opts *bind.FilterOpts, dealID []*big.Int, paidAmount []*big.Int) (*MarketBilledIterator, error) {

	var dealIDRule []interface{}
	for _, dealIDItem := range dealID {
		dealIDRule = append(dealIDRule, dealIDItem)
	}
	var paidAmountRule []interface{}
	for _, paidAmountItem := range paidAmount {
		paidAmountRule = append(paidAmountRule, paidAmountItem)
	}

	logs, sub, err := _Market.contract.FilterLogs(opts, "Billed", dealIDRule, paidAmountRule)
	if err != nil {
		return nil, err
	}
	return &MarketBilledIterator{contract: _Market.contract, event: "Billed", logs: logs, sub: sub}, nil
}

// WatchBilled is a free log subscription operation binding the contract event 0x51f87cd83a2ce6c4ff7957861f7aba400dc3857d2325e0c94cc69f468874515c.
//
// Solidity: e Billed(dealID indexed uint256, paidAmount indexed uint256)
func (_Market *MarketFilterer) WatchBilled(opts *bind.WatchOpts, sink chan<- *MarketBilled, dealID []*big.Int, paidAmount []*big.Int) (event.Subscription, error) {

	var dealIDRule []interface{}
	for _, dealIDItem := range dealID {
		dealIDRule = append(dealIDRule, dealIDItem)
	}
	var paidAmountRule []interface{}
	for _, paidAmountItem := range paidAmount {
		paidAmountRule = append(paidAmountRule, paidAmountItem)
	}

	logs, sub, err := _Market.contract.WatchLogs(opts, "Billed", dealIDRule, paidAmountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketBilled)
				if err := _Market.contract.UnpackLog(event, "Billed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MarketDealChangeRequestSetIterator is returned from FilterDealChangeRequestSet and is used to iterate over the raw logs and unpacked data for DealChangeRequestSet events raised by the Market contract.
type MarketDealChangeRequestSetIterator struct {
	Event *MarketDealChangeRequestSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketDealChangeRequestSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketDealChangeRequestSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketDealChangeRequestSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketDealChangeRequestSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketDealChangeRequestSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketDealChangeRequestSet represents a DealChangeRequestSet event raised by the Market contract.
type MarketDealChangeRequestSet struct {
	ChangeRequestID *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterDealChangeRequestSet is a free log retrieval operation binding the contract event 0x7ff56b2eb3ce318aad93d0ba39a3e4a406992a136f9554f17f6bcc43509275d1.
//
// Solidity: e DealChangeRequestSet(changeRequestID indexed uint256)
func (_Market *MarketFilterer) FilterDealChangeRequestSet(opts *bind.FilterOpts, changeRequestID []*big.Int) (*MarketDealChangeRequestSetIterator, error) {

	var changeRequestIDRule []interface{}
	for _, changeRequestIDItem := range changeRequestID {
		changeRequestIDRule = append(changeRequestIDRule, changeRequestIDItem)
	}

	logs, sub, err := _Market.contract.FilterLogs(opts, "DealChangeRequestSet", changeRequestIDRule)
	if err != nil {
		return nil, err
	}
	return &MarketDealChangeRequestSetIterator{contract: _Market.contract, event: "DealChangeRequestSet", logs: logs, sub: sub}, nil
}

// WatchDealChangeRequestSet is a free log subscription operation binding the contract event 0x7ff56b2eb3ce318aad93d0ba39a3e4a406992a136f9554f17f6bcc43509275d1.
//
// Solidity: e DealChangeRequestSet(changeRequestID indexed uint256)
func (_Market *MarketFilterer) WatchDealChangeRequestSet(opts *bind.WatchOpts, sink chan<- *MarketDealChangeRequestSet, changeRequestID []*big.Int) (event.Subscription, error) {

	var changeRequestIDRule []interface{}
	for _, changeRequestIDItem := range changeRequestID {
		changeRequestIDRule = append(changeRequestIDRule, changeRequestIDItem)
	}

	logs, sub, err := _Market.contract.WatchLogs(opts, "DealChangeRequestSet", changeRequestIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketDealChangeRequestSet)
				if err := _Market.contract.UnpackLog(event, "DealChangeRequestSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MarketDealChangeRequestUpdatedIterator is returned from FilterDealChangeRequestUpdated and is used to iterate over the raw logs and unpacked data for DealChangeRequestUpdated events raised by the Market contract.
type MarketDealChangeRequestUpdatedIterator struct {
	Event *MarketDealChangeRequestUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketDealChangeRequestUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketDealChangeRequestUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketDealChangeRequestUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketDealChangeRequestUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketDealChangeRequestUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketDealChangeRequestUpdated represents a DealChangeRequestUpdated event raised by the Market contract.
type MarketDealChangeRequestUpdated struct {
	ChangeRequestID *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterDealChangeRequestUpdated is a free log retrieval operation binding the contract event 0x4b92d35447745e95b7344414a41ae94984787d0ebcd2c12021169197bb59af39.
//
// Solidity: e DealChangeRequestUpdated(changeRequestID indexed uint256)
func (_Market *MarketFilterer) FilterDealChangeRequestUpdated(opts *bind.FilterOpts, changeRequestID []*big.Int) (*MarketDealChangeRequestUpdatedIterator, error) {

	var changeRequestIDRule []interface{}
	for _, changeRequestIDItem := range changeRequestID {
		changeRequestIDRule = append(changeRequestIDRule, changeRequestIDItem)
	}

	logs, sub, err := _Market.contract.FilterLogs(opts, "DealChangeRequestUpdated", changeRequestIDRule)
	if err != nil {
		return nil, err
	}
	return &MarketDealChangeRequestUpdatedIterator{contract: _Market.contract, event: "DealChangeRequestUpdated", logs: logs, sub: sub}, nil
}

// WatchDealChangeRequestUpdated is a free log subscription operation binding the contract event 0x4b92d35447745e95b7344414a41ae94984787d0ebcd2c12021169197bb59af39.
//
// Solidity: e DealChangeRequestUpdated(changeRequestID indexed uint256)
func (_Market *MarketFilterer) WatchDealChangeRequestUpdated(opts *bind.WatchOpts, sink chan<- *MarketDealChangeRequestUpdated, changeRequestID []*big.Int) (event.Subscription, error) {

	var changeRequestIDRule []interface{}
	for _, changeRequestIDItem := range changeRequestID {
		changeRequestIDRule = append(changeRequestIDRule, changeRequestIDItem)
	}

	logs, sub, err := _Market.contract.WatchLogs(opts, "DealChangeRequestUpdated", changeRequestIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketDealChangeRequestUpdated)
				if err := _Market.contract.UnpackLog(event, "DealChangeRequestUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MarketDealOpenedIterator is returned from FilterDealOpened and is used to iterate over the raw logs and unpacked data for DealOpened events raised by the Market contract.
type MarketDealOpenedIterator struct {
	Event *MarketDealOpened // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketDealOpenedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketDealOpened)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketDealOpened)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketDealOpenedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketDealOpenedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketDealOpened represents a DealOpened event raised by the Market contract.
type MarketDealOpened struct {
	DealID *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterDealOpened is a free log retrieval operation binding the contract event 0xb9ffc65567b7238dd641372277b8c93ed03df73945932dd84fd3cbb33f3eddbf.
//
// Solidity: e DealOpened(dealID indexed uint256)
func (_Market *MarketFilterer) FilterDealOpened(opts *bind.FilterOpts, dealID []*big.Int) (*MarketDealOpenedIterator, error) {

	var dealIDRule []interface{}
	for _, dealIDItem := range dealID {
		dealIDRule = append(dealIDRule, dealIDItem)
	}

	logs, sub, err := _Market.contract.FilterLogs(opts, "DealOpened", dealIDRule)
	if err != nil {
		return nil, err
	}
	return &MarketDealOpenedIterator{contract: _Market.contract, event: "DealOpened", logs: logs, sub: sub}, nil
}

// WatchDealOpened is a free log subscription operation binding the contract event 0xb9ffc65567b7238dd641372277b8c93ed03df73945932dd84fd3cbb33f3eddbf.
//
// Solidity: e DealOpened(dealID indexed uint256)
func (_Market *MarketFilterer) WatchDealOpened(opts *bind.WatchOpts, sink chan<- *MarketDealOpened, dealID []*big.Int) (event.Subscription, error) {

	var dealIDRule []interface{}
	for _, dealIDItem := range dealID {
		dealIDRule = append(dealIDRule, dealIDItem)
	}

	logs, sub, err := _Market.contract.WatchLogs(opts, "DealOpened", dealIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketDealOpened)
				if err := _Market.contract.UnpackLog(event, "DealOpened", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MarketDealUpdatedIterator is returned from FilterDealUpdated and is used to iterate over the raw logs and unpacked data for DealUpdated events raised by the Market contract.
type MarketDealUpdatedIterator struct {
	Event *MarketDealUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketDealUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketDealUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketDealUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketDealUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketDealUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketDealUpdated represents a DealUpdated event raised by the Market contract.
type MarketDealUpdated struct {
	DealID *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterDealUpdated is a free log retrieval operation binding the contract event 0x0b27183934cfdbeb1fbbe288c2e163ed7aa8f458a954054970f78446bccb36e0.
//
// Solidity: e DealUpdated(dealID indexed uint256)
func (_Market *MarketFilterer) FilterDealUpdated(opts *bind.FilterOpts, dealID []*big.Int) (*MarketDealUpdatedIterator, error) {

	var dealIDRule []interface{}
	for _, dealIDItem := range dealID {
		dealIDRule = append(dealIDRule, dealIDItem)
	}

	logs, sub, err := _Market.contract.FilterLogs(opts, "DealUpdated", dealIDRule)
	if err != nil {
		return nil, err
	}
	return &MarketDealUpdatedIterator{contract: _Market.contract, event: "DealUpdated", logs: logs, sub: sub}, nil
}

// WatchDealUpdated is a free log subscription operation binding the contract event 0x0b27183934cfdbeb1fbbe288c2e163ed7aa8f458a954054970f78446bccb36e0.
//
// Solidity: e DealUpdated(dealID indexed uint256)
func (_Market *MarketFilterer) WatchDealUpdated(opts *bind.WatchOpts, sink chan<- *MarketDealUpdated, dealID []*big.Int) (event.Subscription, error) {

	var dealIDRule []interface{}
	for _, dealIDItem := range dealID {
		dealIDRule = append(dealIDRule, dealIDItem)
	}

	logs, sub, err := _Market.contract.WatchLogs(opts, "DealUpdated", dealIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketDealUpdated)
				if err := _Market.contract.UnpackLog(event, "DealUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MarketNumBenchmarksUpdatedIterator is returned from FilterNumBenchmarksUpdated and is used to iterate over the raw logs and unpacked data for NumBenchmarksUpdated events raised by the Market contract.
type MarketNumBenchmarksUpdatedIterator struct {
	Event *MarketNumBenchmarksUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketNumBenchmarksUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketNumBenchmarksUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketNumBenchmarksUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketNumBenchmarksUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketNumBenchmarksUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketNumBenchmarksUpdated represents a NumBenchmarksUpdated event raised by the Market contract.
type MarketNumBenchmarksUpdated struct {
	NewNum *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterNumBenchmarksUpdated is a free log retrieval operation binding the contract event 0x1acf16d0a0451282e1d2cac3f5473ca7c931bcda610ff6e061041af50e2abc13.
//
// Solidity: e NumBenchmarksUpdated(newNum indexed uint256)
func (_Market *MarketFilterer) FilterNumBenchmarksUpdated(opts *bind.FilterOpts, newNum []*big.Int) (*MarketNumBenchmarksUpdatedIterator, error) {

	var newNumRule []interface{}
	for _, newNumItem := range newNum {
		newNumRule = append(newNumRule, newNumItem)
	}

	logs, sub, err := _Market.contract.FilterLogs(opts, "NumBenchmarksUpdated", newNumRule)
	if err != nil {
		return nil, err
	}
	return &MarketNumBenchmarksUpdatedIterator{contract: _Market.contract, event: "NumBenchmarksUpdated", logs: logs, sub: sub}, nil
}

// WatchNumBenchmarksUpdated is a free log subscription operation binding the contract event 0x1acf16d0a0451282e1d2cac3f5473ca7c931bcda610ff6e061041af50e2abc13.
//
// Solidity: e NumBenchmarksUpdated(newNum indexed uint256)
func (_Market *MarketFilterer) WatchNumBenchmarksUpdated(opts *bind.WatchOpts, sink chan<- *MarketNumBenchmarksUpdated, newNum []*big.Int) (event.Subscription, error) {

	var newNumRule []interface{}
	for _, newNumItem := range newNum {
		newNumRule = append(newNumRule, newNumItem)
	}

	logs, sub, err := _Market.contract.WatchLogs(opts, "NumBenchmarksUpdated", newNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketNumBenchmarksUpdated)
				if err := _Market.contract.UnpackLog(event, "NumBenchmarksUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MarketNumNetflagsUpdatedIterator is returned from FilterNumNetflagsUpdated and is used to iterate over the raw logs and unpacked data for NumNetflagsUpdated events raised by the Market contract.
type MarketNumNetflagsUpdatedIterator struct {
	Event *MarketNumNetflagsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketNumNetflagsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketNumNetflagsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketNumNetflagsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketNumNetflagsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketNumNetflagsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketNumNetflagsUpdated represents a NumNetflagsUpdated event raised by the Market contract.
type MarketNumNetflagsUpdated struct {
	NewNum *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterNumNetflagsUpdated is a free log retrieval operation binding the contract event 0x1bd10793763c43c1a677f0975376032cebc657fd07cfd7c58ded8e8cce79f1c4.
//
// Solidity: e NumNetflagsUpdated(newNum indexed uint256)
func (_Market *MarketFilterer) FilterNumNetflagsUpdated(opts *bind.FilterOpts, newNum []*big.Int) (*MarketNumNetflagsUpdatedIterator, error) {

	var newNumRule []interface{}
	for _, newNumItem := range newNum {
		newNumRule = append(newNumRule, newNumItem)
	}

	logs, sub, err := _Market.contract.FilterLogs(opts, "NumNetflagsUpdated", newNumRule)
	if err != nil {
		return nil, err
	}
	return &MarketNumNetflagsUpdatedIterator{contract: _Market.contract, event: "NumNetflagsUpdated", logs: logs, sub: sub}, nil
}

// WatchNumNetflagsUpdated is a free log subscription operation binding the contract event 0x1bd10793763c43c1a677f0975376032cebc657fd07cfd7c58ded8e8cce79f1c4.
//
// Solidity: e NumNetflagsUpdated(newNum indexed uint256)
func (_Market *MarketFilterer) WatchNumNetflagsUpdated(opts *bind.WatchOpts, sink chan<- *MarketNumNetflagsUpdated, newNum []*big.Int) (event.Subscription, error) {

	var newNumRule []interface{}
	for _, newNumItem := range newNum {
		newNumRule = append(newNumRule, newNumItem)
	}

	logs, sub, err := _Market.contract.WatchLogs(opts, "NumNetflagsUpdated", newNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketNumNetflagsUpdated)
				if err := _Market.contract.UnpackLog(event, "NumNetflagsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MarketOrderPlacedIterator is returned from FilterOrderPlaced and is used to iterate over the raw logs and unpacked data for OrderPlaced events raised by the Market contract.
type MarketOrderPlacedIterator struct {
	Event *MarketOrderPlaced // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketOrderPlacedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketOrderPlaced)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketOrderPlaced)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketOrderPlacedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketOrderPlacedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketOrderPlaced represents a OrderPlaced event raised by the Market contract.
type MarketOrderPlaced struct {
	OrderID *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterOrderPlaced is a free log retrieval operation binding the contract event 0xffa896d8919f0556f53ace1395617969a3b53ab5271a085e28ac0c4a3724e63d.
//
// Solidity: e OrderPlaced(orderID indexed uint256)
func (_Market *MarketFilterer) FilterOrderPlaced(opts *bind.FilterOpts, orderID []*big.Int) (*MarketOrderPlacedIterator, error) {

	var orderIDRule []interface{}
	for _, orderIDItem := range orderID {
		orderIDRule = append(orderIDRule, orderIDItem)
	}

	logs, sub, err := _Market.contract.FilterLogs(opts, "OrderPlaced", orderIDRule)
	if err != nil {
		return nil, err
	}
	return &MarketOrderPlacedIterator{contract: _Market.contract, event: "OrderPlaced", logs: logs, sub: sub}, nil
}

// WatchOrderPlaced is a free log subscription operation binding the contract event 0xffa896d8919f0556f53ace1395617969a3b53ab5271a085e28ac0c4a3724e63d.
//
// Solidity: e OrderPlaced(orderID indexed uint256)
func (_Market *MarketFilterer) WatchOrderPlaced(opts *bind.WatchOpts, sink chan<- *MarketOrderPlaced, orderID []*big.Int) (event.Subscription, error) {

	var orderIDRule []interface{}
	for _, orderIDItem := range orderID {
		orderIDRule = append(orderIDRule, orderIDItem)
	}

	logs, sub, err := _Market.contract.WatchLogs(opts, "OrderPlaced", orderIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketOrderPlaced)
				if err := _Market.contract.UnpackLog(event, "OrderPlaced", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MarketOrderUpdatedIterator is returned from FilterOrderUpdated and is used to iterate over the raw logs and unpacked data for OrderUpdated events raised by the Market contract.
type MarketOrderUpdatedIterator struct {
	Event *MarketOrderUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketOrderUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketOrderUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketOrderUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketOrderUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketOrderUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketOrderUpdated represents a OrderUpdated event raised by the Market contract.
type MarketOrderUpdated struct {
	OrderID *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterOrderUpdated is a free log retrieval operation binding the contract event 0xb8b459bc0688c37baf5f735d17f1711684bc14ab7db116f88bc18bf409b9309a.
//
// Solidity: e OrderUpdated(orderID indexed uint256)
func (_Market *MarketFilterer) FilterOrderUpdated(opts *bind.FilterOpts, orderID []*big.Int) (*MarketOrderUpdatedIterator, error) {

	var orderIDRule []interface{}
	for _, orderIDItem := range orderID {
		orderIDRule = append(orderIDRule, orderIDItem)
	}

	logs, sub, err := _Market.contract.FilterLogs(opts, "OrderUpdated", orderIDRule)
	if err != nil {
		return nil, err
	}
	return &MarketOrderUpdatedIterator{contract: _Market.contract, event: "OrderUpdated", logs: logs, sub: sub}, nil
}

// WatchOrderUpdated is a free log subscription operation binding the contract event 0xb8b459bc0688c37baf5f735d17f1711684bc14ab7db116f88bc18bf409b9309a.
//
// Solidity: e OrderUpdated(orderID indexed uint256)
func (_Market *MarketFilterer) WatchOrderUpdated(opts *bind.WatchOpts, sink chan<- *MarketOrderUpdated, orderID []*big.Int) (event.Subscription, error) {

	var orderIDRule []interface{}
	for _, orderIDItem := range orderID {
		orderIDRule = append(orderIDRule, orderIDItem)
	}

	logs, sub, err := _Market.contract.WatchLogs(opts, "OrderUpdated", orderIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketOrderUpdated)
				if err := _Market.contract.UnpackLog(event, "OrderUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MarketOwnershipRenouncedIterator is returned from FilterOwnershipRenounced and is used to iterate over the raw logs and unpacked data for OwnershipRenounced events raised by the Market contract.
type MarketOwnershipRenouncedIterator struct {
	Event *MarketOwnershipRenounced // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketOwnershipRenouncedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketOwnershipRenounced)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketOwnershipRenounced)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketOwnershipRenouncedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketOwnershipRenouncedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketOwnershipRenounced represents a OwnershipRenounced event raised by the Market contract.
type MarketOwnershipRenounced struct {
	PreviousOwner common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipRenounced is a free log retrieval operation binding the contract event 0xf8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c64820.
//
// Solidity: e OwnershipRenounced(previousOwner indexed address)
func (_Market *MarketFilterer) FilterOwnershipRenounced(opts *bind.FilterOpts, previousOwner []common.Address) (*MarketOwnershipRenouncedIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}

	logs, sub, err := _Market.contract.FilterLogs(opts, "OwnershipRenounced", previousOwnerRule)
	if err != nil {
		return nil, err
	}
	return &MarketOwnershipRenouncedIterator{contract: _Market.contract, event: "OwnershipRenounced", logs: logs, sub: sub}, nil
}

// WatchOwnershipRenounced is a free log subscription operation binding the contract event 0xf8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c64820.
//
// Solidity: e OwnershipRenounced(previousOwner indexed address)
func (_Market *MarketFilterer) WatchOwnershipRenounced(opts *bind.WatchOpts, sink chan<- *MarketOwnershipRenounced, previousOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}

	logs, sub, err := _Market.contract.WatchLogs(opts, "OwnershipRenounced", previousOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketOwnershipRenounced)
				if err := _Market.contract.UnpackLog(event, "OwnershipRenounced", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MarketOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Market contract.
type MarketOwnershipTransferredIterator struct {
	Event *MarketOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketOwnershipTransferred represents a OwnershipTransferred event raised by the Market contract.
type MarketOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: e OwnershipTransferred(previousOwner indexed address, newOwner indexed address)
func (_Market *MarketFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*MarketOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Market.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &MarketOwnershipTransferredIterator{contract: _Market.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: e OwnershipTransferred(previousOwner indexed address, newOwner indexed address)
func (_Market *MarketFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *MarketOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Market.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketOwnershipTransferred)
				if err := _Market.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MarketPauseIterator is returned from FilterPause and is used to iterate over the raw logs and unpacked data for Pause events raised by the Market contract.
type MarketPauseIterator struct {
	Event *MarketPause // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketPauseIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketPause)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketPause)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketPauseIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketPauseIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketPause represents a Pause event raised by the Market contract.
type MarketPause struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterPause is a free log retrieval operation binding the contract event 0x6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff625.
//
// Solidity: e Pause()
func (_Market *MarketFilterer) FilterPause(opts *bind.FilterOpts) (*MarketPauseIterator, error) {

	logs, sub, err := _Market.contract.FilterLogs(opts, "Pause")
	if err != nil {
		return nil, err
	}
	return &MarketPauseIterator{contract: _Market.contract, event: "Pause", logs: logs, sub: sub}, nil
}

// WatchPause is a free log subscription operation binding the contract event 0x6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff625.
//
// Solidity: e Pause()
func (_Market *MarketFilterer) WatchPause(opts *bind.WatchOpts, sink chan<- *MarketPause) (event.Subscription, error) {

	logs, sub, err := _Market.contract.WatchLogs(opts, "Pause")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketPause)
				if err := _Market.contract.UnpackLog(event, "Pause", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MarketUnpauseIterator is returned from FilterUnpause and is used to iterate over the raw logs and unpacked data for Unpause events raised by the Market contract.
type MarketUnpauseIterator struct {
	Event *MarketUnpause // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketUnpauseIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketUnpause)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketUnpause)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketUnpauseIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketUnpauseIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketUnpause represents a Unpause event raised by the Market contract.
type MarketUnpause struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterUnpause is a free log retrieval operation binding the contract event 0x7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b33.
//
// Solidity: e Unpause()
func (_Market *MarketFilterer) FilterUnpause(opts *bind.FilterOpts) (*MarketUnpauseIterator, error) {

	logs, sub, err := _Market.contract.FilterLogs(opts, "Unpause")
	if err != nil {
		return nil, err
	}
	return &MarketUnpauseIterator{contract: _Market.contract, event: "Unpause", logs: logs, sub: sub}, nil
}

// WatchUnpause is a free log subscription operation binding the contract event 0x7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b33.
//
// Solidity: e Unpause()
func (_Market *MarketFilterer) WatchUnpause(opts *bind.WatchOpts, sink chan<- *MarketUnpause) (event.Subscription, error) {

	logs, sub, err := _Market.contract.WatchLogs(opts, "Unpause")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketUnpause)
				if err := _Market.contract.UnpackLog(event, "Unpause", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MarketWorkerAnnouncedIterator is returned from FilterWorkerAnnounced and is used to iterate over the raw logs and unpacked data for WorkerAnnounced events raised by the Market contract.
type MarketWorkerAnnouncedIterator struct {
	Event *MarketWorkerAnnounced // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketWorkerAnnouncedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketWorkerAnnounced)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketWorkerAnnounced)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketWorkerAnnouncedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketWorkerAnnouncedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketWorkerAnnounced represents a WorkerAnnounced event raised by the Market contract.
type MarketWorkerAnnounced struct {
	Worker common.Address
	Master common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWorkerAnnounced is a free log retrieval operation binding the contract event 0xe398d33bf7e881cdfc9f34c743822904d4e45a0be0db740dd88cb132e4ce2ed9.
//
// Solidity: e WorkerAnnounced(worker indexed address, master indexed address)
func (_Market *MarketFilterer) FilterWorkerAnnounced(opts *bind.FilterOpts, worker []common.Address, master []common.Address) (*MarketWorkerAnnouncedIterator, error) {

	var workerRule []interface{}
	for _, workerItem := range worker {
		workerRule = append(workerRule, workerItem)
	}
	var masterRule []interface{}
	for _, masterItem := range master {
		masterRule = append(masterRule, masterItem)
	}

	logs, sub, err := _Market.contract.FilterLogs(opts, "WorkerAnnounced", workerRule, masterRule)
	if err != nil {
		return nil, err
	}
	return &MarketWorkerAnnouncedIterator{contract: _Market.contract, event: "WorkerAnnounced", logs: logs, sub: sub}, nil
}

// WatchWorkerAnnounced is a free log subscription operation binding the contract event 0xe398d33bf7e881cdfc9f34c743822904d4e45a0be0db740dd88cb132e4ce2ed9.
//
// Solidity: e WorkerAnnounced(worker indexed address, master indexed address)
func (_Market *MarketFilterer) WatchWorkerAnnounced(opts *bind.WatchOpts, sink chan<- *MarketWorkerAnnounced, worker []common.Address, master []common.Address) (event.Subscription, error) {

	var workerRule []interface{}
	for _, workerItem := range worker {
		workerRule = append(workerRule, workerItem)
	}
	var masterRule []interface{}
	for _, masterItem := range master {
		masterRule = append(masterRule, masterItem)
	}

	logs, sub, err := _Market.contract.WatchLogs(opts, "WorkerAnnounced", workerRule, masterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketWorkerAnnounced)
				if err := _Market.contract.UnpackLog(event, "WorkerAnnounced", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MarketWorkerConfirmedIterator is returned from FilterWorkerConfirmed and is used to iterate over the raw logs and unpacked data for WorkerConfirmed events raised by the Market contract.
type MarketWorkerConfirmedIterator struct {
	Event *MarketWorkerConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketWorkerConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketWorkerConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketWorkerConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketWorkerConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketWorkerConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketWorkerConfirmed represents a WorkerConfirmed event raised by the Market contract.
type MarketWorkerConfirmed struct {
	Worker common.Address
	Master common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWorkerConfirmed is a free log retrieval operation binding the contract event 0x4940ef08d5aed63b7d3d3db293d69d6ed1d624995b90e9e944839c8ea0ae450d.
//
// Solidity: e WorkerConfirmed(worker indexed address, master indexed address)
func (_Market *MarketFilterer) FilterWorkerConfirmed(opts *bind.FilterOpts, worker []common.Address, master []common.Address) (*MarketWorkerConfirmedIterator, error) {

	var workerRule []interface{}
	for _, workerItem := range worker {
		workerRule = append(workerRule, workerItem)
	}
	var masterRule []interface{}
	for _, masterItem := range master {
		masterRule = append(masterRule, masterItem)
	}

	logs, sub, err := _Market.contract.FilterLogs(opts, "WorkerConfirmed", workerRule, masterRule)
	if err != nil {
		return nil, err
	}
	return &MarketWorkerConfirmedIterator{contract: _Market.contract, event: "WorkerConfirmed", logs: logs, sub: sub}, nil
}

// WatchWorkerConfirmed is a free log subscription operation binding the contract event 0x4940ef08d5aed63b7d3d3db293d69d6ed1d624995b90e9e944839c8ea0ae450d.
//
// Solidity: e WorkerConfirmed(worker indexed address, master indexed address)
func (_Market *MarketFilterer) WatchWorkerConfirmed(opts *bind.WatchOpts, sink chan<- *MarketWorkerConfirmed, worker []common.Address, master []common.Address) (event.Subscription, error) {

	var workerRule []interface{}
	for _, workerItem := range worker {
		workerRule = append(workerRule, workerItem)
	}
	var masterRule []interface{}
	for _, masterItem := range master {
		masterRule = append(masterRule, masterItem)
	}

	logs, sub, err := _Market.contract.WatchLogs(opts, "WorkerConfirmed", workerRule, masterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketWorkerConfirmed)
				if err := _Market.contract.UnpackLog(event, "WorkerConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MarketWorkerRemovedIterator is returned from FilterWorkerRemoved and is used to iterate over the raw logs and unpacked data for WorkerRemoved events raised by the Market contract.
type MarketWorkerRemovedIterator struct {
	Event *MarketWorkerRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketWorkerRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketWorkerRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketWorkerRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketWorkerRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketWorkerRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketWorkerRemoved represents a WorkerRemoved event raised by the Market contract.
type MarketWorkerRemoved struct {
	Worker common.Address
	Master common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWorkerRemoved is a free log retrieval operation binding the contract event 0x7822736ed69a5fe0ad6dc2c6669e8053495d711118e5435b047f9b83deda4c37.
//
// Solidity: e WorkerRemoved(worker indexed address, master indexed address)
func (_Market *MarketFilterer) FilterWorkerRemoved(opts *bind.FilterOpts, worker []common.Address, master []common.Address) (*MarketWorkerRemovedIterator, error) {

	var workerRule []interface{}
	for _, workerItem := range worker {
		workerRule = append(workerRule, workerItem)
	}
	var masterRule []interface{}
	for _, masterItem := range master {
		masterRule = append(masterRule, masterItem)
	}

	logs, sub, err := _Market.contract.FilterLogs(opts, "WorkerRemoved", workerRule, masterRule)
	if err != nil {
		return nil, err
	}
	return &MarketWorkerRemovedIterator{contract: _Market.contract, event: "WorkerRemoved", logs: logs, sub: sub}, nil
}

// WatchWorkerRemoved is a free log subscription operation binding the contract event 0x7822736ed69a5fe0ad6dc2c6669e8053495d711118e5435b047f9b83deda4c37.
//
// Solidity: e WorkerRemoved(worker indexed address, master indexed address)
func (_Market *MarketFilterer) WatchWorkerRemoved(opts *bind.WatchOpts, sink chan<- *MarketWorkerRemoved, worker []common.Address, master []common.Address) (event.Subscription, error) {

	var workerRule []interface{}
	for _, workerItem := range worker {
		workerRule = append(workerRule, workerItem)
	}
	var masterRule []interface{}
	for _, masterItem := range master {
		masterRule = append(masterRule, masterItem)
	}

	logs, sub, err := _Market.contract.WatchLogs(opts, "WorkerRemoved", workerRule, masterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketWorkerRemoved)
				if err := _Market.contract.UnpackLog(event, "WorkerRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
