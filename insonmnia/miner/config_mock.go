// Code generated by MockGen. DO NOT EDIT.
// Source: insonmnia/miner/config.go

package miner

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockConfig is a mock of Config interface
type MockConfig struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMockRecorder
}

// MockConfigMockRecorder is the mock recorder for MockConfig
type MockConfigMockRecorder struct {
	mock *MockConfig
}

// NewMockConfig creates a new mock instance
func NewMockConfig(ctrl *gomock.Controller) *MockConfig {
	mock := &MockConfig{ctrl: ctrl}
	mock.recorder = &MockConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockConfig) EXPECT() *MockConfigMockRecorder {
	return _m.recorder
}

// HubEndpoint mocks base method
func (_m *MockConfig) HubEndpoint() string {
	ret := _m.ctrl.Call(_m, "HubEndpoint")
	ret0, _ := ret[0].(string)
	return ret0
}

// HubEndpoint indicates an expected call of HubEndpoint
func (_mr *MockConfigMockRecorder) HubEndpoint() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "HubEndpoint", reflect.TypeOf((*MockConfig)(nil).HubEndpoint))
}

// Logging mocks base method
func (_m *MockConfig) Logging() LoggingConfig {
	ret := _m.ctrl.Call(_m, "Logging")
	ret0, _ := ret[0].(LoggingConfig)
	return ret0
}

// Logging indicates an expected call of Logging
func (_mr *MockConfigMockRecorder) Logging() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Logging", reflect.TypeOf((*MockConfig)(nil).Logging))
}
