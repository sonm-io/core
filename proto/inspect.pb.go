// Code generated by protoc-gen-go. DO NOT EDIT.
// source: inspect.proto

package sonm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type InspectConfigRequest struct {
}

func (m *InspectConfigRequest) Reset()                    { *m = InspectConfigRequest{} }
func (m *InspectConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*InspectConfigRequest) ProtoMessage()               {}
func (*InspectConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{0} }

type InspectConfigResponse struct {
	// Config represents JSON encoded configuration of the inspected entity.
	Config []byte `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *InspectConfigResponse) Reset()                    { *m = InspectConfigResponse{} }
func (m *InspectConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*InspectConfigResponse) ProtoMessage()               {}
func (*InspectConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{1} }

func (m *InspectConfigResponse) GetConfig() []byte {
	if m != nil {
		return m.Config
	}
	return nil
}

type InspectOpenFilesRequest struct {
}

func (m *InspectOpenFilesRequest) Reset()                    { *m = InspectOpenFilesRequest{} }
func (m *InspectOpenFilesRequest) String() string            { return proto.CompactTextString(m) }
func (*InspectOpenFilesRequest) ProtoMessage()               {}
func (*InspectOpenFilesRequest) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{2} }

type InspectOpenFilesResponse struct {
	OpenFiles []*FileStat `protobuf:"bytes,1,rep,name=openFiles" json:"openFiles,omitempty"`
}

func (m *InspectOpenFilesResponse) Reset()                    { *m = InspectOpenFilesResponse{} }
func (m *InspectOpenFilesResponse) String() string            { return proto.CompactTextString(m) }
func (*InspectOpenFilesResponse) ProtoMessage()               {}
func (*InspectOpenFilesResponse) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{3} }

func (m *InspectOpenFilesResponse) GetOpenFiles() []*FileStat {
	if m != nil {
		return m.OpenFiles
	}
	return nil
}

type FileStat struct {
	// Fd shows the file descriptor number.
	Fd uint64 `protobuf:"varint,1,opt,name=fd" json:"fd,omitempty"`
	// Path shows either real path on the filesystem or its description if the
	// file is not a real file, i.e. a socket for example.
	Path string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
}

func (m *FileStat) Reset()                    { *m = FileStat{} }
func (m *FileStat) String() string            { return proto.CompactTextString(m) }
func (*FileStat) ProtoMessage()               {}
func (*FileStat) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{4} }

func (m *FileStat) GetFd() uint64 {
	if m != nil {
		return m.Fd
	}
	return 0
}

func (m *FileStat) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type InspectNetworkRequest struct {
}

func (m *InspectNetworkRequest) Reset()                    { *m = InspectNetworkRequest{} }
func (m *InspectNetworkRequest) String() string            { return proto.CompactTextString(m) }
func (*InspectNetworkRequest) ProtoMessage()               {}
func (*InspectNetworkRequest) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{5} }

type InspectNetworkResponse struct {
	Interfaces  []*InterfaceStat  `protobuf:"bytes,1,rep,name=interfaces" json:"interfaces,omitempty"`
	Connections []*ConnectionStat `protobuf:"bytes,2,rep,name=connections" json:"connections,omitempty"`
}

func (m *InspectNetworkResponse) Reset()                    { *m = InspectNetworkResponse{} }
func (m *InspectNetworkResponse) String() string            { return proto.CompactTextString(m) }
func (*InspectNetworkResponse) ProtoMessage()               {}
func (*InspectNetworkResponse) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{6} }

func (m *InspectNetworkResponse) GetInterfaces() []*InterfaceStat {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

func (m *InspectNetworkResponse) GetConnections() []*ConnectionStat {
	if m != nil {
		return m.Connections
	}
	return nil
}

type InterfaceStat struct {
	// MTU represents the maximum transmission unit.
	Mtu int32 `protobuf:"varint,1,opt,name=mtu" json:"mtu,omitempty"`
	// Name represents the network interface name, for example "en0", "lo0", "eth0.100".
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// HardwareAddr is the interface address in IEEE MAC-48, EUI-48 and EUI-64 form.
	HardwareAddr string `protobuf:"bytes,3,opt,name=hardwareAddr" json:"hardwareAddr,omitempty"`
	// Flags provides additional interface info, like FlagUp, FlagLoopback, FlagMulticast.
	Flags []string `protobuf:"bytes,4,rep,name=flags" json:"flags,omitempty"`
	// Addrs represents IP addresses and its subnet assigned to this interface.
	Addrs []string `protobuf:"bytes,5,rep,name=addrs" json:"addrs,omitempty"`
}

func (m *InterfaceStat) Reset()                    { *m = InterfaceStat{} }
func (m *InterfaceStat) String() string            { return proto.CompactTextString(m) }
func (*InterfaceStat) ProtoMessage()               {}
func (*InterfaceStat) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{7} }

func (m *InterfaceStat) GetMtu() int32 {
	if m != nil {
		return m.Mtu
	}
	return 0
}

func (m *InterfaceStat) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InterfaceStat) GetHardwareAddr() string {
	if m != nil {
		return m.HardwareAddr
	}
	return ""
}

func (m *InterfaceStat) GetFlags() []string {
	if m != nil {
		return m.Flags
	}
	return nil
}

func (m *InterfaceStat) GetAddrs() []string {
	if m != nil {
		return m.Addrs
	}
	return nil
}

type ConnectionStat struct {
	// Fd shows the file descriptor number.
	Fd         uint64      `protobuf:"varint,1,opt,name=fd" json:"fd,omitempty"`
	Family     uint32      `protobuf:"varint,2,opt,name=family" json:"family,omitempty"`
	Type       uint32      `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
	LocalAddr  *SocketAddr `protobuf:"bytes,4,opt,name=localAddr" json:"localAddr,omitempty"`
	RemoteAddr *SocketAddr `protobuf:"bytes,5,opt,name=remoteAddr" json:"remoteAddr,omitempty"`
	Status     string      `protobuf:"bytes,6,opt,name=status" json:"status,omitempty"`
	Pid        int32       `protobuf:"varint,7,opt,name=pid" json:"pid,omitempty"`
}

func (m *ConnectionStat) Reset()                    { *m = ConnectionStat{} }
func (m *ConnectionStat) String() string            { return proto.CompactTextString(m) }
func (*ConnectionStat) ProtoMessage()               {}
func (*ConnectionStat) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{8} }

func (m *ConnectionStat) GetFd() uint64 {
	if m != nil {
		return m.Fd
	}
	return 0
}

func (m *ConnectionStat) GetFamily() uint32 {
	if m != nil {
		return m.Family
	}
	return 0
}

func (m *ConnectionStat) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ConnectionStat) GetLocalAddr() *SocketAddr {
	if m != nil {
		return m.LocalAddr
	}
	return nil
}

func (m *ConnectionStat) GetRemoteAddr() *SocketAddr {
	if m != nil {
		return m.RemoteAddr
	}
	return nil
}

func (m *ConnectionStat) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ConnectionStat) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

type InspectDockerInfoRequest struct {
}

func (m *InspectDockerInfoRequest) Reset()                    { *m = InspectDockerInfoRequest{} }
func (m *InspectDockerInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*InspectDockerInfoRequest) ProtoMessage()               {}
func (*InspectDockerInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{9} }

type InspectDockerInfoResponse struct {
	Info []byte `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *InspectDockerInfoResponse) Reset()                    { *m = InspectDockerInfoResponse{} }
func (m *InspectDockerInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*InspectDockerInfoResponse) ProtoMessage()               {}
func (*InspectDockerInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{10} }

func (m *InspectDockerInfoResponse) GetInfo() []byte {
	if m != nil {
		return m.Info
	}
	return nil
}

type InspectDockerNetworkRequest struct {
}

func (m *InspectDockerNetworkRequest) Reset()                    { *m = InspectDockerNetworkRequest{} }
func (m *InspectDockerNetworkRequest) String() string            { return proto.CompactTextString(m) }
func (*InspectDockerNetworkRequest) ProtoMessage()               {}
func (*InspectDockerNetworkRequest) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{11} }

type InspectDockerNetworkResponse struct {
	Info []byte `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *InspectDockerNetworkResponse) Reset()                    { *m = InspectDockerNetworkResponse{} }
func (m *InspectDockerNetworkResponse) String() string            { return proto.CompactTextString(m) }
func (*InspectDockerNetworkResponse) ProtoMessage()               {}
func (*InspectDockerNetworkResponse) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{12} }

func (m *InspectDockerNetworkResponse) GetInfo() []byte {
	if m != nil {
		return m.Info
	}
	return nil
}

type InspectDockerVolumesRequest struct {
}

func (m *InspectDockerVolumesRequest) Reset()                    { *m = InspectDockerVolumesRequest{} }
func (m *InspectDockerVolumesRequest) String() string            { return proto.CompactTextString(m) }
func (*InspectDockerVolumesRequest) ProtoMessage()               {}
func (*InspectDockerVolumesRequest) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{13} }

type InspectDockerVolumesResponse struct {
	Info []byte `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *InspectDockerVolumesResponse) Reset()                    { *m = InspectDockerVolumesResponse{} }
func (m *InspectDockerVolumesResponse) String() string            { return proto.CompactTextString(m) }
func (*InspectDockerVolumesResponse) ProtoMessage()               {}
func (*InspectDockerVolumesResponse) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{14} }

func (m *InspectDockerVolumesResponse) GetInfo() []byte {
	if m != nil {
		return m.Info
	}
	return nil
}

type InspectHostInfoRequest struct {
}

func (m *InspectHostInfoRequest) Reset()                    { *m = InspectHostInfoRequest{} }
func (m *InspectHostInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*InspectHostInfoRequest) ProtoMessage()               {}
func (*InspectHostInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{15} }

type InspectHostInfoResponse struct {
	Hostname             string `protobuf:"bytes,1,opt,name=hostname" json:"hostname,omitempty"`
	Uptime               uint64 `protobuf:"varint,2,opt,name=uptime" json:"uptime,omitempty"`
	BootTime             uint64 `protobuf:"varint,3,opt,name=bootTime" json:"bootTime,omitempty"`
	ProcessesNumber      uint64 `protobuf:"varint,4,opt,name=processesNumber" json:"processesNumber,omitempty"`
	Os                   string `protobuf:"bytes,5,opt,name=os" json:"os,omitempty"`
	Platform             string `protobuf:"bytes,6,opt,name=platform" json:"platform,omitempty"`
	PlatformFamily       string `protobuf:"bytes,7,opt,name=platformFamily" json:"platformFamily,omitempty"`
	PlatformVersion      string `protobuf:"bytes,8,opt,name=platformVersion" json:"platformVersion,omitempty"`
	KernelVersion        string `protobuf:"bytes,9,opt,name=kernelVersion" json:"kernelVersion,omitempty"`
	VirtualizationSystem string `protobuf:"bytes,10,opt,name=virtualizationSystem" json:"virtualizationSystem,omitempty"`
	VirtualizationRole   string `protobuf:"bytes,11,opt,name=virtualizationRole" json:"virtualizationRole,omitempty"`
	HostID               string `protobuf:"bytes,12,opt,name=hostID" json:"hostID,omitempty"`
}

func (m *InspectHostInfoResponse) Reset()                    { *m = InspectHostInfoResponse{} }
func (m *InspectHostInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*InspectHostInfoResponse) ProtoMessage()               {}
func (*InspectHostInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{16} }

func (m *InspectHostInfoResponse) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *InspectHostInfoResponse) GetUptime() uint64 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *InspectHostInfoResponse) GetBootTime() uint64 {
	if m != nil {
		return m.BootTime
	}
	return 0
}

func (m *InspectHostInfoResponse) GetProcessesNumber() uint64 {
	if m != nil {
		return m.ProcessesNumber
	}
	return 0
}

func (m *InspectHostInfoResponse) GetOs() string {
	if m != nil {
		return m.Os
	}
	return ""
}

func (m *InspectHostInfoResponse) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *InspectHostInfoResponse) GetPlatformFamily() string {
	if m != nil {
		return m.PlatformFamily
	}
	return ""
}

func (m *InspectHostInfoResponse) GetPlatformVersion() string {
	if m != nil {
		return m.PlatformVersion
	}
	return ""
}

func (m *InspectHostInfoResponse) GetKernelVersion() string {
	if m != nil {
		return m.KernelVersion
	}
	return ""
}

func (m *InspectHostInfoResponse) GetVirtualizationSystem() string {
	if m != nil {
		return m.VirtualizationSystem
	}
	return ""
}

func (m *InspectHostInfoResponse) GetVirtualizationRole() string {
	if m != nil {
		return m.VirtualizationRole
	}
	return ""
}

func (m *InspectHostInfoResponse) GetHostID() string {
	if m != nil {
		return m.HostID
	}
	return ""
}

type InspectWatchLogsRequest struct {
}

func (m *InspectWatchLogsRequest) Reset()                    { *m = InspectWatchLogsRequest{} }
func (m *InspectWatchLogsRequest) String() string            { return proto.CompactTextString(m) }
func (*InspectWatchLogsRequest) ProtoMessage()               {}
func (*InspectWatchLogsRequest) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{17} }

type InspectWatchLogsChunk struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *InspectWatchLogsChunk) Reset()                    { *m = InspectWatchLogsChunk{} }
func (m *InspectWatchLogsChunk) String() string            { return proto.CompactTextString(m) }
func (*InspectWatchLogsChunk) ProtoMessage()               {}
func (*InspectWatchLogsChunk) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{18} }

func (m *InspectWatchLogsChunk) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*InspectConfigRequest)(nil), "sonm.InspectConfigRequest")
	proto.RegisterType((*InspectConfigResponse)(nil), "sonm.InspectConfigResponse")
	proto.RegisterType((*InspectOpenFilesRequest)(nil), "sonm.InspectOpenFilesRequest")
	proto.RegisterType((*InspectOpenFilesResponse)(nil), "sonm.InspectOpenFilesResponse")
	proto.RegisterType((*FileStat)(nil), "sonm.FileStat")
	proto.RegisterType((*InspectNetworkRequest)(nil), "sonm.InspectNetworkRequest")
	proto.RegisterType((*InspectNetworkResponse)(nil), "sonm.InspectNetworkResponse")
	proto.RegisterType((*InterfaceStat)(nil), "sonm.InterfaceStat")
	proto.RegisterType((*ConnectionStat)(nil), "sonm.ConnectionStat")
	proto.RegisterType((*InspectDockerInfoRequest)(nil), "sonm.InspectDockerInfoRequest")
	proto.RegisterType((*InspectDockerInfoResponse)(nil), "sonm.InspectDockerInfoResponse")
	proto.RegisterType((*InspectDockerNetworkRequest)(nil), "sonm.InspectDockerNetworkRequest")
	proto.RegisterType((*InspectDockerNetworkResponse)(nil), "sonm.InspectDockerNetworkResponse")
	proto.RegisterType((*InspectDockerVolumesRequest)(nil), "sonm.InspectDockerVolumesRequest")
	proto.RegisterType((*InspectDockerVolumesResponse)(nil), "sonm.InspectDockerVolumesResponse")
	proto.RegisterType((*InspectHostInfoRequest)(nil), "sonm.InspectHostInfoRequest")
	proto.RegisterType((*InspectHostInfoResponse)(nil), "sonm.InspectHostInfoResponse")
	proto.RegisterType((*InspectWatchLogsRequest)(nil), "sonm.InspectWatchLogsRequest")
	proto.RegisterType((*InspectWatchLogsChunk)(nil), "sonm.InspectWatchLogsChunk")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Inspect service

type InspectClient interface {
	// Config returns the inspected server's configuration.
	Config(ctx context.Context, in *InspectConfigRequest, opts ...grpc.CallOption) (*InspectConfigResponse, error)
	// OpenFiles returns the list of open files of the inspected process.
	OpenFiles(ctx context.Context, in *InspectOpenFilesRequest, opts ...grpc.CallOption) (*InspectOpenFilesResponse, error)
	// Network returns host's network configuration and open connections of
	// the inspected process.
	Network(ctx context.Context, in *InspectNetworkRequest, opts ...grpc.CallOption) (*InspectNetworkResponse, error)
	// HostInfo returns information about inspected host.
	HostInfo(ctx context.Context, in *InspectHostInfoRequest, opts ...grpc.CallOption) (*InspectHostInfoResponse, error)
	// DockerInfo returns information about Docker on the inspected host.
	DockerInfo(ctx context.Context, in *InspectDockerInfoRequest, opts ...grpc.CallOption) (*InspectDockerInfoResponse, error)
	// DockerNetwork returns information about Docker network on the inspected
	// host.
	DockerNetwork(ctx context.Context, in *InspectDockerNetworkRequest, opts ...grpc.CallOption) (*InspectDockerNetworkResponse, error)
	// DockerVolumes returns information about Docker volumes on the inspected
	// host.
	DockerVolumes(ctx context.Context, in *InspectDockerVolumesRequest, opts ...grpc.CallOption) (*InspectDockerVolumesResponse, error)
	// WatchLogs subscribes for logs of the inspected process.
	WatchLogs(ctx context.Context, in *InspectWatchLogsRequest, opts ...grpc.CallOption) (Inspect_WatchLogsClient, error)
}

type inspectClient struct {
	cc *grpc.ClientConn
}

func NewInspectClient(cc *grpc.ClientConn) InspectClient {
	return &inspectClient{cc}
}

func (c *inspectClient) Config(ctx context.Context, in *InspectConfigRequest, opts ...grpc.CallOption) (*InspectConfigResponse, error) {
	out := new(InspectConfigResponse)
	err := grpc.Invoke(ctx, "/sonm.Inspect/Config", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inspectClient) OpenFiles(ctx context.Context, in *InspectOpenFilesRequest, opts ...grpc.CallOption) (*InspectOpenFilesResponse, error) {
	out := new(InspectOpenFilesResponse)
	err := grpc.Invoke(ctx, "/sonm.Inspect/OpenFiles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inspectClient) Network(ctx context.Context, in *InspectNetworkRequest, opts ...grpc.CallOption) (*InspectNetworkResponse, error) {
	out := new(InspectNetworkResponse)
	err := grpc.Invoke(ctx, "/sonm.Inspect/Network", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inspectClient) HostInfo(ctx context.Context, in *InspectHostInfoRequest, opts ...grpc.CallOption) (*InspectHostInfoResponse, error) {
	out := new(InspectHostInfoResponse)
	err := grpc.Invoke(ctx, "/sonm.Inspect/HostInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inspectClient) DockerInfo(ctx context.Context, in *InspectDockerInfoRequest, opts ...grpc.CallOption) (*InspectDockerInfoResponse, error) {
	out := new(InspectDockerInfoResponse)
	err := grpc.Invoke(ctx, "/sonm.Inspect/DockerInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inspectClient) DockerNetwork(ctx context.Context, in *InspectDockerNetworkRequest, opts ...grpc.CallOption) (*InspectDockerNetworkResponse, error) {
	out := new(InspectDockerNetworkResponse)
	err := grpc.Invoke(ctx, "/sonm.Inspect/DockerNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inspectClient) DockerVolumes(ctx context.Context, in *InspectDockerVolumesRequest, opts ...grpc.CallOption) (*InspectDockerVolumesResponse, error) {
	out := new(InspectDockerVolumesResponse)
	err := grpc.Invoke(ctx, "/sonm.Inspect/DockerVolumes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inspectClient) WatchLogs(ctx context.Context, in *InspectWatchLogsRequest, opts ...grpc.CallOption) (Inspect_WatchLogsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Inspect_serviceDesc.Streams[0], c.cc, "/sonm.Inspect/WatchLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &inspectWatchLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Inspect_WatchLogsClient interface {
	Recv() (*InspectWatchLogsChunk, error)
	grpc.ClientStream
}

type inspectWatchLogsClient struct {
	grpc.ClientStream
}

func (x *inspectWatchLogsClient) Recv() (*InspectWatchLogsChunk, error) {
	m := new(InspectWatchLogsChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Inspect service

type InspectServer interface {
	// Config returns the inspected server's configuration.
	Config(context.Context, *InspectConfigRequest) (*InspectConfigResponse, error)
	// OpenFiles returns the list of open files of the inspected process.
	OpenFiles(context.Context, *InspectOpenFilesRequest) (*InspectOpenFilesResponse, error)
	// Network returns host's network configuration and open connections of
	// the inspected process.
	Network(context.Context, *InspectNetworkRequest) (*InspectNetworkResponse, error)
	// HostInfo returns information about inspected host.
	HostInfo(context.Context, *InspectHostInfoRequest) (*InspectHostInfoResponse, error)
	// DockerInfo returns information about Docker on the inspected host.
	DockerInfo(context.Context, *InspectDockerInfoRequest) (*InspectDockerInfoResponse, error)
	// DockerNetwork returns information about Docker network on the inspected
	// host.
	DockerNetwork(context.Context, *InspectDockerNetworkRequest) (*InspectDockerNetworkResponse, error)
	// DockerVolumes returns information about Docker volumes on the inspected
	// host.
	DockerVolumes(context.Context, *InspectDockerVolumesRequest) (*InspectDockerVolumesResponse, error)
	// WatchLogs subscribes for logs of the inspected process.
	WatchLogs(*InspectWatchLogsRequest, Inspect_WatchLogsServer) error
}

func RegisterInspectServer(s *grpc.Server, srv InspectServer) {
	s.RegisterService(&_Inspect_serviceDesc, srv)
}

func _Inspect_Config_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InspectConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InspectServer).Config(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Inspect/Config",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InspectServer).Config(ctx, req.(*InspectConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inspect_OpenFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InspectOpenFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InspectServer).OpenFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Inspect/OpenFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InspectServer).OpenFiles(ctx, req.(*InspectOpenFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inspect_Network_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InspectNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InspectServer).Network(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Inspect/Network",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InspectServer).Network(ctx, req.(*InspectNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inspect_HostInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InspectHostInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InspectServer).HostInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Inspect/HostInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InspectServer).HostInfo(ctx, req.(*InspectHostInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inspect_DockerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InspectDockerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InspectServer).DockerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Inspect/DockerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InspectServer).DockerInfo(ctx, req.(*InspectDockerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inspect_DockerNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InspectDockerNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InspectServer).DockerNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Inspect/DockerNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InspectServer).DockerNetwork(ctx, req.(*InspectDockerNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inspect_DockerVolumes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InspectDockerVolumesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InspectServer).DockerVolumes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Inspect/DockerVolumes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InspectServer).DockerVolumes(ctx, req.(*InspectDockerVolumesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inspect_WatchLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InspectWatchLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InspectServer).WatchLogs(m, &inspectWatchLogsServer{stream})
}

type Inspect_WatchLogsServer interface {
	Send(*InspectWatchLogsChunk) error
	grpc.ServerStream
}

type inspectWatchLogsServer struct {
	grpc.ServerStream
}

func (x *inspectWatchLogsServer) Send(m *InspectWatchLogsChunk) error {
	return x.ServerStream.SendMsg(m)
}

var _Inspect_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sonm.Inspect",
	HandlerType: (*InspectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Config",
			Handler:    _Inspect_Config_Handler,
		},
		{
			MethodName: "OpenFiles",
			Handler:    _Inspect_OpenFiles_Handler,
		},
		{
			MethodName: "Network",
			Handler:    _Inspect_Network_Handler,
		},
		{
			MethodName: "HostInfo",
			Handler:    _Inspect_HostInfo_Handler,
		},
		{
			MethodName: "DockerInfo",
			Handler:    _Inspect_DockerInfo_Handler,
		},
		{
			MethodName: "DockerNetwork",
			Handler:    _Inspect_DockerNetwork_Handler,
		},
		{
			MethodName: "DockerVolumes",
			Handler:    _Inspect_DockerVolumes_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchLogs",
			Handler:       _Inspect_WatchLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "inspect.proto",
}

func init() { proto.RegisterFile("inspect.proto", fileDescriptor10) }

var fileDescriptor10 = []byte{
	// 858 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0x51, 0x6f, 0xdb, 0x36,
	0x10, 0x8e, 0x6c, 0xd9, 0x8e, 0x2e, 0x71, 0x56, 0x70, 0x59, 0xca, 0xaa, 0xcd, 0xe6, 0x09, 0xc5,
	0xe0, 0x87, 0xcd, 0xe9, 0x5c, 0x60, 0x2f, 0x7b, 0xda, 0x52, 0x04, 0x35, 0x56, 0xb4, 0x80, 0x3a,
	0x74, 0xc3, 0xde, 0x18, 0x89, 0xb2, 0x85, 0x48, 0xa4, 0x26, 0x52, 0x2b, 0xb2, 0xb7, 0x3d, 0xec,
	0x17, 0xed, 0xcf, 0xec, 0xe7, 0x0c, 0xa4, 0x28, 0xda, 0x92, 0xe5, 0x00, 0x7b, 0xe3, 0x7d, 0xdf,
	0xdd, 0xf9, 0xee, 0xf8, 0xf1, 0x64, 0x98, 0xa6, 0x4c, 0x14, 0x34, 0x92, 0x8b, 0xa2, 0xe4, 0x92,
	0x23, 0x57, 0x70, 0x96, 0xfb, 0x1e, 0xa3, 0x06, 0x08, 0x2e, 0xe0, 0x7c, 0x55, 0x7b, 0x5c, 0x73,
	0x96, 0xa4, 0xeb, 0x90, 0xfe, 0x5e, 0x51, 0x21, 0x83, 0x2b, 0xf8, 0xac, 0x83, 0x8b, 0x82, 0x33,
	0x41, 0xd1, 0x05, 0x8c, 0x23, 0x8d, 0x60, 0x67, 0xe6, 0xcc, 0x4f, 0x43, 0x63, 0x05, 0x4f, 0xe0,
	0xb1, 0x09, 0x78, 0x57, 0x50, 0x76, 0x93, 0x66, 0x54, 0x34, 0xb9, 0x5e, 0x03, 0xde, 0xa7, 0x4c,
	0xba, 0xaf, 0xc1, 0xe3, 0x0d, 0x88, 0x9d, 0xd9, 0x70, 0x7e, 0xb2, 0x3c, 0x5b, 0xa8, 0x22, 0x17,
	0x0a, 0x7a, 0x2f, 0x89, 0x0c, 0xb7, 0x0e, 0xc1, 0x02, 0x8e, 0x1b, 0x18, 0x9d, 0xc1, 0x20, 0x89,
	0x75, 0x11, 0x6e, 0x38, 0x48, 0x62, 0x84, 0xc0, 0x2d, 0x88, 0xdc, 0xe0, 0xc1, 0xcc, 0x99, 0x7b,
	0xa1, 0x3e, 0x07, 0x8f, 0x6d, 0x17, 0x6f, 0xa9, 0xfc, 0xc8, 0xcb, 0xbb, 0xa6, 0xa4, 0xbf, 0x1d,
	0xb8, 0xe8, 0x32, 0xa6, 0xa2, 0x97, 0x00, 0x29, 0x93, 0xb4, 0x4c, 0x48, 0x64, 0x4b, 0xfa, 0xb4,
	0x2e, 0x69, 0xd5, 0xe0, 0xba, 0xae, 0x1d, 0x37, 0xf4, 0x1d, 0x9c, 0x44, 0x9c, 0x31, 0x1a, 0xc9,
	0x94, 0x33, 0x81, 0x07, 0x3a, 0xea, 0xbc, 0x8e, 0xba, 0xb6, 0x84, 0x0e, 0xdb, 0x75, 0x54, 0x75,
	0x4c, 0x5b, 0x59, 0xd1, 0x23, 0x18, 0xe6, 0xb2, 0xd2, 0x7d, 0x8d, 0x42, 0x75, 0x54, 0x8d, 0x31,
	0x92, 0xd3, 0xa6, 0x31, 0x75, 0x46, 0x01, 0x9c, 0x6e, 0x48, 0x19, 0x7f, 0x24, 0x25, 0xfd, 0x21,
	0x8e, 0x4b, 0x3c, 0xd4, 0x5c, 0x0b, 0x43, 0xe7, 0x30, 0x4a, 0x32, 0xb2, 0x16, 0xd8, 0x9d, 0x0d,
	0xe7, 0x5e, 0x58, 0x1b, 0x0a, 0x25, 0x71, 0x5c, 0x0a, 0x3c, 0xaa, 0x51, 0x6d, 0x04, 0xff, 0x3a,
	0x70, 0xd6, 0xae, 0x73, 0x6f, 0xbe, 0x17, 0x30, 0x4e, 0x48, 0x9e, 0x66, 0xf7, 0xba, 0x90, 0x69,
	0x68, 0x2c, 0x55, 0x9e, 0xbc, 0x2f, 0xa8, 0x2e, 0x61, 0x1a, 0xea, 0x33, 0x5a, 0x80, 0x97, 0xf1,
	0x88, 0x64, 0xba, 0x36, 0x77, 0xe6, 0xcc, 0x4f, 0x96, 0x8f, 0xea, 0x61, 0xbc, 0xe7, 0xd1, 0x1d,
	0x95, 0x0a, 0x0f, 0xb7, 0x2e, 0xe8, 0x05, 0x40, 0x49, 0x73, 0x2e, 0xeb, 0x66, 0x46, 0x07, 0x02,
	0x76, 0x7c, 0x54, 0x35, 0x42, 0x12, 0x59, 0x09, 0x3c, 0xd6, 0xad, 0x1b, 0x4b, 0x8d, 0xaf, 0x48,
	0x63, 0x3c, 0xa9, 0xc7, 0x57, 0xa4, 0x71, 0xe0, 0x5b, 0xf5, 0xbd, 0x52, 0xa9, 0xca, 0x15, 0x4b,
	0xf8, 0x56, 0xe5, 0x4f, 0x7a, 0x38, 0x23, 0x04, 0x04, 0x6e, 0xca, 0x12, 0x6e, 0x74, 0xae, 0xcf,
	0xc1, 0x25, 0x3c, 0x6d, 0x05, 0x74, 0x64, 0xb5, 0x84, 0x67, 0xfd, 0xf4, 0xff, 0x48, 0xf9, 0x81,
	0x67, 0x55, 0xbe, 0x7d, 0x3c, 0xdd, 0x94, 0x96, 0x7e, 0x20, 0x25, 0xb6, 0xe2, 0x7e, 0xcd, 0x85,
	0xdc, 0x6d, 0xf8, 0x9f, 0xa1, 0x7d, 0xa6, 0x5b, 0xca, 0x64, 0xf2, 0xe1, 0x78, 0xc3, 0x85, 0xd4,
	0x5a, 0x73, 0xf4, 0x50, 0xad, 0xad, 0xc6, 0x5d, 0x15, 0x32, 0x35, 0x2a, 0x74, 0x43, 0x63, 0xa9,
	0x98, 0x5b, 0xce, 0xe5, 0xcf, 0x8a, 0x19, 0x6a, 0xc6, 0xda, 0x68, 0x0e, 0x9f, 0x14, 0x25, 0x8f,
	0xa8, 0x10, 0x54, 0xbc, 0xad, 0xf2, 0x5b, 0x5a, 0x4b, 0xc1, 0x0d, 0xbb, 0xb0, 0x92, 0x1a, 0x17,
	0xfa, 0xda, 0xbd, 0x70, 0xc0, 0x85, 0xca, 0x5a, 0x64, 0x44, 0x26, 0xbc, 0xcc, 0xcd, 0xf5, 0x5a,
	0x1b, 0x7d, 0x05, 0x67, 0xcd, 0xf9, 0xa6, 0x96, 0xe3, 0x44, 0x7b, 0x74, 0x50, 0xfd, 0xeb, 0x06,
	0xf9, 0x40, 0x4b, 0x91, 0x72, 0x86, 0x8f, 0xb5, 0x63, 0x17, 0x46, 0xcf, 0x61, 0x7a, 0x47, 0x4b,
	0x46, 0xb3, 0xc6, 0xcf, 0xd3, 0x7e, 0x6d, 0x10, 0x2d, 0xe1, 0xfc, 0x8f, 0xb4, 0x94, 0x15, 0xc9,
	0xd2, 0x3f, 0x89, 0x7e, 0x24, 0xf7, 0x42, 0xd2, 0x1c, 0x83, 0x76, 0xee, 0xe5, 0xd0, 0x02, 0x50,
	0x1b, 0x0f, 0x79, 0x46, 0xf1, 0x89, 0x8e, 0xe8, 0x61, 0xd4, 0x94, 0xd5, 0xc4, 0x57, 0xaf, 0xf0,
	0x69, 0x2d, 0xea, 0xda, 0xda, 0xd9, 0xad, 0xbf, 0x10, 0x19, 0x6d, 0xde, 0xf0, 0xb5, 0x95, 0xc7,
	0xb7, 0x76, 0xc3, 0x59, 0xea, 0x7a, 0x53, 0xb1, 0x3b, 0x84, 0x61, 0x92, 0x53, 0x21, 0xc8, 0xba,
	0xb9, 0xcc, 0xc6, 0x5c, 0xfe, 0x35, 0x82, 0x89, 0x89, 0x41, 0xd7, 0x30, 0xae, 0xf7, 0x3b, 0xf2,
	0x9b, 0x15, 0xb7, 0xff, 0x31, 0xf0, 0x9f, 0xf6, 0x72, 0xb5, 0x6c, 0x82, 0x23, 0xf4, 0x06, 0x3c,
	0xbb, 0xd8, 0xd1, 0x65, 0xcb, 0xb7, 0xfb, 0x2d, 0xf0, 0x3f, 0x3f, 0x44, 0xdb, 0x6c, 0x37, 0x30,
	0x31, 0xcf, 0x06, 0xb5, 0x7f, 0xb7, 0xfd, 0xd6, 0xfc, 0x67, 0xfd, 0xa4, 0xcd, 0xb3, 0x82, 0xe3,
	0x46, 0xe2, 0xa8, 0xed, 0xdb, 0x79, 0x14, 0xfe, 0xe5, 0x01, 0xd6, 0xa6, 0x7a, 0x07, 0xb0, 0xdd,
	0x0f, 0xa8, 0xdd, 0xc2, 0xde, 0x52, 0xf1, 0xbf, 0x38, 0xc8, 0xdb, 0x84, 0xbf, 0xc2, 0xb4, 0xb5,
	0x20, 0xd0, 0x97, 0x3d, 0x31, 0x9d, 0x7e, 0x83, 0x87, 0x5c, 0xf6, 0x33, 0x9b, 0x3d, 0xd1, 0x9b,
	0xb9, 0xbd, 0x62, 0x7a, 0x33, 0x77, 0xd6, 0x4c, 0x70, 0x84, 0x7e, 0x02, 0xcf, 0x4a, 0xac, 0x73,
	0xcb, 0x5d, 0x55, 0x76, 0x04, 0xd3, 0x56, 0x66, 0x70, 0xf4, 0xc2, 0xf9, 0xf1, 0xf9, 0x6f, 0xc1,
	0x3a, 0x95, 0x9b, 0xea, 0x76, 0x11, 0xf1, 0xfc, 0x4a, 0x39, 0x7f, 0x93, 0xf2, 0xab, 0x88, 0x97,
	0xf4, 0x4a, 0xff, 0x2f, 0xf9, 0x5e, 0x41, 0xb7, 0x63, 0x7d, 0x7e, 0xf9, 0x5f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xde, 0xfc, 0x1b, 0xcd, 0xc5, 0x08, 0x00, 0x00,
}
