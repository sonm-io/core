// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ask_plan.proto

/*
Package sonm is a generated protocol buffer package.

It is generated from these files:
	ask_plan.proto
	benchmarks.proto
	bigint.proto
	capabilities.proto
	container.proto
	deal.proto
	dwh.proto
	hub.proto
	insonmnia.proto
	marketplace.proto
	miner.proto
	net.proto
	node.proto
	relay.proto
	rendezvous.proto
	timestamp.proto
	volume.proto

It has these top-level messages:
	AskPlanCPU
	AskPlanGPU
	AskPlanRAM
	AskPlanStorage
	AskPlanNetwork
	AskPlanResources
	AskPlan
	Benchmark
	BigInt
	CPUDevice
	CPU
	RAMDevice
	RAM
	GPUDevice
	GPU
	Network
	StorageDevice
	Storage
	NetworkSpec
	Container
	DeprecatedDeal
	SortingOption
	DealsRequest
	DWHDealsReply
	DWHDeal
	DealConditionsRequest
	DealConditionsReply
	OrdersRequest
	MatchingOrdersRequest
	DWHOrdersReply
	DWHOrder
	DealCondition
	DWHWorker
	ProfilesRequest
	ProfilesReply
	Profile
	BlacklistRequest
	BlacklistReply
	ValidatorsRequest
	ValidatorsReply
	Validator
	DealChangeRequestsReply
	DealChangeRequest
	WorkersRequest
	WorkersReply
	Certificate
	DWHBenchmarkConditions
	MaxMinUint64
	MaxMinBig
	MaxMinTimestamp
	CmpUint64
	BlacklistQuery
	StartTaskRequest
	HubJoinNetworkRequest
	StartTaskReply
	HubStatusReply
	AskPlansReply
	TaskListReply
	DevicesReply
	PullTaskRequest
	DealInfoReply
	TaskStatusReply
	StatusMapReply
	Empty
	ID
	EthID
	TaskID
	Count
	CPUUsage
	MemoryUsage
	NetworkUsage
	ResourceUsage
	ContainerRestartPolicy
	TaskLogsRequest
	TaskLogsChunk
	TaskResourceRequirements
	Chunk
	Progress
	Duration
	EthAddress
	DataSize
	DataSizeRate
	Price
	GetOrdersReply
	Benchmarks
	Deal
	Order
	BidNetwork
	BidResources
	BidOrder
	MinerStartRequest
	MinerStartReply
	TaskInfo
	Endpoints
	SaveRequest
	Addr
	SocketAddr
	JoinNetworkRequest
	TaskListRequest
	DealsReply
	OpenDealRequest
	Worker
	WorkerListReply
	BalanceReply
	HandshakeRequest
	DiscoverResponse
	HandshakeResponse
	RelayClusterReply
	RelayMetrics
	NetMetrics
	ConnectRequest
	PublishRequest
	RendezvousReply
	RendezvousState
	RendezvousMeeting
	ResolveMetaReply
	Timestamp
	Volume
*/
package sonm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AskPlanCPU struct {
	CorePercents uint64 `protobuf:"varint,1,opt,name=core_percents,json=corePercents" json:"core_percents,omitempty"`
}

func (m *AskPlanCPU) Reset()                    { *m = AskPlanCPU{} }
func (m *AskPlanCPU) String() string            { return proto.CompactTextString(m) }
func (*AskPlanCPU) ProtoMessage()               {}
func (*AskPlanCPU) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AskPlanCPU) GetCorePercents() uint64 {
	if m != nil {
		return m.CorePercents
	}
	return 0
}

type AskPlanGPU struct {
	Indexes []uint64 `protobuf:"varint,1,rep,packed,name=indexes" json:"indexes,omitempty"`
	Hashes  []string `protobuf:"bytes,2,rep,name=hashes" json:"hashes,omitempty"`
}

func (m *AskPlanGPU) Reset()                    { *m = AskPlanGPU{} }
func (m *AskPlanGPU) String() string            { return proto.CompactTextString(m) }
func (*AskPlanGPU) ProtoMessage()               {}
func (*AskPlanGPU) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AskPlanGPU) GetIndexes() []uint64 {
	if m != nil {
		return m.Indexes
	}
	return nil
}

func (m *AskPlanGPU) GetHashes() []string {
	if m != nil {
		return m.Hashes
	}
	return nil
}

type AskPlanRAM struct {
	Size *DataSize `protobuf:"bytes,1,opt,name=size" json:"size,omitempty"`
}

func (m *AskPlanRAM) Reset()                    { *m = AskPlanRAM{} }
func (m *AskPlanRAM) String() string            { return proto.CompactTextString(m) }
func (*AskPlanRAM) ProtoMessage()               {}
func (*AskPlanRAM) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AskPlanRAM) GetSize() *DataSize {
	if m != nil {
		return m.Size
	}
	return nil
}

type AskPlanStorage struct {
	Size *DataSize `protobuf:"bytes,1,opt,name=size" json:"size,omitempty"`
}

func (m *AskPlanStorage) Reset()                    { *m = AskPlanStorage{} }
func (m *AskPlanStorage) String() string            { return proto.CompactTextString(m) }
func (*AskPlanStorage) ProtoMessage()               {}
func (*AskPlanStorage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AskPlanStorage) GetSize() *DataSize {
	if m != nil {
		return m.Size
	}
	return nil
}

type AskPlanNetwork struct {
	ThroughputIn  *DataSizeRate `protobuf:"bytes,1,opt,name=throughputIn" json:"throughputIn,omitempty"`
	ThroughputOut *DataSizeRate `protobuf:"bytes,2,opt,name=throughputOut" json:"throughputOut,omitempty"`
	Overlay       bool          `protobuf:"varint,3,opt,name=overlay" json:"overlay,omitempty"`
	Outbound      bool          `protobuf:"varint,4,opt,name=outbound" json:"outbound,omitempty"`
	Incoming      bool          `protobuf:"varint,5,opt,name=incoming" json:"incoming,omitempty"`
}

func (m *AskPlanNetwork) Reset()                    { *m = AskPlanNetwork{} }
func (m *AskPlanNetwork) String() string            { return proto.CompactTextString(m) }
func (*AskPlanNetwork) ProtoMessage()               {}
func (*AskPlanNetwork) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AskPlanNetwork) GetThroughputIn() *DataSizeRate {
	if m != nil {
		return m.ThroughputIn
	}
	return nil
}

func (m *AskPlanNetwork) GetThroughputOut() *DataSizeRate {
	if m != nil {
		return m.ThroughputOut
	}
	return nil
}

func (m *AskPlanNetwork) GetOverlay() bool {
	if m != nil {
		return m.Overlay
	}
	return false
}

func (m *AskPlanNetwork) GetOutbound() bool {
	if m != nil {
		return m.Outbound
	}
	return false
}

func (m *AskPlanNetwork) GetIncoming() bool {
	if m != nil {
		return m.Incoming
	}
	return false
}

type AskPlanResources struct {
	CPU     *AskPlanCPU     `protobuf:"bytes,1,opt,name=CPU" json:"CPU,omitempty"`
	RAM     *AskPlanRAM     `protobuf:"bytes,2,opt,name=RAM" json:"RAM,omitempty"`
	Storage *AskPlanStorage `protobuf:"bytes,3,opt,name=storage" json:"storage,omitempty"`
	GPU     *AskPlanGPU     `protobuf:"bytes,4,opt,name=GPU" json:"GPU,omitempty"`
	Network *AskPlanNetwork `protobuf:"bytes,5,opt,name=network" json:"network,omitempty"`
}

func (m *AskPlanResources) Reset()                    { *m = AskPlanResources{} }
func (m *AskPlanResources) String() string            { return proto.CompactTextString(m) }
func (*AskPlanResources) ProtoMessage()               {}
func (*AskPlanResources) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AskPlanResources) GetCPU() *AskPlanCPU {
	if m != nil {
		return m.CPU
	}
	return nil
}

func (m *AskPlanResources) GetRAM() *AskPlanRAM {
	if m != nil {
		return m.RAM
	}
	return nil
}

func (m *AskPlanResources) GetStorage() *AskPlanStorage {
	if m != nil {
		return m.Storage
	}
	return nil
}

func (m *AskPlanResources) GetGPU() *AskPlanGPU {
	if m != nil {
		return m.GPU
	}
	return nil
}

func (m *AskPlanResources) GetNetwork() *AskPlanNetwork {
	if m != nil {
		return m.Network
	}
	return nil
}

type AskPlan struct {
	ID           string            `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	OrderID      *BigInt           `protobuf:"bytes,2,opt,name=orderID" json:"orderID,omitempty"`
	DealID       *BigInt           `protobuf:"bytes,3,opt,name=dealID" json:"dealID,omitempty"`
	Duration     *Duration         `protobuf:"bytes,4,opt,name=duration" json:"duration,omitempty"`
	Price        *Price            `protobuf:"bytes,5,opt,name=price" json:"price,omitempty"`
	Blacklist    *EthAddress       `protobuf:"bytes,6,opt,name=blacklist" json:"blacklist,omitempty"`
	Counterparty *EthAddress       `protobuf:"bytes,7,opt,name=counterparty" json:"counterparty,omitempty"`
	Identity     IdentityLevel     `protobuf:"varint,8,opt,name=identity,enum=sonm.IdentityLevel" json:"identity,omitempty"`
	Tag          []byte            `protobuf:"bytes,9,opt,name=tag,proto3" json:"tag,omitempty"`
	Resources    *AskPlanResources `protobuf:"bytes,10,opt,name=resources" json:"resources,omitempty"`
}

func (m *AskPlan) Reset()                    { *m = AskPlan{} }
func (m *AskPlan) String() string            { return proto.CompactTextString(m) }
func (*AskPlan) ProtoMessage()               {}
func (*AskPlan) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *AskPlan) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *AskPlan) GetOrderID() *BigInt {
	if m != nil {
		return m.OrderID
	}
	return nil
}

func (m *AskPlan) GetDealID() *BigInt {
	if m != nil {
		return m.DealID
	}
	return nil
}

func (m *AskPlan) GetDuration() *Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (m *AskPlan) GetPrice() *Price {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *AskPlan) GetBlacklist() *EthAddress {
	if m != nil {
		return m.Blacklist
	}
	return nil
}

func (m *AskPlan) GetCounterparty() *EthAddress {
	if m != nil {
		return m.Counterparty
	}
	return nil
}

func (m *AskPlan) GetIdentity() IdentityLevel {
	if m != nil {
		return m.Identity
	}
	return IdentityLevel_ANONYMOUS
}

func (m *AskPlan) GetTag() []byte {
	if m != nil {
		return m.Tag
	}
	return nil
}

func (m *AskPlan) GetResources() *AskPlanResources {
	if m != nil {
		return m.Resources
	}
	return nil
}

func init() {
	proto.RegisterType((*AskPlanCPU)(nil), "sonm.AskPlanCPU")
	proto.RegisterType((*AskPlanGPU)(nil), "sonm.AskPlanGPU")
	proto.RegisterType((*AskPlanRAM)(nil), "sonm.AskPlanRAM")
	proto.RegisterType((*AskPlanStorage)(nil), "sonm.AskPlanStorage")
	proto.RegisterType((*AskPlanNetwork)(nil), "sonm.AskPlanNetwork")
	proto.RegisterType((*AskPlanResources)(nil), "sonm.AskPlanResources")
	proto.RegisterType((*AskPlan)(nil), "sonm.AskPlan")
}

func init() { proto.RegisterFile("ask_plan.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 581 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x5d, 0x6b, 0x13, 0x4d,
	0x14, 0x66, 0x93, 0x34, 0x1f, 0xa7, 0x69, 0xde, 0xbe, 0xa3, 0x94, 0xa1, 0x57, 0x71, 0x15, 0x09,
	0x5e, 0x44, 0xad, 0x45, 0xbc, 0x12, 0x62, 0x23, 0x65, 0xc1, 0xea, 0x32, 0x25, 0xd7, 0x65, 0xb2,
	0x7b, 0x48, 0x86, 0x6c, 0x67, 0x96, 0x99, 0xd9, 0x6a, 0xfb, 0x3f, 0xfc, 0x67, 0x5e, 0xfb, 0x5b,
	0x64, 0x76, 0x67, 0x13, 0x37, 0x50, 0xf0, 0x2e, 0xe7, 0xf9, 0x38, 0x73, 0x9e, 0xb3, 0x87, 0xc0,
	0x88, 0x9b, 0xcd, 0x4d, 0x9e, 0x71, 0x39, 0xcd, 0xb5, 0xb2, 0x8a, 0x74, 0x8c, 0x92, 0xb7, 0xa7,
	0xc3, 0xa5, 0x58, 0x09, 0x69, 0x2b, 0xec, 0xf4, 0x3f, 0x21, 0x1d, 0x2a, 0x05, 0xf7, 0xc0, 0xff,
	0xb7, 0x5c, 0x6f, 0xd0, 0xe6, 0x19, 0x4f, 0xb0, 0x82, 0xc2, 0xb7, 0x00, 0x33, 0xb3, 0x89, 0x33,
	0x2e, 0x2f, 0xe2, 0x05, 0x79, 0x0e, 0x47, 0x89, 0xd2, 0x78, 0x93, 0xa3, 0x4e, 0x50, 0x5a, 0x43,
	0x83, 0x71, 0x30, 0xe9, 0xb0, 0xa1, 0x03, 0x63, 0x8f, 0x85, 0x1f, 0xb7, 0x96, 0xcb, 0x78, 0x41,
	0x28, 0xf4, 0x84, 0x4c, 0xf1, 0x07, 0x3a, 0x71, 0x7b, 0xd2, 0x61, 0x75, 0x49, 0x4e, 0xa0, 0xbb,
	0xe6, 0x66, 0x8d, 0x86, 0xb6, 0xc6, 0xed, 0xc9, 0x80, 0xf9, 0x2a, 0x7c, 0xb3, 0xf5, 0xb3, 0xd9,
	0x15, 0x09, 0xa1, 0x63, 0xc4, 0x03, 0x96, 0x2f, 0x1d, 0x9e, 0x8d, 0xa6, 0x6e, 0xe2, 0xe9, 0x9c,
	0x5b, 0x7e, 0x2d, 0x1e, 0x90, 0x95, 0x5c, 0x78, 0x0e, 0x23, 0xef, 0xb8, 0xb6, 0x4a, 0xf3, 0x15,
	0xfe, 0x93, 0xeb, 0x57, 0xb0, 0xb5, 0x7d, 0x45, 0xfb, 0x5d, 0xe9, 0x0d, 0x79, 0x0f, 0x43, 0xbb,
	0xd6, 0xaa, 0x58, 0xad, 0xf3, 0xc2, 0x46, 0xd2, 0xdb, 0xc9, 0x9e, 0x9d, 0x5b, 0x64, 0x0d, 0x1d,
	0xf9, 0x00, 0x47, 0xbb, 0xfa, 0x5b, 0x61, 0x69, 0xeb, 0x51, 0x63, 0x53, 0xe8, 0xd6, 0xa3, 0xee,
	0x50, 0x67, 0xfc, 0x9e, 0xb6, 0xc7, 0xc1, 0xa4, 0xcf, 0xea, 0x92, 0x9c, 0x42, 0x5f, 0x15, 0x76,
	0xa9, 0x0a, 0x99, 0xd2, 0x4e, 0x49, 0x6d, 0x6b, 0xc7, 0x09, 0x99, 0xa8, 0x5b, 0x21, 0x57, 0xf4,
	0xa0, 0xe2, 0xea, 0x3a, 0xfc, 0x1d, 0xc0, 0x71, 0xbd, 0x3f, 0x34, 0xaa, 0xd0, 0x09, 0x1a, 0x12,
	0x42, 0xfb, 0x22, 0x5e, 0xf8, 0x3c, 0xc7, 0xd5, 0x58, 0xbb, 0xef, 0xca, 0x1c, 0xe9, 0x34, 0x6c,
	0x76, 0xe5, 0x47, 0x6f, 0x6a, 0xd8, 0xec, 0x8a, 0x39, 0x92, 0x4c, 0xa1, 0x67, 0xaa, 0x15, 0x97,
	0xe3, 0x1e, 0x9e, 0x3d, 0x6d, 0xe8, 0xfc, 0xfa, 0x59, 0x2d, 0x72, 0x3d, 0x2f, 0xe3, 0x45, 0x39,
	0xff, 0x7e, 0xcf, 0x4b, 0xf7, 0xae, 0xbb, 0x90, 0x29, 0xf4, 0x64, 0xb5, 0xff, 0x32, 0xcb, 0x7e,
	0x4f, 0xff, 0x6d, 0x58, 0x2d, 0x0a, 0x7f, 0xb6, 0xa1, 0xe7, 0x39, 0x32, 0x82, 0x56, 0x34, 0x2f,
	0x63, 0x0d, 0x58, 0x2b, 0x9a, 0x93, 0x97, 0xd0, 0x53, 0x3a, 0x45, 0x1d, 0xcd, 0x7d, 0x8e, 0x61,
	0xd5, 0xeb, 0x93, 0x58, 0x45, 0xd2, 0xb2, 0x9a, 0x24, 0x2f, 0xa0, 0x9b, 0x22, 0xcf, 0xa2, 0xb9,
	0x8f, 0xd1, 0x94, 0x79, 0x8e, 0xbc, 0x82, 0x7e, 0x5a, 0x68, 0x6e, 0x85, 0x92, 0x3e, 0x42, 0x7d,
	0x49, 0x1e, 0x65, 0x5b, 0x9e, 0x3c, 0x83, 0x83, 0x5c, 0x8b, 0x04, 0x7d, 0x86, 0xc3, 0x4a, 0x18,
	0x3b, 0x88, 0x55, 0x0c, 0x99, 0xc2, 0x60, 0x99, 0xf1, 0x64, 0x93, 0x09, 0x63, 0x69, 0xf7, 0xef,
	0x95, 0x7c, 0xb6, 0xeb, 0x59, 0x9a, 0x6a, 0x34, 0x86, 0xed, 0x24, 0xe4, 0x1c, 0x86, 0x89, 0x2a,
	0xa4, 0x45, 0x9d, 0x73, 0x6d, 0xef, 0x69, 0xef, 0x11, 0x4b, 0x43, 0x45, 0x5e, 0x43, 0x5f, 0xa4,
	0x28, 0xad, 0xb0, 0xf7, 0xb4, 0x3f, 0x0e, 0x26, 0xa3, 0xb3, 0x27, 0x95, 0x23, 0xf2, 0xe8, 0x17,
	0xbc, 0xc3, 0x8c, 0x6d, 0x45, 0xe4, 0x18, 0xda, 0x96, 0xaf, 0xe8, 0x60, 0x1c, 0x4c, 0x86, 0xcc,
	0xfd, 0x24, 0xe7, 0x30, 0xd0, 0xf5, 0xe9, 0x50, 0x28, 0x5f, 0x3d, 0x69, 0xde, 0x43, 0xcd, 0xb2,
	0x9d, 0x70, 0xd9, 0x2d, 0xff, 0x31, 0xde, 0xfd, 0x09, 0x00, 0x00, 0xff, 0xff, 0x36, 0x0b, 0x12,
	0x7f, 0x7b, 0x04, 0x00, 0x00,
}
