// Code generated by protoc-gen-go. DO NOT EDIT.
// source: optimus.proto

package sonm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// grpccmd imports
import (
	"io"

	"github.com/spf13/cobra"
	"github.com/sshaman1101/grpccmd"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for OrderPredictor service

type OrderPredictorClient interface {
	Predict(ctx context.Context, in *BidResources, opts ...grpc.CallOption) (*Price, error)
}

type orderPredictorClient struct {
	cc *grpc.ClientConn
}

func NewOrderPredictorClient(cc *grpc.ClientConn) OrderPredictorClient {
	return &orderPredictorClient{cc}
}

func (c *orderPredictorClient) Predict(ctx context.Context, in *BidResources, opts ...grpc.CallOption) (*Price, error) {
	out := new(Price)
	err := grpc.Invoke(ctx, "/sonm.OrderPredictor/Predict", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OrderPredictor service

type OrderPredictorServer interface {
	Predict(context.Context, *BidResources) (*Price, error)
}

func RegisterOrderPredictorServer(s *grpc.Server, srv OrderPredictorServer) {
	s.RegisterService(&_OrderPredictor_serviceDesc, srv)
}

func _OrderPredictor_Predict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BidResources)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderPredictorServer).Predict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.OrderPredictor/Predict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderPredictorServer).Predict(ctx, req.(*BidResources))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrderPredictor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sonm.OrderPredictor",
	HandlerType: (*OrderPredictorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Predict",
			Handler:    _OrderPredictor_Predict_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "optimus.proto",
}

// Begin grpccmd
var _ = grpccmd.RunE

// OrderPredictor
var _OrderPredictorCmd = &cobra.Command{
	Use:   "orderPredictor [method]",
	Short: "Subcommand for the OrderPredictor service.",
}

var _OrderPredictor_PredictCmd = &cobra.Command{
	Use:   "predict",
	Short: "Make the Predict method call, input-type: sonm.BidResources output-type: sonm.Price",
	RunE: grpccmd.RunE(
		"Predict",
		"sonm.BidResources",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewOrderPredictorClient(cc)
		},
	),
}

var _OrderPredictor_PredictCmd_gen = &cobra.Command{
	Use:   "predict-gen",
	Short: "Generate JSON for method call of Predict (input-type: sonm.BidResources)",
	RunE:  grpccmd.TypeToJson("sonm.BidResources"),
}

// Register commands with the root command and service command
func init() {
	grpccmd.RegisterServiceCmd(_OrderPredictorCmd)
	_OrderPredictorCmd.AddCommand(
		_OrderPredictor_PredictCmd,
		_OrderPredictor_PredictCmd_gen,
	)
}

// End grpccmd

func init() { proto.RegisterFile("optimus.proto", fileDescriptor10) }

var fileDescriptor10 = []byte{
	// 128 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcd, 0x2f, 0x28, 0xc9,
	0xcc, 0x2d, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x29, 0xce, 0xcf, 0xcb, 0x95,
	0xe2, 0xcf, 0xcc, 0x03, 0xd1, 0x79, 0x99, 0x89, 0x10, 0x61, 0x29, 0xc1, 0xdc, 0xc4, 0xa2, 0xec,
	0xd4, 0x92, 0x82, 0x9c, 0xc4, 0xe4, 0x54, 0x88, 0x90, 0x91, 0x1d, 0x17, 0x9f, 0x7f, 0x51, 0x4a,
	0x6a, 0x51, 0x40, 0x51, 0x6a, 0x4a, 0x66, 0x72, 0x49, 0x7e, 0x91, 0x90, 0x0e, 0x17, 0x3b, 0x94,
	0x23, 0x24, 0xa4, 0x07, 0xd2, 0xaf, 0xe7, 0x94, 0x99, 0x12, 0x94, 0x5a, 0x9c, 0x5f, 0x5a, 0x94,
	0x9c, 0x5a, 0x2c, 0xc5, 0x0d, 0x11, 0x0b, 0x28, 0xca, 0x4c, 0x4e, 0x55, 0x62, 0x48, 0x62, 0x03,
	0x1b, 0x63, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x29, 0xb0, 0x8d, 0x75, 0x81, 0x00, 0x00, 0x00,
}
