// Code generated by protoc-gen-go. DO NOT EDIT.
// source: capabilities.proto

package sonm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GPUVendorType int32

const (
	GPUVendorType_GPU_UNKNOWN GPUVendorType = 0
	GPUVendorType_NVIDIA      GPUVendorType = 1
	GPUVendorType_RADEON      GPUVendorType = 2
)

var GPUVendorType_name = map[int32]string{
	0: "GPU_UNKNOWN",
	1: "NVIDIA",
	2: "RADEON",
}
var GPUVendorType_value = map[string]int32{
	"GPU_UNKNOWN": 0,
	"NVIDIA":      1,
	"RADEON":      2,
}

func (x GPUVendorType) String() string {
	return proto.EnumName(GPUVendorType_name, int32(x))
}
func (GPUVendorType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type Capabilities struct {
	Cpu []*CPUDevice `protobuf:"bytes,1,rep,name=cpu" json:"cpu,omitempty"`
	Mem *RAMDevice   `protobuf:"bytes,2,opt,name=mem" json:"mem,omitempty"`
	Gpu []*GPUDevice `protobuf:"bytes,3,rep,name=gpu" json:"gpu,omitempty"`
}

func (m *Capabilities) Reset()                    { *m = Capabilities{} }
func (m *Capabilities) String() string            { return proto.CompactTextString(m) }
func (*Capabilities) ProtoMessage()               {}
func (*Capabilities) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *Capabilities) GetCpu() []*CPUDevice {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *Capabilities) GetMem() *RAMDevice {
	if m != nil {
		return m.Mem
	}
	return nil
}

func (m *Capabilities) GetGpu() []*GPUDevice {
	if m != nil {
		return m.Gpu
	}
	return nil
}

type CPUDevice struct {
	// Num describes the CPU number on a board.
	Num int32 `protobuf:"varint,1,opt,name=num" json:"num,omitempty"`
	// VendorId describes vendor id as a string, for example "GenuineIntel".
	VendorId string `protobuf:"bytes,2,opt,name=vendorId" json:"vendorId,omitempty"`
	// Model describes model.
	Model string `protobuf:"bytes,3,opt,name=model" json:"model,omitempty"`
	// ModelName describes full model name.
	// For example "Intel(R) Core(TM) i5-5257U CPU @ 2.70GHz".
	ModelName string `protobuf:"bytes,4,opt,name=modelName" json:"modelName,omitempty"`
	// Cores describes number of cores on a CPU device.
	Cores int32 `protobuf:"varint,5,opt,name=cores" json:"cores,omitempty"`
	// Maximum configured clock frequency of the device in MHz.
	ClockFrequency float64 `protobuf:"fixed64,6,opt,name=clockFrequency" json:"clockFrequency,omitempty"`
	// CacheSize shows CPU cache size.
	CacheSize int32 `protobuf:"varint,7,opt,name=cacheSize" json:"cacheSize,omitempty"`
	// Stepping describes CPU stepping level.
	Stepping int32 `protobuf:"varint,8,opt,name=stepping" json:"stepping,omitempty"`
	// Flags describes supported extensions on a CPU.
	Flags []string `protobuf:"bytes,9,rep,name=flags" json:"flags,omitempty"`
}

func (m *CPUDevice) Reset()                    { *m = CPUDevice{} }
func (m *CPUDevice) String() string            { return proto.CompactTextString(m) }
func (*CPUDevice) ProtoMessage()               {}
func (*CPUDevice) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *CPUDevice) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *CPUDevice) GetVendorId() string {
	if m != nil {
		return m.VendorId
	}
	return ""
}

func (m *CPUDevice) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *CPUDevice) GetModelName() string {
	if m != nil {
		return m.ModelName
	}
	return ""
}

func (m *CPUDevice) GetCores() int32 {
	if m != nil {
		return m.Cores
	}
	return 0
}

func (m *CPUDevice) GetClockFrequency() float64 {
	if m != nil {
		return m.ClockFrequency
	}
	return 0
}

func (m *CPUDevice) GetCacheSize() int32 {
	if m != nil {
		return m.CacheSize
	}
	return 0
}

func (m *CPUDevice) GetStepping() int32 {
	if m != nil {
		return m.Stepping
	}
	return 0
}

func (m *CPUDevice) GetFlags() []string {
	if m != nil {
		return m.Flags
	}
	return nil
}

type RAMDevice struct {
	Total uint64 `protobuf:"varint,1,opt,name=total" json:"total,omitempty"`
	Used  uint64 `protobuf:"varint,2,opt,name=used" json:"used,omitempty"`
}

func (m *RAMDevice) Reset()                    { *m = RAMDevice{} }
func (m *RAMDevice) String() string            { return proto.CompactTextString(m) }
func (*RAMDevice) ProtoMessage()               {}
func (*RAMDevice) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *RAMDevice) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *RAMDevice) GetUsed() uint64 {
	if m != nil {
		return m.Used
	}
	return 0
}

type GPUDevice struct {
	// Name describes full GPU device name.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// VendorId describes vendor id.
	VendorId uint64 `protobuf:"varint,2,opt,name=vendorId" json:"vendorId,omitempty"`
	// VendorName describes vendor name, for example "NVIDIA" or "AMD".
	VendorName string `protobuf:"bytes,3,opt,name=vendorName" json:"vendorName,omitempty"`
	// Total maximum memory size the device can hold.
	MaxMemorySize uint64 `protobuf:"varint,4,opt,name=maxMemorySize" json:"maxMemorySize,omitempty"`
	// Maximum configured clock frequency of the device in MHz.
	MaxClockFrequency uint64 `protobuf:"varint,5,opt,name=maxClockFrequency" json:"maxClockFrequency,omitempty"`
	// OpenCL major version.
	OpenCLDeviceVersionMajor int32 `protobuf:"varint,6,opt,name=openCLDeviceVersionMajor" json:"openCLDeviceVersionMajor,omitempty"`
	// OpenCL minor version.
	OpenCLDeviceVersionMinor int32 `protobuf:"varint,7,opt,name=openCLDeviceVersionMinor" json:"openCLDeviceVersionMinor,omitempty"`
	// vendorType is nvidia or radeon or none
	VendorType GPUVendorType `protobuf:"varint,8,opt,name=vendorType,enum=sonm.GPUVendorType" json:"vendorType,omitempty"`
}

func (m *GPUDevice) Reset()                    { *m = GPUDevice{} }
func (m *GPUDevice) String() string            { return proto.CompactTextString(m) }
func (*GPUDevice) ProtoMessage()               {}
func (*GPUDevice) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *GPUDevice) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GPUDevice) GetVendorId() uint64 {
	if m != nil {
		return m.VendorId
	}
	return 0
}

func (m *GPUDevice) GetVendorName() string {
	if m != nil {
		return m.VendorName
	}
	return ""
}

func (m *GPUDevice) GetMaxMemorySize() uint64 {
	if m != nil {
		return m.MaxMemorySize
	}
	return 0
}

func (m *GPUDevice) GetMaxClockFrequency() uint64 {
	if m != nil {
		return m.MaxClockFrequency
	}
	return 0
}

func (m *GPUDevice) GetOpenCLDeviceVersionMajor() int32 {
	if m != nil {
		return m.OpenCLDeviceVersionMajor
	}
	return 0
}

func (m *GPUDevice) GetOpenCLDeviceVersionMinor() int32 {
	if m != nil {
		return m.OpenCLDeviceVersionMinor
	}
	return 0
}

func (m *GPUDevice) GetVendorType() GPUVendorType {
	if m != nil {
		return m.VendorType
	}
	return GPUVendorType_GPU_UNKNOWN
}

func init() {
	proto.RegisterType((*Capabilities)(nil), "sonm.Capabilities")
	proto.RegisterType((*CPUDevice)(nil), "sonm.CPUDevice")
	proto.RegisterType((*RAMDevice)(nil), "sonm.RAMDevice")
	proto.RegisterType((*GPUDevice)(nil), "sonm.GPUDevice")
	proto.RegisterEnum("sonm.GPUVendorType", GPUVendorType_name, GPUVendorType_value)
}

func init() { proto.RegisterFile("capabilities.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 462 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xc5, 0xb1, 0x1d, 0xea, 0x29, 0x6d, 0xc3, 0xc2, 0x61, 0x85, 0x10, 0x32, 0x11, 0x42, 0x11,
	0x42, 0x39, 0xb4, 0x42, 0x42, 0xdc, 0xa2, 0x04, 0xaa, 0x08, 0xe2, 0x56, 0x0b, 0x09, 0x47, 0xe4,
	0x3a, 0x43, 0x30, 0x78, 0x3f, 0xf0, 0x47, 0x69, 0xf8, 0xad, 0xfc, 0x13, 0x2e, 0x68, 0xc7, 0xd4,
	0x71, 0x5a, 0xe5, 0x36, 0x33, 0xef, 0xed, 0xdb, 0x79, 0x6f, 0x6d, 0x60, 0x49, 0x6c, 0xe2, 0x8b,
	0x34, 0x4b, 0xcb, 0x14, 0x8b, 0xa1, 0xc9, 0x75, 0xa9, 0x99, 0x57, 0x68, 0x25, 0xfb, 0xbf, 0xe0,
	0xde, 0xb8, 0x85, 0xb1, 0xa7, 0xe0, 0x26, 0xa6, 0xe2, 0x4e, 0xe8, 0x0e, 0xf6, 0x8f, 0x8f, 0x86,
	0x96, 0x33, 0x1c, 0x9f, 0xcf, 0x27, 0x78, 0x99, 0x26, 0x28, 0x2c, 0x66, 0x29, 0x12, 0x25, 0xef,
	0x84, 0xce, 0x86, 0x22, 0x46, 0xb3, 0x6b, 0x8a, 0x44, 0x69, 0x29, 0x2b, 0x53, 0x71, 0xb7, 0xad,
	0x72, 0xba, 0x51, 0x59, 0x99, 0xaa, 0xff, 0xd7, 0x81, 0xa0, 0x11, 0x66, 0x3d, 0x70, 0x55, 0x25,
	0xb9, 0x13, 0x3a, 0x03, 0x5f, 0xd8, 0x92, 0x3d, 0x82, 0xbd, 0x4b, 0x54, 0x4b, 0x9d, 0x4f, 0x97,
	0x74, 0x55, 0x20, 0x9a, 0x9e, 0x3d, 0x04, 0x5f, 0xea, 0x25, 0x66, 0xdc, 0x25, 0xa0, 0x6e, 0xd8,
	0x63, 0x08, 0xa8, 0x88, 0x62, 0x89, 0xdc, 0x23, 0x64, 0x33, 0xb0, 0x67, 0x12, 0x9d, 0x63, 0xc1,
	0x7d, 0xba, 0xa3, 0x6e, 0xd8, 0x73, 0x38, 0x4c, 0x32, 0x9d, 0xfc, 0x78, 0x97, 0xe3, 0xcf, 0x0a,
	0x55, 0xb2, 0xe6, 0xdd, 0xd0, 0x19, 0x38, 0xe2, 0xc6, 0xd4, 0x6a, 0x27, 0x71, 0xf2, 0x0d, 0x3f,
	0xa6, 0xbf, 0x91, 0xdf, 0x25, 0x85, 0xcd, 0xc0, 0xee, 0x5a, 0x94, 0x68, 0x4c, 0xaa, 0x56, 0x7c,
	0x8f, 0xc0, 0xa6, 0xb7, 0xf7, 0x7e, 0xcd, 0xe2, 0x55, 0xc1, 0x83, 0xd0, 0xb5, 0xbb, 0x52, 0xd3,
	0x7f, 0x05, 0x41, 0x13, 0x99, 0xa5, 0x94, 0xba, 0x8c, 0x33, 0xb2, 0xef, 0x89, 0xba, 0x61, 0x0c,
	0xbc, 0xaa, 0xc0, 0xda, 0xbc, 0x27, 0xa8, 0xee, 0xff, 0xe9, 0x40, 0xd0, 0xe4, 0x68, 0x19, 0xca,
	0x7a, 0x75, 0xc8, 0x2b, 0xd5, 0xb7, 0x62, 0xf3, 0x5a, 0xb1, 0x3d, 0x01, 0xa8, 0x6b, 0x4a, 0xa8,
	0xce, 0xae, 0x35, 0x61, 0xcf, 0xe0, 0x40, 0xc6, 0x57, 0x33, 0x94, 0x3a, 0x5f, 0x93, 0x51, 0x8f,
	0x04, 0xb6, 0x87, 0xec, 0x25, 0xdc, 0x97, 0xf1, 0xd5, 0x78, 0x3b, 0x35, 0x9f, 0x98, 0xb7, 0x01,
	0xf6, 0x06, 0xb8, 0x36, 0xa8, 0xc6, 0x1f, 0xea, 0x9d, 0x17, 0x98, 0x17, 0xa9, 0x56, 0xb3, 0xf8,
	0xbb, 0xce, 0x29, 0x6a, 0x5f, 0xec, 0xc4, 0x77, 0x9d, 0x4d, 0x95, 0xce, 0xff, 0xbf, 0xc1, 0x4e,
	0x9c, 0x9d, 0x5c, 0x7b, 0xfd, 0xb4, 0x36, 0x48, 0x8f, 0x72, 0x78, 0xfc, 0xa0, 0xf9, 0x10, 0x17,
	0x0d, 0x24, 0x5a, 0xb4, 0x17, 0xaf, 0xe1, 0x60, 0x0b, 0x64, 0x47, 0xb0, 0x7f, 0x7a, 0x3e, 0xff,
	0x32, 0x8f, 0xde, 0x47, 0x67, 0x9f, 0xa3, 0xde, 0x1d, 0x06, 0xd0, 0x8d, 0x16, 0xd3, 0xc9, 0x74,
	0xd4, 0x73, 0x6c, 0x2d, 0x46, 0x93, 0xb7, 0x67, 0x51, 0xaf, 0x73, 0xd1, 0xa5, 0x7f, 0xea, 0xe4,
	0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xed, 0x40, 0x85, 0x56, 0x69, 0x03, 0x00, 0x00,
}
