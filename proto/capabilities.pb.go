// Code generated by protoc-gen-go. DO NOT EDIT.
// source: capabilities.proto

package sonm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Capabilities struct {
	Cpu []*CPUDevice `protobuf:"bytes,1,rep,name=cpu" json:"cpu,omitempty"`
	Mem *RAMDevice   `protobuf:"bytes,2,opt,name=mem" json:"mem,omitempty"`
	Gpu []*GPUDevice `protobuf:"bytes,3,rep,name=gpu" json:"gpu,omitempty"`
}

func (m *Capabilities) Reset()                    { *m = Capabilities{} }
func (m *Capabilities) String() string            { return proto.CompactTextString(m) }
func (*Capabilities) ProtoMessage()               {}
func (*Capabilities) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Capabilities) GetCpu() []*CPUDevice {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *Capabilities) GetMem() *RAMDevice {
	if m != nil {
		return m.Mem
	}
	return nil
}

func (m *Capabilities) GetGpu() []*GPUDevice {
	if m != nil {
		return m.Gpu
	}
	return nil
}

type CPUDevice struct {
	Name   string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Vendor string            `protobuf:"bytes,2,opt,name=vendor" json:"vendor,omitempty"`
	Cores  int32             `protobuf:"varint,3,opt,name=cores" json:"cores,omitempty"`
	Mhz    float64           `protobuf:"fixed64,4,opt,name=mhz" json:"mhz,omitempty"`
	Ext    map[string]string `protobuf:"bytes,5,rep,name=ext" json:"ext,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *CPUDevice) Reset()                    { *m = CPUDevice{} }
func (m *CPUDevice) String() string            { return proto.CompactTextString(m) }
func (*CPUDevice) ProtoMessage()               {}
func (*CPUDevice) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *CPUDevice) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CPUDevice) GetVendor() string {
	if m != nil {
		return m.Vendor
	}
	return ""
}

func (m *CPUDevice) GetCores() int32 {
	if m != nil {
		return m.Cores
	}
	return 0
}

func (m *CPUDevice) GetMhz() float64 {
	if m != nil {
		return m.Mhz
	}
	return 0
}

func (m *CPUDevice) GetExt() map[string]string {
	if m != nil {
		return m.Ext
	}
	return nil
}

type RAMDevice struct {
	Total uint64 `protobuf:"varint,1,opt,name=total" json:"total,omitempty"`
	Used  uint64 `protobuf:"varint,2,opt,name=used" json:"used,omitempty"`
}

func (m *RAMDevice) Reset()                    { *m = RAMDevice{} }
func (m *RAMDevice) String() string            { return proto.CompactTextString(m) }
func (*RAMDevice) ProtoMessage()               {}
func (*RAMDevice) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *RAMDevice) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *RAMDevice) GetUsed() uint64 {
	if m != nil {
		return m.Used
	}
	return 0
}

type GPUDevice struct {
	// Name describes full GPU device name.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// VendorId describes vendor id.
	VendorId uint64 `protobuf:"varint,2,opt,name=vendorId" json:"vendorId,omitempty"`
	// VendorName describes vendor name, for example "NVIDIA" or "AMD".
	VendorName string `protobuf:"bytes,3,opt,name=vendorName" json:"vendorName,omitempty"`
	// Total maximum memory size the device can hold.
	MaxMemorySize uint64 `protobuf:"varint,4,opt,name=maxMemorySize" json:"maxMemorySize,omitempty"`
	// Maximum configured clock frequency of the device in MHz.
	MaxClockFrequency uint64 `protobuf:"varint,5,opt,name=maxClockFrequency" json:"maxClockFrequency,omitempty"`
	// OpenCL major version.
	OpenCLDeviceVersionMajor int32 `protobuf:"varint,6,opt,name=openCLDeviceVersionMajor" json:"openCLDeviceVersionMajor,omitempty"`
	// OpenCL minor version.
	OpenCLDeviceVersionMinor int32 `protobuf:"varint,7,opt,name=openCLDeviceVersionMinor" json:"openCLDeviceVersionMinor,omitempty"`
}

func (m *GPUDevice) Reset()                    { *m = GPUDevice{} }
func (m *GPUDevice) String() string            { return proto.CompactTextString(m) }
func (*GPUDevice) ProtoMessage()               {}
func (*GPUDevice) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *GPUDevice) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GPUDevice) GetVendorId() uint64 {
	if m != nil {
		return m.VendorId
	}
	return 0
}

func (m *GPUDevice) GetVendorName() string {
	if m != nil {
		return m.VendorName
	}
	return ""
}

func (m *GPUDevice) GetMaxMemorySize() uint64 {
	if m != nil {
		return m.MaxMemorySize
	}
	return 0
}

func (m *GPUDevice) GetMaxClockFrequency() uint64 {
	if m != nil {
		return m.MaxClockFrequency
	}
	return 0
}

func (m *GPUDevice) GetOpenCLDeviceVersionMajor() int32 {
	if m != nil {
		return m.OpenCLDeviceVersionMajor
	}
	return 0
}

func (m *GPUDevice) GetOpenCLDeviceVersionMinor() int32 {
	if m != nil {
		return m.OpenCLDeviceVersionMinor
	}
	return 0
}

func init() {
	proto.RegisterType((*Capabilities)(nil), "sonm.Capabilities")
	proto.RegisterType((*CPUDevice)(nil), "sonm.CPUDevice")
	proto.RegisterType((*RAMDevice)(nil), "sonm.RAMDevice")
	proto.RegisterType((*GPUDevice)(nil), "sonm.GPUDevice")
}

func init() { proto.RegisterFile("capabilities.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 385 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0x5d, 0x0b, 0xd3, 0x30,
	0x14, 0x25, 0x6b, 0x3b, 0xd7, 0xab, 0xa2, 0x06, 0x91, 0xb0, 0x07, 0xa9, 0xc5, 0x87, 0x22, 0xd2,
	0x07, 0x45, 0x91, 0xbd, 0x49, 0x9d, 0x43, 0x70, 0x22, 0x11, 0x7d, 0xcf, 0xba, 0xcb, 0xac, 0x6b,
	0x92, 0x9a, 0xb6, 0xb3, 0xdd, 0x1f, 0xf2, 0x87, 0xf8, 0xc7, 0x24, 0xe9, 0xbe, 0x54, 0xe6, 0xdb,
	0x39, 0xf7, 0x9c, 0x73, 0x73, 0xcf, 0x56, 0xa0, 0xb9, 0xa8, 0xc4, 0xaa, 0x28, 0x8b, 0xa6, 0xc0,
	0x3a, 0xad, 0x8c, 0x6e, 0x34, 0xf5, 0x6b, 0xad, 0x64, 0xfc, 0x03, 0x6e, 0x65, 0x17, 0x1a, 0x7d,
	0x04, 0x5e, 0x5e, 0xb5, 0x8c, 0x44, 0x5e, 0x72, 0xf3, 0xd9, 0x9d, 0xd4, 0x7a, 0xd2, 0xec, 0xe3,
	0xe7, 0x37, 0xb8, 0x2b, 0x72, 0xe4, 0x56, 0xb3, 0x16, 0x89, 0x92, 0x8d, 0x22, 0x72, 0xb6, 0xf0,
	0xd7, 0xcb, 0xa3, 0x45, 0xa2, 0xb4, 0x96, 0x4d, 0xd5, 0x32, 0xef, 0x72, 0xcb, 0xe2, 0xbc, 0x65,
	0x53, 0xb5, 0xf1, 0x2f, 0x02, 0xe1, 0x69, 0x31, 0xa5, 0xe0, 0x2b, 0x21, 0x91, 0x91, 0x88, 0x24,
	0x21, 0x77, 0x98, 0x3e, 0x80, 0xf1, 0x0e, 0xd5, 0x5a, 0x1b, 0xf7, 0x54, 0xc8, 0x0f, 0x8c, 0xde,
	0x87, 0x20, 0xd7, 0x06, 0x6b, 0xe6, 0x45, 0x24, 0x09, 0xf8, 0x40, 0xe8, 0x5d, 0xf0, 0xe4, 0xd7,
	0x3d, 0xf3, 0x23, 0x92, 0x10, 0x6e, 0x21, 0x7d, 0x02, 0x1e, 0x76, 0x0d, 0x0b, 0xdc, 0x11, 0xec,
	0xaf, 0x2a, 0xe9, 0xbc, 0x6b, 0xe6, 0xaa, 0x31, 0x3d, 0xb7, 0xa6, 0xe9, 0x4b, 0x98, 0x1c, 0x07,
	0x76, 0xd3, 0x16, 0xfb, 0xc3, 0x29, 0x16, 0xda, 0x17, 0x77, 0xa2, 0x6c, 0xf1, 0x70, 0xc8, 0x40,
	0x66, 0xa3, 0x57, 0x24, 0x7e, 0x01, 0xe1, 0xa9, 0xba, 0xb5, 0x35, 0xba, 0x11, 0xa5, 0x8b, 0xfa,
	0x7c, 0x20, 0xb6, 0x5a, 0x5b, 0xe3, 0xda, 0x65, 0x7d, 0xee, 0x70, 0xfc, 0x73, 0x04, 0xe1, 0xe2,
	0xbf, 0xe5, 0xa7, 0x30, 0x19, 0xea, 0xbe, 0x3b, 0x26, 0x4f, 0x9c, 0x3e, 0x04, 0x18, 0xf0, 0x07,
	0x9b, 0xf2, 0x5c, 0xea, 0x62, 0x42, 0x1f, 0xc3, 0x6d, 0x29, 0xba, 0x25, 0x4a, 0x6d, 0xfa, 0x4f,
	0xc5, 0x1e, 0xdd, 0x8f, 0xe2, 0xf3, 0x3f, 0x87, 0xf4, 0x29, 0xdc, 0x93, 0xa2, 0xcb, 0x4a, 0x9d,
	0x6f, 0xdf, 0x1a, 0xfc, 0xde, 0xa2, 0xca, 0x7b, 0x16, 0x38, 0xe7, 0xbf, 0x02, 0x9d, 0x01, 0xd3,
	0x15, 0xaa, 0xec, 0xfd, 0x70, 0xf3, 0x17, 0x34, 0x75, 0xa1, 0xd5, 0x52, 0x7c, 0xd3, 0x86, 0x8d,
	0xdd, 0xff, 0x70, 0x55, 0xbf, 0x96, 0x2d, 0x94, 0x36, 0xec, 0xc6, 0xf5, 0xac, 0xd5, 0x57, 0x63,
	0xf7, 0xb1, 0x3e, 0xff, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x8a, 0xd9, 0x30, 0x5b, 0xc2, 0x02, 0x00,
	0x00,
}
