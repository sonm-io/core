// Code generated by protoc-gen-go. DO NOT EDIT.
// source: node.proto

package sonm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// grpccmd imports
import (
	"io"

	"github.com/spf13/cobra"
	"github.com/sshaman1101/grpccmd"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type JoinNetworkRequest struct {
	TaskID    *TaskID `protobuf:"bytes,1,opt,name=taskID" json:"taskID,omitempty"`
	NetworkID string  `protobuf:"bytes,2,opt,name=NetworkID" json:"NetworkID,omitempty"`
}

func (m *JoinNetworkRequest) Reset()                    { *m = JoinNetworkRequest{} }
func (m *JoinNetworkRequest) String() string            { return proto.CompactTextString(m) }
func (*JoinNetworkRequest) ProtoMessage()               {}
func (*JoinNetworkRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{0} }

func (m *JoinNetworkRequest) GetTaskID() *TaskID {
	if m != nil {
		return m.TaskID
	}
	return nil
}

func (m *JoinNetworkRequest) GetNetworkID() string {
	if m != nil {
		return m.NetworkID
	}
	return ""
}

type TaskListRequest struct {
	// HubID is hub eth id;
	// If empty - collect task info from all hubs
	HubID string `protobuf:"bytes,1,opt,name=hubID" json:"hubID,omitempty"`
}

func (m *TaskListRequest) Reset()                    { *m = TaskListRequest{} }
func (m *TaskListRequest) String() string            { return proto.CompactTextString(m) }
func (*TaskListRequest) ProtoMessage()               {}
func (*TaskListRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{1} }

func (m *TaskListRequest) GetHubID() string {
	if m != nil {
		return m.HubID
	}
	return ""
}

type DealListRequest struct {
	Owner  string     `protobuf:"bytes,1,opt,name=owner" json:"owner,omitempty"`
	Status DealStatus `protobuf:"varint,2,opt,name=status,enum=sonm.DealStatus" json:"status,omitempty"`
}

func (m *DealListRequest) Reset()                    { *m = DealListRequest{} }
func (m *DealListRequest) String() string            { return proto.CompactTextString(m) }
func (*DealListRequest) ProtoMessage()               {}
func (*DealListRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{2} }

func (m *DealListRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *DealListRequest) GetStatus() DealStatus {
	if m != nil {
		return m.Status
	}
	return DealStatus_ANY_STATUS
}

type DealListReply struct {
	Deal []*Deal `protobuf:"bytes,1,rep,name=deal" json:"deal,omitempty"`
}

func (m *DealListReply) Reset()                    { *m = DealListReply{} }
func (m *DealListReply) String() string            { return proto.CompactTextString(m) }
func (*DealListReply) ProtoMessage()               {}
func (*DealListReply) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{3} }

func (m *DealListReply) GetDeal() []*Deal {
	if m != nil {
		return m.Deal
	}
	return nil
}

type DealStatusReply struct {
	Deal *Deal          `protobuf:"bytes,1,opt,name=deal" json:"deal,omitempty"`
	Info *DealInfoReply `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
}

func (m *DealStatusReply) Reset()                    { *m = DealStatusReply{} }
func (m *DealStatusReply) String() string            { return proto.CompactTextString(m) }
func (*DealStatusReply) ProtoMessage()               {}
func (*DealStatusReply) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{4} }

func (m *DealStatusReply) GetDeal() *Deal {
	if m != nil {
		return m.Deal
	}
	return nil
}

func (m *DealStatusReply) GetInfo() *DealInfoReply {
	if m != nil {
		return m.Info
	}
	return nil
}

func init() {
	proto.RegisterType((*JoinNetworkRequest)(nil), "sonm.JoinNetworkRequest")
	proto.RegisterType((*TaskListRequest)(nil), "sonm.TaskListRequest")
	proto.RegisterType((*DealListRequest)(nil), "sonm.DealListRequest")
	proto.RegisterType((*DealListReply)(nil), "sonm.DealListReply")
	proto.RegisterType((*DealStatusReply)(nil), "sonm.DealStatusReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TaskManagement service

type TaskManagementClient interface {
	// List produces a list of all tasks running on different SONM nodes
	List(ctx context.Context, in *TaskListRequest, opts ...grpc.CallOption) (*TaskListReply, error)
	// PushTask pushes image to Worker
	PushTask(ctx context.Context, opts ...grpc.CallOption) (TaskManagement_PushTaskClient, error)
	// Start starts a task on given resource
	Start(ctx context.Context, in *HubStartTaskRequest, opts ...grpc.CallOption) (*HubStartTaskReply, error)
	// JoinNetwork provides network specs to join specified task
	JoinNetwork(ctx context.Context, in *JoinNetworkRequest, opts ...grpc.CallOption) (*NetworkSpec, error)
	// Status produces a task status by their ID
	Status(ctx context.Context, in *TaskID, opts ...grpc.CallOption) (*TaskStatusReply, error)
	// Logs retrieves a task log (stdin/stderr) from given task
	Logs(ctx context.Context, in *TaskLogsRequest, opts ...grpc.CallOption) (TaskManagement_LogsClient, error)
	// Stop stops a task by their ID
	Stop(ctx context.Context, in *TaskID, opts ...grpc.CallOption) (*Empty, error)
	// PullTask pulls task image back
	PullTask(ctx context.Context, in *PullTaskRequest, opts ...grpc.CallOption) (TaskManagement_PullTaskClient, error)
}

type taskManagementClient struct {
	cc *grpc.ClientConn
}

func NewTaskManagementClient(cc *grpc.ClientConn) TaskManagementClient {
	return &taskManagementClient{cc}
}

func (c *taskManagementClient) List(ctx context.Context, in *TaskListRequest, opts ...grpc.CallOption) (*TaskListReply, error) {
	out := new(TaskListReply)
	err := grpc.Invoke(ctx, "/sonm.TaskManagement/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagementClient) PushTask(ctx context.Context, opts ...grpc.CallOption) (TaskManagement_PushTaskClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TaskManagement_serviceDesc.Streams[0], c.cc, "/sonm.TaskManagement/PushTask", opts...)
	if err != nil {
		return nil, err
	}
	x := &taskManagementPushTaskClient{stream}
	return x, nil
}

type TaskManagement_PushTaskClient interface {
	Send(*Chunk) error
	Recv() (*Progress, error)
	grpc.ClientStream
}

type taskManagementPushTaskClient struct {
	grpc.ClientStream
}

func (x *taskManagementPushTaskClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *taskManagementPushTaskClient) Recv() (*Progress, error) {
	m := new(Progress)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *taskManagementClient) Start(ctx context.Context, in *HubStartTaskRequest, opts ...grpc.CallOption) (*HubStartTaskReply, error) {
	out := new(HubStartTaskReply)
	err := grpc.Invoke(ctx, "/sonm.TaskManagement/Start", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagementClient) JoinNetwork(ctx context.Context, in *JoinNetworkRequest, opts ...grpc.CallOption) (*NetworkSpec, error) {
	out := new(NetworkSpec)
	err := grpc.Invoke(ctx, "/sonm.TaskManagement/JoinNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagementClient) Status(ctx context.Context, in *TaskID, opts ...grpc.CallOption) (*TaskStatusReply, error) {
	out := new(TaskStatusReply)
	err := grpc.Invoke(ctx, "/sonm.TaskManagement/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagementClient) Logs(ctx context.Context, in *TaskLogsRequest, opts ...grpc.CallOption) (TaskManagement_LogsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TaskManagement_serviceDesc.Streams[1], c.cc, "/sonm.TaskManagement/Logs", opts...)
	if err != nil {
		return nil, err
	}
	x := &taskManagementLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TaskManagement_LogsClient interface {
	Recv() (*TaskLogsChunk, error)
	grpc.ClientStream
}

type taskManagementLogsClient struct {
	grpc.ClientStream
}

func (x *taskManagementLogsClient) Recv() (*TaskLogsChunk, error) {
	m := new(TaskLogsChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *taskManagementClient) Stop(ctx context.Context, in *TaskID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.TaskManagement/Stop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagementClient) PullTask(ctx context.Context, in *PullTaskRequest, opts ...grpc.CallOption) (TaskManagement_PullTaskClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TaskManagement_serviceDesc.Streams[2], c.cc, "/sonm.TaskManagement/PullTask", opts...)
	if err != nil {
		return nil, err
	}
	x := &taskManagementPullTaskClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TaskManagement_PullTaskClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type taskManagementPullTaskClient struct {
	grpc.ClientStream
}

func (x *taskManagementPullTaskClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for TaskManagement service

type TaskManagementServer interface {
	// List produces a list of all tasks running on different SONM nodes
	List(context.Context, *TaskListRequest) (*TaskListReply, error)
	// PushTask pushes image to Worker
	PushTask(TaskManagement_PushTaskServer) error
	// Start starts a task on given resource
	Start(context.Context, *HubStartTaskRequest) (*HubStartTaskReply, error)
	// JoinNetwork provides network specs to join specified task
	JoinNetwork(context.Context, *JoinNetworkRequest) (*NetworkSpec, error)
	// Status produces a task status by their ID
	Status(context.Context, *TaskID) (*TaskStatusReply, error)
	// Logs retrieves a task log (stdin/stderr) from given task
	Logs(*TaskLogsRequest, TaskManagement_LogsServer) error
	// Stop stops a task by their ID
	Stop(context.Context, *TaskID) (*Empty, error)
	// PullTask pulls task image back
	PullTask(*PullTaskRequest, TaskManagement_PullTaskServer) error
}

func RegisterTaskManagementServer(s *grpc.Server, srv TaskManagementServer) {
	s.RegisterService(&_TaskManagement_serviceDesc, srv)
}

func _TaskManagement_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagementServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.TaskManagement/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagementServer).List(ctx, req.(*TaskListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManagement_PushTask_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TaskManagementServer).PushTask(&taskManagementPushTaskServer{stream})
}

type TaskManagement_PushTaskServer interface {
	Send(*Progress) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type taskManagementPushTaskServer struct {
	grpc.ServerStream
}

func (x *taskManagementPushTaskServer) Send(m *Progress) error {
	return x.ServerStream.SendMsg(m)
}

func (x *taskManagementPushTaskServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TaskManagement_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HubStartTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagementServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.TaskManagement/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagementServer).Start(ctx, req.(*HubStartTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManagement_JoinNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagementServer).JoinNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.TaskManagement/JoinNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagementServer).JoinNetwork(ctx, req.(*JoinNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManagement_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagementServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.TaskManagement/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagementServer).Status(ctx, req.(*TaskID))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManagement_Logs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TaskLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TaskManagementServer).Logs(m, &taskManagementLogsServer{stream})
}

type TaskManagement_LogsServer interface {
	Send(*TaskLogsChunk) error
	grpc.ServerStream
}

type taskManagementLogsServer struct {
	grpc.ServerStream
}

func (x *taskManagementLogsServer) Send(m *TaskLogsChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _TaskManagement_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagementServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.TaskManagement/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagementServer).Stop(ctx, req.(*TaskID))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManagement_PullTask_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullTaskRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TaskManagementServer).PullTask(m, &taskManagementPullTaskServer{stream})
}

type TaskManagement_PullTaskServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type taskManagementPullTaskServer struct {
	grpc.ServerStream
}

func (x *taskManagementPullTaskServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

var _TaskManagement_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sonm.TaskManagement",
	HandlerType: (*TaskManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _TaskManagement_List_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _TaskManagement_Start_Handler,
		},
		{
			MethodName: "JoinNetwork",
			Handler:    _TaskManagement_JoinNetwork_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _TaskManagement_Status_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _TaskManagement_Stop_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PushTask",
			Handler:       _TaskManagement_PushTask_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Logs",
			Handler:       _TaskManagement_Logs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PullTask",
			Handler:       _TaskManagement_PullTask_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "node.proto",
}

// Client API for DealManagement service

type DealManagementClient interface {
	// List produces a list of all deals made by client with given ID
	List(ctx context.Context, in *DealListRequest, opts ...grpc.CallOption) (*DealListReply, error)
	// Status produces a detailed info about deal with given ID
	Status(ctx context.Context, in *ID, opts ...grpc.CallOption) (*DealStatusReply, error)
	// Finish finishes a deal with given ID
	Finish(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error)
}

type dealManagementClient struct {
	cc *grpc.ClientConn
}

func NewDealManagementClient(cc *grpc.ClientConn) DealManagementClient {
	return &dealManagementClient{cc}
}

func (c *dealManagementClient) List(ctx context.Context, in *DealListRequest, opts ...grpc.CallOption) (*DealListReply, error) {
	out := new(DealListReply)
	err := grpc.Invoke(ctx, "/sonm.DealManagement/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealManagementClient) Status(ctx context.Context, in *ID, opts ...grpc.CallOption) (*DealStatusReply, error) {
	out := new(DealStatusReply)
	err := grpc.Invoke(ctx, "/sonm.DealManagement/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealManagementClient) Finish(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.DealManagement/Finish", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DealManagement service

type DealManagementServer interface {
	// List produces a list of all deals made by client with given ID
	List(context.Context, *DealListRequest) (*DealListReply, error)
	// Status produces a detailed info about deal with given ID
	Status(context.Context, *ID) (*DealStatusReply, error)
	// Finish finishes a deal with given ID
	Finish(context.Context, *ID) (*Empty, error)
}

func RegisterDealManagementServer(s *grpc.Server, srv DealManagementServer) {
	s.RegisterService(&_DealManagement_serviceDesc, srv)
}

func _DealManagement_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DealListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealManagementServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.DealManagement/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealManagementServer).List(ctx, req.(*DealListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DealManagement_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealManagementServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.DealManagement/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealManagementServer).Status(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DealManagement_Finish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealManagementServer).Finish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.DealManagement/Finish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealManagementServer).Finish(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

var _DealManagement_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sonm.DealManagement",
	HandlerType: (*DealManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _DealManagement_List_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _DealManagement_Status_Handler,
		},
		{
			MethodName: "Finish",
			Handler:    _DealManagement_Finish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}

// Client API for HubManagement service

type HubManagementClient interface {
	// Status produse a detailed info about Hub
	Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HubStatusReply, error)
	// rpc DeviceList(Empty) returns (DevicesReply) {}
	// GetDeviceInfo provides detailed information about device
	// and show benchmark results.
	//
	// TODO: returns smth that can represent miner.hardware (extend Capabilities?)
	GetDeviceInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DevicesReply, error)
	// List produces a list of all running tasks on the Hub
	TaskList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TaskListReply, error)
	// GetAskPlans allows to obtain previously assigned Ask Plans from for a given worker.
	GetAskPlans(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SlotsReply, error)
	// CreateAskPlan allows to create rules
	// for creating Ask orders on Marketplace
	CreateAskPlan(ctx context.Context, in *InsertSlotRequest, opts ...grpc.CallOption) (*ID, error)
	// RemoveAskPlan allows to remove rules
	// for creating Ask orders on Marketplace
	RemoveAskPlan(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error)
}

type hubManagementClient struct {
	cc *grpc.ClientConn
}

func NewHubManagementClient(cc *grpc.ClientConn) HubManagementClient {
	return &hubManagementClient{cc}
}

func (c *hubManagementClient) Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HubStatusReply, error) {
	out := new(HubStatusReply)
	err := grpc.Invoke(ctx, "/sonm.HubManagement/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubManagementClient) GetDeviceInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DevicesReply, error) {
	out := new(DevicesReply)
	err := grpc.Invoke(ctx, "/sonm.HubManagement/GetDeviceInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubManagementClient) TaskList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TaskListReply, error) {
	out := new(TaskListReply)
	err := grpc.Invoke(ctx, "/sonm.HubManagement/TaskList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubManagementClient) GetAskPlans(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SlotsReply, error) {
	out := new(SlotsReply)
	err := grpc.Invoke(ctx, "/sonm.HubManagement/GetAskPlans", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubManagementClient) CreateAskPlan(ctx context.Context, in *InsertSlotRequest, opts ...grpc.CallOption) (*ID, error) {
	out := new(ID)
	err := grpc.Invoke(ctx, "/sonm.HubManagement/CreateAskPlan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubManagementClient) RemoveAskPlan(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.HubManagement/RemoveAskPlan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HubManagement service

type HubManagementServer interface {
	// Status produse a detailed info about Hub
	Status(context.Context, *Empty) (*HubStatusReply, error)
	// rpc DeviceList(Empty) returns (DevicesReply) {}
	// GetDeviceInfo provides detailed information about device
	// and show benchmark results.
	//
	// TODO: returns smth that can represent miner.hardware (extend Capabilities?)
	GetDeviceInfo(context.Context, *Empty) (*DevicesReply, error)
	// List produces a list of all running tasks on the Hub
	TaskList(context.Context, *Empty) (*TaskListReply, error)
	// GetAskPlans allows to obtain previously assigned Ask Plans from for a given worker.
	GetAskPlans(context.Context, *Empty) (*SlotsReply, error)
	// CreateAskPlan allows to create rules
	// for creating Ask orders on Marketplace
	CreateAskPlan(context.Context, *InsertSlotRequest) (*ID, error)
	// RemoveAskPlan allows to remove rules
	// for creating Ask orders on Marketplace
	RemoveAskPlan(context.Context, *ID) (*Empty, error)
}

func RegisterHubManagementServer(s *grpc.Server, srv HubManagementServer) {
	s.RegisterService(&_HubManagement_serviceDesc, srv)
}

func _HubManagement_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubManagementServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.HubManagement/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubManagementServer).Status(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubManagement_GetDeviceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubManagementServer).GetDeviceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.HubManagement/GetDeviceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubManagementServer).GetDeviceInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubManagement_TaskList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubManagementServer).TaskList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.HubManagement/TaskList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubManagementServer).TaskList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubManagement_GetAskPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubManagementServer).GetAskPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.HubManagement/GetAskPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubManagementServer).GetAskPlans(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubManagement_CreateAskPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubManagementServer).CreateAskPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.HubManagement/CreateAskPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubManagementServer).CreateAskPlan(ctx, req.(*InsertSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubManagement_RemoveAskPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubManagementServer).RemoveAskPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.HubManagement/RemoveAskPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubManagementServer).RemoveAskPlan(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

var _HubManagement_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sonm.HubManagement",
	HandlerType: (*HubManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _HubManagement_Status_Handler,
		},
		{
			MethodName: "GetDeviceInfo",
			Handler:    _HubManagement_GetDeviceInfo_Handler,
		},
		{
			MethodName: "TaskList",
			Handler:    _HubManagement_TaskList_Handler,
		},
		{
			MethodName: "GetAskPlans",
			Handler:    _HubManagement_GetAskPlans_Handler,
		},
		{
			MethodName: "CreateAskPlan",
			Handler:    _HubManagement_CreateAskPlan_Handler,
		},
		{
			MethodName: "RemoveAskPlan",
			Handler:    _HubManagement_RemoveAskPlan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}

// Client API for MasterManagement service

type MasterManagementClient interface {
	// WorkersList returns worker's list for current master address.
	// List includes already registred workers and pending unapproved requests.
	WorkersList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// WorkerConfirm (as master) confirms incoming request for given Worker address.
	WorkerConfirm(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error)
	// WorkerRemove (as master) unbinds given Worker address from Master address.
	WorkerRemove(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error)
}

type masterManagementClient struct {
	cc *grpc.ClientConn
}

func NewMasterManagementClient(cc *grpc.ClientConn) MasterManagementClient {
	return &masterManagementClient{cc}
}

func (c *masterManagementClient) WorkersList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.MasterManagement/WorkersList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterManagementClient) WorkerConfirm(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.MasterManagement/WorkerConfirm", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterManagementClient) WorkerRemove(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.MasterManagement/WorkerRemove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MasterManagement service

type MasterManagementServer interface {
	// WorkersList returns worker's list for current master address.
	// List includes already registred workers and pending unapproved requests.
	WorkersList(context.Context, *Empty) (*Empty, error)
	// WorkerConfirm (as master) confirms incoming request for given Worker address.
	WorkerConfirm(context.Context, *ID) (*Empty, error)
	// WorkerRemove (as master) unbinds given Worker address from Master address.
	WorkerRemove(context.Context, *ID) (*Empty, error)
}

func RegisterMasterManagementServer(s *grpc.Server, srv MasterManagementServer) {
	s.RegisterService(&_MasterManagement_serviceDesc, srv)
}

func _MasterManagement_WorkersList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterManagementServer).WorkersList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.MasterManagement/WorkersList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterManagementServer).WorkersList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterManagement_WorkerConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterManagementServer).WorkerConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.MasterManagement/WorkerConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterManagementServer).WorkerConfirm(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterManagement_WorkerRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterManagementServer).WorkerRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.MasterManagement/WorkerRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterManagementServer).WorkerRemove(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

var _MasterManagement_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sonm.MasterManagement",
	HandlerType: (*MasterManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WorkersList",
			Handler:    _MasterManagement_WorkersList_Handler,
		},
		{
			MethodName: "WorkerConfirm",
			Handler:    _MasterManagement_WorkerConfirm_Handler,
		},
		{
			MethodName: "WorkerRemove",
			Handler:    _MasterManagement_WorkerRemove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}

// Begin grpccmd
var _ = grpccmd.RunE

// TaskManagement
var _TaskManagementCmd = &cobra.Command{
	Use:   "taskManagement [method]",
	Short: "Subcommand for the TaskManagement service.",
}

var _TaskManagement_ListCmd = &cobra.Command{
	Use:   "list",
	Short: "Make the List method call, input-type: sonm.TaskListRequest output-type: sonm.TaskListReply",
	RunE: grpccmd.RunE(
		"List",
		"sonm.TaskListRequest",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewTaskManagementClient(cc)
		},
	),
}

var _TaskManagement_ListCmd_gen = &cobra.Command{
	Use:   "list-gen",
	Short: "Generate JSON for method call of List (input-type: sonm.TaskListRequest)",
	RunE:  grpccmd.TypeToJson("sonm.TaskListRequest"),
}

var _TaskManagement_PushTaskCmd = &cobra.Command{
	Use:   "pushTask",
	Short: "Make the PushTask method call, input-type: sonm.Chunk output-type: sonm.Progress",
	RunE: grpccmd.RunE(
		"PushTask",
		"sonm.Chunk",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewTaskManagementClient(cc)
		},
	),
}

var _TaskManagement_PushTaskCmd_gen = &cobra.Command{
	Use:   "pushTask-gen",
	Short: "Generate JSON for method call of PushTask (input-type: sonm.Chunk)",
	RunE:  grpccmd.TypeToJson("sonm.Chunk"),
}

var _TaskManagement_StartCmd = &cobra.Command{
	Use:   "start",
	Short: "Make the Start method call, input-type: sonm.HubStartTaskRequest output-type: sonm.HubStartTaskReply",
	RunE: grpccmd.RunE(
		"Start",
		"sonm.HubStartTaskRequest",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewTaskManagementClient(cc)
		},
	),
}

var _TaskManagement_StartCmd_gen = &cobra.Command{
	Use:   "start-gen",
	Short: "Generate JSON for method call of Start (input-type: sonm.HubStartTaskRequest)",
	RunE:  grpccmd.TypeToJson("sonm.HubStartTaskRequest"),
}

var _TaskManagement_JoinNetworkCmd = &cobra.Command{
	Use:   "joinNetwork",
	Short: "Make the JoinNetwork method call, input-type: sonm.JoinNetworkRequest output-type: sonm.NetworkSpec",
	RunE: grpccmd.RunE(
		"JoinNetwork",
		"sonm.JoinNetworkRequest",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewTaskManagementClient(cc)
		},
	),
}

var _TaskManagement_JoinNetworkCmd_gen = &cobra.Command{
	Use:   "joinNetwork-gen",
	Short: "Generate JSON for method call of JoinNetwork (input-type: sonm.JoinNetworkRequest)",
	RunE:  grpccmd.TypeToJson("sonm.JoinNetworkRequest"),
}

var _TaskManagement_StatusCmd = &cobra.Command{
	Use:   "status",
	Short: "Make the Status method call, input-type: sonm.TaskID output-type: sonm.TaskStatusReply",
	RunE: grpccmd.RunE(
		"Status",
		"sonm.TaskID",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewTaskManagementClient(cc)
		},
	),
}

var _TaskManagement_StatusCmd_gen = &cobra.Command{
	Use:   "status-gen",
	Short: "Generate JSON for method call of Status (input-type: sonm.TaskID)",
	RunE:  grpccmd.TypeToJson("sonm.TaskID"),
}

var _TaskManagement_LogsCmd = &cobra.Command{
	Use:   "logs",
	Short: "Make the Logs method call, input-type: sonm.TaskLogsRequest output-type: sonm.TaskLogsChunk",
	RunE: grpccmd.RunE(
		"Logs",
		"sonm.TaskLogsRequest",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewTaskManagementClient(cc)
		},
	),
}

var _TaskManagement_LogsCmd_gen = &cobra.Command{
	Use:   "logs-gen",
	Short: "Generate JSON for method call of Logs (input-type: sonm.TaskLogsRequest)",
	RunE:  grpccmd.TypeToJson("sonm.TaskLogsRequest"),
}

var _TaskManagement_StopCmd = &cobra.Command{
	Use:   "stop",
	Short: "Make the Stop method call, input-type: sonm.TaskID output-type: sonm.Empty",
	RunE: grpccmd.RunE(
		"Stop",
		"sonm.TaskID",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewTaskManagementClient(cc)
		},
	),
}

var _TaskManagement_StopCmd_gen = &cobra.Command{
	Use:   "stop-gen",
	Short: "Generate JSON for method call of Stop (input-type: sonm.TaskID)",
	RunE:  grpccmd.TypeToJson("sonm.TaskID"),
}

var _TaskManagement_PullTaskCmd = &cobra.Command{
	Use:   "pullTask",
	Short: "Make the PullTask method call, input-type: sonm.PullTaskRequest output-type: sonm.Chunk",
	RunE: grpccmd.RunE(
		"PullTask",
		"sonm.PullTaskRequest",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewTaskManagementClient(cc)
		},
	),
}

var _TaskManagement_PullTaskCmd_gen = &cobra.Command{
	Use:   "pullTask-gen",
	Short: "Generate JSON for method call of PullTask (input-type: sonm.PullTaskRequest)",
	RunE:  grpccmd.TypeToJson("sonm.PullTaskRequest"),
}

// Register commands with the root command and service command
func init() {
	grpccmd.RegisterServiceCmd(_TaskManagementCmd)
	_TaskManagementCmd.AddCommand(
		_TaskManagement_ListCmd,
		_TaskManagement_ListCmd_gen,
		_TaskManagement_PushTaskCmd,
		_TaskManagement_PushTaskCmd_gen,
		_TaskManagement_StartCmd,
		_TaskManagement_StartCmd_gen,
		_TaskManagement_JoinNetworkCmd,
		_TaskManagement_JoinNetworkCmd_gen,
		_TaskManagement_StatusCmd,
		_TaskManagement_StatusCmd_gen,
		_TaskManagement_LogsCmd,
		_TaskManagement_LogsCmd_gen,
		_TaskManagement_StopCmd,
		_TaskManagement_StopCmd_gen,
		_TaskManagement_PullTaskCmd,
		_TaskManagement_PullTaskCmd_gen,
	)
}

// DealManagement
var _DealManagementCmd = &cobra.Command{
	Use:   "dealManagement [method]",
	Short: "Subcommand for the DealManagement service.",
}

var _DealManagement_ListCmd = &cobra.Command{
	Use:   "list",
	Short: "Make the List method call, input-type: sonm.DealListRequest output-type: sonm.DealListReply",
	RunE: grpccmd.RunE(
		"List",
		"sonm.DealListRequest",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewDealManagementClient(cc)
		},
	),
}

var _DealManagement_ListCmd_gen = &cobra.Command{
	Use:   "list-gen",
	Short: "Generate JSON for method call of List (input-type: sonm.DealListRequest)",
	RunE:  grpccmd.TypeToJson("sonm.DealListRequest"),
}

var _DealManagement_StatusCmd = &cobra.Command{
	Use:   "status",
	Short: "Make the Status method call, input-type: sonm.ID output-type: sonm.DealStatusReply",
	RunE: grpccmd.RunE(
		"Status",
		"sonm.ID",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewDealManagementClient(cc)
		},
	),
}

var _DealManagement_StatusCmd_gen = &cobra.Command{
	Use:   "status-gen",
	Short: "Generate JSON for method call of Status (input-type: sonm.ID)",
	RunE:  grpccmd.TypeToJson("sonm.ID"),
}

var _DealManagement_FinishCmd = &cobra.Command{
	Use:   "finish",
	Short: "Make the Finish method call, input-type: sonm.ID output-type: sonm.Empty",
	RunE: grpccmd.RunE(
		"Finish",
		"sonm.ID",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewDealManagementClient(cc)
		},
	),
}

var _DealManagement_FinishCmd_gen = &cobra.Command{
	Use:   "finish-gen",
	Short: "Generate JSON for method call of Finish (input-type: sonm.ID)",
	RunE:  grpccmd.TypeToJson("sonm.ID"),
}

// Register commands with the root command and service command
func init() {
	grpccmd.RegisterServiceCmd(_DealManagementCmd)
	_DealManagementCmd.AddCommand(
		_DealManagement_ListCmd,
		_DealManagement_ListCmd_gen,
		_DealManagement_StatusCmd,
		_DealManagement_StatusCmd_gen,
		_DealManagement_FinishCmd,
		_DealManagement_FinishCmd_gen,
	)
}

// HubManagement
var _HubManagementCmd = &cobra.Command{
	Use:   "hubManagement [method]",
	Short: "Subcommand for the HubManagement service.",
}

var _HubManagement_StatusCmd = &cobra.Command{
	Use:   "status",
	Short: "Make the Status method call, input-type: sonm.Empty output-type: sonm.HubStatusReply",
	RunE: grpccmd.RunE(
		"Status",
		"sonm.Empty",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewHubManagementClient(cc)
		},
	),
}

var _HubManagement_StatusCmd_gen = &cobra.Command{
	Use:   "status-gen",
	Short: "Generate JSON for method call of Status (input-type: sonm.Empty)",
	RunE:  grpccmd.TypeToJson("sonm.Empty"),
}

var _HubManagement_GetDeviceInfoCmd = &cobra.Command{
	Use:   "getDeviceInfo",
	Short: "Make the GetDeviceInfo method call, input-type: sonm.Empty output-type: sonm.DevicesReply",
	RunE: grpccmd.RunE(
		"GetDeviceInfo",
		"sonm.Empty",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewHubManagementClient(cc)
		},
	),
}

var _HubManagement_GetDeviceInfoCmd_gen = &cobra.Command{
	Use:   "getDeviceInfo-gen",
	Short: "Generate JSON for method call of GetDeviceInfo (input-type: sonm.Empty)",
	RunE:  grpccmd.TypeToJson("sonm.Empty"),
}

var _HubManagement_TaskListCmd = &cobra.Command{
	Use:   "taskList",
	Short: "Make the TaskList method call, input-type: sonm.Empty output-type: sonm.TaskListReply",
	RunE: grpccmd.RunE(
		"TaskList",
		"sonm.Empty",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewHubManagementClient(cc)
		},
	),
}

var _HubManagement_TaskListCmd_gen = &cobra.Command{
	Use:   "taskList-gen",
	Short: "Generate JSON for method call of TaskList (input-type: sonm.Empty)",
	RunE:  grpccmd.TypeToJson("sonm.Empty"),
}

var _HubManagement_GetAskPlansCmd = &cobra.Command{
	Use:   "getAskPlans",
	Short: "Make the GetAskPlans method call, input-type: sonm.Empty output-type: sonm.SlotsReply",
	RunE: grpccmd.RunE(
		"GetAskPlans",
		"sonm.Empty",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewHubManagementClient(cc)
		},
	),
}

var _HubManagement_GetAskPlansCmd_gen = &cobra.Command{
	Use:   "getAskPlans-gen",
	Short: "Generate JSON for method call of GetAskPlans (input-type: sonm.Empty)",
	RunE:  grpccmd.TypeToJson("sonm.Empty"),
}

var _HubManagement_CreateAskPlanCmd = &cobra.Command{
	Use:   "createAskPlan",
	Short: "Make the CreateAskPlan method call, input-type: sonm.InsertSlotRequest output-type: sonm.ID",
	RunE: grpccmd.RunE(
		"CreateAskPlan",
		"sonm.InsertSlotRequest",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewHubManagementClient(cc)
		},
	),
}

var _HubManagement_CreateAskPlanCmd_gen = &cobra.Command{
	Use:   "createAskPlan-gen",
	Short: "Generate JSON for method call of CreateAskPlan (input-type: sonm.InsertSlotRequest)",
	RunE:  grpccmd.TypeToJson("sonm.InsertSlotRequest"),
}

var _HubManagement_RemoveAskPlanCmd = &cobra.Command{
	Use:   "removeAskPlan",
	Short: "Make the RemoveAskPlan method call, input-type: sonm.ID output-type: sonm.Empty",
	RunE: grpccmd.RunE(
		"RemoveAskPlan",
		"sonm.ID",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewHubManagementClient(cc)
		},
	),
}

var _HubManagement_RemoveAskPlanCmd_gen = &cobra.Command{
	Use:   "removeAskPlan-gen",
	Short: "Generate JSON for method call of RemoveAskPlan (input-type: sonm.ID)",
	RunE:  grpccmd.TypeToJson("sonm.ID"),
}

// Register commands with the root command and service command
func init() {
	grpccmd.RegisterServiceCmd(_HubManagementCmd)
	_HubManagementCmd.AddCommand(
		_HubManagement_StatusCmd,
		_HubManagement_StatusCmd_gen,
		_HubManagement_GetDeviceInfoCmd,
		_HubManagement_GetDeviceInfoCmd_gen,
		_HubManagement_TaskListCmd,
		_HubManagement_TaskListCmd_gen,
		_HubManagement_GetAskPlansCmd,
		_HubManagement_GetAskPlansCmd_gen,
		_HubManagement_CreateAskPlanCmd,
		_HubManagement_CreateAskPlanCmd_gen,
		_HubManagement_RemoveAskPlanCmd,
		_HubManagement_RemoveAskPlanCmd_gen,
	)
}

// MasterManagement
var _MasterManagementCmd = &cobra.Command{
	Use:   "masterManagement [method]",
	Short: "Subcommand for the MasterManagement service.",
}

var _MasterManagement_WorkersListCmd = &cobra.Command{
	Use:   "workersList",
	Short: "Make the WorkersList method call, input-type: sonm.Empty output-type: sonm.Empty",
	RunE: grpccmd.RunE(
		"WorkersList",
		"sonm.Empty",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewMasterManagementClient(cc)
		},
	),
}

var _MasterManagement_WorkersListCmd_gen = &cobra.Command{
	Use:   "workersList-gen",
	Short: "Generate JSON for method call of WorkersList (input-type: sonm.Empty)",
	RunE:  grpccmd.TypeToJson("sonm.Empty"),
}

var _MasterManagement_WorkerConfirmCmd = &cobra.Command{
	Use:   "workerConfirm",
	Short: "Make the WorkerConfirm method call, input-type: sonm.ID output-type: sonm.Empty",
	RunE: grpccmd.RunE(
		"WorkerConfirm",
		"sonm.ID",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewMasterManagementClient(cc)
		},
	),
}

var _MasterManagement_WorkerConfirmCmd_gen = &cobra.Command{
	Use:   "workerConfirm-gen",
	Short: "Generate JSON for method call of WorkerConfirm (input-type: sonm.ID)",
	RunE:  grpccmd.TypeToJson("sonm.ID"),
}

var _MasterManagement_WorkerRemoveCmd = &cobra.Command{
	Use:   "workerRemove",
	Short: "Make the WorkerRemove method call, input-type: sonm.ID output-type: sonm.Empty",
	RunE: grpccmd.RunE(
		"WorkerRemove",
		"sonm.ID",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewMasterManagementClient(cc)
		},
	),
}

var _MasterManagement_WorkerRemoveCmd_gen = &cobra.Command{
	Use:   "workerRemove-gen",
	Short: "Generate JSON for method call of WorkerRemove (input-type: sonm.ID)",
	RunE:  grpccmd.TypeToJson("sonm.ID"),
}

// Register commands with the root command and service command
func init() {
	grpccmd.RegisterServiceCmd(_MasterManagementCmd)
	_MasterManagementCmd.AddCommand(
		_MasterManagement_WorkersListCmd,
		_MasterManagement_WorkersListCmd_gen,
		_MasterManagement_WorkerConfirmCmd,
		_MasterManagement_WorkerConfirmCmd_gen,
		_MasterManagement_WorkerRemoveCmd,
		_MasterManagement_WorkerRemoveCmd_gen,
	)
}

// End grpccmd

func init() { proto.RegisterFile("node.proto", fileDescriptor12) }

var fileDescriptor12 = []byte{
	// 643 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x54, 0x5d, 0x4f, 0x13, 0x4d,
	0x18, 0xdd, 0x85, 0xd2, 0xd0, 0x67, 0x69, 0xe1, 0x1d, 0x78, 0x63, 0xdd, 0x18, 0x83, 0xa3, 0x09,
	0x6b, 0x0c, 0x85, 0xac, 0xc4, 0x2b, 0xbd, 0x30, 0x54, 0xa1, 0x06, 0x0c, 0x6e, 0x4d, 0x34, 0xde,
	0x4d, 0x61, 0x68, 0x37, 0xdd, 0xce, 0xd4, 0x99, 0x59, 0x08, 0xff, 0xc2, 0x2b, 0x7f, 0x88, 0xf1,
	0x07, 0x9a, 0xf9, 0xd8, 0x76, 0xbb, 0xd0, 0xcb, 0x39, 0xcf, 0x39, 0xcf, 0xc7, 0xd9, 0xd3, 0x02,
	0x30, 0x7e, 0x45, 0x3b, 0x53, 0xc1, 0x15, 0x47, 0x35, 0xc9, 0xd9, 0x24, 0x84, 0x2b, 0x4a, 0x32,
	0x8b, 0x84, 0x9b, 0x29, 0xd3, 0x18, 0x4b, 0x89, 0x03, 0x1a, 0xa3, 0x7c, 0x50, 0xd4, 0x2e, 0x39,
	0x53, 0x24, 0x65, 0x54, 0x58, 0x00, 0x7f, 0x07, 0xf4, 0x89, 0xa7, 0xec, 0x33, 0x55, 0xb7, 0x5c,
	0x8c, 0x13, 0xfa, 0x33, 0xa7, 0x52, 0xa1, 0x17, 0x50, 0x57, 0x44, 0x8e, 0x7b, 0xdd, 0xb6, 0xbf,
	0xeb, 0x47, 0x41, 0xbc, 0xd1, 0xd1, 0x1d, 0x3b, 0x5f, 0x0d, 0x96, 0xb8, 0x1a, 0x7a, 0x02, 0x0d,
	0xa7, 0xeb, 0x75, 0xdb, 0x2b, 0xbb, 0x7e, 0xd4, 0x48, 0xe6, 0x00, 0xde, 0x83, 0x4d, 0xcd, 0x3f,
	0x4b, 0xa5, 0x2a, 0xda, 0xee, 0xc0, 0xda, 0x28, 0x1f, 0xb8, 0xae, 0x8d, 0xc4, 0x3e, 0xf0, 0x17,
	0xd8, 0xec, 0x52, 0x92, 0x55, 0x88, 0xfc, 0x96, 0x51, 0x51, 0x10, 0xcd, 0x03, 0x45, 0x50, 0x97,
	0x8a, 0xa8, 0x5c, 0x9a, 0x61, 0xad, 0x78, 0xcb, 0x6e, 0xa5, 0xc5, 0x7d, 0x83, 0x27, 0xae, 0x8e,
	0x0f, 0xa0, 0x39, 0x6f, 0x39, 0xcd, 0xee, 0xd0, 0x53, 0xa8, 0x69, 0x87, 0xda, 0xfe, 0xee, 0x6a,
	0x14, 0xc4, 0x30, 0x17, 0x26, 0x06, 0xc7, 0x3f, 0xec, 0x0e, 0xae, 0x4d, 0x45, 0xe2, 0x3f, 0x24,
	0x41, 0x7b, 0x50, 0x4b, 0xd9, 0x35, 0x37, 0xbb, 0x04, 0xf1, 0xf6, 0xbc, 0xde, 0x63, 0xd7, 0xdc,
	0xb4, 0x48, 0x0c, 0x21, 0xfe, 0xbb, 0x0a, 0x2d, 0xed, 0xc4, 0x39, 0x61, 0x64, 0x48, 0x27, 0x94,
	0x29, 0x74, 0x04, 0x35, 0xbd, 0x1b, 0xfa, 0x7f, 0xee, 0x6b, 0xe9, 0xfc, 0x70, 0xbb, 0x0a, 0x4f,
	0xb3, 0x3b, 0xec, 0xa1, 0x7d, 0x58, 0xbf, 0xc8, 0xe5, 0x48, 0xc3, 0x28, 0xb0, 0x94, 0xe3, 0x51,
	0xce, 0xc6, 0x61, 0xcb, 0x3e, 0x2e, 0x04, 0x1f, 0x0a, 0x2a, 0x25, 0xf6, 0x22, 0xff, 0xd0, 0x47,
	0xef, 0x60, 0xad, 0xaf, 0x88, 0x50, 0xe8, 0xb1, 0x2d, 0x9f, 0xe6, 0x03, 0xf3, 0xd6, 0xfa, 0x62,
	0xd2, 0xa3, 0x87, 0x4a, 0x76, 0xda, 0x5b, 0x08, 0x4a, 0xc9, 0x40, 0x6d, 0xcb, 0xbc, 0x1f, 0x96,
	0xf0, 0x3f, 0x5b, 0x71, 0x68, 0x7f, 0x4a, 0x2f, 0xb1, 0x87, 0x0e, 0xa0, 0x6e, 0xcd, 0x44, 0x0b,
	0xd9, 0x09, 0x4b, 0x17, 0x97, 0xcc, 0xc6, 0x1e, 0x7a, 0x03, 0xb5, 0x33, 0x3e, 0x94, 0x0b, 0x96,
	0xf0, 0xa1, 0x7c, 0xc8, 0x12, 0x3e, 0x94, 0xe6, 0x6e, 0xec, 0x1d, 0xfa, 0xe8, 0x39, 0xd4, 0xfa,
	0x8a, 0x4f, 0x2b, 0x63, 0x9c, 0x3d, 0x1f, 0x26, 0x53, 0xa5, 0x9b, 0xc7, 0xda, 0xb9, 0x2c, 0x33,
	0xce, 0xb9, 0x01, 0xc5, 0xbb, 0x18, 0x50, 0x36, 0x54, 0x37, 0x8e, 0x7f, 0xfb, 0xd0, 0xd2, 0x9f,
	0x73, 0xf9, 0x67, 0xab, 0xa4, 0x36, 0xdc, 0xae, 0xc2, 0xf6, 0xb2, 0x57, 0x33, 0x2b, 0xd6, 0x2d,
	0x61, 0x6e, 0x43, 0x25, 0x73, 0xd8, 0x43, 0xcf, 0xa0, 0xfe, 0x31, 0x65, 0xa9, 0x1c, 0x95, 0xc8,
	0x8b, 0xc7, 0xc4, 0x7f, 0x56, 0xa0, 0x79, 0x9a, 0x0f, 0x4a, 0x7b, 0xed, 0xcf, 0x26, 0x94, 0xa9,
	0xe1, 0x4e, 0xf9, 0xe3, 0x96, 0x66, 0xc4, 0xd0, 0x3c, 0xa1, 0xaa, 0x4b, 0x6f, 0xd2, 0x4b, 0xaa,
	0xc3, 0xba, 0xa8, 0x42, 0xc5, 0x6a, 0xba, 0x3c, 0xd3, 0x74, 0x60, 0xbd, 0x88, 0xe3, 0x22, 0x7d,
	0x49, 0x56, 0x3b, 0x10, 0x9c, 0x50, 0xf5, 0x5e, 0x8e, 0x2f, 0x32, 0xc2, 0x2a, 0x7b, 0xb9, 0xdf,
	0x6d, 0x3f, 0xe3, 0x6a, 0xd6, 0xff, 0x08, 0x9a, 0xc7, 0x82, 0x12, 0x45, 0x9d, 0x04, 0xb9, 0x64,
	0xf6, 0x98, 0xa4, 0x42, 0x69, 0x6a, 0xe1, 0xf2, 0xcc, 0x17, 0xec, 0xa1, 0x08, 0x9a, 0x09, 0x9d,
	0xf0, 0x9b, 0x99, 0x6a, 0xa9, 0x69, 0xbf, 0x7c, 0xd8, 0x3a, 0x27, 0x52, 0x51, 0x51, 0xf2, 0xed,
	0x25, 0x04, 0xdf, 0xb8, 0x18, 0x53, 0x21, 0xef, 0xdf, 0x55, 0x49, 0x50, 0x04, 0x4d, 0x4b, 0x3d,
	0xe6, 0xec, 0x3a, 0x15, 0x93, 0xa5, 0x93, 0xd0, 0x1e, 0x6c, 0x58, 0xa6, 0xdd, 0x6c, 0x29, 0x71,
	0x50, 0x37, 0xff, 0xc0, 0xaf, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0xda, 0x24, 0x5e, 0x1c, 0xce,
	0x05, 0x00, 0x00,
}
