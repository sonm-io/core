// Code generated by protoc-gen-go. DO NOT EDIT.
// source: node.proto

package sonm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TaskListRequest struct {
	// HubID is hub eth id;
	// If empty - collect task info from all hubs
	HubID string `protobuf:"bytes,1,opt,name=hubID" json:"hubID,omitempty"`
}

func (m *TaskListRequest) Reset()                    { *m = TaskListRequest{} }
func (m *TaskListRequest) String() string            { return proto.CompactTextString(m) }
func (*TaskListRequest) ProtoMessage()               {}
func (*TaskListRequest) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

func (m *TaskListRequest) GetHubID() string {
	if m != nil {
		return m.HubID
	}
	return ""
}

type DealListRequest struct {
	Owner  string     `protobuf:"bytes,1,opt,name=owner" json:"owner,omitempty"`
	Status DealStatus `protobuf:"varint,2,opt,name=status,enum=sonm.DealStatus" json:"status,omitempty"`
}

func (m *DealListRequest) Reset()                    { *m = DealListRequest{} }
func (m *DealListRequest) String() string            { return proto.CompactTextString(m) }
func (*DealListRequest) ProtoMessage()               {}
func (*DealListRequest) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{1} }

func (m *DealListRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *DealListRequest) GetStatus() DealStatus {
	if m != nil {
		return m.Status
	}
	return DealStatus_ANY_STATUS
}

type DealListReply struct {
	Deal []*Deal `protobuf:"bytes,1,rep,name=deal" json:"deal,omitempty"`
}

func (m *DealListReply) Reset()                    { *m = DealListReply{} }
func (m *DealListReply) String() string            { return proto.CompactTextString(m) }
func (*DealListReply) ProtoMessage()               {}
func (*DealListReply) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{2} }

func (m *DealListReply) GetDeal() []*Deal {
	if m != nil {
		return m.Deal
	}
	return nil
}

func init() {
	proto.RegisterType((*TaskListRequest)(nil), "sonm.TaskListRequest")
	proto.RegisterType((*DealListRequest)(nil), "sonm.DealListRequest")
	proto.RegisterType((*DealListReply)(nil), "sonm.DealListReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TaskManagement service

type TaskManagementClient interface {
	// List produces a list of all tasks running on different SONM nodes
	List(ctx context.Context, in *TaskListRequest, opts ...grpc.CallOption) (*TaskListReply, error)
	// PushTask pushes image to Worker
	PushTask(ctx context.Context, opts ...grpc.CallOption) (TaskManagement_PushTaskClient, error)
	// Start starts a task on given resource
	Start(ctx context.Context, in *HubStartTaskRequest, opts ...grpc.CallOption) (*HubStartTaskReply, error)
	// Status produces a task status by their ID
	Status(ctx context.Context, in *TaskID, opts ...grpc.CallOption) (*TaskStatusReply, error)
	// Logs retrieves a task log (stdin/stderr) from given task
	Logs(ctx context.Context, in *TaskLogsRequest, opts ...grpc.CallOption) (TaskManagement_LogsClient, error)
	// Stop stops a task by their ID
	Stop(ctx context.Context, in *TaskID, opts ...grpc.CallOption) (*Empty, error)
	// PullTask pulls task image back
	PullTask(ctx context.Context, in *PullTaskRequest, opts ...grpc.CallOption) (TaskManagement_PullTaskClient, error)
}

type taskManagementClient struct {
	cc *grpc.ClientConn
}

func NewTaskManagementClient(cc *grpc.ClientConn) TaskManagementClient {
	return &taskManagementClient{cc}
}

func (c *taskManagementClient) List(ctx context.Context, in *TaskListRequest, opts ...grpc.CallOption) (*TaskListReply, error) {
	out := new(TaskListReply)
	err := grpc.Invoke(ctx, "/sonm.TaskManagement/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagementClient) PushTask(ctx context.Context, opts ...grpc.CallOption) (TaskManagement_PushTaskClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TaskManagement_serviceDesc.Streams[0], c.cc, "/sonm.TaskManagement/PushTask", opts...)
	if err != nil {
		return nil, err
	}
	x := &taskManagementPushTaskClient{stream}
	return x, nil
}

type TaskManagement_PushTaskClient interface {
	Send(*Chunk) error
	Recv() (*Progress, error)
	grpc.ClientStream
}

type taskManagementPushTaskClient struct {
	grpc.ClientStream
}

func (x *taskManagementPushTaskClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *taskManagementPushTaskClient) Recv() (*Progress, error) {
	m := new(Progress)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *taskManagementClient) Start(ctx context.Context, in *HubStartTaskRequest, opts ...grpc.CallOption) (*HubStartTaskReply, error) {
	out := new(HubStartTaskReply)
	err := grpc.Invoke(ctx, "/sonm.TaskManagement/Start", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagementClient) Status(ctx context.Context, in *TaskID, opts ...grpc.CallOption) (*TaskStatusReply, error) {
	out := new(TaskStatusReply)
	err := grpc.Invoke(ctx, "/sonm.TaskManagement/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagementClient) Logs(ctx context.Context, in *TaskLogsRequest, opts ...grpc.CallOption) (TaskManagement_LogsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TaskManagement_serviceDesc.Streams[1], c.cc, "/sonm.TaskManagement/Logs", opts...)
	if err != nil {
		return nil, err
	}
	x := &taskManagementLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TaskManagement_LogsClient interface {
	Recv() (*TaskLogsChunk, error)
	grpc.ClientStream
}

type taskManagementLogsClient struct {
	grpc.ClientStream
}

func (x *taskManagementLogsClient) Recv() (*TaskLogsChunk, error) {
	m := new(TaskLogsChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *taskManagementClient) Stop(ctx context.Context, in *TaskID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.TaskManagement/Stop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagementClient) PullTask(ctx context.Context, in *PullTaskRequest, opts ...grpc.CallOption) (TaskManagement_PullTaskClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TaskManagement_serviceDesc.Streams[2], c.cc, "/sonm.TaskManagement/PullTask", opts...)
	if err != nil {
		return nil, err
	}
	x := &taskManagementPullTaskClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TaskManagement_PullTaskClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type taskManagementPullTaskClient struct {
	grpc.ClientStream
}

func (x *taskManagementPullTaskClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for TaskManagement service

type TaskManagementServer interface {
	// List produces a list of all tasks running on different SONM nodes
	List(context.Context, *TaskListRequest) (*TaskListReply, error)
	// PushTask pushes image to Worker
	PushTask(TaskManagement_PushTaskServer) error
	// Start starts a task on given resource
	Start(context.Context, *HubStartTaskRequest) (*HubStartTaskReply, error)
	// Status produces a task status by their ID
	Status(context.Context, *TaskID) (*TaskStatusReply, error)
	// Logs retrieves a task log (stdin/stderr) from given task
	Logs(*TaskLogsRequest, TaskManagement_LogsServer) error
	// Stop stops a task by their ID
	Stop(context.Context, *TaskID) (*Empty, error)
	// PullTask pulls task image back
	PullTask(*PullTaskRequest, TaskManagement_PullTaskServer) error
}

func RegisterTaskManagementServer(s *grpc.Server, srv TaskManagementServer) {
	s.RegisterService(&_TaskManagement_serviceDesc, srv)
}

func _TaskManagement_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagementServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.TaskManagement/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagementServer).List(ctx, req.(*TaskListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManagement_PushTask_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TaskManagementServer).PushTask(&taskManagementPushTaskServer{stream})
}

type TaskManagement_PushTaskServer interface {
	Send(*Progress) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type taskManagementPushTaskServer struct {
	grpc.ServerStream
}

func (x *taskManagementPushTaskServer) Send(m *Progress) error {
	return x.ServerStream.SendMsg(m)
}

func (x *taskManagementPushTaskServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TaskManagement_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HubStartTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagementServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.TaskManagement/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagementServer).Start(ctx, req.(*HubStartTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManagement_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagementServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.TaskManagement/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagementServer).Status(ctx, req.(*TaskID))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManagement_Logs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TaskLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TaskManagementServer).Logs(m, &taskManagementLogsServer{stream})
}

type TaskManagement_LogsServer interface {
	Send(*TaskLogsChunk) error
	grpc.ServerStream
}

type taskManagementLogsServer struct {
	grpc.ServerStream
}

func (x *taskManagementLogsServer) Send(m *TaskLogsChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _TaskManagement_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagementServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.TaskManagement/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagementServer).Stop(ctx, req.(*TaskID))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManagement_PullTask_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullTaskRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TaskManagementServer).PullTask(m, &taskManagementPullTaskServer{stream})
}

type TaskManagement_PullTaskServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type taskManagementPullTaskServer struct {
	grpc.ServerStream
}

func (x *taskManagementPullTaskServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

var _TaskManagement_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sonm.TaskManagement",
	HandlerType: (*TaskManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _TaskManagement_List_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _TaskManagement_Start_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _TaskManagement_Status_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _TaskManagement_Stop_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PushTask",
			Handler:       _TaskManagement_PushTask_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Logs",
			Handler:       _TaskManagement_Logs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PullTask",
			Handler:       _TaskManagement_PullTask_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "node.proto",
}

// Client API for DealManagement service

type DealManagementClient interface {
	// List produces a list of all deals made by client with given ID
	List(ctx context.Context, in *DealListRequest, opts ...grpc.CallOption) (*DealListReply, error)
	// Status produces a detailed info about deal with given ID
	Status(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Deal, error)
	// Finish finishes a deal with given ID
	Finish(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error)
}

type dealManagementClient struct {
	cc *grpc.ClientConn
}

func NewDealManagementClient(cc *grpc.ClientConn) DealManagementClient {
	return &dealManagementClient{cc}
}

func (c *dealManagementClient) List(ctx context.Context, in *DealListRequest, opts ...grpc.CallOption) (*DealListReply, error) {
	out := new(DealListReply)
	err := grpc.Invoke(ctx, "/sonm.DealManagement/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealManagementClient) Status(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Deal, error) {
	out := new(Deal)
	err := grpc.Invoke(ctx, "/sonm.DealManagement/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealManagementClient) Finish(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.DealManagement/Finish", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DealManagement service

type DealManagementServer interface {
	// List produces a list of all deals made by client with given ID
	List(context.Context, *DealListRequest) (*DealListReply, error)
	// Status produces a detailed info about deal with given ID
	Status(context.Context, *ID) (*Deal, error)
	// Finish finishes a deal with given ID
	Finish(context.Context, *ID) (*Empty, error)
}

func RegisterDealManagementServer(s *grpc.Server, srv DealManagementServer) {
	s.RegisterService(&_DealManagement_serviceDesc, srv)
}

func _DealManagement_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DealListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealManagementServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.DealManagement/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealManagementServer).List(ctx, req.(*DealListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DealManagement_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealManagementServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.DealManagement/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealManagementServer).Status(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DealManagement_Finish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealManagementServer).Finish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.DealManagement/Finish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealManagementServer).Finish(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

var _DealManagement_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sonm.DealManagement",
	HandlerType: (*DealManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _DealManagement_List_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _DealManagement_Status_Handler,
		},
		{
			MethodName: "Finish",
			Handler:    _DealManagement_Finish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}

// Client API for HubManagement service

type HubManagementClient interface {
	// Status produse a detailed info about Hub
	Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HubStatusReply, error)
	// WorkersList prouces a list of connected Workers
	WorkersList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListReply, error)
	// WorkersStatus produces a detailed info about a Worker with given ID
	WorkerStatus(ctx context.Context, in *ID, opts ...grpc.CallOption) (*InfoReply, error)
	// GetRegisteredWorkers produce a list of Workers IDs allowed
	// to connect to this hub
	GetRegisteredWorkers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetRegisteredWorkersReply, error)
	// RegisterWorkers allows Worker with given ID connect to Hub
	RegisterWorker(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error)
	// DeregisterWorkers deny Worker with given ID connect to Hub
	DeregisterWorker(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error)
	// Devices returns list of all available devices that this Hub awares of
	// with tieir full description.
	DeviceList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DevicesReply, error)
	// GetDeviceProperties allows to obtain previously assigned resource
	// properties for a given device.
	GetDeviceProperties(ctx context.Context, in *ID, opts ...grpc.CallOption) (*GetDevicePropertiesReply, error)
	// SetDeviceProperties method allows to specify additional resource
	// properties for a device specified by its ID.
	// This may include GPU's capability to execute a well-known work such as
	// Ethereum mining etc.
	SetDeviceProperties(ctx context.Context, in *SetDevicePropertiesRequest, opts ...grpc.CallOption) (*Empty, error)
	// GetAskPlans allows to obtain previously assigned Ask Plans from for a given worker.
	GetAskPlans(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SlotsReply, error)
	// CreateAskPlan allows to create rules
	// for creating Ask orders on Marketplace
	CreateAskPlan(ctx context.Context, in *InsertSlotRequest, opts ...grpc.CallOption) (*ID, error)
	// RemoveAskPlan allows to remove rules
	// for creating Ask orders on Marketplace
	RemoveAskPlan(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error)
	// List produces a list of all running tasks on the Hub
	TaskList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TaskListReply, error)
	// Status produces a detailed info about task on the Hub
	TaskStatus(ctx context.Context, in *ID, opts ...grpc.CallOption) (*TaskStatusReply, error)
}

type hubManagementClient struct {
	cc *grpc.ClientConn
}

func NewHubManagementClient(cc *grpc.ClientConn) HubManagementClient {
	return &hubManagementClient{cc}
}

func (c *hubManagementClient) Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HubStatusReply, error) {
	out := new(HubStatusReply)
	err := grpc.Invoke(ctx, "/sonm.HubManagement/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubManagementClient) WorkersList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListReply, error) {
	out := new(ListReply)
	err := grpc.Invoke(ctx, "/sonm.HubManagement/WorkersList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubManagementClient) WorkerStatus(ctx context.Context, in *ID, opts ...grpc.CallOption) (*InfoReply, error) {
	out := new(InfoReply)
	err := grpc.Invoke(ctx, "/sonm.HubManagement/WorkerStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubManagementClient) GetRegisteredWorkers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetRegisteredWorkersReply, error) {
	out := new(GetRegisteredWorkersReply)
	err := grpc.Invoke(ctx, "/sonm.HubManagement/GetRegisteredWorkers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubManagementClient) RegisterWorker(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.HubManagement/RegisterWorker", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubManagementClient) DeregisterWorker(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.HubManagement/DeregisterWorker", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubManagementClient) DeviceList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DevicesReply, error) {
	out := new(DevicesReply)
	err := grpc.Invoke(ctx, "/sonm.HubManagement/DeviceList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubManagementClient) GetDeviceProperties(ctx context.Context, in *ID, opts ...grpc.CallOption) (*GetDevicePropertiesReply, error) {
	out := new(GetDevicePropertiesReply)
	err := grpc.Invoke(ctx, "/sonm.HubManagement/GetDeviceProperties", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubManagementClient) SetDeviceProperties(ctx context.Context, in *SetDevicePropertiesRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.HubManagement/SetDeviceProperties", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubManagementClient) GetAskPlans(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SlotsReply, error) {
	out := new(SlotsReply)
	err := grpc.Invoke(ctx, "/sonm.HubManagement/GetAskPlans", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubManagementClient) CreateAskPlan(ctx context.Context, in *InsertSlotRequest, opts ...grpc.CallOption) (*ID, error) {
	out := new(ID)
	err := grpc.Invoke(ctx, "/sonm.HubManagement/CreateAskPlan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubManagementClient) RemoveAskPlan(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.HubManagement/RemoveAskPlan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubManagementClient) TaskList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TaskListReply, error) {
	out := new(TaskListReply)
	err := grpc.Invoke(ctx, "/sonm.HubManagement/TaskList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubManagementClient) TaskStatus(ctx context.Context, in *ID, opts ...grpc.CallOption) (*TaskStatusReply, error) {
	out := new(TaskStatusReply)
	err := grpc.Invoke(ctx, "/sonm.HubManagement/TaskStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HubManagement service

type HubManagementServer interface {
	// Status produse a detailed info about Hub
	Status(context.Context, *Empty) (*HubStatusReply, error)
	// WorkersList prouces a list of connected Workers
	WorkersList(context.Context, *Empty) (*ListReply, error)
	// WorkersStatus produces a detailed info about a Worker with given ID
	WorkerStatus(context.Context, *ID) (*InfoReply, error)
	// GetRegisteredWorkers produce a list of Workers IDs allowed
	// to connect to this hub
	GetRegisteredWorkers(context.Context, *Empty) (*GetRegisteredWorkersReply, error)
	// RegisterWorkers allows Worker with given ID connect to Hub
	RegisterWorker(context.Context, *ID) (*Empty, error)
	// DeregisterWorkers deny Worker with given ID connect to Hub
	DeregisterWorker(context.Context, *ID) (*Empty, error)
	// Devices returns list of all available devices that this Hub awares of
	// with tieir full description.
	DeviceList(context.Context, *Empty) (*DevicesReply, error)
	// GetDeviceProperties allows to obtain previously assigned resource
	// properties for a given device.
	GetDeviceProperties(context.Context, *ID) (*GetDevicePropertiesReply, error)
	// SetDeviceProperties method allows to specify additional resource
	// properties for a device specified by its ID.
	// This may include GPU's capability to execute a well-known work such as
	// Ethereum mining etc.
	SetDeviceProperties(context.Context, *SetDevicePropertiesRequest) (*Empty, error)
	// GetAskPlans allows to obtain previously assigned Ask Plans from for a given worker.
	GetAskPlans(context.Context, *Empty) (*SlotsReply, error)
	// CreateAskPlan allows to create rules
	// for creating Ask orders on Marketplace
	CreateAskPlan(context.Context, *InsertSlotRequest) (*ID, error)
	// RemoveAskPlan allows to remove rules
	// for creating Ask orders on Marketplace
	RemoveAskPlan(context.Context, *ID) (*Empty, error)
	// List produces a list of all running tasks on the Hub
	TaskList(context.Context, *Empty) (*TaskListReply, error)
	// Status produces a detailed info about task on the Hub
	TaskStatus(context.Context, *ID) (*TaskStatusReply, error)
}

func RegisterHubManagementServer(s *grpc.Server, srv HubManagementServer) {
	s.RegisterService(&_HubManagement_serviceDesc, srv)
}

func _HubManagement_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubManagementServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.HubManagement/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubManagementServer).Status(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubManagement_WorkersList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubManagementServer).WorkersList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.HubManagement/WorkersList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubManagementServer).WorkersList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubManagement_WorkerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubManagementServer).WorkerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.HubManagement/WorkerStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubManagementServer).WorkerStatus(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubManagement_GetRegisteredWorkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubManagementServer).GetRegisteredWorkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.HubManagement/GetRegisteredWorkers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubManagementServer).GetRegisteredWorkers(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubManagement_RegisterWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubManagementServer).RegisterWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.HubManagement/RegisterWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubManagementServer).RegisterWorker(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubManagement_DeregisterWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubManagementServer).DeregisterWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.HubManagement/DeregisterWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubManagementServer).DeregisterWorker(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubManagement_DeviceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubManagementServer).DeviceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.HubManagement/DeviceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubManagementServer).DeviceList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubManagement_GetDeviceProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubManagementServer).GetDeviceProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.HubManagement/GetDeviceProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubManagementServer).GetDeviceProperties(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubManagement_SetDeviceProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDevicePropertiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubManagementServer).SetDeviceProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.HubManagement/SetDeviceProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubManagementServer).SetDeviceProperties(ctx, req.(*SetDevicePropertiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubManagement_GetAskPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubManagementServer).GetAskPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.HubManagement/GetAskPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubManagementServer).GetAskPlans(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubManagement_CreateAskPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubManagementServer).CreateAskPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.HubManagement/CreateAskPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubManagementServer).CreateAskPlan(ctx, req.(*InsertSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubManagement_RemoveAskPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubManagementServer).RemoveAskPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.HubManagement/RemoveAskPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubManagementServer).RemoveAskPlan(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubManagement_TaskList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubManagementServer).TaskList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.HubManagement/TaskList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubManagementServer).TaskList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubManagement_TaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubManagementServer).TaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.HubManagement/TaskStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubManagementServer).TaskStatus(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

var _HubManagement_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sonm.HubManagement",
	HandlerType: (*HubManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _HubManagement_Status_Handler,
		},
		{
			MethodName: "WorkersList",
			Handler:    _HubManagement_WorkersList_Handler,
		},
		{
			MethodName: "WorkerStatus",
			Handler:    _HubManagement_WorkerStatus_Handler,
		},
		{
			MethodName: "GetRegisteredWorkers",
			Handler:    _HubManagement_GetRegisteredWorkers_Handler,
		},
		{
			MethodName: "RegisterWorker",
			Handler:    _HubManagement_RegisterWorker_Handler,
		},
		{
			MethodName: "DeregisterWorker",
			Handler:    _HubManagement_DeregisterWorker_Handler,
		},
		{
			MethodName: "DeviceList",
			Handler:    _HubManagement_DeviceList_Handler,
		},
		{
			MethodName: "GetDeviceProperties",
			Handler:    _HubManagement_GetDeviceProperties_Handler,
		},
		{
			MethodName: "SetDeviceProperties",
			Handler:    _HubManagement_SetDeviceProperties_Handler,
		},
		{
			MethodName: "GetAskPlans",
			Handler:    _HubManagement_GetAskPlans_Handler,
		},
		{
			MethodName: "CreateAskPlan",
			Handler:    _HubManagement_CreateAskPlan_Handler,
		},
		{
			MethodName: "RemoveAskPlan",
			Handler:    _HubManagement_RemoveAskPlan_Handler,
		},
		{
			MethodName: "TaskList",
			Handler:    _HubManagement_TaskList_Handler,
		},
		{
			MethodName: "TaskStatus",
			Handler:    _HubManagement_TaskStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}

func init() { proto.RegisterFile("node.proto", fileDescriptor8) }

var fileDescriptor8 = []byte{
	// 610 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x41, 0x4f, 0xdb, 0x4c,
	0x10, 0x8d, 0xf9, 0x42, 0x04, 0x13, 0x92, 0xa0, 0x85, 0x4f, 0x50, 0x1f, 0x68, 0xea, 0x1e, 0xea,
	0x0a, 0x91, 0x20, 0x17, 0xf5, 0xd6, 0x03, 0xc2, 0x05, 0x22, 0x51, 0x29, 0xb5, 0x2b, 0xf5, 0xec,
	0x34, 0x53, 0xc7, 0x8a, 0xe3, 0x75, 0x77, 0xd7, 0x54, 0xfc, 0x86, 0xfe, 0xd0, 0xfe, 0x83, 0x9e,
	0xab, 0xf5, 0x7a, 0x1d, 0xdb, 0x24, 0x52, 0x6f, 0x99, 0x99, 0x37, 0x33, 0xef, 0xbd, 0x71, 0x16,
	0x20, 0xa1, 0x73, 0x1c, 0xa5, 0x8c, 0x0a, 0x4a, 0xda, 0x9c, 0x26, 0x2b, 0x13, 0xe6, 0x18, 0xc4,
	0x2a, 0x63, 0x0e, 0xa2, 0x44, 0xe6, 0x92, 0x28, 0x28, 0x12, 0xfb, 0x8b, 0x6c, 0xa6, 0x7e, 0x5a,
	0x6f, 0x60, 0xf0, 0x25, 0xe0, 0xcb, 0x87, 0x88, 0x0b, 0x0f, 0x7f, 0x64, 0xc8, 0x05, 0x39, 0x86,
	0xdd, 0x45, 0x36, 0x9b, 0xb8, 0xa7, 0xc6, 0xd0, 0xb0, 0xf7, 0x3d, 0x15, 0x58, 0x9f, 0x61, 0xe0,
	0x62, 0x10, 0x37, 0x80, 0xf4, 0x67, 0x82, 0x4c, 0x03, 0xf3, 0x80, 0xd8, 0xd0, 0xe1, 0x22, 0x10,
	0x19, 0x3f, 0xdd, 0x19, 0x1a, 0x76, 0xdf, 0x39, 0x1c, 0xc9, 0xe5, 0x23, 0xd9, 0xec, 0xe7, 0x79,
	0xaf, 0xa8, 0x5b, 0x63, 0xe8, 0xad, 0x47, 0xa6, 0xf1, 0x13, 0x39, 0x83, 0xb6, 0xa4, 0x7d, 0x6a,
	0x0c, 0xff, 0xb3, 0xbb, 0x0e, 0xac, 0x1b, 0xbd, 0x3c, 0xef, 0xfc, 0xd9, 0x81, 0xbe, 0x64, 0xfb,
	0x29, 0x48, 0x82, 0x10, 0x57, 0x98, 0x08, 0x72, 0x05, 0x6d, 0xd9, 0x4f, 0xfe, 0x57, 0xe0, 0x86,
	0x16, 0xf3, 0xa8, 0x99, 0x4e, 0xe3, 0x27, 0xab, 0x45, 0x2e, 0x60, 0x6f, 0x9a, 0xf1, 0x85, 0x4c,
	0x93, 0xae, 0x82, 0xdc, 0x2c, 0xb2, 0x64, 0x69, 0xf6, 0x55, 0x30, 0x65, 0x34, 0x64, 0xc8, 0xb9,
	0xd5, 0xb2, 0x8d, 0x4b, 0x83, 0x7c, 0x80, 0x5d, 0x5f, 0x04, 0x4c, 0x90, 0x17, 0xaa, 0x7c, 0x9f,
	0xcd, 0xf2, 0x58, 0xf6, 0xeb, 0x4d, 0x27, 0x9b, 0x4a, 0x6a, 0xdb, 0x18, 0x3a, 0x4a, 0x39, 0x39,
	0x58, 0xd3, 0x99, 0xb8, 0x66, 0x85, 0x73, 0xe1, 0x4c, 0xd1, 0xf0, 0x1e, 0xda, 0x0f, 0x34, 0xe4,
	0x35, 0x51, 0x34, 0xe4, 0x9b, 0x44, 0xd1, 0x90, 0xe7, 0xcc, 0xad, 0xd6, 0xa5, 0x41, 0x5e, 0x43,
	0xdb, 0x17, 0x34, 0x6d, 0xac, 0x29, 0x04, 0x7e, 0x5c, 0xa5, 0x42, 0x0e, 0x77, 0xa4, 0xf6, 0x38,
	0xce, 0xb5, 0x17, 0x0b, 0x74, 0xac, 0x17, 0x54, 0x2d, 0x91, 0x83, 0x9d, 0x5f, 0x06, 0xf4, 0xe5,
	0x1d, 0xb6, 0x1b, 0xdf, 0xf8, 0x36, 0x34, 0xc7, 0xda, 0x7d, 0xad, 0x16, 0x19, 0x96, 0x56, 0xec,
	0x29, 0xc0, 0xc4, 0x35, 0x2b, 0x77, 0xb6, 0x5a, 0xe4, 0x15, 0x74, 0x6e, 0xa3, 0x24, 0xe2, 0x8b,
	0x0a, 0xa2, 0xae, 0xc0, 0xf9, 0xbd, 0x0b, 0xbd, 0xfb, 0x6c, 0x56, 0x21, 0x73, 0x51, 0x8e, 0xad,
	0x42, 0xcd, 0xe3, 0xea, 0x4d, 0x2a, 0xfe, 0x5e, 0x40, 0xf7, 0x2b, 0x65, 0x4b, 0x64, 0x3c, 0x97,
	0x50, 0xeb, 0x19, 0xa8, 0xa0, 0x4a, 0xfa, 0x1c, 0x0e, 0x14, 0xfc, 0x19, 0xf5, 0x02, 0x3c, 0x49,
	0xbe, 0x53, 0x0d, 0xbe, 0x85, 0xe3, 0x3b, 0x14, 0x1e, 0x86, 0x11, 0x17, 0xc8, 0x70, 0x5e, 0x2c,
	0xaa, 0x2f, 0x79, 0xa9, 0x82, 0x4d, 0x40, 0x3d, 0xe7, 0x2d, 0xf4, 0x75, 0x4d, 0x55, 0xb6, 0xfa,
	0x41, 0xce, 0xe1, 0xd0, 0x45, 0xf6, 0x8f, 0xe0, 0x31, 0x80, 0x8b, 0x8f, 0xd1, 0x37, 0x7c, 0x2e,
	0x9d, 0xe8, 0x43, 0xc8, 0x72, 0x49, 0xe4, 0x1a, 0x8e, 0xee, 0x50, 0xa8, 0xe4, 0x94, 0xd1, 0x14,
	0x99, 0x88, 0xb0, 0x6a, 0xc2, 0x59, 0x29, 0xa6, 0x09, 0x5a, 0x7b, 0x72, 0xe4, 0x6f, 0x18, 0x31,
	0x54, 0x8d, 0xfe, 0xa6, 0xc6, 0xda, 0x87, 0xa8, 0xb9, 0x8f, 0xa0, 0x7b, 0x87, 0xe2, 0x9a, 0x2f,
	0xa7, 0x71, 0x90, 0x34, 0x2c, 0x2d, 0x9e, 0x19, 0x3f, 0xa6, 0xa2, 0xdc, 0x7b, 0x05, 0xbd, 0x1b,
	0x86, 0x81, 0xc0, 0xa2, 0x85, 0x9c, 0xe8, 0x7b, 0x71, 0x64, 0x42, 0x42, 0xf5, 0xa2, 0x52, 0x8d,
	0xd5, 0x22, 0x36, 0xf4, 0x3c, 0x5c, 0xd1, 0xc7, 0xb2, 0x6b, 0xab, 0x97, 0x23, 0xd8, 0xd3, 0x2f,
	0x4b, 0x9d, 0xcc, 0x96, 0x67, 0x67, 0x0c, 0xb0, 0xfe, 0xb3, 0x57, 0xc6, 0x6e, 0x7b, 0x08, 0x66,
	0x9d, 0xfc, 0x91, 0x7e, 0xf7, 0x37, 0x00, 0x00, 0xff, 0xff, 0xc7, 0x25, 0x75, 0x62, 0xe0, 0x05,
	0x00, 0x00,
}
