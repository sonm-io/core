syntax = "proto3";

import "bid.proto";
import "insonmnia.proto";

package sonm;

service Hub {
    // Ping should be used as Healthcheck for Hub
    rpc Ping(Empty) returns (PingReply) {}
    // Status returns internal hub statistic
    rpc Status(Empty) returns (HubStatusReply) {}
    // List returns a list for connected Workers
    rpc List(Empty) returns (ListReply) {}
    // Info returns info about given Worker
    rpc Info(ID) returns (InfoReply) {}
    // TaskList returns info about all Tasks on all Workers on the Hub
    rpc TaskList(Empty) returns (TaskListReply) {}

    rpc StartTask(HubStartTaskRequest) returns (HubStartTaskReply) {}
    rpc StopTask(ID) returns (Empty) {}

    rpc TaskStatus(ID) returns (TaskStatusReply) {}
    rpc MinerStatus(ID) returns (StatusMapReply) {}
    rpc TaskLogs(TaskLogsRequest) returns (stream TaskLogsChunk) {}

    rpc ProposeDeal(DealRequest) returns (Empty) {}
    rpc DiscoverHub(DiscoverHubRequest) returns (Empty) {}

    // GetMinerProperties allows to obtain previously assigned resource
    // properties for a given miner.
    rpc GetMinerProperties(ID) returns (GetMinerPropertiesReply) {}

    // SetMinerProperties method allows to specify additional resource
    // properties for a miner specified by its ID.
    // This may include GPU's capability to execute a well-known work such as
    // Ethereum mining etc.
    // Note, that this method overrides all previously specified properties.
    rpc SetMinerProperties(SetMinerPropertiesRequest) returns (Empty) {}

    // GetSlots allows to obtain previously assigned slots from for a given
    // miner.
    rpc GetSlots(ID) returns (GetSlotsReply) {}
    // GetAllSlots returns slots assigned on all Workers on the Hub
    rpc GetAllSlots(Empty) returns (GetAllSlotsReply) {}
    // AddSlot allows to assign a new slot for a given miner.
    // This method can fail if either there are no resources left on a miner
    // or it has been previourly assigned for specified time duration.
    rpc AddSlot(AddSlotRequest) returns (Empty) {}
    // RemoveSlot removes the speified slot if fully matches.
    rpc RemoveSlot(RemoveSlotRequest) returns (Empty) {}

    // GetRegistredWorkers returns a list of Worker IDs that
    // allowed to connet to the Hub
    rpc GetRegistredWorkers(Empty) returns (GetRegistredWorkersReply) {}
    // RegisterWorker allows Worker with given ID
    // to connect to the Hub
    rpc RegisterWorker(ID) returns (Empty) {}
    // RegisterWorkers deny Worker with given ID
    // to connect to the Hub
    rpc UnregisterWorker(ID) returns (Empty) {}
}

message ListReply {
    message ListValue {
        repeated string values = 1;
    }
    map<string, ListValue> info = 1;
}

message TaskRequirements {
    // How much resources consumes a task. This is used both for scheduling and for cgroups configuration.
    TaskResourceRequirements resources = 1;

    // Optional miner ID restrictions (currently IP:port), that are allowed to start a task.
    repeated string miners = 2;
}

message HubStartTaskRequest {
    TaskRequirements requirements = 1;
    string registry = 2;
    string image = 3;
    string auth = 4;
    string PublicKeyData = 5;
    bool commitOnStop = 6;
    map<string, string> env = 7;
}

message HubStartTaskReply {
    string id = 1;
    repeated string endpoint = 2;
}

message HubStatusReply {
    uint64 minerCount = 1;
    uint64 uptime = 2;
    string version = 3;
    string platform = 4;
    string ethAddr = 5;
}

message DealRequest {
    Order order = 1;
}

message GetMinerPropertiesReply {
    map<string, string> properties = 1;
}

message SetMinerPropertiesRequest {
    string ID = 1;
    map<string, string> properties = 2;
}

message GetSlotsReply {
    repeated Slot slot = 1;
}

message GetAllSlotsReply {
    message SlotList {
        repeated Slot slot = 1;
    }
    map<string, SlotList> slots = 1;
}

message AddSlotRequest {
    // Miner ID.
    string ID = 1;
    // Slot destription.
    Slot slot = 2;
}

message RemoveSlotRequest {
    string ID = 1;
    Slot slot = 2;
}

message GetRegistredWorkersReply {
    repeated ID ids = 1;
}

message TaskListReply {
    message TaskInfo {
        map <string, TaskStatusReply> tasks = 1;
    }
    map<string, TaskInfo> info = 1;
}
