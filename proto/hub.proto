syntax = "proto3";

import "bid.proto";
import "bigint.proto";
import "capabilities.proto";
import "container.proto";
import "deal.proto";
import "insonmnia.proto";

package sonm;

service Hub {
    /// Management section

    // Status returns internal hub statistic
    rpc Status(Empty) returns (HubStatusReply) {}
    // Devices returns list of all available devices that this Hub awares of
    // with tieir full description.
    rpc Devices(Empty) returns (DevicesReply) {}
    // Tasks returns info about all Tasks
    rpc Tasks(Empty) returns (TaskListReply) {}
    // GetSlots allows to obtain previously assigned slots for the Hub.
    rpc AskPlans(Empty) returns (AskPlansReply) {}
    // AddSlot allows to assign a new slot.
    // This method can fail if either there are no such resources found or it
    // has been previourly assigned.
    rpc CreateAskPlan(CreateAskPlanRequest) returns (ID) {}
    // RemoveSlot removes the speified slot if fully matches.
    rpc RemoveAskPlan(ID) returns (Empty) {}

    /// Task Management section

    rpc PushTask(stream Chunk) returns (stream Progress) {}
    rpc PullTask(PullTaskRequest) returns (stream Chunk) {}
    // StartTask schedules the task associcated with a deal on some miner.
    rpc StartTask(StartTaskRequest) returns (StartTaskReply) {}
    rpc StopTask(ID) returns (Empty) {}
    rpc TaskStatus(ID) returns (TaskStatusReply) {}
    rpc JoinNetwork(HubJoinNetworkRequest) returns (NetworkSpec) {}

    rpc TaskLogs(TaskLogsRequest) returns (stream TaskLogsChunk) {}

    rpc ProposeDeal(DealRequest) returns (Empty) {}
    rpc ApproveDeal(ApproveDealRequest) returns (Empty) {}

    // Note: currently used for testing pusposes.
    rpc GetDealInfo(ID) returns (DealInfoReply) {}
}

message StartTaskRequest {
    // Deal points to the deal associated with workers where the task should be
    // started.
    Deal deal = 1;
    // Container describes container settings.
    Container container = 2;
}

message HubJoinNetworkRequest {
    string taskID = 1;
    string networkID = 2;
}

message StartTaskReply {
    string id = 1;
    repeated string endpoint = 2;
    string hubAddr = 3;
    repeated string networkIDs = 4;
}

message HubStatusReply {
    uint64 uptime = 1;
    string version = 2;
    string platform = 3;
    string ethAddr = 4;
    uint32 taskCount = 5;
    string DWHStatus = 6;
    string rendezvousStatus = 7;
}

message DealRequest {
    string bidId = 1;
    string askId = 2;
    string specHash = 4;
}

message ApproveDealRequest {
    BigInt dealID = 1;
    string bidID = 2;
    string askID = 3;
}

message AskPlansReply {
    map <string, Slot> slots = 1;
}

message TaskListReply {
    map<string, TaskStatusReply> info = 1;
}

message DevicesReply {
    CPUDevice CPUs = 1;
    repeated GPUDevice GPUs = 2;
    RAMDevice memory = 3;
    NetworkDevice network = 4;
    StorageDevice storage = 5;
}

message CreateAskPlanRequest {
    Slot slot = 1;
    BigInt pricePerSecond = 4;

    string buyerID = 3;
}

message PullTaskRequest {
    string dealId = 1;
    string taskId = 2;
}

message DealInfoReply {
    // ID is deal ID.
    ID id = 1;
    // Order is BID order associated with a deal.
    Order order = 2;
    // List of currently running tasks.
    StatusMapReply running = 3;
    // List of completed tasks.
    StatusMapReply completed = 4;
}

