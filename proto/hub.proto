syntax = "proto3";

import "ask_plan.proto";
import "capabilities.proto";
import "container.proto";
import "insonmnia.proto";
import "marketplace.proto";
import "net.proto";

package sonm;

// WorkerManagement describe a bunch of methods to manage Worker instance.
// Must be called by Worker's owner.
service WorkerManagement {
    // Status produse a detailed info about Hub
    rpc Status (Empty) returns (HubStatusReply) {}
    // Devices provides detailed information about device
    // and show benchmark results.
    rpc Devices(Empty) returns (DevicesReply) {}
    // FreeDevices provides information about unallocated resources
    // that can be turned into ask-plans.
    rpc FreeDevices(Empty) returns (DevicesReply) {}
    // Tasks produces a list of all running tasks on the Hub
    rpc Tasks(Empty) returns (TaskListReply) {}
    // AskPlans allows to obtain previously assigned Ask Plans from for a given worker.
    rpc AskPlans(Empty) returns (AskPlansReply) {}
    // CreateAskPlan allows to create rules
    // for creating Ask orders on Marketplace
    rpc CreateAskPlan(AskPlan) returns (ID) {}
    // RemoveAskPlan allows to remove rules
    // for creating Ask orders on Marketplace
    rpc RemoveAskPlan(ID) returns (Empty) {}
}

service Hub {
    /// Task Management section

    rpc PushTask(stream Chunk) returns (stream Progress) {}
    rpc PullTask(PullTaskRequest) returns (stream Chunk) {}
    // StartTask schedules the task associcated with a deal on some miner.
    rpc StartTask(StartTaskRequest) returns (StartTaskReply) {}
    rpc StopTask(ID) returns (Empty) {}
    rpc TaskStatus(ID) returns (TaskStatusReply) {}
    rpc JoinNetwork(HubJoinNetworkRequest) returns (NetworkSpec) {}

    rpc TaskLogs(TaskLogsRequest) returns (stream TaskLogsChunk) {}

    // Note: currently used for testing pusposes.
    rpc GetDealInfo(ID) returns (DealInfoReply) {}
}

message StartTaskRequest {
    // Deal points to the deal associated with workers where the task should be
    // started.
    Deal deal = 1;
    // Container describes container settings.
    Container container = 2;
    AskPlanResources resources = 3;
}

message HubJoinNetworkRequest {
    string taskID = 1;
    string networkID = 2;
}

message StartTaskReply {
    string id = 1;
    map<string, Endpoints> portMap = 2;
    repeated string networkIDs = 3;
}

message HubStatusReply {
    uint64 uptime = 1;
    string version = 2;
    string platform = 3;
    string ethAddr = 4;
    uint32 taskCount = 5;
    string DWHStatus = 6;
    string rendezvousStatus = 7;
}

message AskPlansReply {
    map <string, AskPlan> askPlans = 1;
}

message TaskListReply {
    map<string, TaskStatusReply> info = 1;
}

message DevicesReply {
    CPU CPU = 1;
    repeated GPU GPUs = 2;
    RAM RAM = 3;
    Network network = 4;
    Storage storage = 5;
}

message PullTaskRequest {
    string dealId = 1;
    string taskId = 2;
}

message DealInfoReply {
    Deal deal = 1;
    // List of currently running tasks.
    StatusMapReply running = 2;
    // List of completed tasks.
    StatusMapReply completed = 3;
    // Resources is a real resources (cores, ram bytes, GPU devices, etc)
    // allocated on a worker for this deal.
    AskPlanResources resources =  4;
}

message TaskStatusReply {
    enum Status {
        UNKNOWN = 0;
        SPOOLING = 1;
        SPAWNING = 2;
        RUNNING = 3;
        FINISHED = 4;
        BROKEN = 5;
    }
    Status status = 1;
    string imageName = 2;
    map<string, Endpoints> portMap = 3;
    uint64 uptime = 4;
    ResourceUsage usage = 5;
    AskPlanResources allocatedResources = 6;
}

message StatusMapReply {
    map<string, TaskStatusReply> statuses = 1;
}
