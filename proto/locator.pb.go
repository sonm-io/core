// Code generated by protoc-gen-go. DO NOT EDIT.
// source: locator.proto

package sonm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// grpccmd imports
import (
	"io"

	"github.com/spf13/cobra"
	"github.com/sshaman1101/grpccmd"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ResolveRequest_EndpointType int32

const (
	ResolveRequest_CLIENT ResolveRequest_EndpointType = 0
	ResolveRequest_WORKER ResolveRequest_EndpointType = 1
	ResolveRequest_ANY    ResolveRequest_EndpointType = 2
)

var ResolveRequest_EndpointType_name = map[int32]string{
	0: "CLIENT",
	1: "WORKER",
	2: "ANY",
}
var ResolveRequest_EndpointType_value = map[string]int32{
	"CLIENT": 0,
	"WORKER": 1,
	"ANY":    2,
}

func (x ResolveRequest_EndpointType) String() string {
	return proto.EnumName(ResolveRequest_EndpointType_name, int32(x))
}
func (ResolveRequest_EndpointType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor8, []int{1, 0}
}

type AnnounceRequest struct {
	ClientEndpoints []string `protobuf:"bytes,1,rep,name=clientEndpoints" json:"clientEndpoints,omitempty"`
	WorkerEndpoints []string `protobuf:"bytes,2,rep,name=workerEndpoints" json:"workerEndpoints,omitempty"`
}

func (m *AnnounceRequest) Reset()                    { *m = AnnounceRequest{} }
func (m *AnnounceRequest) String() string            { return proto.CompactTextString(m) }
func (*AnnounceRequest) ProtoMessage()               {}
func (*AnnounceRequest) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

func (m *AnnounceRequest) GetClientEndpoints() []string {
	if m != nil {
		return m.ClientEndpoints
	}
	return nil
}

func (m *AnnounceRequest) GetWorkerEndpoints() []string {
	if m != nil {
		return m.WorkerEndpoints
	}
	return nil
}

type ResolveRequest struct {
	EthAddr      string                      `protobuf:"bytes,1,opt,name=ethAddr" json:"ethAddr,omitempty"`
	EndpointType ResolveRequest_EndpointType `protobuf:"varint,2,opt,name=endpointType,enum=sonm.ResolveRequest_EndpointType" json:"endpointType,omitempty"`
}

func (m *ResolveRequest) Reset()                    { *m = ResolveRequest{} }
func (m *ResolveRequest) String() string            { return proto.CompactTextString(m) }
func (*ResolveRequest) ProtoMessage()               {}
func (*ResolveRequest) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{1} }

func (m *ResolveRequest) GetEthAddr() string {
	if m != nil {
		return m.EthAddr
	}
	return ""
}

func (m *ResolveRequest) GetEndpointType() ResolveRequest_EndpointType {
	if m != nil {
		return m.EndpointType
	}
	return ResolveRequest_CLIENT
}

type ResolveReply struct {
	Endpoints []string `protobuf:"bytes,1,rep,name=endpoints" json:"endpoints,omitempty"`
}

func (m *ResolveReply) Reset()                    { *m = ResolveReply{} }
func (m *ResolveReply) String() string            { return proto.CompactTextString(m) }
func (*ResolveReply) ProtoMessage()               {}
func (*ResolveReply) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{2} }

func (m *ResolveReply) GetEndpoints() []string {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

func init() {
	proto.RegisterType((*AnnounceRequest)(nil), "sonm.AnnounceRequest")
	proto.RegisterType((*ResolveRequest)(nil), "sonm.ResolveRequest")
	proto.RegisterType((*ResolveReply)(nil), "sonm.ResolveReply")
	proto.RegisterEnum("sonm.ResolveRequest_EndpointType", ResolveRequest_EndpointType_name, ResolveRequest_EndpointType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Locator service

type LocatorClient interface {
	Announce(ctx context.Context, in *AnnounceRequest, opts ...grpc.CallOption) (*Empty, error)
	Resolve(ctx context.Context, in *ResolveRequest, opts ...grpc.CallOption) (*ResolveReply, error)
}

type locatorClient struct {
	cc *grpc.ClientConn
}

func NewLocatorClient(cc *grpc.ClientConn) LocatorClient {
	return &locatorClient{cc}
}

func (c *locatorClient) Announce(ctx context.Context, in *AnnounceRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.Locator/Announce", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locatorClient) Resolve(ctx context.Context, in *ResolveRequest, opts ...grpc.CallOption) (*ResolveReply, error) {
	out := new(ResolveReply)
	err := grpc.Invoke(ctx, "/sonm.Locator/Resolve", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Locator service

type LocatorServer interface {
	Announce(context.Context, *AnnounceRequest) (*Empty, error)
	Resolve(context.Context, *ResolveRequest) (*ResolveReply, error)
}

func RegisterLocatorServer(s *grpc.Server, srv LocatorServer) {
	s.RegisterService(&_Locator_serviceDesc, srv)
}

func _Locator_Announce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnnounceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocatorServer).Announce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Locator/Announce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocatorServer).Announce(ctx, req.(*AnnounceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Locator_Resolve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocatorServer).Resolve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Locator/Resolve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocatorServer).Resolve(ctx, req.(*ResolveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Locator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sonm.Locator",
	HandlerType: (*LocatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Announce",
			Handler:    _Locator_Announce_Handler,
		},
		{
			MethodName: "Resolve",
			Handler:    _Locator_Resolve_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "locator.proto",
}

// Begin grpccmd
var _ = grpccmd.RunE

// Locator
var _LocatorCmd = &cobra.Command{
	Use:   "locator [method]",
	Short: "Subcommand for the Locator service.",
}

var _Locator_AnnounceCmd = &cobra.Command{
	Use:   "announce",
	Short: "Make the Announce method call, input-type: sonm.AnnounceRequest output-type: sonm.Empty",
	RunE: grpccmd.RunE(
		"Announce",
		"sonm.AnnounceRequest",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewLocatorClient(cc)
		},
	),
}

var _Locator_AnnounceCmd_gen = &cobra.Command{
	Use:   "announce-gen",
	Short: "Generate JSON for method call of Announce (input-type: sonm.AnnounceRequest)",
	RunE:  grpccmd.TypeToJson("sonm.AnnounceRequest"),
}

var _Locator_ResolveCmd = &cobra.Command{
	Use:   "resolve",
	Short: "Make the Resolve method call, input-type: sonm.ResolveRequest output-type: sonm.ResolveReply",
	RunE: grpccmd.RunE(
		"Resolve",
		"sonm.ResolveRequest",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewLocatorClient(cc)
		},
	),
}

var _Locator_ResolveCmd_gen = &cobra.Command{
	Use:   "resolve-gen",
	Short: "Generate JSON for method call of Resolve (input-type: sonm.ResolveRequest)",
	RunE:  grpccmd.TypeToJson("sonm.ResolveRequest"),
}

// Register commands with the root command and service command
func init() {
	grpccmd.RegisterServiceCmd(_LocatorCmd)
	_LocatorCmd.AddCommand(
		_Locator_AnnounceCmd,
		_Locator_AnnounceCmd_gen,
		_Locator_ResolveCmd,
		_Locator_ResolveCmd_gen,
	)
}

// End grpccmd

func init() { proto.RegisterFile("locator.proto", fileDescriptor8) }

var fileDescriptor8 = []byte{
	// 288 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x5f, 0x4b, 0xf3, 0x30,
	0x14, 0xc6, 0x97, 0xed, 0x65, 0x7d, 0x7b, 0xac, 0x6b, 0x09, 0x0a, 0xa5, 0x78, 0x51, 0x73, 0xd5,
	0x0b, 0xa9, 0x32, 0xf1, 0x03, 0x14, 0xc9, 0x85, 0x38, 0x26, 0x84, 0x81, 0x78, 0x39, 0xdb, 0x03,
	0x16, 0xbb, 0x24, 0xa6, 0x99, 0xd2, 0xaf, 0xe3, 0x27, 0x95, 0xda, 0xfd, 0x2d, 0x5e, 0x25, 0xf9,
	0xe5, 0x39, 0xe7, 0x3c, 0x79, 0x02, 0xa7, 0x95, 0xca, 0x97, 0x56, 0x99, 0x54, 0x1b, 0x65, 0x15,
	0xfd, 0x57, 0x2b, 0xb9, 0x8a, 0xfc, 0x52, 0xb6, 0xab, 0x2c, 0x97, 0x1d, 0x66, 0x08, 0x7e, 0x26,
	0xa5, 0x5a, 0xcb, 0x1c, 0x05, 0x7e, 0xac, 0xb1, 0xb6, 0x34, 0x01, 0x3f, 0xaf, 0x4a, 0x94, 0x96,
	0xcb, 0x42, 0xab, 0x52, 0xda, 0x3a, 0x24, 0xf1, 0x28, 0x71, 0x45, 0x1f, 0xb7, 0xca, 0x2f, 0x65,
	0xde, 0xd1, 0xec, 0x95, 0xc3, 0x4e, 0xd9, 0xc3, 0xec, 0x9b, 0xc0, 0x44, 0x60, 0xad, 0xaa, 0xcf,
	0xdd, 0x98, 0x10, 0x1c, 0xb4, 0x6f, 0x59, 0x51, 0x98, 0x90, 0xc4, 0x24, 0x71, 0xc5, 0xf6, 0x48,
	0x39, 0x78, 0xb8, 0xa9, 0x5c, 0x34, 0x1a, 0xc3, 0x61, 0x4c, 0x92, 0xc9, 0xf4, 0x32, 0x6d, 0x9d,
	0xa7, 0xc7, 0x5d, 0x52, 0x7e, 0x20, 0x14, 0x47, 0x65, 0xec, 0x1a, 0xbc, 0xc3, 0x5b, 0x0a, 0x30,
	0xbe, 0x9f, 0x3d, 0xf0, 0xf9, 0x22, 0x18, 0xb4, 0xfb, 0xe7, 0x27, 0xf1, 0xc8, 0x45, 0x40, 0xa8,
	0x03, 0xa3, 0x6c, 0xfe, 0x12, 0x0c, 0xd9, 0x15, 0x78, 0xbb, 0xee, 0xba, 0x6a, 0xe8, 0x05, 0xb8,
	0xd8, 0x8b, 0x60, 0x0f, 0xa6, 0x06, 0x9c, 0x59, 0x97, 0x30, 0xbd, 0x81, 0xff, 0xdb, 0x10, 0xe9,
	0x79, 0x67, 0xb3, 0x17, 0x6a, 0x74, 0xd2, 0x61, 0xbe, 0xd2, 0xb6, 0x61, 0x03, 0x7a, 0x07, 0xce,
	0x66, 0x14, 0x3d, 0xfb, 0xeb, 0x5d, 0x11, 0xed, 0x51, 0x5d, 0x35, 0x6c, 0xf0, 0x3a, 0xfe, 0xfd,
	0xb4, 0xdb, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x16, 0x09, 0x90, 0x83, 0xdc, 0x01, 0x00, 0x00,
}
