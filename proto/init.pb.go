// Code generated by protoc-gen-go. DO NOT EDIT.
// source: init.proto

package sonm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type InitMountRequest struct {
}

func (m *InitMountRequest) Reset()                    { *m = InitMountRequest{} }
func (m *InitMountRequest) String() string            { return proto.CompactTextString(m) }
func (*InitMountRequest) ProtoMessage()               {}
func (*InitMountRequest) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

type InitMountResponse struct {
}

func (m *InitMountResponse) Reset()                    { *m = InitMountResponse{} }
func (m *InitMountResponse) String() string            { return proto.CompactTextString(m) }
func (*InitMountResponse) ProtoMessage()               {}
func (*InitMountResponse) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{1} }

func init() {
	proto.RegisterType((*InitMountRequest)(nil), "sonm.InitMountRequest")
	proto.RegisterType((*InitMountResponse)(nil), "sonm.InitMountResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Init service

type InitClient interface {
	Mount(ctx context.Context, in *InitMountRequest, opts ...grpc.CallOption) (*InitMountResponse, error)
}

type initClient struct {
	cc *grpc.ClientConn
}

func NewInitClient(cc *grpc.ClientConn) InitClient {
	return &initClient{cc}
}

func (c *initClient) Mount(ctx context.Context, in *InitMountRequest, opts ...grpc.CallOption) (*InitMountResponse, error) {
	out := new(InitMountResponse)
	err := grpc.Invoke(ctx, "/sonm.Init/Mount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Init service

type InitServer interface {
	Mount(context.Context, *InitMountRequest) (*InitMountResponse, error)
}

func RegisterInitServer(s *grpc.Server, srv InitServer) {
	s.RegisterService(&_Init_serviceDesc, srv)
}

func _Init_Mount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitMountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InitServer).Mount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Init/Mount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InitServer).Mount(ctx, req.(*InitMountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Init_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sonm.Init",
	HandlerType: (*InitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Mount",
			Handler:    _Init_Mount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "init.proto",
}

func init() { proto.RegisterFile("init.proto", fileDescriptor8) }

var fileDescriptor8 = []byte{
	// 138 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xca, 0xcc, 0xcb, 0x2c,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x29, 0xce, 0xcf, 0xcb, 0x55, 0x12, 0xe2, 0x12,
	0xf0, 0xcc, 0xcb, 0x2c, 0xf1, 0xcd, 0x2f, 0xcd, 0x2b, 0x09, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e,
	0x51, 0x12, 0xe6, 0x12, 0x44, 0x12, 0x2b, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0x35, 0x72, 0xe2, 0x62,
	0x01, 0x09, 0x0a, 0x59, 0x71, 0xb1, 0x82, 0x25, 0x84, 0xc4, 0xf4, 0x40, 0x06, 0xe8, 0xa1, 0xeb,
	0x96, 0x12, 0xc7, 0x10, 0x87, 0x98, 0xa0, 0xc4, 0xe0, 0xa4, 0x12, 0xa5, 0x94, 0x9e, 0x59, 0x92,
	0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f, 0xab, 0x0f, 0x52, 0xa6, 0x9b, 0x99, 0xaf, 0x9f, 0x9c, 0x5f,
	0x94, 0xaa, 0x0f, 0x76, 0x93, 0x35, 0x48, 0x28, 0x89, 0x0d, 0xcc, 0x36, 0x06, 0x04, 0x00, 0x00,
	0xff, 0xff, 0x02, 0x1b, 0xde, 0xf8, 0xad, 0x00, 0x00, 0x00,
}
