// Code generated by protoc-gen-go. DO NOT EDIT.
// source: insonmnia.proto

package sonm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TaskLogsRequest_Type int32

const (
	TaskLogsRequest_STDOUT TaskLogsRequest_Type = 0
	TaskLogsRequest_STDERR TaskLogsRequest_Type = 1
	TaskLogsRequest_BOTH   TaskLogsRequest_Type = 2
)

var TaskLogsRequest_Type_name = map[int32]string{
	0: "STDOUT",
	1: "STDERR",
	2: "BOTH",
}
var TaskLogsRequest_Type_value = map[string]int32{
	"STDOUT": 0,
	"STDERR": 1,
	"BOTH":   2,
}

func (x TaskLogsRequest_Type) String() string {
	return proto.EnumName(TaskLogsRequest_Type_name, int32(x))
}
func (TaskLogsRequest_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor6, []int{9, 0} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

type ID struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *ID) Reset()                    { *m = ID{} }
func (m *ID) String() string            { return proto.CompactTextString(m) }
func (*ID) ProtoMessage()               {}
func (*ID) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

func (m *ID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type EthID struct {
	Id *EthAddress `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *EthID) Reset()                    { *m = EthID{} }
func (m *EthID) String() string            { return proto.CompactTextString(m) }
func (*EthID) ProtoMessage()               {}
func (*EthID) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{2} }

func (m *EthID) GetId() *EthAddress {
	if m != nil {
		return m.Id
	}
	return nil
}

type TaskID struct {
	// Id is task ID itself
	Id     string  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	DealID *BigInt `protobuf:"bytes,2,opt,name=dealID" json:"dealID,omitempty"`
}

func (m *TaskID) Reset()                    { *m = TaskID{} }
func (m *TaskID) String() string            { return proto.CompactTextString(m) }
func (*TaskID) ProtoMessage()               {}
func (*TaskID) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{3} }

func (m *TaskID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TaskID) GetDealID() *BigInt {
	if m != nil {
		return m.DealID
	}
	return nil
}

type Count struct {
	Count uint64 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
}

func (m *Count) Reset()                    { *m = Count{} }
func (m *Count) String() string            { return proto.CompactTextString(m) }
func (*Count) ProtoMessage()               {}
func (*Count) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{4} }

func (m *Count) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type CPUUsage struct {
	Total uint64 `protobuf:"varint,1,opt,name=total" json:"total,omitempty"`
}

func (m *CPUUsage) Reset()                    { *m = CPUUsage{} }
func (m *CPUUsage) String() string            { return proto.CompactTextString(m) }
func (*CPUUsage) ProtoMessage()               {}
func (*CPUUsage) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{5} }

func (m *CPUUsage) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type MemoryUsage struct {
	MaxUsage uint64 `protobuf:"varint,1,opt,name=maxUsage" json:"maxUsage,omitempty"`
}

func (m *MemoryUsage) Reset()                    { *m = MemoryUsage{} }
func (m *MemoryUsage) String() string            { return proto.CompactTextString(m) }
func (*MemoryUsage) ProtoMessage()               {}
func (*MemoryUsage) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{6} }

func (m *MemoryUsage) GetMaxUsage() uint64 {
	if m != nil {
		return m.MaxUsage
	}
	return 0
}

type NetworkUsage struct {
	TxBytes   uint64 `protobuf:"varint,1,opt,name=txBytes" json:"txBytes,omitempty"`
	RxBytes   uint64 `protobuf:"varint,2,opt,name=rxBytes" json:"rxBytes,omitempty"`
	TxPackets uint64 `protobuf:"varint,3,opt,name=txPackets" json:"txPackets,omitempty"`
	RxPackets uint64 `protobuf:"varint,4,opt,name=rxPackets" json:"rxPackets,omitempty"`
	TxErrors  uint64 `protobuf:"varint,5,opt,name=txErrors" json:"txErrors,omitempty"`
	RxErrors  uint64 `protobuf:"varint,6,opt,name=rxErrors" json:"rxErrors,omitempty"`
	TxDropped uint64 `protobuf:"varint,7,opt,name=txDropped" json:"txDropped,omitempty"`
	RxDropped uint64 `protobuf:"varint,8,opt,name=rxDropped" json:"rxDropped,omitempty"`
}

func (m *NetworkUsage) Reset()                    { *m = NetworkUsage{} }
func (m *NetworkUsage) String() string            { return proto.CompactTextString(m) }
func (*NetworkUsage) ProtoMessage()               {}
func (*NetworkUsage) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{7} }

func (m *NetworkUsage) GetTxBytes() uint64 {
	if m != nil {
		return m.TxBytes
	}
	return 0
}

func (m *NetworkUsage) GetRxBytes() uint64 {
	if m != nil {
		return m.RxBytes
	}
	return 0
}

func (m *NetworkUsage) GetTxPackets() uint64 {
	if m != nil {
		return m.TxPackets
	}
	return 0
}

func (m *NetworkUsage) GetRxPackets() uint64 {
	if m != nil {
		return m.RxPackets
	}
	return 0
}

func (m *NetworkUsage) GetTxErrors() uint64 {
	if m != nil {
		return m.TxErrors
	}
	return 0
}

func (m *NetworkUsage) GetRxErrors() uint64 {
	if m != nil {
		return m.RxErrors
	}
	return 0
}

func (m *NetworkUsage) GetTxDropped() uint64 {
	if m != nil {
		return m.TxDropped
	}
	return 0
}

func (m *NetworkUsage) GetRxDropped() uint64 {
	if m != nil {
		return m.RxDropped
	}
	return 0
}

type ResourceUsage struct {
	Cpu     *CPUUsage                `protobuf:"bytes,1,opt,name=cpu" json:"cpu,omitempty"`
	Memory  *MemoryUsage             `protobuf:"bytes,2,opt,name=memory" json:"memory,omitempty"`
	Network map[string]*NetworkUsage `protobuf:"bytes,3,rep,name=network" json:"network,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ResourceUsage) Reset()                    { *m = ResourceUsage{} }
func (m *ResourceUsage) String() string            { return proto.CompactTextString(m) }
func (*ResourceUsage) ProtoMessage()               {}
func (*ResourceUsage) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{8} }

func (m *ResourceUsage) GetCpu() *CPUUsage {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *ResourceUsage) GetMemory() *MemoryUsage {
	if m != nil {
		return m.Memory
	}
	return nil
}

func (m *ResourceUsage) GetNetwork() map[string]*NetworkUsage {
	if m != nil {
		return m.Network
	}
	return nil
}

type TaskLogsRequest struct {
	Type          TaskLogsRequest_Type `protobuf:"varint,1,opt,name=type,enum=sonm.TaskLogsRequest_Type" json:"type,omitempty"`
	Id            string               `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Since         string               `protobuf:"bytes,3,opt,name=since" json:"since,omitempty"`
	AddTimestamps bool                 `protobuf:"varint,4,opt,name=addTimestamps" json:"addTimestamps,omitempty"`
	Follow        bool                 `protobuf:"varint,5,opt,name=Follow" json:"Follow,omitempty"`
	Tail          string               `protobuf:"bytes,6,opt,name=Tail" json:"Tail,omitempty"`
	Details       bool                 `protobuf:"varint,7,opt,name=Details" json:"Details,omitempty"`
	DealID        *BigInt              `protobuf:"bytes,8,opt,name=dealID" json:"dealID,omitempty"`
}

func (m *TaskLogsRequest) Reset()                    { *m = TaskLogsRequest{} }
func (m *TaskLogsRequest) String() string            { return proto.CompactTextString(m) }
func (*TaskLogsRequest) ProtoMessage()               {}
func (*TaskLogsRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{9} }

func (m *TaskLogsRequest) GetType() TaskLogsRequest_Type {
	if m != nil {
		return m.Type
	}
	return TaskLogsRequest_STDOUT
}

func (m *TaskLogsRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TaskLogsRequest) GetSince() string {
	if m != nil {
		return m.Since
	}
	return ""
}

func (m *TaskLogsRequest) GetAddTimestamps() bool {
	if m != nil {
		return m.AddTimestamps
	}
	return false
}

func (m *TaskLogsRequest) GetFollow() bool {
	if m != nil {
		return m.Follow
	}
	return false
}

func (m *TaskLogsRequest) GetTail() string {
	if m != nil {
		return m.Tail
	}
	return ""
}

func (m *TaskLogsRequest) GetDetails() bool {
	if m != nil {
		return m.Details
	}
	return false
}

func (m *TaskLogsRequest) GetDealID() *BigInt {
	if m != nil {
		return m.DealID
	}
	return nil
}

type Chunk struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Chunk) Reset()                    { *m = Chunk{} }
func (m *Chunk) String() string            { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()               {}
func (*Chunk) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{10} }

func (m *Chunk) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Progress struct {
	Size int64 `protobuf:"varint,1,opt,name=size" json:"size,omitempty"`
}

func (m *Progress) Reset()                    { *m = Progress{} }
func (m *Progress) String() string            { return proto.CompactTextString(m) }
func (*Progress) ProtoMessage()               {}
func (*Progress) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{11} }

func (m *Progress) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

type Duration struct {
	Nanoseconds int64 `protobuf:"varint,1,opt,name=nanoseconds" json:"nanoseconds,omitempty"`
}

func (m *Duration) Reset()                    { *m = Duration{} }
func (m *Duration) String() string            { return proto.CompactTextString(m) }
func (*Duration) ProtoMessage()               {}
func (*Duration) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{12} }

func (m *Duration) GetNanoseconds() int64 {
	if m != nil {
		return m.Nanoseconds
	}
	return 0
}

type EthAddress struct {
	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *EthAddress) Reset()                    { *m = EthAddress{} }
func (m *EthAddress) String() string            { return proto.CompactTextString(m) }
func (*EthAddress) ProtoMessage()               {}
func (*EthAddress) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{13} }

func (m *EthAddress) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

type DataSize struct {
	Bytes uint64 `protobuf:"varint,1,opt,name=bytes" json:"bytes,omitempty"`
}

func (m *DataSize) Reset()                    { *m = DataSize{} }
func (m *DataSize) String() string            { return proto.CompactTextString(m) }
func (*DataSize) ProtoMessage()               {}
func (*DataSize) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{14} }

func (m *DataSize) GetBytes() uint64 {
	if m != nil {
		return m.Bytes
	}
	return 0
}

type DataSizeRate struct {
	BitsPerSecond uint64 `protobuf:"varint,1,opt,name=bitsPerSecond" json:"bitsPerSecond,omitempty"`
}

func (m *DataSizeRate) Reset()                    { *m = DataSizeRate{} }
func (m *DataSizeRate) String() string            { return proto.CompactTextString(m) }
func (*DataSizeRate) ProtoMessage()               {}
func (*DataSizeRate) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{15} }

func (m *DataSizeRate) GetBitsPerSecond() uint64 {
	if m != nil {
		return m.BitsPerSecond
	}
	return 0
}

type Price struct {
	PerSecond *BigInt `protobuf:"bytes,1,opt,name=perSecond" json:"perSecond,omitempty"`
}

func (m *Price) Reset()                    { *m = Price{} }
func (m *Price) String() string            { return proto.CompactTextString(m) }
func (*Price) ProtoMessage()               {}
func (*Price) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{16} }

func (m *Price) GetPerSecond() *BigInt {
	if m != nil {
		return m.PerSecond
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "sonm.Empty")
	proto.RegisterType((*ID)(nil), "sonm.ID")
	proto.RegisterType((*EthID)(nil), "sonm.EthID")
	proto.RegisterType((*TaskID)(nil), "sonm.TaskID")
	proto.RegisterType((*Count)(nil), "sonm.Count")
	proto.RegisterType((*CPUUsage)(nil), "sonm.CPUUsage")
	proto.RegisterType((*MemoryUsage)(nil), "sonm.MemoryUsage")
	proto.RegisterType((*NetworkUsage)(nil), "sonm.NetworkUsage")
	proto.RegisterType((*ResourceUsage)(nil), "sonm.ResourceUsage")
	proto.RegisterType((*TaskLogsRequest)(nil), "sonm.TaskLogsRequest")
	proto.RegisterType((*Chunk)(nil), "sonm.Chunk")
	proto.RegisterType((*Progress)(nil), "sonm.Progress")
	proto.RegisterType((*Duration)(nil), "sonm.Duration")
	proto.RegisterType((*EthAddress)(nil), "sonm.EthAddress")
	proto.RegisterType((*DataSize)(nil), "sonm.DataSize")
	proto.RegisterType((*DataSizeRate)(nil), "sonm.DataSizeRate")
	proto.RegisterType((*Price)(nil), "sonm.Price")
	proto.RegisterEnum("sonm.TaskLogsRequest_Type", TaskLogsRequest_Type_name, TaskLogsRequest_Type_value)
}

func init() { proto.RegisterFile("insonmnia.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 710 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0xdd, 0x6e, 0x1a, 0x3b,
	0x10, 0x3e, 0x2c, 0x2c, 0x2c, 0x03, 0x49, 0x38, 0x56, 0x74, 0x84, 0x38, 0x6d, 0x85, 0xac, 0xa8,
	0x22, 0x55, 0xc5, 0x45, 0xd2, 0x8b, 0x2a, 0x17, 0x95, 0x9a, 0x2c, 0x55, 0x91, 0xda, 0x04, 0x39,
	0xe4, 0x01, 0xcc, 0xae, 0x45, 0x2c, 0x96, 0xf5, 0xd6, 0x36, 0x0d, 0xe4, 0x75, 0xfa, 0x72, 0xbd,
	0xee, 0x13, 0x54, 0xfe, 0x59, 0x02, 0xa9, 0xd4, 0xbb, 0xf9, 0xe6, 0xfb, 0xd6, 0x63, 0xcf, 0x37,
	0xb3, 0x70, 0xc4, 0x73, 0x25, 0xf2, 0x65, 0xce, 0xe9, 0xb0, 0x90, 0x42, 0x0b, 0x54, 0x33, 0xb0,
	0xd7, 0x9e, 0xf1, 0x39, 0xcf, 0xb5, 0xcb, 0xf5, 0x50, 0x42, 0x0b, 0x3a, 0xe3, 0x19, 0xd7, 0x9c,
	0x29, 0x9f, 0x3b, 0xd2, 0x7c, 0xc9, 0x94, 0xa6, 0xcb, 0xc2, 0x25, 0x70, 0x03, 0xc2, 0xd1, 0xb2,
	0xd0, 0x1b, 0x7c, 0x0c, 0xc1, 0x38, 0x46, 0x87, 0x10, 0xf0, 0xb4, 0x5b, 0xe9, 0x57, 0x06, 0x4d,
	0x12, 0xf0, 0x14, 0x9f, 0x42, 0x38, 0xd2, 0xf7, 0xe3, 0x18, 0xf5, 0xb7, 0x44, 0xeb, 0xac, 0x33,
	0x34, 0xd5, 0x86, 0x23, 0x7d, 0xff, 0x31, 0x4d, 0x25, 0x53, 0xca, 0x4a, 0x3f, 0x40, 0x7d, 0x4a,
	0xd5, 0xe2, 0xcf, 0x43, 0xd0, 0x09, 0xd4, 0x53, 0x46, 0xb3, 0x71, 0xdc, 0x0d, 0xec, 0xf7, 0x6d,
	0xf7, 0xfd, 0x25, 0x9f, 0x8f, 0x73, 0x4d, 0x3c, 0x87, 0x5f, 0x42, 0x78, 0x25, 0x56, 0xb9, 0x46,
	0xc7, 0x10, 0x26, 0x26, 0xb0, 0x27, 0xd4, 0x88, 0x03, 0xb8, 0x0f, 0xd1, 0xd5, 0xe4, 0xee, 0x4e,
	0xd1, 0x39, 0x33, 0x0a, 0x2d, 0x34, 0xcd, 0x4a, 0x85, 0x05, 0xf8, 0x14, 0x5a, 0x5f, 0xd9, 0x52,
	0xc8, 0x8d, 0x13, 0xf5, 0x20, 0x5a, 0xd2, 0xb5, 0x8d, 0xbd, 0x6e, 0x8b, 0xf1, 0xaf, 0x0a, 0xb4,
	0xaf, 0x99, 0x7e, 0x10, 0x72, 0xe1, 0xc4, 0x5d, 0x68, 0xe8, 0xf5, 0xe5, 0x46, 0x33, 0xe5, 0xb5,
	0x25, 0x34, 0x8c, 0xf4, 0x4c, 0xe0, 0x18, 0x0f, 0xd1, 0x0b, 0x68, 0xea, 0xf5, 0x84, 0x26, 0x0b,
	0xa6, 0x55, 0xb7, 0x6a, 0xb9, 0xa7, 0x84, 0x61, 0xe5, 0x96, 0xad, 0x39, 0x76, 0x9b, 0x30, 0x97,
	0xd3, 0xeb, 0x91, 0x94, 0x42, 0xaa, 0x6e, 0xe8, 0x2e, 0x57, 0x62, 0xc3, 0xc9, 0x92, 0xab, 0x3b,
	0xae, 0xc4, 0xae, 0x66, 0x2c, 0x45, 0x51, 0xb0, 0xb4, 0xdb, 0x28, 0x6b, 0xfa, 0x84, 0xab, 0x59,
	0xb2, 0x51, 0x59, 0xd3, 0x27, 0xf0, 0xcf, 0x0a, 0x1c, 0x10, 0xa6, 0xc4, 0x4a, 0x26, 0xcc, 0xbd,
	0xba, 0x0f, 0xd5, 0xa4, 0x58, 0x79, 0x57, 0x0f, 0x9d, 0x2b, 0x65, 0x93, 0x89, 0xa1, 0xd0, 0x29,
	0xd4, 0x97, 0xb6, 0xa7, 0xde, 0xba, 0x7f, 0x9d, 0x68, 0xa7, 0xcf, 0xc4, 0x0b, 0xd0, 0x05, 0x34,
	0x72, 0xd7, 0xd2, 0x6e, 0xb5, 0x5f, 0x1d, 0xb4, 0xce, 0xfa, 0x4e, 0xbb, 0x57, 0x72, 0xe8, 0xbb,
	0x3e, 0xca, 0xb5, 0xdc, 0x90, 0xf2, 0x83, 0xde, 0xf5, 0xd6, 0x0e, 0x4b, 0xa0, 0x0e, 0x54, 0x17,
	0x6c, 0xe3, 0x47, 0xc8, 0x84, 0x68, 0x00, 0xe1, 0x77, 0x9a, 0xad, 0x98, 0xbf, 0x07, 0x72, 0x67,
	0xef, 0x7a, 0x48, 0x9c, 0xe0, 0x22, 0x78, 0x5f, 0xc1, 0x3f, 0x02, 0x38, 0x32, 0xc3, 0xf8, 0x45,
	0xcc, 0x15, 0x61, 0xdf, 0x56, 0x4c, 0x69, 0x34, 0x84, 0x9a, 0xde, 0x14, 0x6e, 0x16, 0x0e, 0xcf,
	0x7a, 0xee, 0x80, 0x67, 0xa2, 0xe1, 0x74, 0x53, 0x30, 0x62, 0x75, 0x7e, 0x8a, 0x83, 0xed, 0x14,
	0x1f, 0x43, 0xa8, 0x78, 0x9e, 0x30, 0x6b, 0x75, 0x93, 0x38, 0x80, 0x4e, 0xe0, 0x80, 0xa6, 0xe9,
	0xb4, 0xdc, 0x2a, 0x67, 0x75, 0x44, 0xf6, 0x93, 0xe8, 0x3f, 0xa8, 0x7f, 0x12, 0x59, 0x26, 0x1e,
	0xac, 0xd9, 0x11, 0xf1, 0x08, 0x21, 0xa8, 0x4d, 0x29, 0xcf, 0xac, 0xcd, 0x4d, 0x62, 0x63, 0x33,
	0x70, 0x31, 0xd3, 0x94, 0x67, 0xca, 0x1a, 0x1c, 0x91, 0x12, 0xee, 0xec, 0x51, 0xf4, 0x97, 0x3d,
	0x1a, 0x40, 0xcd, 0xbc, 0x02, 0x01, 0xd4, 0x6f, 0xa7, 0xf1, 0xcd, 0xdd, 0xb4, 0xf3, 0x8f, 0x8f,
	0x47, 0x84, 0x74, 0x2a, 0x28, 0x82, 0xda, 0xe5, 0xcd, 0xf4, 0x73, 0x27, 0xc0, 0xff, 0x43, 0x78,
	0x75, 0xbf, 0xca, 0x17, 0xe6, 0x1a, 0x29, 0xd5, 0xd4, 0xb6, 0xa6, 0x4d, 0x6c, 0x8c, 0x5f, 0x41,
	0x34, 0x91, 0x62, 0x6e, 0xd6, 0xdb, 0xf0, 0x8a, 0x3f, 0xba, 0xd6, 0x55, 0x89, 0x8d, 0xf1, 0x5b,
	0x88, 0xe2, 0x95, 0xa4, 0x9a, 0x8b, 0x1c, 0xf5, 0xa1, 0x95, 0xd3, 0x5c, 0x28, 0x96, 0x88, 0x3c,
	0x55, 0x5e, 0xb6, 0x9b, 0xc2, 0xaf, 0x01, 0x9e, 0x7e, 0x17, 0xe6, 0x89, 0xd4, 0x85, 0xbe, 0x64,
	0x09, 0xcd, 0x96, 0xc7, 0x54, 0xd3, 0x5b, 0xfe, 0x68, 0xb7, 0x7c, 0xb6, 0xb3, 0x91, 0x0e, 0xe0,
	0x77, 0xd0, 0x2e, 0x15, 0x84, 0x6a, 0x6b, 0xc0, 0x8c, 0x6b, 0x35, 0x61, 0xf2, 0xd6, 0xd6, 0xf2,
	0xea, 0xfd, 0x24, 0x3e, 0x87, 0x70, 0x22, 0x79, 0xc2, 0xd0, 0x1b, 0x68, 0x16, 0x7b, 0xd2, 0xe7,
	0x6d, 0x7c, 0xa2, 0x67, 0x75, 0xfb, 0x8b, 0x3c, 0xff, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xf9, 0x8c,
	0xbf, 0x59, 0x6e, 0x05, 0x00, 0x00,
}
