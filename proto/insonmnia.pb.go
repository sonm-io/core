// Code generated by protoc-gen-go. DO NOT EDIT.
// source: insonmnia.proto

package sonm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TaskStatusReply_Status int32

const (
	TaskStatusReply_UNKNOWN  TaskStatusReply_Status = 0
	TaskStatusReply_SPOOLING TaskStatusReply_Status = 1
	TaskStatusReply_SPAWNING TaskStatusReply_Status = 2
	TaskStatusReply_RUNNING  TaskStatusReply_Status = 3
	TaskStatusReply_FINISHED TaskStatusReply_Status = 4
	TaskStatusReply_BROKEN   TaskStatusReply_Status = 5
)

var TaskStatusReply_Status_name = map[int32]string{
	0: "UNKNOWN",
	1: "SPOOLING",
	2: "SPAWNING",
	3: "RUNNING",
	4: "FINISHED",
	5: "BROKEN",
}
var TaskStatusReply_Status_value = map[string]int32{
	"UNKNOWN":  0,
	"SPOOLING": 1,
	"SPAWNING": 2,
	"RUNNING":  3,
	"FINISHED": 4,
	"BROKEN":   5,
}

func (x TaskStatusReply_Status) String() string {
	return proto.EnumName(TaskStatusReply_Status_name, int32(x))
}
func (TaskStatusReply_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{8, 0} }

type TaskLogsRequest_Type int32

const (
	TaskLogsRequest_STDOUT TaskLogsRequest_Type = 0
	TaskLogsRequest_STDERR TaskLogsRequest_Type = 1
	TaskLogsRequest_BOTH   TaskLogsRequest_Type = 2
)

var TaskLogsRequest_Type_name = map[int32]string{
	0: "STDOUT",
	1: "STDERR",
	2: "BOTH",
}
var TaskLogsRequest_Type_value = map[string]int32{
	"STDOUT": 0,
	"STDERR": 1,
	"BOTH":   2,
}

func (x TaskLogsRequest_Type) String() string {
	return proto.EnumName(TaskLogsRequest_Type_name, int32(x))
}
func (TaskLogsRequest_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{12, 0} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

type ID struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *ID) Reset()                    { *m = ID{} }
func (m *ID) String() string            { return proto.CompactTextString(m) }
func (*ID) ProtoMessage()               {}
func (*ID) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{1} }

func (m *ID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type TaskID struct {
	// Id is task ID itself
	Id     string  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	DealID *BigInt `protobuf:"bytes,2,opt,name=dealID" json:"dealID,omitempty"`
}

func (m *TaskID) Reset()                    { *m = TaskID{} }
func (m *TaskID) String() string            { return proto.CompactTextString(m) }
func (*TaskID) ProtoMessage()               {}
func (*TaskID) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{2} }

func (m *TaskID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TaskID) GetDealID() *BigInt {
	if m != nil {
		return m.DealID
	}
	return nil
}

type Count struct {
	Count uint64 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
}

func (m *Count) Reset()                    { *m = Count{} }
func (m *Count) String() string            { return proto.CompactTextString(m) }
func (*Count) ProtoMessage()               {}
func (*Count) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{3} }

func (m *Count) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type CPUUsage struct {
	Total uint64 `protobuf:"varint,1,opt,name=total" json:"total,omitempty"`
}

func (m *CPUUsage) Reset()                    { *m = CPUUsage{} }
func (m *CPUUsage) String() string            { return proto.CompactTextString(m) }
func (*CPUUsage) ProtoMessage()               {}
func (*CPUUsage) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{4} }

func (m *CPUUsage) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type MemoryUsage struct {
	MaxUsage uint64 `protobuf:"varint,1,opt,name=maxUsage" json:"maxUsage,omitempty"`
}

func (m *MemoryUsage) Reset()                    { *m = MemoryUsage{} }
func (m *MemoryUsage) String() string            { return proto.CompactTextString(m) }
func (*MemoryUsage) ProtoMessage()               {}
func (*MemoryUsage) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{5} }

func (m *MemoryUsage) GetMaxUsage() uint64 {
	if m != nil {
		return m.MaxUsage
	}
	return 0
}

type NetworkUsage struct {
	TxBytes   uint64 `protobuf:"varint,1,opt,name=txBytes" json:"txBytes,omitempty"`
	RxBytes   uint64 `protobuf:"varint,2,opt,name=rxBytes" json:"rxBytes,omitempty"`
	TxPackets uint64 `protobuf:"varint,3,opt,name=txPackets" json:"txPackets,omitempty"`
	RxPackets uint64 `protobuf:"varint,4,opt,name=rxPackets" json:"rxPackets,omitempty"`
	TxErrors  uint64 `protobuf:"varint,5,opt,name=txErrors" json:"txErrors,omitempty"`
	RxErrors  uint64 `protobuf:"varint,6,opt,name=rxErrors" json:"rxErrors,omitempty"`
	TxDropped uint64 `protobuf:"varint,7,opt,name=txDropped" json:"txDropped,omitempty"`
	RxDropped uint64 `protobuf:"varint,8,opt,name=rxDropped" json:"rxDropped,omitempty"`
}

func (m *NetworkUsage) Reset()                    { *m = NetworkUsage{} }
func (m *NetworkUsage) String() string            { return proto.CompactTextString(m) }
func (*NetworkUsage) ProtoMessage()               {}
func (*NetworkUsage) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{6} }

func (m *NetworkUsage) GetTxBytes() uint64 {
	if m != nil {
		return m.TxBytes
	}
	return 0
}

func (m *NetworkUsage) GetRxBytes() uint64 {
	if m != nil {
		return m.RxBytes
	}
	return 0
}

func (m *NetworkUsage) GetTxPackets() uint64 {
	if m != nil {
		return m.TxPackets
	}
	return 0
}

func (m *NetworkUsage) GetRxPackets() uint64 {
	if m != nil {
		return m.RxPackets
	}
	return 0
}

func (m *NetworkUsage) GetTxErrors() uint64 {
	if m != nil {
		return m.TxErrors
	}
	return 0
}

func (m *NetworkUsage) GetRxErrors() uint64 {
	if m != nil {
		return m.RxErrors
	}
	return 0
}

func (m *NetworkUsage) GetTxDropped() uint64 {
	if m != nil {
		return m.TxDropped
	}
	return 0
}

func (m *NetworkUsage) GetRxDropped() uint64 {
	if m != nil {
		return m.RxDropped
	}
	return 0
}

type ResourceUsage struct {
	Cpu     *CPUUsage                `protobuf:"bytes,1,opt,name=cpu" json:"cpu,omitempty"`
	Memory  *MemoryUsage             `protobuf:"bytes,2,opt,name=memory" json:"memory,omitempty"`
	Network map[string]*NetworkUsage `protobuf:"bytes,3,rep,name=network" json:"network,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ResourceUsage) Reset()                    { *m = ResourceUsage{} }
func (m *ResourceUsage) String() string            { return proto.CompactTextString(m) }
func (*ResourceUsage) ProtoMessage()               {}
func (*ResourceUsage) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{7} }

func (m *ResourceUsage) GetCpu() *CPUUsage {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *ResourceUsage) GetMemory() *MemoryUsage {
	if m != nil {
		return m.Memory
	}
	return nil
}

func (m *ResourceUsage) GetNetwork() map[string]*NetworkUsage {
	if m != nil {
		return m.Network
	}
	return nil
}

type TaskStatusReply struct {
	Status             TaskStatusReply_Status `protobuf:"varint,1,opt,name=status,enum=sonm.TaskStatusReply_Status" json:"status,omitempty"`
	ImageName          string                 `protobuf:"bytes,2,opt,name=imageName" json:"imageName,omitempty"`
	Ports              string                 `protobuf:"bytes,3,opt,name=ports" json:"ports,omitempty"`
	Uptime             uint64                 `protobuf:"varint,4,opt,name=uptime" json:"uptime,omitempty"`
	Usage              *ResourceUsage         `protobuf:"bytes,5,opt,name=usage" json:"usage,omitempty"`
	AvailableResources *AvailableResources    `protobuf:"bytes,6,opt,name=availableResources" json:"availableResources,omitempty"`
	MinerID            string                 `protobuf:"bytes,7,opt,name=minerID" json:"minerID,omitempty"`
}

func (m *TaskStatusReply) Reset()                    { *m = TaskStatusReply{} }
func (m *TaskStatusReply) String() string            { return proto.CompactTextString(m) }
func (*TaskStatusReply) ProtoMessage()               {}
func (*TaskStatusReply) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{8} }

func (m *TaskStatusReply) GetStatus() TaskStatusReply_Status {
	if m != nil {
		return m.Status
	}
	return TaskStatusReply_UNKNOWN
}

func (m *TaskStatusReply) GetImageName() string {
	if m != nil {
		return m.ImageName
	}
	return ""
}

func (m *TaskStatusReply) GetPorts() string {
	if m != nil {
		return m.Ports
	}
	return ""
}

func (m *TaskStatusReply) GetUptime() uint64 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *TaskStatusReply) GetUsage() *ResourceUsage {
	if m != nil {
		return m.Usage
	}
	return nil
}

func (m *TaskStatusReply) GetAvailableResources() *AvailableResources {
	if m != nil {
		return m.AvailableResources
	}
	return nil
}

func (m *TaskStatusReply) GetMinerID() string {
	if m != nil {
		return m.MinerID
	}
	return ""
}

type AvailableResources struct {
	NumCPUs            int64  `protobuf:"varint,1,opt,name=numCPUs" json:"numCPUs,omitempty"`
	NumGPUs            int64  `protobuf:"varint,2,opt,name=numGPUs" json:"numGPUs,omitempty"`
	Memory             uint64 `protobuf:"varint,3,opt,name=memory" json:"memory,omitempty"`
	CPUPeriod          int64  `protobuf:"varint,4,opt,name=CPUPeriod" json:"CPUPeriod,omitempty"`
	CPUQuota           int64  `protobuf:"varint,5,opt,name=CPUQuota" json:"CPUQuota,omitempty"`
	CPURealtimePeriod  int64  `protobuf:"varint,6,opt,name=CPURealtimePeriod" json:"CPURealtimePeriod,omitempty"`
	CPURealtimeRuntime int64  `protobuf:"varint,7,opt,name=CPURealtimeRuntime" json:"CPURealtimeRuntime,omitempty"`
	CpusetCpus         string `protobuf:"bytes,8,opt,name=CpusetCpus" json:"CpusetCpus,omitempty"`
	CpusetMems         string `protobuf:"bytes,9,opt,name=CpusetMems" json:"CpusetMems,omitempty"`
	DiskQuota          int64  `protobuf:"varint,10,opt,name=DiskQuota" json:"DiskQuota,omitempty"`
	KernelMemory       int64  `protobuf:"varint,11,opt,name=KernelMemory" json:"KernelMemory,omitempty"`
	MemoryReservation  int64  `protobuf:"varint,12,opt,name=MemoryReservation" json:"MemoryReservation,omitempty"`
	MemorySwap         int64  `protobuf:"varint,13,opt,name=MemorySwap" json:"MemorySwap,omitempty"`
	PidsLimit          int64  `protobuf:"varint,14,opt,name=PidsLimit" json:"PidsLimit,omitempty"`
	Cgroup             string `protobuf:"bytes,15,opt,name=cgroup" json:"cgroup,omitempty"`
	CgroupParent       string `protobuf:"bytes,16,opt,name=cgroupParent" json:"cgroupParent,omitempty"`
}

func (m *AvailableResources) Reset()                    { *m = AvailableResources{} }
func (m *AvailableResources) String() string            { return proto.CompactTextString(m) }
func (*AvailableResources) ProtoMessage()               {}
func (*AvailableResources) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{9} }

func (m *AvailableResources) GetNumCPUs() int64 {
	if m != nil {
		return m.NumCPUs
	}
	return 0
}

func (m *AvailableResources) GetNumGPUs() int64 {
	if m != nil {
		return m.NumGPUs
	}
	return 0
}

func (m *AvailableResources) GetMemory() uint64 {
	if m != nil {
		return m.Memory
	}
	return 0
}

func (m *AvailableResources) GetCPUPeriod() int64 {
	if m != nil {
		return m.CPUPeriod
	}
	return 0
}

func (m *AvailableResources) GetCPUQuota() int64 {
	if m != nil {
		return m.CPUQuota
	}
	return 0
}

func (m *AvailableResources) GetCPURealtimePeriod() int64 {
	if m != nil {
		return m.CPURealtimePeriod
	}
	return 0
}

func (m *AvailableResources) GetCPURealtimeRuntime() int64 {
	if m != nil {
		return m.CPURealtimeRuntime
	}
	return 0
}

func (m *AvailableResources) GetCpusetCpus() string {
	if m != nil {
		return m.CpusetCpus
	}
	return ""
}

func (m *AvailableResources) GetCpusetMems() string {
	if m != nil {
		return m.CpusetMems
	}
	return ""
}

func (m *AvailableResources) GetDiskQuota() int64 {
	if m != nil {
		return m.DiskQuota
	}
	return 0
}

func (m *AvailableResources) GetKernelMemory() int64 {
	if m != nil {
		return m.KernelMemory
	}
	return 0
}

func (m *AvailableResources) GetMemoryReservation() int64 {
	if m != nil {
		return m.MemoryReservation
	}
	return 0
}

func (m *AvailableResources) GetMemorySwap() int64 {
	if m != nil {
		return m.MemorySwap
	}
	return 0
}

func (m *AvailableResources) GetPidsLimit() int64 {
	if m != nil {
		return m.PidsLimit
	}
	return 0
}

func (m *AvailableResources) GetCgroup() string {
	if m != nil {
		return m.Cgroup
	}
	return ""
}

func (m *AvailableResources) GetCgroupParent() string {
	if m != nil {
		return m.CgroupParent
	}
	return ""
}

type StatusMapReply struct {
	Statuses map[string]*TaskStatusReply `protobuf:"bytes,1,rep,name=statuses" json:"statuses,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *StatusMapReply) Reset()                    { *m = StatusMapReply{} }
func (m *StatusMapReply) String() string            { return proto.CompactTextString(m) }
func (*StatusMapReply) ProtoMessage()               {}
func (*StatusMapReply) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{10} }

func (m *StatusMapReply) GetStatuses() map[string]*TaskStatusReply {
	if m != nil {
		return m.Statuses
	}
	return nil
}

type ContainerRestartPolicy struct {
	Name              string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	MaximumRetryCount uint32 `protobuf:"varint,2,opt,name=maximumRetryCount" json:"maximumRetryCount,omitempty"`
}

func (m *ContainerRestartPolicy) Reset()                    { *m = ContainerRestartPolicy{} }
func (m *ContainerRestartPolicy) String() string            { return proto.CompactTextString(m) }
func (*ContainerRestartPolicy) ProtoMessage()               {}
func (*ContainerRestartPolicy) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{11} }

func (m *ContainerRestartPolicy) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ContainerRestartPolicy) GetMaximumRetryCount() uint32 {
	if m != nil {
		return m.MaximumRetryCount
	}
	return 0
}

type TaskLogsRequest struct {
	Type          TaskLogsRequest_Type `protobuf:"varint,1,opt,name=type,enum=sonm.TaskLogsRequest_Type" json:"type,omitempty"`
	Id            string               `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Since         string               `protobuf:"bytes,3,opt,name=since" json:"since,omitempty"`
	AddTimestamps bool                 `protobuf:"varint,4,opt,name=addTimestamps" json:"addTimestamps,omitempty"`
	Follow        bool                 `protobuf:"varint,5,opt,name=Follow" json:"Follow,omitempty"`
	Tail          string               `protobuf:"bytes,6,opt,name=Tail" json:"Tail,omitempty"`
	Details       bool                 `protobuf:"varint,7,opt,name=Details" json:"Details,omitempty"`
	DealID        *BigInt              `protobuf:"bytes,8,opt,name=dealID" json:"dealID,omitempty"`
}

func (m *TaskLogsRequest) Reset()                    { *m = TaskLogsRequest{} }
func (m *TaskLogsRequest) String() string            { return proto.CompactTextString(m) }
func (*TaskLogsRequest) ProtoMessage()               {}
func (*TaskLogsRequest) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{12} }

func (m *TaskLogsRequest) GetType() TaskLogsRequest_Type {
	if m != nil {
		return m.Type
	}
	return TaskLogsRequest_STDOUT
}

func (m *TaskLogsRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TaskLogsRequest) GetSince() string {
	if m != nil {
		return m.Since
	}
	return ""
}

func (m *TaskLogsRequest) GetAddTimestamps() bool {
	if m != nil {
		return m.AddTimestamps
	}
	return false
}

func (m *TaskLogsRequest) GetFollow() bool {
	if m != nil {
		return m.Follow
	}
	return false
}

func (m *TaskLogsRequest) GetTail() string {
	if m != nil {
		return m.Tail
	}
	return ""
}

func (m *TaskLogsRequest) GetDetails() bool {
	if m != nil {
		return m.Details
	}
	return false
}

func (m *TaskLogsRequest) GetDealID() *BigInt {
	if m != nil {
		return m.DealID
	}
	return nil
}

type TaskLogsChunk struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *TaskLogsChunk) Reset()                    { *m = TaskLogsChunk{} }
func (m *TaskLogsChunk) String() string            { return proto.CompactTextString(m) }
func (*TaskLogsChunk) ProtoMessage()               {}
func (*TaskLogsChunk) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{13} }

func (m *TaskLogsChunk) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type TaskResourceRequirements struct {
	// CPUCores specifies the number of CPU cores required.
	CPUCores uint64 `protobuf:"varint,1,opt,name=CPUCores" json:"CPUCores,omitempty"`
	// MaxMemory specifies the maximum memory in bytes required.
	MaxMemory int64 `protobuf:"varint,2,opt,name=maxMemory" json:"maxMemory,omitempty"`
}

func (m *TaskResourceRequirements) Reset()                    { *m = TaskResourceRequirements{} }
func (m *TaskResourceRequirements) String() string            { return proto.CompactTextString(m) }
func (*TaskResourceRequirements) ProtoMessage()               {}
func (*TaskResourceRequirements) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{14} }

func (m *TaskResourceRequirements) GetCPUCores() uint64 {
	if m != nil {
		return m.CPUCores
	}
	return 0
}

func (m *TaskResourceRequirements) GetMaxMemory() int64 {
	if m != nil {
		return m.MaxMemory
	}
	return 0
}

type Chunk struct {
	Chunk []byte `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
}

func (m *Chunk) Reset()                    { *m = Chunk{} }
func (m *Chunk) String() string            { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()               {}
func (*Chunk) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{15} }

func (m *Chunk) GetChunk() []byte {
	if m != nil {
		return m.Chunk
	}
	return nil
}

type Progress struct {
	Size int64 `protobuf:"varint,1,opt,name=size" json:"size,omitempty"`
}

func (m *Progress) Reset()                    { *m = Progress{} }
func (m *Progress) String() string            { return proto.CompactTextString(m) }
func (*Progress) ProtoMessage()               {}
func (*Progress) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{16} }

func (m *Progress) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

type Duration struct {
	Nanoseconds int64 `protobuf:"varint,1,opt,name=nanoseconds" json:"nanoseconds,omitempty"`
}

func (m *Duration) Reset()                    { *m = Duration{} }
func (m *Duration) String() string            { return proto.CompactTextString(m) }
func (*Duration) ProtoMessage()               {}
func (*Duration) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{17} }

func (m *Duration) GetNanoseconds() int64 {
	if m != nil {
		return m.Nanoseconds
	}
	return 0
}

type EthAddress struct {
	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *EthAddress) Reset()                    { *m = EthAddress{} }
func (m *EthAddress) String() string            { return proto.CompactTextString(m) }
func (*EthAddress) ProtoMessage()               {}
func (*EthAddress) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{18} }

func (m *EthAddress) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

type DataSize struct {
	Bytes uint64 `protobuf:"varint,1,opt,name=bytes" json:"bytes,omitempty"`
}

func (m *DataSize) Reset()                    { *m = DataSize{} }
func (m *DataSize) String() string            { return proto.CompactTextString(m) }
func (*DataSize) ProtoMessage()               {}
func (*DataSize) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{19} }

func (m *DataSize) GetBytes() uint64 {
	if m != nil {
		return m.Bytes
	}
	return 0
}

type DataSizeRate struct {
	BitsPerSecond uint64 `protobuf:"varint,1,opt,name=bitsPerSecond" json:"bitsPerSecond,omitempty"`
}

func (m *DataSizeRate) Reset()                    { *m = DataSizeRate{} }
func (m *DataSizeRate) String() string            { return proto.CompactTextString(m) }
func (*DataSizeRate) ProtoMessage()               {}
func (*DataSizeRate) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{20} }

func (m *DataSizeRate) GetBitsPerSecond() uint64 {
	if m != nil {
		return m.BitsPerSecond
	}
	return 0
}

type Price struct {
	PerSecond *BigInt `protobuf:"bytes,1,opt,name=perSecond" json:"perSecond,omitempty"`
}

func (m *Price) Reset()                    { *m = Price{} }
func (m *Price) String() string            { return proto.CompactTextString(m) }
func (*Price) ProtoMessage()               {}
func (*Price) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{21} }

func (m *Price) GetPerSecond() *BigInt {
	if m != nil {
		return m.PerSecond
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "sonm.Empty")
	proto.RegisterType((*ID)(nil), "sonm.ID")
	proto.RegisterType((*TaskID)(nil), "sonm.TaskID")
	proto.RegisterType((*Count)(nil), "sonm.Count")
	proto.RegisterType((*CPUUsage)(nil), "sonm.CPUUsage")
	proto.RegisterType((*MemoryUsage)(nil), "sonm.MemoryUsage")
	proto.RegisterType((*NetworkUsage)(nil), "sonm.NetworkUsage")
	proto.RegisterType((*ResourceUsage)(nil), "sonm.ResourceUsage")
	proto.RegisterType((*TaskStatusReply)(nil), "sonm.TaskStatusReply")
	proto.RegisterType((*AvailableResources)(nil), "sonm.AvailableResources")
	proto.RegisterType((*StatusMapReply)(nil), "sonm.StatusMapReply")
	proto.RegisterType((*ContainerRestartPolicy)(nil), "sonm.ContainerRestartPolicy")
	proto.RegisterType((*TaskLogsRequest)(nil), "sonm.TaskLogsRequest")
	proto.RegisterType((*TaskLogsChunk)(nil), "sonm.TaskLogsChunk")
	proto.RegisterType((*TaskResourceRequirements)(nil), "sonm.TaskResourceRequirements")
	proto.RegisterType((*Chunk)(nil), "sonm.Chunk")
	proto.RegisterType((*Progress)(nil), "sonm.Progress")
	proto.RegisterType((*Duration)(nil), "sonm.Duration")
	proto.RegisterType((*EthAddress)(nil), "sonm.EthAddress")
	proto.RegisterType((*DataSize)(nil), "sonm.DataSize")
	proto.RegisterType((*DataSizeRate)(nil), "sonm.DataSizeRate")
	proto.RegisterType((*Price)(nil), "sonm.Price")
	proto.RegisterEnum("sonm.TaskStatusReply_Status", TaskStatusReply_Status_name, TaskStatusReply_Status_value)
	proto.RegisterEnum("sonm.TaskLogsRequest_Type", TaskLogsRequest_Type_name, TaskLogsRequest_Type_value)
}

func init() { proto.RegisterFile("insonmnia.proto", fileDescriptor8) }

var fileDescriptor8 = []byte{
	// 1228 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x56, 0x4d, 0x6f, 0x1b, 0x37,
	0x10, 0x8d, 0xbe, 0xa5, 0x91, 0x6c, 0x2b, 0x6c, 0x1a, 0x2c, 0x8c, 0x34, 0x10, 0xb6, 0x41, 0xe1,
	0xb4, 0x81, 0x0e, 0x4e, 0x0e, 0x45, 0x0e, 0x01, 0x6c, 0x49, 0x49, 0x84, 0xc4, 0xf2, 0x96, 0x92,
	0x90, 0xa2, 0x37, 0x5a, 0x22, 0x14, 0xc2, 0xbb, 0xcb, 0x2d, 0xc9, 0x4d, 0xac, 0xfc, 0x9c, 0xb6,
	0x3f, 0xae, 0xe7, 0x9e, 0x7b, 0x28, 0x86, 0xe4, 0xea, 0x23, 0x36, 0x7a, 0x11, 0xe6, 0xcd, 0x7b,
	0x22, 0x87, 0x33, 0x9c, 0xe1, 0xc2, 0x91, 0x48, 0xb5, 0x4c, 0x93, 0x54, 0xb0, 0x7e, 0xa6, 0xa4,
	0x91, 0xa4, 0x8a, 0xf0, 0xb8, 0x73, 0x25, 0x56, 0x22, 0x35, 0xce, 0x77, 0x4c, 0x16, 0x2c, 0x63,
	0x57, 0x22, 0x16, 0x46, 0x70, 0xed, 0x7d, 0x47, 0x46, 0x24, 0x5c, 0x1b, 0x96, 0x64, 0xce, 0x11,
	0x36, 0xa0, 0x36, 0x4a, 0x32, 0xb3, 0x0e, 0x1f, 0x40, 0x79, 0x3c, 0x24, 0x87, 0x50, 0x16, 0xcb,
	0xa0, 0xd4, 0x2b, 0x9d, 0xb4, 0x68, 0x59, 0x2c, 0xc3, 0x57, 0x50, 0x9f, 0x31, 0x7d, 0x7d, 0x9b,
	0x21, 0x4f, 0xa0, 0xbe, 0xe4, 0x2c, 0x1e, 0x0f, 0x83, 0x72, 0xaf, 0x74, 0xd2, 0x3e, 0xed, 0xf4,
	0x31, 0x84, 0xfe, 0xb9, 0x58, 0x8d, 0x53, 0x43, 0x3d, 0x17, 0x7e, 0x07, 0xb5, 0x81, 0xcc, 0x53,
	0x43, 0x1e, 0x40, 0x6d, 0x81, 0x86, 0x5d, 0xa1, 0x4a, 0x1d, 0x08, 0x7b, 0xd0, 0x1c, 0x44, 0xf3,
	0xb9, 0x66, 0x2b, 0x8e, 0x0a, 0x23, 0x0d, 0x8b, 0x0b, 0x85, 0x05, 0xe1, 0x53, 0x68, 0x5f, 0xf0,
	0x44, 0xaa, 0xb5, 0x13, 0x1d, 0x43, 0x33, 0x61, 0x37, 0xd6, 0xf6, 0xba, 0x0d, 0x0e, 0xff, 0x29,
	0x41, 0x67, 0xc2, 0xcd, 0x67, 0xa9, 0xae, 0x9d, 0x38, 0x80, 0x86, 0xb9, 0x39, 0x5f, 0x1b, 0xae,
	0xbd, 0xb6, 0x80, 0xc8, 0x28, 0xcf, 0x94, 0x1d, 0xe3, 0x21, 0x79, 0x04, 0x2d, 0x73, 0x13, 0xb1,
	0xc5, 0x35, 0x37, 0x3a, 0xa8, 0x58, 0x6e, 0xeb, 0x40, 0x56, 0x6d, 0xd8, 0xaa, 0x63, 0x37, 0x0e,
	0x0c, 0xce, 0xdc, 0x8c, 0x94, 0x92, 0x4a, 0x07, 0x35, 0x17, 0x5c, 0x81, 0x91, 0x53, 0x05, 0x57,
	0x77, 0x5c, 0x81, 0xdd, 0x9e, 0x43, 0x25, 0xb3, 0x8c, 0x2f, 0x83, 0x46, 0xb1, 0xa7, 0x77, 0xb8,
	0x3d, 0x0b, 0xb6, 0x59, 0xec, 0xe9, 0x1d, 0xe1, 0xdf, 0x25, 0x38, 0xa0, 0x5c, 0xcb, 0x5c, 0x2d,
	0xb8, 0x3b, 0x75, 0x0f, 0x2a, 0x8b, 0x2c, 0xb7, 0x27, 0x6e, 0x9f, 0x1e, 0xba, 0xaa, 0x14, 0x49,
	0xa6, 0x48, 0x91, 0xa7, 0x50, 0x4f, 0x6c, 0x4e, 0x7d, 0xe9, 0xee, 0x3b, 0xd1, 0x4e, 0x9e, 0xa9,
	0x17, 0x90, 0x97, 0xd0, 0x48, 0x5d, 0x4a, 0x83, 0x4a, 0xaf, 0x72, 0xd2, 0x3e, 0xed, 0x39, 0xed,
	0xde, 0x96, 0x7d, 0x9f, 0xf5, 0x51, 0x6a, 0xd4, 0x9a, 0x16, 0x7f, 0x38, 0x9e, 0x6c, 0xca, 0x61,
	0x09, 0xd2, 0x85, 0xca, 0x35, 0x5f, 0xfb, 0x2b, 0x84, 0x26, 0x39, 0x81, 0xda, 0x27, 0x16, 0xe7,
	0xdc, 0xc7, 0x41, 0xdc, 0xda, 0xbb, 0x35, 0xa4, 0x4e, 0xf0, 0xb2, 0xfc, 0x73, 0x29, 0xfc, 0xb7,
	0x0c, 0x47, 0x78, 0x19, 0xa7, 0x86, 0x99, 0x5c, 0x53, 0x9e, 0xc5, 0x6b, 0xf2, 0x02, 0xea, 0xda,
	0x42, 0xbb, 0xec, 0xe1, 0xe9, 0x23, 0xb7, 0xc4, 0x57, 0xb2, 0xbe, 0xb7, 0xbd, 0x16, 0x53, 0x2a,
	0x12, 0xb6, 0xe2, 0x13, 0x96, 0xb8, 0xbd, 0x5b, 0x74, 0xeb, 0xc0, 0x8b, 0x98, 0x49, 0xe5, 0xcb,
	0xdf, 0xa2, 0x0e, 0x90, 0x87, 0x50, 0xcf, 0x33, 0xec, 0x1e, 0x5f, 0x77, 0x8f, 0xc8, 0x53, 0xa8,
	0xe5, 0xf6, 0x3a, 0xd6, 0xec, 0x19, 0xbe, 0xb9, 0x23, 0x3f, 0xd4, 0x29, 0xc8, 0x5b, 0x20, 0xec,
	0x13, 0x13, 0x31, 0xbb, 0x8a, 0x79, 0x21, 0x70, 0xb7, 0xa1, 0x7d, 0x1a, 0xb8, 0xff, 0x9d, 0xdd,
	0xe2, 0xe9, 0x1d, 0xff, 0xc1, 0xfb, 0x9b, 0x88, 0x94, 0xab, 0xf1, 0xd0, 0xde, 0x97, 0x16, 0x2d,
	0x60, 0xf8, 0x2b, 0xd4, 0xdd, 0x61, 0x49, 0x1b, 0x1a, 0xf3, 0xc9, 0xbb, 0xc9, 0xe5, 0x87, 0x49,
	0xf7, 0x1e, 0xe9, 0x40, 0x73, 0x1a, 0x5d, 0x5e, 0xbe, 0x1f, 0x4f, 0xde, 0x74, 0x4b, 0x0e, 0x9d,
	0x7d, 0x98, 0x20, 0x2a, 0xa3, 0x90, 0xce, 0x27, 0x16, 0x54, 0x90, 0x7a, 0x3d, 0x9e, 0x8c, 0xa7,
	0x6f, 0x47, 0xc3, 0x6e, 0x95, 0x00, 0xd4, 0xcf, 0xe9, 0xe5, 0xbb, 0xd1, 0xa4, 0x5b, 0x0b, 0xff,
	0xa8, 0x02, 0x39, 0xbb, 0x33, 0x94, 0x34, 0x4f, 0x06, 0xd1, 0xdc, 0x95, 0xa0, 0x42, 0x0b, 0xe8,
	0x99, 0x37, 0xc8, 0x94, 0x37, 0x0c, 0x42, 0xcc, 0xa5, 0xbf, 0x80, 0xae, 0xc3, 0x8a, 0xdb, 0xf6,
	0x08, 0x5a, 0x83, 0x68, 0x1e, 0x71, 0x25, 0xe4, 0xd2, 0xa6, 0xb9, 0x42, 0xb7, 0x0e, 0x6c, 0xa1,
	0x41, 0x34, 0xff, 0x25, 0x97, 0x86, 0xd9, 0x64, 0x57, 0xe8, 0x06, 0x93, 0x67, 0x70, 0x7f, 0x10,
	0xcd, 0x29, 0x67, 0x31, 0x16, 0xc5, 0xaf, 0x50, 0xb7, 0xa2, 0xdb, 0x04, 0xe9, 0x03, 0xd9, 0x71,
	0xd2, 0x3c, 0xb5, 0x75, 0x6d, 0x58, 0xf9, 0x1d, 0x0c, 0x79, 0x0c, 0x30, 0xc8, 0x72, 0xcd, 0x0d,
	0xfe, 0xda, 0x1e, 0x6c, 0xd1, 0x1d, 0xcf, 0x96, 0xbf, 0xe0, 0x89, 0x0e, 0x5a, 0xbb, 0x3c, 0x7a,
	0xf0, 0x5c, 0x43, 0xa1, 0xaf, 0x5d, 0xe8, 0xe0, 0xce, 0xb5, 0x71, 0x90, 0x10, 0x3a, 0xef, 0xb8,
	0x4a, 0x79, 0xec, 0x1a, 0x30, 0x68, 0x5b, 0xc1, 0x9e, 0x0f, 0xcf, 0xe7, 0x2c, 0xca, 0x35, 0x57,
	0x9f, 0x98, 0x11, 0x32, 0x0d, 0x3a, 0xee, 0x7c, 0xb7, 0x08, 0x8c, 0xc7, 0x39, 0xa7, 0x9f, 0x59,
	0x16, 0x1c, 0x58, 0xd9, 0x8e, 0x07, 0xe3, 0x89, 0xc4, 0x52, 0xbf, 0x17, 0x89, 0x30, 0xc1, 0xa1,
	0x8b, 0x67, 0xe3, 0xc0, 0xea, 0x2c, 0x56, 0x4a, 0xe6, 0x59, 0x70, 0x64, 0x4f, 0xe2, 0x11, 0xc6,
	0xe9, 0xac, 0x88, 0x29, 0x9e, 0x9a, 0xa0, 0x6b, 0xd9, 0x3d, 0x5f, 0xf8, 0x57, 0x09, 0x0e, 0xdd,
	0xfd, 0xbb, 0x60, 0x99, 0x6b, 0xd1, 0x57, 0xd0, 0x74, 0x6d, 0x67, 0xc7, 0x30, 0xce, 0x90, 0xd0,
	0xdd, 0xf5, 0x7d, 0x9d, 0x87, 0x5c, 0xbb, 0x29, 0xb2, 0xf9, 0xcf, 0x31, 0x85, 0x83, 0x3d, 0xea,
	0x8e, 0x39, 0xf2, 0xd3, 0xfe, 0x1c, 0xf9, 0xf6, 0xce, 0x21, 0xb0, 0x3b, 0x4a, 0x7e, 0x83, 0x87,
	0x03, 0x99, 0x1a, 0x86, 0x4d, 0x43, 0xf1, 0x3d, 0x54, 0x26, 0x92, 0xb1, 0x58, 0xac, 0x09, 0x81,
	0x6a, 0x8a, 0x53, 0xc1, 0xad, 0x6e, 0x6d, 0x4c, 0x7e, 0xc2, 0x6e, 0x44, 0x92, 0x27, 0x94, 0x1b,
	0xb5, 0xb6, 0x0f, 0x9a, 0xdd, 0xea, 0x80, 0xde, 0x26, 0xc2, 0x3f, 0xfd, 0x98, 0x7a, 0x2f, 0x57,
	0x9a, 0xf2, 0xdf, 0x73, 0xae, 0x0d, 0xe9, 0x43, 0xd5, 0xac, 0x33, 0xee, 0x87, 0xd4, 0xf1, 0x36,
	0xbe, 0x1d, 0x51, 0x7f, 0xb6, 0xce, 0x38, 0xb5, 0x3a, 0xff, 0xd8, 0x96, 0x37, 0x8f, 0xed, 0x03,
	0xa8, 0x69, 0x91, 0x2e, 0x78, 0x31, 0x92, 0x2c, 0x20, 0x4f, 0xe0, 0x80, 0x2d, 0x97, 0xb3, 0xe2,
	0x45, 0x77, 0x2f, 0x52, 0x93, 0xee, 0x3b, 0xb1, 0x9c, 0xaf, 0x65, 0x1c, 0xcb, 0xcf, 0xb6, 0x69,
	0x9a, 0xd4, 0x23, 0x3c, 0xe9, 0x8c, 0x89, 0xd8, 0x76, 0x49, 0x8b, 0x5a, 0x1b, 0x5b, 0x76, 0xc8,
	0x0d, 0x13, 0xb1, 0xb6, 0xdd, 0xd0, 0xa4, 0x05, 0xdc, 0x79, 0xee, 0x9b, 0xff, 0xf3, 0xdc, 0x9f,
	0x40, 0x15, 0x4f, 0x81, 0x73, 0x63, 0x3a, 0x1b, 0x5e, 0xce, 0x67, 0xdd, 0x7b, 0xde, 0x1e, 0x51,
	0xda, 0x2d, 0x91, 0x26, 0x54, 0xcf, 0x2f, 0x67, 0x6f, 0xbb, 0xe5, 0xf0, 0x7b, 0x38, 0x28, 0xce,
	0x3f, 0xf8, 0x98, 0xa7, 0xd7, 0x18, 0xce, 0x92, 0x19, 0x66, 0x53, 0xd4, 0xa1, 0xd6, 0x0e, 0x67,
	0x10, 0xa0, 0xa8, 0x18, 0x36, 0x98, 0x28, 0xa1, 0x78, 0xc2, 0x53, 0xf7, 0xd8, 0x0e, 0xa2, 0xf9,
	0x40, 0xaa, 0xcd, 0xeb, 0xbe, 0xc1, 0x78, 0xbf, 0x13, 0x76, 0x73, 0xb1, 0x7d, 0xe3, 0x2a, 0x74,
	0xeb, 0xb0, 0xdf, 0x24, 0x76, 0x4b, 0xfc, 0x26, 0x41, 0xc3, 0xef, 0xe9, 0x40, 0xf8, 0x18, 0x9a,
	0x91, 0x92, 0x2b, 0xc5, 0xb5, 0xc6, 0xa0, 0xb4, 0xf8, 0xc2, 0xfd, 0x64, 0xb3, 0x76, 0xf8, 0x0c,
	0x9a, 0xc3, 0x5c, 0xb9, 0x46, 0xeb, 0x41, 0x3b, 0x65, 0xa9, 0xd4, 0x7c, 0x21, 0xd3, 0x65, 0x31,
	0x00, 0x77, 0x5d, 0xe1, 0x0f, 0x00, 0x23, 0xf3, 0xf1, 0x6c, 0xb9, 0xb4, 0xeb, 0x05, 0xd0, 0x60,
	0xce, 0xf4, 0x7b, 0x16, 0x10, 0xbf, 0x84, 0x86, 0xcc, 0xb0, 0xa9, 0xf8, 0x62, 0x1f, 0xa0, 0xab,
	0x9d, 0xaf, 0x16, 0x07, 0xc2, 0x17, 0xd0, 0x29, 0x14, 0x94, 0x19, 0x5b, 0xfd, 0x2b, 0x61, 0x74,
	0xc4, 0xd5, 0xd4, 0xee, 0xe5, 0xd5, 0xfb, 0xce, 0xf0, 0x39, 0xd4, 0x22, 0x25, 0x16, 0x9c, 0xfc,
	0x08, 0xad, 0x6c, 0x4f, 0xfa, 0x75, 0x0d, 0xb7, 0xf4, 0x55, 0xdd, 0x7e, 0x1b, 0x3e, 0xff, 0x2f,
	0x00, 0x00, 0xff, 0xff, 0xac, 0x4d, 0x00, 0xd4, 0x67, 0x0a, 0x00, 0x00,
}
