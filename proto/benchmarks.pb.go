// Code generated by protoc-gen-go. DO NOT EDIT.
// source: benchmarks.proto

package sonm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// BenchmarkType describes hardware group for which this benchmark is applicable
type DeviceType int32

const (
	DeviceType_DEV_UNKNOWN DeviceType = 0
	DeviceType_DEV_CPU     DeviceType = 1
	DeviceType_DEV_GPU     DeviceType = 2
	DeviceType_DEV_RAM     DeviceType = 3
	DeviceType_DEV_STORAGE DeviceType = 4
	DeviceType_DEV_NETWORK DeviceType = 5
)

var DeviceType_name = map[int32]string{
	0: "DEV_UNKNOWN",
	1: "DEV_CPU",
	2: "DEV_GPU",
	3: "DEV_RAM",
	4: "DEV_STORAGE",
	5: "DEV_NETWORK",
}
var DeviceType_value = map[string]int32{
	"DEV_UNKNOWN": 0,
	"DEV_CPU":     1,
	"DEV_GPU":     2,
	"DEV_RAM":     3,
	"DEV_STORAGE": 4,
	"DEV_NETWORK": 5,
}

func (x DeviceType) String() string {
	return proto.EnumName(DeviceType_name, int32(x))
}
func (DeviceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

// SplittingAlgorithm describes how a benchmark is mapped to a device.
type SplittingAlgorithm int32

const (
	SplittingAlgorithm_NONE         SplittingAlgorithm = 0
	SplittingAlgorithm_PROPORTIONAL SplittingAlgorithm = 1
)

var SplittingAlgorithm_name = map[int32]string{
	0: "NONE",
	1: "PROPORTIONAL",
}
var SplittingAlgorithm_value = map[string]int32{
	"NONE":         0,
	"PROPORTIONAL": 1,
}

func (x SplittingAlgorithm) String() string {
	return proto.EnumName(SplittingAlgorithm_name, int32(x))
}
func (SplittingAlgorithm) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

// Benchmark describes a way to measure hardware performance
type Benchmark struct {
	ID                 uint64             `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Code               string             `protobuf:"bytes,2,opt,name=code" json:"code,omitempty"`
	Type               DeviceType         `protobuf:"varint,3,opt,name=type,enum=sonm.DeviceType" json:"type,omitempty"`
	Description        string             `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	Image              string             `protobuf:"bytes,5,opt,name=image" json:"image,omitempty"`
	Result             uint64             `protobuf:"varint,6,opt,name=result" json:"result,omitempty"`
	SplittingAlgorithm SplittingAlgorithm `protobuf:"varint,7,opt,name=splittingAlgorithm,enum=sonm.SplittingAlgorithm" json:"splittingAlgorithm,omitempty"`
}

func (m *Benchmark) Reset()                    { *m = Benchmark{} }
func (m *Benchmark) String() string            { return proto.CompactTextString(m) }
func (*Benchmark) ProtoMessage()               {}
func (*Benchmark) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Benchmark) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Benchmark) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Benchmark) GetType() DeviceType {
	if m != nil {
		return m.Type
	}
	return DeviceType_DEV_UNKNOWN
}

func (m *Benchmark) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Benchmark) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *Benchmark) GetResult() uint64 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *Benchmark) GetSplittingAlgorithm() SplittingAlgorithm {
	if m != nil {
		return m.SplittingAlgorithm
	}
	return SplittingAlgorithm_NONE
}

func init() {
	proto.RegisterType((*Benchmark)(nil), "sonm.Benchmark")
	proto.RegisterEnum("sonm.DeviceType", DeviceType_name, DeviceType_value)
	proto.RegisterEnum("sonm.SplittingAlgorithm", SplittingAlgorithm_name, SplittingAlgorithm_value)
}

func init() { proto.RegisterFile("benchmarks.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 303 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xdf, 0x4a, 0x32, 0x41,
	0x18, 0xc6, 0xdd, 0x75, 0xd4, 0xcf, 0xd7, 0x0f, 0x1b, 0x5e, 0x22, 0xe6, 0x70, 0x89, 0x0e, 0xc4,
	0x03, 0x89, 0xba, 0x82, 0xad, 0x5d, 0x4c, 0xac, 0x99, 0x65, 0x5c, 0xf3, 0x30, 0x74, 0x9d, 0x74,
	0xc8, 0xfd, 0xc3, 0xee, 0x14, 0x78, 0xd5, 0xdd, 0x42, 0x38, 0xb6, 0x14, 0xd8, 0xd9, 0x3c, 0xcf,
	0x8f, 0xf7, 0xe1, 0x07, 0x03, 0x74, 0xa5, 0xb2, 0x64, 0x9b, 0x2e, 0xcb, 0xb7, 0x6a, 0x54, 0x94,
	0xb9, 0xc9, 0x91, 0x54, 0x79, 0x96, 0x5e, 0x7e, 0x3a, 0xd0, 0xbd, 0xab, 0x11, 0xf6, 0xc1, 0x9d,
	0x04, 0xcc, 0xf1, 0x9c, 0x01, 0x91, 0xee, 0x24, 0x40, 0x04, 0x92, 0xe4, 0x6b, 0xc5, 0x5c, 0xcf,
	0x19, 0x74, 0xa5, 0x7d, 0xe3, 0x15, 0x10, 0xb3, 0x2f, 0x14, 0x6b, 0x7a, 0xce, 0xa0, 0x7f, 0x43,
	0x47, 0x87, 0x99, 0x51, 0xa0, 0x3e, 0x74, 0xa2, 0xe2, 0x7d, 0xa1, 0xa4, 0xa5, 0xe8, 0x41, 0x6f,
	0xad, 0xaa, 0xa4, 0xd4, 0x85, 0xd1, 0x79, 0xc6, 0x88, 0x1d, 0xf8, 0x5d, 0xe1, 0x39, 0xb4, 0x74,
	0xba, 0xdc, 0x28, 0xd6, 0xb2, 0xec, 0x18, 0xf0, 0x02, 0xda, 0xa5, 0xaa, 0xde, 0x77, 0x86, 0xb5,
	0xad, 0xc5, 0x77, 0xc2, 0x07, 0xc0, 0xaa, 0xd8, 0x69, 0x63, 0x74, 0xb6, 0xf1, 0x77, 0x9b, 0xbc,
	0xd4, 0x66, 0x9b, 0xb2, 0x8e, 0x75, 0x60, 0x47, 0x87, 0xd9, 0x09, 0x97, 0x7f, 0xdc, 0x0c, 0x5f,
	0x01, 0x7e, 0x6c, 0xf1, 0x0c, 0x7a, 0x41, 0xf8, 0xfc, 0x32, 0xe7, 0x53, 0x2e, 0x16, 0x9c, 0x36,
	0xb0, 0x07, 0x9d, 0x43, 0x71, 0x1f, 0xcd, 0xa9, 0x53, 0x87, 0x71, 0x34, 0xa7, 0x6e, 0x1d, 0xa4,
	0xff, 0x44, 0x9b, 0xf5, 0xdd, 0x2c, 0x16, 0xd2, 0x1f, 0x87, 0x94, 0xd4, 0x05, 0x0f, 0xe3, 0x85,
	0x90, 0x53, 0xda, 0x1a, 0x5e, 0x03, 0x9e, 0x1a, 0xe1, 0x3f, 0x20, 0x5c, 0xf0, 0x90, 0x36, 0x90,
	0xc2, 0xff, 0x48, 0x8a, 0x48, 0xc8, 0x78, 0x22, 0xb8, 0xff, 0x48, 0x9d, 0x55, 0xdb, 0x7e, 0xcc,
	0xed, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbe, 0xe6, 0x70, 0x34, 0xac, 0x01, 0x00, 0x00,
}
