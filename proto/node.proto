syntax = "proto3";

import "deal.proto";
import "insonmnia.proto";
import "hub.proto";

package sonm;

// The SONM Local node API must also include
// the Marketplace API, but it already has been described
// into a "proto/marketplace.proto" file.

// TaskManagement describe a bunch of methods
// to manage tasks running into the SONM network
service TaskManagement {
    // List produces a list of all tasks running on different SONM nodes
    rpc List(TaskListRequest) returns (TaskListReply) {}
    // PushTask pushes image to Worker
    rpc PushTask(stream Chunk) returns (stream Progress) {}
    // Start starts a task on given resource
    rpc Start(HubStartTaskRequest) returns (HubStartTaskReply) {}
    // Status produces a task status by their ID
    rpc Status(TaskID) returns (TaskStatusReply) {}
    // Logs retrieves a task log (stdin/stderr) from given task
    rpc Logs(TaskLogsRequest) returns (stream TaskLogsChunk) {}
    // Stop stops a task by their ID
    rpc Stop(TaskID) returns (Empty) {}
    // PullTask pulls task image back
    rpc PullTask(PullTaskRequest) returns (stream Chunk) {}
}

message TaskListRequest {
    // HubID is hub eth id;
    // If empty - collect task info from all hubs
    string hubID = 1;
}

// DealManagement describe a bunch of methods
// to manage deals made into the SONM network
service DealManagement {
    // List produces a list of all deals made by client with given ID
    rpc List(DealListRequest) returns (DealListReply) {}
    // Status produces a detailed info about deal with given ID
    rpc Status(ID) returns (Deal) {}
    // Finish finishes a deal with given ID
    rpc Finish(ID) returns (Empty) {}
}

message DealListRequest {
    string owner = 1;
    DealStatus status = 2;
}

message DealListReply {
    repeated Deal deal = 1;
}

// HubManagement describe a bunch of methods
// to manage Hub node and their Worker nodes.
// Must be called by Hub's owner.
service HubManagement {
    // Status produse a detailed info about Hub
    rpc Status (Empty) returns (HubStatusReply) {}

    // WorkersList prouces a list of connected Workers
    rpc WorkersList (Empty) returns (ListReply) {}
    // WorkersStatus produces a detailed info about a Worker with given ID
    rpc WorkerStatus (ID) returns (InfoReply) {}

    // GetRegisteredWorkers produce a list of Workers IDs allowed
    // to connect to this hub
    rpc GetRegisteredWorkers(Empty) returns (GetRegisteredWorkersReply) {}
    // RegisterWorkers allows Worker with given ID connect to Hub
    rpc RegisterWorker (ID) returns (Empty) {}
    // DeregisterWorkers deny Worker with given ID connect to Hub
    rpc DeregisterWorker (ID) returns (Empty) {}

    // Devices returns list of all available devices that this Hub awares of
    // with tieir full description.
    rpc DeviceList(Empty) returns (DevicesReply) {}
    // GetDeviceProperties allows to obtain previously assigned resource
    // properties for a given device.
    rpc GetDeviceProperties(ID) returns (GetDevicePropertiesReply) {}
    // SetDeviceProperties method allows to specify additional resource
    // properties for a device specified by its ID.
    // This may include GPU's capability to execute a well-known work such as
    // Ethereum mining etc.
    rpc SetDeviceProperties(SetDevicePropertiesRequest) returns (Empty) {}

    // GetAskPlans allows to obtain previously assigned Ask Plans from for a given worker.
    rpc GetAskPlans(Empty) returns (SlotsReply) {}
    // CreateAskPlan allows to create rules
    // for creating Ask orders on Marketplace
    rpc CreateAskPlan(InsertSlotRequest) returns (ID) {}
    // RemoveAskPlan allows to remove rules
    // for creating Ask orders on Marketplace
    rpc RemoveAskPlan(ID) returns (Empty) {}

    // List produces a list of all running tasks on the Hub
    rpc TaskList(Empty) returns (TaskListReply) {}
    // Status produces a detailed info about task on the Hub
    rpc TaskStatus(ID) returns (TaskStatusReply) {}
}
