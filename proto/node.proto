syntax = "proto3";

import "deal.proto";
import "insonmnia.proto";
import "hub.proto";
import "container.proto";

package sonm;

// The SONM Local node API must also include
// the Marketplace API, but it already has been described
// into a "proto/marketplace.proto" file.

// TaskManagement describe a bunch of methods
// to manage tasks running into the SONM network
service TaskManagement {
    // List produces a list of all tasks running on different SONM nodes
    rpc List(TaskListRequest) returns (TaskListReply) {}
    // PushTask pushes image to Worker
    rpc PushTask(stream Chunk) returns (stream Progress) {}
    // Start starts a task on given resource
    rpc Start(StartTaskRequest) returns (StartTaskReply) {}
    // JoinNetwork provides network specs to join specified task
    rpc JoinNetwork(JoinNetworkRequest) returns (NetworkSpec) {}
    // Status produces a task status by their ID
    rpc Status(TaskID) returns (TaskStatusReply) {}
    // Logs retrieves a task log (stdin/stderr) from given task
    rpc Logs(TaskLogsRequest) returns (stream TaskLogsChunk) {}
    // Stop stops a task by their ID
    rpc Stop(TaskID) returns (Empty) {}
    // PullTask pulls task image back
    rpc PullTask(PullTaskRequest) returns (stream Chunk) {}
}

message JoinNetworkRequest {
    TaskID taskID = 1;
    string NetworkID = 2;
}

message TaskListRequest {
    // HubID is hub eth id;
    // If empty - collect task info from all hubs
    string hubID = 1;
}

// DealManagement describe a bunch of methods
// to manage deals made into the SONM network
service DealManagement {
    // List produces a list of all deals made by client with given ID
    rpc List(DealListRequest) returns (DealListReply) {}
    // Status produces a detailed info about deal with given ID
    rpc Status(ID) returns (DealStatusReply) {}
    // Finish finishes a deal with given ID
    rpc Finish(ID) returns (Empty) {}
}

message DealListRequest {
    string owner = 1;
    DealStatus status = 2;
}

message DealListReply {
    repeated Deal deal = 1;
}

message DealStatusReply {
    Deal deal = 1;
    DealInfoReply info = 2;
}

// HubManagement describe a bunch of methods
// to manage Hub instance. Must be called by
// Worker's owner.
//
// TODO: rename to smth like `WorkerManagement`.
service HubManagement {
    // Status produse a detailed info about Hub
    rpc Status (Empty) returns (HubStatusReply) {}

    // Devices provides detailed information about device
    // and show benchmark results.
    //
    // TODO: returns smth that can represent miner.hardware (extend Capabilities?)
    rpc Devices(Empty) returns (DevicesReply) {}

    // Tasks produces a list of all running tasks on the Hub
    rpc Tasks(Empty) returns (TaskListReply) {}

    // AskPlans allows to obtain previously assigned Ask Plans from for a given worker.
    rpc AskPlans(Empty) returns (AskPlansReply) {}
    // CreateAskPlan allows to create rules
    // for creating Ask orders on Marketplace
    rpc CreateAskPlan(CreateAskPlanRequest) returns (ID) {}
    // RemoveAskPlan allows to remove rules
    // for creating Ask orders on Marketplace
    rpc RemoveAskPlan(ID) returns (Empty) {}
}

// todo: implement this as part of Node API
service MasterManagement {
    // WorkersList returns worker's list for current master address.
    // List includes already registred workers and pending unapproved requests.
    rpc WorkersList(Empty) returns (WorkerListReply) {}
    // WorkerConfirm (as master) confirms incoming request for given Worker address.
    rpc WorkerConfirm(ID) returns (Empty) {}
    // WorkerRemove (as master) unbinds given Worker address from Master address.
    rpc WorkerRemove(ID) returns (Empty) {}
}

enum WorkerRelationshipStatus {
    RELATION_UNAPPROVED = 0;
    RELATION_APPROVED = 1;
}

message Worker {
    string ID = 1;
    WorkerRelationshipStatus status = 2;
}

message WorkerListReply {
    repeated Worker workers = 1;
}
