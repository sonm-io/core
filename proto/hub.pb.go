// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hub.proto

package sonm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// grpccmd imports
import (
	"io"

	"github.com/spf13/cobra"
	"github.com/sshaman1101/grpccmd"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type StartTaskRequest struct {
	// Deal points to the deal associated with workers where the task should be
	// started.
	Deal *Deal `protobuf:"bytes,1,opt,name=deal" json:"deal,omitempty"`
	// Container describes container settings.
	Container *Container `protobuf:"bytes,2,opt,name=container" json:"container,omitempty"`
}

func (m *StartTaskRequest) Reset()                    { *m = StartTaskRequest{} }
func (m *StartTaskRequest) String() string            { return proto.CompactTextString(m) }
func (*StartTaskRequest) ProtoMessage()               {}
func (*StartTaskRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

func (m *StartTaskRequest) GetDeal() *Deal {
	if m != nil {
		return m.Deal
	}
	return nil
}

func (m *StartTaskRequest) GetContainer() *Container {
	if m != nil {
		return m.Container
	}
	return nil
}

type HubJoinNetworkRequest struct {
	TaskID    string `protobuf:"bytes,1,opt,name=taskID" json:"taskID,omitempty"`
	NetworkID string `protobuf:"bytes,2,opt,name=networkID" json:"networkID,omitempty"`
}

func (m *HubJoinNetworkRequest) Reset()                    { *m = HubJoinNetworkRequest{} }
func (m *HubJoinNetworkRequest) String() string            { return proto.CompactTextString(m) }
func (*HubJoinNetworkRequest) ProtoMessage()               {}
func (*HubJoinNetworkRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{1} }

func (m *HubJoinNetworkRequest) GetTaskID() string {
	if m != nil {
		return m.TaskID
	}
	return ""
}

func (m *HubJoinNetworkRequest) GetNetworkID() string {
	if m != nil {
		return m.NetworkID
	}
	return ""
}

type StartTaskReply struct {
	Id         string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Endpoint   []string `protobuf:"bytes,2,rep,name=endpoint" json:"endpoint,omitempty"`
	HubAddr    string   `protobuf:"bytes,3,opt,name=hubAddr" json:"hubAddr,omitempty"`
	NetworkIDs []string `protobuf:"bytes,4,rep,name=networkIDs" json:"networkIDs,omitempty"`
}

func (m *StartTaskReply) Reset()                    { *m = StartTaskReply{} }
func (m *StartTaskReply) String() string            { return proto.CompactTextString(m) }
func (*StartTaskReply) ProtoMessage()               {}
func (*StartTaskReply) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{2} }

func (m *StartTaskReply) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *StartTaskReply) GetEndpoint() []string {
	if m != nil {
		return m.Endpoint
	}
	return nil
}

func (m *StartTaskReply) GetHubAddr() string {
	if m != nil {
		return m.HubAddr
	}
	return ""
}

func (m *StartTaskReply) GetNetworkIDs() []string {
	if m != nil {
		return m.NetworkIDs
	}
	return nil
}

type HubStatusReply struct {
	Uptime           uint64 `protobuf:"varint,1,opt,name=uptime" json:"uptime,omitempty"`
	Version          string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	Platform         string `protobuf:"bytes,3,opt,name=platform" json:"platform,omitempty"`
	EthAddr          string `protobuf:"bytes,4,opt,name=ethAddr" json:"ethAddr,omitempty"`
	TaskCount        uint32 `protobuf:"varint,5,opt,name=taskCount" json:"taskCount,omitempty"`
	DWHStatus        string `protobuf:"bytes,6,opt,name=DWHStatus" json:"DWHStatus,omitempty"`
	RendezvousStatus string `protobuf:"bytes,7,opt,name=rendezvousStatus" json:"rendezvousStatus,omitempty"`
}

func (m *HubStatusReply) Reset()                    { *m = HubStatusReply{} }
func (m *HubStatusReply) String() string            { return proto.CompactTextString(m) }
func (*HubStatusReply) ProtoMessage()               {}
func (*HubStatusReply) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{3} }

func (m *HubStatusReply) GetUptime() uint64 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *HubStatusReply) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *HubStatusReply) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *HubStatusReply) GetEthAddr() string {
	if m != nil {
		return m.EthAddr
	}
	return ""
}

func (m *HubStatusReply) GetTaskCount() uint32 {
	if m != nil {
		return m.TaskCount
	}
	return 0
}

func (m *HubStatusReply) GetDWHStatus() string {
	if m != nil {
		return m.DWHStatus
	}
	return ""
}

func (m *HubStatusReply) GetRendezvousStatus() string {
	if m != nil {
		return m.RendezvousStatus
	}
	return ""
}

type DealRequest struct {
	BidId    string `protobuf:"bytes,1,opt,name=bidId" json:"bidId,omitempty"`
	AskId    string `protobuf:"bytes,2,opt,name=askId" json:"askId,omitempty"`
	SpecHash string `protobuf:"bytes,4,opt,name=specHash" json:"specHash,omitempty"`
}

func (m *DealRequest) Reset()                    { *m = DealRequest{} }
func (m *DealRequest) String() string            { return proto.CompactTextString(m) }
func (*DealRequest) ProtoMessage()               {}
func (*DealRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{4} }

func (m *DealRequest) GetBidId() string {
	if m != nil {
		return m.BidId
	}
	return ""
}

func (m *DealRequest) GetAskId() string {
	if m != nil {
		return m.AskId
	}
	return ""
}

func (m *DealRequest) GetSpecHash() string {
	if m != nil {
		return m.SpecHash
	}
	return ""
}

type ApproveDealRequest struct {
	DealID *BigInt `protobuf:"bytes,1,opt,name=dealID" json:"dealID,omitempty"`
	BidID  string  `protobuf:"bytes,2,opt,name=bidID" json:"bidID,omitempty"`
	AskID  string  `protobuf:"bytes,3,opt,name=askID" json:"askID,omitempty"`
}

func (m *ApproveDealRequest) Reset()                    { *m = ApproveDealRequest{} }
func (m *ApproveDealRequest) String() string            { return proto.CompactTextString(m) }
func (*ApproveDealRequest) ProtoMessage()               {}
func (*ApproveDealRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{5} }

func (m *ApproveDealRequest) GetDealID() *BigInt {
	if m != nil {
		return m.DealID
	}
	return nil
}

func (m *ApproveDealRequest) GetBidID() string {
	if m != nil {
		return m.BidID
	}
	return ""
}

func (m *ApproveDealRequest) GetAskID() string {
	if m != nil {
		return m.AskID
	}
	return ""
}

type AskPlansReply struct {
	Slots map[string]*Slot `protobuf:"bytes,1,rep,name=slots" json:"slots,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *AskPlansReply) Reset()                    { *m = AskPlansReply{} }
func (m *AskPlansReply) String() string            { return proto.CompactTextString(m) }
func (*AskPlansReply) ProtoMessage()               {}
func (*AskPlansReply) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{6} }

func (m *AskPlansReply) GetSlots() map[string]*Slot {
	if m != nil {
		return m.Slots
	}
	return nil
}

type TaskListReply struct {
	Info map[string]*TaskStatusReply `protobuf:"bytes,1,rep,name=info" json:"info,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *TaskListReply) Reset()                    { *m = TaskListReply{} }
func (m *TaskListReply) String() string            { return proto.CompactTextString(m) }
func (*TaskListReply) ProtoMessage()               {}
func (*TaskListReply) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{7} }

func (m *TaskListReply) GetInfo() map[string]*TaskStatusReply {
	if m != nil {
		return m.Info
	}
	return nil
}

type DevicesReply struct {
	CPU     *CPU     `protobuf:"bytes,1,opt,name=CPU" json:"CPU,omitempty"`
	GPUs    []*GPU   `protobuf:"bytes,2,rep,name=GPUs" json:"GPUs,omitempty"`
	RAM     *RAM     `protobuf:"bytes,3,opt,name=RAM" json:"RAM,omitempty"`
	Network *Network `protobuf:"bytes,4,opt,name=network" json:"network,omitempty"`
	Storage *Storage `protobuf:"bytes,5,opt,name=storage" json:"storage,omitempty"`
}

func (m *DevicesReply) Reset()                    { *m = DevicesReply{} }
func (m *DevicesReply) String() string            { return proto.CompactTextString(m) }
func (*DevicesReply) ProtoMessage()               {}
func (*DevicesReply) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{8} }

func (m *DevicesReply) GetCPU() *CPU {
	if m != nil {
		return m.CPU
	}
	return nil
}

func (m *DevicesReply) GetGPUs() []*GPU {
	if m != nil {
		return m.GPUs
	}
	return nil
}

func (m *DevicesReply) GetRAM() *RAM {
	if m != nil {
		return m.RAM
	}
	return nil
}

func (m *DevicesReply) GetNetwork() *Network {
	if m != nil {
		return m.Network
	}
	return nil
}

func (m *DevicesReply) GetStorage() *Storage {
	if m != nil {
		return m.Storage
	}
	return nil
}

// Deprecated: TODO: will be removed when we'll migrate to new Ask plan API
type CreateAskPlanRequest struct {
	Slot           *Slot   `protobuf:"bytes,1,opt,name=slot" json:"slot,omitempty"`
	PricePerSecond *BigInt `protobuf:"bytes,4,opt,name=pricePerSecond" json:"pricePerSecond,omitempty"`
	BuyerID        string  `protobuf:"bytes,3,opt,name=buyerID" json:"buyerID,omitempty"`
}

func (m *CreateAskPlanRequest) Reset()                    { *m = CreateAskPlanRequest{} }
func (m *CreateAskPlanRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateAskPlanRequest) ProtoMessage()               {}
func (*CreateAskPlanRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{9} }

func (m *CreateAskPlanRequest) GetSlot() *Slot {
	if m != nil {
		return m.Slot
	}
	return nil
}

func (m *CreateAskPlanRequest) GetPricePerSecond() *BigInt {
	if m != nil {
		return m.PricePerSecond
	}
	return nil
}

func (m *CreateAskPlanRequest) GetBuyerID() string {
	if m != nil {
		return m.BuyerID
	}
	return ""
}

type PullTaskRequest struct {
	DealId string `protobuf:"bytes,1,opt,name=dealId" json:"dealId,omitempty"`
	TaskId string `protobuf:"bytes,2,opt,name=taskId" json:"taskId,omitempty"`
}

func (m *PullTaskRequest) Reset()                    { *m = PullTaskRequest{} }
func (m *PullTaskRequest) String() string            { return proto.CompactTextString(m) }
func (*PullTaskRequest) ProtoMessage()               {}
func (*PullTaskRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{10} }

func (m *PullTaskRequest) GetDealId() string {
	if m != nil {
		return m.DealId
	}
	return ""
}

func (m *PullTaskRequest) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

type DealInfoReply struct {
	// ID is deal ID.
	Id *ID `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Order is BID order associated with a deal.
	Order *Order `protobuf:"bytes,2,opt,name=order" json:"order,omitempty"`
	// List of currently running tasks.
	Running *StatusMapReply `protobuf:"bytes,3,opt,name=running" json:"running,omitempty"`
	// List of completed tasks.
	Completed *StatusMapReply `protobuf:"bytes,4,opt,name=completed" json:"completed,omitempty"`
}

func (m *DealInfoReply) Reset()                    { *m = DealInfoReply{} }
func (m *DealInfoReply) String() string            { return proto.CompactTextString(m) }
func (*DealInfoReply) ProtoMessage()               {}
func (*DealInfoReply) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{11} }

func (m *DealInfoReply) GetId() *ID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *DealInfoReply) GetOrder() *Order {
	if m != nil {
		return m.Order
	}
	return nil
}

func (m *DealInfoReply) GetRunning() *StatusMapReply {
	if m != nil {
		return m.Running
	}
	return nil
}

func (m *DealInfoReply) GetCompleted() *StatusMapReply {
	if m != nil {
		return m.Completed
	}
	return nil
}

func init() {
	proto.RegisterType((*StartTaskRequest)(nil), "sonm.StartTaskRequest")
	proto.RegisterType((*HubJoinNetworkRequest)(nil), "sonm.HubJoinNetworkRequest")
	proto.RegisterType((*StartTaskReply)(nil), "sonm.StartTaskReply")
	proto.RegisterType((*HubStatusReply)(nil), "sonm.HubStatusReply")
	proto.RegisterType((*DealRequest)(nil), "sonm.DealRequest")
	proto.RegisterType((*ApproveDealRequest)(nil), "sonm.ApproveDealRequest")
	proto.RegisterType((*AskPlansReply)(nil), "sonm.AskPlansReply")
	proto.RegisterType((*TaskListReply)(nil), "sonm.TaskListReply")
	proto.RegisterType((*DevicesReply)(nil), "sonm.DevicesReply")
	proto.RegisterType((*CreateAskPlanRequest)(nil), "sonm.CreateAskPlanRequest")
	proto.RegisterType((*PullTaskRequest)(nil), "sonm.PullTaskRequest")
	proto.RegisterType((*DealInfoReply)(nil), "sonm.DealInfoReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Hub service

type HubClient interface {
	// Status returns internal hub statistic
	Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HubStatusReply, error)
	// Devices returns list of all available devices that this Hub awares of
	// with tieir full description.
	Devices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DevicesReply, error)
	// Tasks returns info about all Tasks
	Tasks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TaskListReply, error)
	// GetSlots allows to obtain previously assigned slots for the Hub.
	AskPlans(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AskPlansReply, error)
	// AddSlot allows to assign a new slot.
	// This method can fail if either there are no such resources found or it
	// has been previourly assigned.
	CreateAskPlan(ctx context.Context, in *CreateAskPlanRequest, opts ...grpc.CallOption) (*ID, error)
	// RemoveSlot removes the speified slot if fully matches.
	RemoveAskPlan(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error)
	PushTask(ctx context.Context, opts ...grpc.CallOption) (Hub_PushTaskClient, error)
	PullTask(ctx context.Context, in *PullTaskRequest, opts ...grpc.CallOption) (Hub_PullTaskClient, error)
	// StartTask schedules the task associcated with a deal on some miner.
	StartTask(ctx context.Context, in *StartTaskRequest, opts ...grpc.CallOption) (*StartTaskReply, error)
	StopTask(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error)
	TaskStatus(ctx context.Context, in *ID, opts ...grpc.CallOption) (*TaskStatusReply, error)
	JoinNetwork(ctx context.Context, in *HubJoinNetworkRequest, opts ...grpc.CallOption) (*NetworkSpec, error)
	TaskLogs(ctx context.Context, in *TaskLogsRequest, opts ...grpc.CallOption) (Hub_TaskLogsClient, error)
	ProposeDeal(ctx context.Context, in *DealRequest, opts ...grpc.CallOption) (*Empty, error)
	ApproveDeal(ctx context.Context, in *ApproveDealRequest, opts ...grpc.CallOption) (*Empty, error)
	// Note: currently used for testing pusposes.
	GetDealInfo(ctx context.Context, in *ID, opts ...grpc.CallOption) (*DealInfoReply, error)
}

type hubClient struct {
	cc *grpc.ClientConn
}

func NewHubClient(cc *grpc.ClientConn) HubClient {
	return &hubClient{cc}
}

func (c *hubClient) Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HubStatusReply, error) {
	out := new(HubStatusReply)
	err := grpc.Invoke(ctx, "/sonm.Hub/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) Devices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DevicesReply, error) {
	out := new(DevicesReply)
	err := grpc.Invoke(ctx, "/sonm.Hub/Devices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) Tasks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TaskListReply, error) {
	out := new(TaskListReply)
	err := grpc.Invoke(ctx, "/sonm.Hub/Tasks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) AskPlans(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AskPlansReply, error) {
	out := new(AskPlansReply)
	err := grpc.Invoke(ctx, "/sonm.Hub/AskPlans", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) CreateAskPlan(ctx context.Context, in *CreateAskPlanRequest, opts ...grpc.CallOption) (*ID, error) {
	out := new(ID)
	err := grpc.Invoke(ctx, "/sonm.Hub/CreateAskPlan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) RemoveAskPlan(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.Hub/RemoveAskPlan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) PushTask(ctx context.Context, opts ...grpc.CallOption) (Hub_PushTaskClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Hub_serviceDesc.Streams[0], c.cc, "/sonm.Hub/PushTask", opts...)
	if err != nil {
		return nil, err
	}
	x := &hubPushTaskClient{stream}
	return x, nil
}

type Hub_PushTaskClient interface {
	Send(*Chunk) error
	Recv() (*Progress, error)
	grpc.ClientStream
}

type hubPushTaskClient struct {
	grpc.ClientStream
}

func (x *hubPushTaskClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *hubPushTaskClient) Recv() (*Progress, error) {
	m := new(Progress)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hubClient) PullTask(ctx context.Context, in *PullTaskRequest, opts ...grpc.CallOption) (Hub_PullTaskClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Hub_serviceDesc.Streams[1], c.cc, "/sonm.Hub/PullTask", opts...)
	if err != nil {
		return nil, err
	}
	x := &hubPullTaskClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Hub_PullTaskClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type hubPullTaskClient struct {
	grpc.ClientStream
}

func (x *hubPullTaskClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hubClient) StartTask(ctx context.Context, in *StartTaskRequest, opts ...grpc.CallOption) (*StartTaskReply, error) {
	out := new(StartTaskReply)
	err := grpc.Invoke(ctx, "/sonm.Hub/StartTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) StopTask(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.Hub/StopTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) TaskStatus(ctx context.Context, in *ID, opts ...grpc.CallOption) (*TaskStatusReply, error) {
	out := new(TaskStatusReply)
	err := grpc.Invoke(ctx, "/sonm.Hub/TaskStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) JoinNetwork(ctx context.Context, in *HubJoinNetworkRequest, opts ...grpc.CallOption) (*NetworkSpec, error) {
	out := new(NetworkSpec)
	err := grpc.Invoke(ctx, "/sonm.Hub/JoinNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) TaskLogs(ctx context.Context, in *TaskLogsRequest, opts ...grpc.CallOption) (Hub_TaskLogsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Hub_serviceDesc.Streams[2], c.cc, "/sonm.Hub/TaskLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &hubTaskLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Hub_TaskLogsClient interface {
	Recv() (*TaskLogsChunk, error)
	grpc.ClientStream
}

type hubTaskLogsClient struct {
	grpc.ClientStream
}

func (x *hubTaskLogsClient) Recv() (*TaskLogsChunk, error) {
	m := new(TaskLogsChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hubClient) ProposeDeal(ctx context.Context, in *DealRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.Hub/ProposeDeal", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) ApproveDeal(ctx context.Context, in *ApproveDealRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.Hub/ApproveDeal", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) GetDealInfo(ctx context.Context, in *ID, opts ...grpc.CallOption) (*DealInfoReply, error) {
	out := new(DealInfoReply)
	err := grpc.Invoke(ctx, "/sonm.Hub/GetDealInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Hub service

type HubServer interface {
	// Status returns internal hub statistic
	Status(context.Context, *Empty) (*HubStatusReply, error)
	// Devices returns list of all available devices that this Hub awares of
	// with tieir full description.
	Devices(context.Context, *Empty) (*DevicesReply, error)
	// Tasks returns info about all Tasks
	Tasks(context.Context, *Empty) (*TaskListReply, error)
	// GetSlots allows to obtain previously assigned slots for the Hub.
	AskPlans(context.Context, *Empty) (*AskPlansReply, error)
	// AddSlot allows to assign a new slot.
	// This method can fail if either there are no such resources found or it
	// has been previourly assigned.
	CreateAskPlan(context.Context, *CreateAskPlanRequest) (*ID, error)
	// RemoveSlot removes the speified slot if fully matches.
	RemoveAskPlan(context.Context, *ID) (*Empty, error)
	PushTask(Hub_PushTaskServer) error
	PullTask(*PullTaskRequest, Hub_PullTaskServer) error
	// StartTask schedules the task associcated with a deal on some miner.
	StartTask(context.Context, *StartTaskRequest) (*StartTaskReply, error)
	StopTask(context.Context, *ID) (*Empty, error)
	TaskStatus(context.Context, *ID) (*TaskStatusReply, error)
	JoinNetwork(context.Context, *HubJoinNetworkRequest) (*NetworkSpec, error)
	TaskLogs(*TaskLogsRequest, Hub_TaskLogsServer) error
	ProposeDeal(context.Context, *DealRequest) (*Empty, error)
	ApproveDeal(context.Context, *ApproveDealRequest) (*Empty, error)
	// Note: currently used for testing pusposes.
	GetDealInfo(context.Context, *ID) (*DealInfoReply, error)
}

func RegisterHubServer(s *grpc.Server, srv HubServer) {
	s.RegisterService(&_Hub_serviceDesc, srv)
}

func _Hub_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).Status(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_Devices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).Devices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/Devices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).Devices(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_Tasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).Tasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/Tasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).Tasks(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_AskPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).AskPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/AskPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).AskPlans(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_CreateAskPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAskPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).CreateAskPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/CreateAskPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).CreateAskPlan(ctx, req.(*CreateAskPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_RemoveAskPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).RemoveAskPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/RemoveAskPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).RemoveAskPlan(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_PushTask_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HubServer).PushTask(&hubPushTaskServer{stream})
}

type Hub_PushTaskServer interface {
	Send(*Progress) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type hubPushTaskServer struct {
	grpc.ServerStream
}

func (x *hubPushTaskServer) Send(m *Progress) error {
	return x.ServerStream.SendMsg(m)
}

func (x *hubPushTaskServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Hub_PullTask_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullTaskRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HubServer).PullTask(m, &hubPullTaskServer{stream})
}

type Hub_PullTaskServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type hubPullTaskServer struct {
	grpc.ServerStream
}

func (x *hubPullTaskServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func _Hub_StartTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).StartTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/StartTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).StartTask(ctx, req.(*StartTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_StopTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).StopTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/StopTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).StopTask(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_TaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).TaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/TaskStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).TaskStatus(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_JoinNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HubJoinNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).JoinNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/JoinNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).JoinNetwork(ctx, req.(*HubJoinNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_TaskLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TaskLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HubServer).TaskLogs(m, &hubTaskLogsServer{stream})
}

type Hub_TaskLogsServer interface {
	Send(*TaskLogsChunk) error
	grpc.ServerStream
}

type hubTaskLogsServer struct {
	grpc.ServerStream
}

func (x *hubTaskLogsServer) Send(m *TaskLogsChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _Hub_ProposeDeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).ProposeDeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/ProposeDeal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).ProposeDeal(ctx, req.(*DealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_ApproveDeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveDealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).ApproveDeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/ApproveDeal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).ApproveDeal(ctx, req.(*ApproveDealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_GetDealInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).GetDealInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/GetDealInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).GetDealInfo(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hub_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sonm.Hub",
	HandlerType: (*HubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _Hub_Status_Handler,
		},
		{
			MethodName: "Devices",
			Handler:    _Hub_Devices_Handler,
		},
		{
			MethodName: "Tasks",
			Handler:    _Hub_Tasks_Handler,
		},
		{
			MethodName: "AskPlans",
			Handler:    _Hub_AskPlans_Handler,
		},
		{
			MethodName: "CreateAskPlan",
			Handler:    _Hub_CreateAskPlan_Handler,
		},
		{
			MethodName: "RemoveAskPlan",
			Handler:    _Hub_RemoveAskPlan_Handler,
		},
		{
			MethodName: "StartTask",
			Handler:    _Hub_StartTask_Handler,
		},
		{
			MethodName: "StopTask",
			Handler:    _Hub_StopTask_Handler,
		},
		{
			MethodName: "TaskStatus",
			Handler:    _Hub_TaskStatus_Handler,
		},
		{
			MethodName: "JoinNetwork",
			Handler:    _Hub_JoinNetwork_Handler,
		},
		{
			MethodName: "ProposeDeal",
			Handler:    _Hub_ProposeDeal_Handler,
		},
		{
			MethodName: "ApproveDeal",
			Handler:    _Hub_ApproveDeal_Handler,
		},
		{
			MethodName: "GetDealInfo",
			Handler:    _Hub_GetDealInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PushTask",
			Handler:       _Hub_PushTask_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PullTask",
			Handler:       _Hub_PullTask_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TaskLogs",
			Handler:       _Hub_TaskLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "hub.proto",
}

// Begin grpccmd
var _ = grpccmd.RunE

// Hub
var _HubCmd = &cobra.Command{
	Use:   "hub [method]",
	Short: "Subcommand for the Hub service.",
}

var _Hub_StatusCmd = &cobra.Command{
	Use:   "status",
	Short: "Make the Status method call, input-type: sonm.Empty output-type: sonm.HubStatusReply",
	RunE: grpccmd.RunE(
		"Status",
		"sonm.Empty",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewHubClient(cc)
		},
	),
}

var _Hub_StatusCmd_gen = &cobra.Command{
	Use:   "status-gen",
	Short: "Generate JSON for method call of Status (input-type: sonm.Empty)",
	RunE:  grpccmd.TypeToJson("sonm.Empty"),
}

var _Hub_DevicesCmd = &cobra.Command{
	Use:   "devices",
	Short: "Make the Devices method call, input-type: sonm.Empty output-type: sonm.DevicesReply",
	RunE: grpccmd.RunE(
		"Devices",
		"sonm.Empty",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewHubClient(cc)
		},
	),
}

var _Hub_DevicesCmd_gen = &cobra.Command{
	Use:   "devices-gen",
	Short: "Generate JSON for method call of Devices (input-type: sonm.Empty)",
	RunE:  grpccmd.TypeToJson("sonm.Empty"),
}

var _Hub_TasksCmd = &cobra.Command{
	Use:   "tasks",
	Short: "Make the Tasks method call, input-type: sonm.Empty output-type: sonm.TaskListReply",
	RunE: grpccmd.RunE(
		"Tasks",
		"sonm.Empty",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewHubClient(cc)
		},
	),
}

var _Hub_TasksCmd_gen = &cobra.Command{
	Use:   "tasks-gen",
	Short: "Generate JSON for method call of Tasks (input-type: sonm.Empty)",
	RunE:  grpccmd.TypeToJson("sonm.Empty"),
}

var _Hub_AskPlansCmd = &cobra.Command{
	Use:   "askPlans",
	Short: "Make the AskPlans method call, input-type: sonm.Empty output-type: sonm.AskPlansReply",
	RunE: grpccmd.RunE(
		"AskPlans",
		"sonm.Empty",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewHubClient(cc)
		},
	),
}

var _Hub_AskPlansCmd_gen = &cobra.Command{
	Use:   "askPlans-gen",
	Short: "Generate JSON for method call of AskPlans (input-type: sonm.Empty)",
	RunE:  grpccmd.TypeToJson("sonm.Empty"),
}

var _Hub_CreateAskPlanCmd = &cobra.Command{
	Use:   "createAskPlan",
	Short: "Make the CreateAskPlan method call, input-type: sonm.CreateAskPlanRequest output-type: sonm.ID",
	RunE: grpccmd.RunE(
		"CreateAskPlan",
		"sonm.CreateAskPlanRequest",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewHubClient(cc)
		},
	),
}

var _Hub_CreateAskPlanCmd_gen = &cobra.Command{
	Use:   "createAskPlan-gen",
	Short: "Generate JSON for method call of CreateAskPlan (input-type: sonm.CreateAskPlanRequest)",
	RunE:  grpccmd.TypeToJson("sonm.CreateAskPlanRequest"),
}

var _Hub_RemoveAskPlanCmd = &cobra.Command{
	Use:   "removeAskPlan",
	Short: "Make the RemoveAskPlan method call, input-type: sonm.ID output-type: sonm.Empty",
	RunE: grpccmd.RunE(
		"RemoveAskPlan",
		"sonm.ID",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewHubClient(cc)
		},
	),
}

var _Hub_RemoveAskPlanCmd_gen = &cobra.Command{
	Use:   "removeAskPlan-gen",
	Short: "Generate JSON for method call of RemoveAskPlan (input-type: sonm.ID)",
	RunE:  grpccmd.TypeToJson("sonm.ID"),
}

var _Hub_PushTaskCmd = &cobra.Command{
	Use:   "pushTask",
	Short: "Make the PushTask method call, input-type: sonm.Chunk output-type: sonm.Progress",
	RunE: grpccmd.RunE(
		"PushTask",
		"sonm.Chunk",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewHubClient(cc)
		},
	),
}

var _Hub_PushTaskCmd_gen = &cobra.Command{
	Use:   "pushTask-gen",
	Short: "Generate JSON for method call of PushTask (input-type: sonm.Chunk)",
	RunE:  grpccmd.TypeToJson("sonm.Chunk"),
}

var _Hub_PullTaskCmd = &cobra.Command{
	Use:   "pullTask",
	Short: "Make the PullTask method call, input-type: sonm.PullTaskRequest output-type: sonm.Chunk",
	RunE: grpccmd.RunE(
		"PullTask",
		"sonm.PullTaskRequest",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewHubClient(cc)
		},
	),
}

var _Hub_PullTaskCmd_gen = &cobra.Command{
	Use:   "pullTask-gen",
	Short: "Generate JSON for method call of PullTask (input-type: sonm.PullTaskRequest)",
	RunE:  grpccmd.TypeToJson("sonm.PullTaskRequest"),
}

var _Hub_StartTaskCmd = &cobra.Command{
	Use:   "startTask",
	Short: "Make the StartTask method call, input-type: sonm.StartTaskRequest output-type: sonm.StartTaskReply",
	RunE: grpccmd.RunE(
		"StartTask",
		"sonm.StartTaskRequest",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewHubClient(cc)
		},
	),
}

var _Hub_StartTaskCmd_gen = &cobra.Command{
	Use:   "startTask-gen",
	Short: "Generate JSON for method call of StartTask (input-type: sonm.StartTaskRequest)",
	RunE:  grpccmd.TypeToJson("sonm.StartTaskRequest"),
}

var _Hub_StopTaskCmd = &cobra.Command{
	Use:   "stopTask",
	Short: "Make the StopTask method call, input-type: sonm.ID output-type: sonm.Empty",
	RunE: grpccmd.RunE(
		"StopTask",
		"sonm.ID",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewHubClient(cc)
		},
	),
}

var _Hub_StopTaskCmd_gen = &cobra.Command{
	Use:   "stopTask-gen",
	Short: "Generate JSON for method call of StopTask (input-type: sonm.ID)",
	RunE:  grpccmd.TypeToJson("sonm.ID"),
}

var _Hub_TaskStatusCmd = &cobra.Command{
	Use:   "taskStatus",
	Short: "Make the TaskStatus method call, input-type: sonm.ID output-type: sonm.TaskStatusReply",
	RunE: grpccmd.RunE(
		"TaskStatus",
		"sonm.ID",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewHubClient(cc)
		},
	),
}

var _Hub_TaskStatusCmd_gen = &cobra.Command{
	Use:   "taskStatus-gen",
	Short: "Generate JSON for method call of TaskStatus (input-type: sonm.ID)",
	RunE:  grpccmd.TypeToJson("sonm.ID"),
}

var _Hub_JoinNetworkCmd = &cobra.Command{
	Use:   "joinNetwork",
	Short: "Make the JoinNetwork method call, input-type: sonm.HubJoinNetworkRequest output-type: sonm.NetworkSpec",
	RunE: grpccmd.RunE(
		"JoinNetwork",
		"sonm.HubJoinNetworkRequest",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewHubClient(cc)
		},
	),
}

var _Hub_JoinNetworkCmd_gen = &cobra.Command{
	Use:   "joinNetwork-gen",
	Short: "Generate JSON for method call of JoinNetwork (input-type: sonm.HubJoinNetworkRequest)",
	RunE:  grpccmd.TypeToJson("sonm.HubJoinNetworkRequest"),
}

var _Hub_TaskLogsCmd = &cobra.Command{
	Use:   "taskLogs",
	Short: "Make the TaskLogs method call, input-type: sonm.TaskLogsRequest output-type: sonm.TaskLogsChunk",
	RunE: grpccmd.RunE(
		"TaskLogs",
		"sonm.TaskLogsRequest",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewHubClient(cc)
		},
	),
}

var _Hub_TaskLogsCmd_gen = &cobra.Command{
	Use:   "taskLogs-gen",
	Short: "Generate JSON for method call of TaskLogs (input-type: sonm.TaskLogsRequest)",
	RunE:  grpccmd.TypeToJson("sonm.TaskLogsRequest"),
}

var _Hub_ProposeDealCmd = &cobra.Command{
	Use:   "proposeDeal",
	Short: "Make the ProposeDeal method call, input-type: sonm.DealRequest output-type: sonm.Empty",
	RunE: grpccmd.RunE(
		"ProposeDeal",
		"sonm.DealRequest",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewHubClient(cc)
		},
	),
}

var _Hub_ProposeDealCmd_gen = &cobra.Command{
	Use:   "proposeDeal-gen",
	Short: "Generate JSON for method call of ProposeDeal (input-type: sonm.DealRequest)",
	RunE:  grpccmd.TypeToJson("sonm.DealRequest"),
}

var _Hub_ApproveDealCmd = &cobra.Command{
	Use:   "approveDeal",
	Short: "Make the ApproveDeal method call, input-type: sonm.ApproveDealRequest output-type: sonm.Empty",
	RunE: grpccmd.RunE(
		"ApproveDeal",
		"sonm.ApproveDealRequest",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewHubClient(cc)
		},
	),
}

var _Hub_ApproveDealCmd_gen = &cobra.Command{
	Use:   "approveDeal-gen",
	Short: "Generate JSON for method call of ApproveDeal (input-type: sonm.ApproveDealRequest)",
	RunE:  grpccmd.TypeToJson("sonm.ApproveDealRequest"),
}

var _Hub_GetDealInfoCmd = &cobra.Command{
	Use:   "getDealInfo",
	Short: "Make the GetDealInfo method call, input-type: sonm.ID output-type: sonm.DealInfoReply",
	RunE: grpccmd.RunE(
		"GetDealInfo",
		"sonm.ID",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewHubClient(cc)
		},
	),
}

var _Hub_GetDealInfoCmd_gen = &cobra.Command{
	Use:   "getDealInfo-gen",
	Short: "Generate JSON for method call of GetDealInfo (input-type: sonm.ID)",
	RunE:  grpccmd.TypeToJson("sonm.ID"),
}

// Register commands with the root command and service command
func init() {
	grpccmd.RegisterServiceCmd(_HubCmd)
	_HubCmd.AddCommand(
		_Hub_StatusCmd,
		_Hub_StatusCmd_gen,
		_Hub_DevicesCmd,
		_Hub_DevicesCmd_gen,
		_Hub_TasksCmd,
		_Hub_TasksCmd_gen,
		_Hub_AskPlansCmd,
		_Hub_AskPlansCmd_gen,
		_Hub_CreateAskPlanCmd,
		_Hub_CreateAskPlanCmd_gen,
		_Hub_RemoveAskPlanCmd,
		_Hub_RemoveAskPlanCmd_gen,
		_Hub_PushTaskCmd,
		_Hub_PushTaskCmd_gen,
		_Hub_PullTaskCmd,
		_Hub_PullTaskCmd_gen,
		_Hub_StartTaskCmd,
		_Hub_StartTaskCmd_gen,
		_Hub_StopTaskCmd,
		_Hub_StopTaskCmd_gen,
		_Hub_TaskStatusCmd,
		_Hub_TaskStatusCmd_gen,
		_Hub_JoinNetworkCmd,
		_Hub_JoinNetworkCmd_gen,
		_Hub_TaskLogsCmd,
		_Hub_TaskLogsCmd_gen,
		_Hub_ProposeDealCmd,
		_Hub_ProposeDealCmd_gen,
		_Hub_ApproveDealCmd,
		_Hub_ApproveDealCmd_gen,
		_Hub_GetDealInfoCmd,
		_Hub_GetDealInfoCmd_gen,
	)
}

// End grpccmd

func init() { proto.RegisterFile("hub.proto", fileDescriptor7) }

var fileDescriptor7 = []byte{
	// 1087 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x56, 0xcf, 0x6e, 0x23, 0xc5,
	0x13, 0xf6, 0xc4, 0x8e, 0x63, 0x97, 0xe3, 0x24, 0xdb, 0xc9, 0x46, 0xd6, 0xec, 0x6f, 0xa3, 0xfc,
	0x1a, 0x24, 0x2c, 0x20, 0xde, 0xc5, 0xac, 0x00, 0x2d, 0x07, 0x64, 0xe2, 0x55, 0x62, 0x44, 0x16,
	0x6b, 0x4c, 0xc4, 0x79, 0xec, 0xe9, 0xd8, 0xad, 0xd8, 0xdd, 0xc3, 0x74, 0x8f, 0x51, 0x78, 0x00,
	0x2e, 0xdc, 0x78, 0x10, 0xc4, 0x95, 0xb7, 0xe1, 0x51, 0x50, 0xff, 0xf5, 0x4c, 0x62, 0x6e, 0xae,
	0xaf, 0xbf, 0xea, 0xaa, 0xa9, 0xfa, 0xaa, 0xda, 0xd0, 0x5c, 0xe4, 0xd3, 0x5e, 0x9a, 0x71, 0xc9,
	0x51, 0x4d, 0x70, 0xb6, 0x0a, 0x9b, 0x53, 0x9a, 0x18, 0x20, 0xdc, 0x9f, 0xd2, 0x39, 0x65, 0xd2,
	0x5a, 0x68, 0x16, 0xa7, 0xf1, 0x94, 0x2e, 0xa9, 0xa4, 0x44, 0x58, 0xec, 0x70, 0xc6, 0x99, 0x8c,
	0x29, 0x23, 0x99, 0x05, 0x20, 0x21, 0xf1, 0xd2, 0x1d, 0x52, 0xa6, 0x6e, 0x64, 0x34, 0x36, 0x00,
	0x8e, 0xe1, 0x68, 0x22, 0xe3, 0x4c, 0xfe, 0x18, 0x8b, 0xfb, 0x88, 0xfc, 0x9c, 0x13, 0x21, 0xd1,
	0x19, 0xd4, 0x94, 0x4b, 0x27, 0x38, 0x0f, 0xba, 0xad, 0x3e, 0xf4, 0x94, 0x47, 0x6f, 0x48, 0xe2,
	0x65, 0xa4, 0x71, 0x74, 0x01, 0x4d, 0x1f, 0xa3, 0xb3, 0xa3, 0x49, 0x87, 0x86, 0x74, 0xe9, 0xe0,
	0x68, 0xc3, 0xc0, 0x37, 0xf0, 0xfc, 0x3a, 0x9f, 0x7e, 0xc7, 0x29, 0x7b, 0x4f, 0xe4, 0x2f, 0x3c,
	0xf3, 0x71, 0x4e, 0xa1, 0x2e, 0x63, 0x71, 0x3f, 0x1a, 0xea, 0x48, 0xcd, 0xc8, 0x5a, 0xe8, 0x7f,
	0xd0, 0x64, 0x86, 0x39, 0x1a, 0xea, 0xfb, 0x9b, 0xd1, 0x06, 0xc0, 0x6b, 0x38, 0x28, 0x64, 0x9c,
	0x2e, 0x1f, 0xd0, 0x01, 0xec, 0xd0, 0xc4, 0xde, 0xb1, 0x43, 0x13, 0x14, 0x42, 0x83, 0xb0, 0x24,
	0xe5, 0x94, 0xc9, 0xce, 0xce, 0x79, 0xb5, 0xdb, 0x8c, 0xbc, 0x8d, 0x3a, 0xb0, 0xb7, 0xc8, 0xa7,
	0x83, 0x24, 0xc9, 0x3a, 0x55, 0xed, 0xe0, 0x4c, 0x74, 0x06, 0xe0, 0x83, 0x88, 0x4e, 0x4d, 0xfb,
	0x15, 0x10, 0xfc, 0x4f, 0x00, 0x07, 0xd7, 0xf9, 0x74, 0x22, 0x63, 0x99, 0x0b, 0x13, 0xf8, 0x14,
	0xea, 0x79, 0x2a, 0xe9, 0x8a, 0xe8, 0xe0, 0xb5, 0xc8, 0x5a, 0x2a, 0xc8, 0x9a, 0x64, 0x82, 0x72,
	0x66, 0xd3, 0x77, 0xa6, 0x4a, 0x2d, 0x5d, 0xc6, 0xf2, 0x8e, 0x67, 0x2b, 0x1b, 0xdf, 0xdb, 0xca,
	0x8b, 0xc8, 0x85, 0x4e, 0xad, 0x66, 0xbc, 0xac, 0xa9, 0x0a, 0xa2, 0x4a, 0x73, 0xc9, 0x73, 0x26,
	0x3b, 0xbb, 0xe7, 0x41, 0xb7, 0x1d, 0x6d, 0x00, 0x75, 0x3a, 0xfc, 0xe9, 0xda, 0xe4, 0xd5, 0xa9,
	0x9b, 0x72, 0x79, 0x00, 0x7d, 0x0c, 0x47, 0x19, 0x61, 0x09, 0xf9, 0x75, 0xcd, 0x73, 0x61, 0x49,
	0x7b, 0x9a, 0xf4, 0x04, 0xc7, 0xb7, 0xd0, 0xd2, 0x6d, 0xb6, 0xfd, 0x39, 0x81, 0xdd, 0x29, 0x4d,
	0x46, 0xae, 0xb4, 0xc6, 0x50, 0xa8, 0x6a, 0x53, 0x62, 0x3f, 0xcd, 0x18, 0xea, 0xc3, 0x44, 0x4a,
	0x66, 0xd7, 0xb1, 0x58, 0xd8, 0xec, 0xbd, 0x8d, 0xef, 0x00, 0x0d, 0xd2, 0x34, 0xe3, 0x6b, 0x52,
	0xbc, 0xfd, 0x43, 0xa8, 0x2b, 0x35, 0xd9, 0xee, 0xb7, 0xfa, 0xfb, 0x46, 0x42, 0xdf, 0xd2, 0xf9,
	0x88, 0xc9, 0xc8, 0x9e, 0xb9, 0x1c, 0x9c, 0x0e, 0x8c, 0xe1, 0x72, 0x18, 0xda, 0x1a, 0x1a, 0x03,
	0xff, 0x1e, 0x40, 0x7b, 0x20, 0xee, 0xc7, 0xcb, 0x98, 0xd9, 0x06, 0xbd, 0x81, 0x5d, 0xb1, 0xe4,
	0x52, 0x74, 0x82, 0xf3, 0x6a, 0xb7, 0xd5, 0x3f, 0x33, 0x21, 0x4a, 0x9c, 0xde, 0x44, 0x11, 0xde,
	0x31, 0x99, 0x3d, 0x44, 0x86, 0x1c, 0x0e, 0x01, 0x36, 0x20, 0x3a, 0x82, 0xea, 0x3d, 0x79, 0xb0,
	0x35, 0x50, 0x3f, 0xd1, 0x39, 0xec, 0xae, 0xe3, 0x65, 0x4e, 0xac, 0xf6, 0xed, 0x80, 0x28, 0x97,
	0xc8, 0x1c, 0xbc, 0xdd, 0xf9, 0x2a, 0xc0, 0x7f, 0x04, 0xd0, 0x56, 0x1a, 0xfd, 0x9e, 0x0a, 0x69,
	0xb2, 0xf9, 0x0c, 0x6a, 0x94, 0xdd, 0x71, 0x9b, 0xcc, 0x4b, 0xe3, 0x56, 0xa2, 0xf4, 0x46, 0xec,
	0x8e, 0x9b, 0x5c, 0x34, 0x35, 0x7c, 0x0f, 0x4d, 0x0f, 0x6d, 0xc9, 0xe4, 0x93, 0x72, 0x26, 0xcf,
	0x37, 0x57, 0x16, 0x64, 0x5a, 0x4c, 0xea, 0xef, 0x00, 0xf6, 0x87, 0x64, 0x4d, 0x67, 0xc4, 0x56,
	0xe8, 0x05, 0x54, 0x2f, 0xc7, 0xb7, 0xb6, 0x05, 0x4d, 0x3b, 0xc5, 0xe3, 0xdb, 0x48, 0xa1, 0xe8,
	0x25, 0xd4, 0xae, 0xc6, 0xb7, 0x42, 0x0f, 0x91, 0x3f, 0xbd, 0x1a, 0xdf, 0x46, 0x1a, 0x56, 0xbe,
	0xd1, 0xe0, 0x46, 0xf7, 0xc0, 0x9f, 0x46, 0x83, 0x9b, 0x48, 0xa1, 0xe8, 0x23, 0xd8, 0xb3, 0xc3,
	0xa3, 0xf5, 0xd0, 0xea, 0xb7, 0x0d, 0xc1, 0xed, 0x00, 0x77, 0xaa, 0x88, 0x42, 0xf2, 0x2c, 0x9e,
	0x13, 0x2d, 0x6d, 0x4f, 0x9c, 0x18, 0x30, 0x72, 0xa7, 0xf8, 0xb7, 0x00, 0x4e, 0x2e, 0x33, 0x12,
	0x4b, 0x62, 0x1b, 0x58, 0xd8, 0x57, 0xaa, 0x71, 0xe5, 0x7d, 0xa5, 0xdb, 0xa1, 0x71, 0xf4, 0x06,
	0x0e, 0xd2, 0x8c, 0xce, 0xc8, 0x98, 0x64, 0x13, 0x32, 0xe3, 0x2c, 0xb1, 0x19, 0x95, 0x15, 0xf7,
	0x88, 0xa3, 0xc6, 0x71, 0x9a, 0x3f, 0x90, 0xcc, 0xab, 0xcc, 0x99, 0x78, 0x00, 0x87, 0xe3, 0x7c,
	0xb9, 0x2c, 0xae, 0xcc, 0x53, 0x2b, 0x66, 0x37, 0x2b, 0xd6, 0xf2, 0x2b, 0xce, 0x4d, 0x8b, 0xb5,
	0xf0, 0x5f, 0x01, 0xb4, 0xd5, 0x30, 0xa8, 0xe6, 0x9a, 0x46, 0x74, 0xfc, 0x12, 0x6b, 0xf5, 0x1b,
	0x26, 0xb1, 0xd1, 0x50, 0xaf, 0xb3, 0xff, 0xc3, 0x2e, 0xcf, 0x12, 0xbf, 0x6a, 0x5b, 0xe6, 0xf0,
	0x07, 0x05, 0x45, 0xe6, 0x04, 0xf5, 0x60, 0x2f, 0xcb, 0x19, 0xa3, 0x6c, 0x6e, 0xbb, 0x71, 0xe2,
	0x6a, 0xa8, 0x54, 0x70, 0x13, 0xa7, 0x46, 0x08, 0x8e, 0x84, 0xfa, 0x6a, 0x83, 0xaf, 0xd2, 0x25,
	0x91, 0xc4, 0x15, 0x63, 0xbb, 0xc7, 0x86, 0xd6, 0xff, 0xb3, 0x0e, 0xd5, 0xeb, 0x7c, 0x8a, 0x2e,
	0xa0, 0x6e, 0x57, 0x8b, 0xcd, 0xe4, 0xdd, 0x2a, 0x95, 0x0f, 0xa1, 0xf5, 0x2f, 0x6f, 0x48, 0x5c,
	0x41, 0x9f, 0xc2, 0x9e, 0x15, 0x5c, 0x99, 0x8f, 0xdc, 0xb3, 0xb2, 0x11, 0x23, 0xae, 0x28, 0x41,
	0xab, 0xb2, 0x3e, 0xe2, 0x1e, 0x6f, 0x19, 0x15, 0x5c, 0x41, 0x3d, 0x68, 0xb8, 0x51, 0xde, 0xca,
	0x2f, 0xcd, 0x39, 0xae, 0xa0, 0x2f, 0xa1, 0x5d, 0xd2, 0x0f, 0x0a, 0xad, 0xde, 0xb7, 0x88, 0x2a,
	0xf4, 0x3d, 0xc0, 0x15, 0xd4, 0x85, 0x76, 0x44, 0x56, 0x7c, 0xed, 0x1d, 0xfd, 0x61, 0x58, 0x8c,
	0x8b, 0x2b, 0xe8, 0x02, 0x1a, 0xe3, 0x5c, 0x2c, 0x54, 0xa6, 0x2e, 0xa5, 0xcb, 0x45, 0xce, 0xee,
	0xc3, 0x03, 0x63, 0x8c, 0x33, 0x3e, 0xcf, 0x88, 0x10, 0xb8, 0xd2, 0x0d, 0x5e, 0x07, 0xa8, 0xaf,
	0xe8, 0x46, 0x49, 0xc8, 0x0e, 0xef, 0x23, 0x65, 0x85, 0xc5, 0x5b, 0x70, 0xe5, 0x75, 0x80, 0xbe,
	0x86, 0xa6, 0x7f, 0xff, 0xd0, 0xa9, 0xef, 0x5a, 0xe9, 0x09, 0x0f, 0x4f, 0x9e, 0xe0, 0xa6, 0x04,
	0x1f, 0x40, 0x63, 0x22, 0x79, 0xaa, 0x7d, 0xff, 0xf3, 0x23, 0x5e, 0x01, 0x6c, 0x56, 0x48, 0x81,
	0xb6, 0x7d, 0xbd, 0xe0, 0x0a, 0xfa, 0x06, 0x5a, 0x85, 0xe7, 0x1d, 0xbd, 0xf0, 0x52, 0x78, 0xfa,
	0xe8, 0x87, 0xcf, 0x4a, 0x6b, 0x60, 0x92, 0x92, 0x19, 0xae, 0xa0, 0xb7, 0xd0, 0xd0, 0xcd, 0xe5,
	0x73, 0x81, 0x0a, 0x51, 0x94, 0xed, 0xfc, 0x8e, 0xcb, 0xf0, 0xa6, 0x1e, 0xaf, 0xa0, 0x35, 0xce,
	0x78, 0xca, 0x85, 0x7e, 0x5d, 0xd0, 0xb3, 0xc2, 0xdf, 0x95, 0x72, 0x09, 0xdd, 0xe7, 0x7d, 0x01,
	0xad, 0xc2, 0x73, 0x84, 0x3a, 0x56, 0x2c, 0x4f, 0x5e, 0xa8, 0xc7, 0x7e, 0x3d, 0x68, 0x5d, 0x11,
	0xe9, 0xa6, 0xb6, 0x50, 0x97, 0xe3, 0x4d, 0x48, 0x3f, 0xcf, 0xb8, 0x32, 0xad, 0xeb, 0x7f, 0x58,
	0x9f, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x5c, 0xc9, 0xf1, 0x16, 0xcf, 0x09, 0x00, 0x00,
}
