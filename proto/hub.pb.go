// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hub.proto

package sonm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// grpccmd imports
import (
	"io"

	"github.com/spf13/cobra"
	"github.com/sshaman1101/grpccmd"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ListReply struct {
	Info map[string]*ListReply_ListValue `protobuf:"bytes,1,rep,name=info" json:"info,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ListReply) Reset()                    { *m = ListReply{} }
func (m *ListReply) String() string            { return proto.CompactTextString(m) }
func (*ListReply) ProtoMessage()               {}
func (*ListReply) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *ListReply) GetInfo() map[string]*ListReply_ListValue {
	if m != nil {
		return m.Info
	}
	return nil
}

type ListReply_ListValue struct {
	Values []string `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
}

func (m *ListReply_ListValue) Reset()                    { *m = ListReply_ListValue{} }
func (m *ListReply_ListValue) String() string            { return proto.CompactTextString(m) }
func (*ListReply_ListValue) ProtoMessage()               {}
func (*ListReply_ListValue) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0, 0} }

func (m *ListReply_ListValue) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

type HubStartTaskRequest struct {
	// Deal points to the deal associated with workers where the task should be
	// started.
	Deal *Deal `protobuf:"bytes,1,opt,name=deal" json:"deal,omitempty"`
	// Container describes container settings.
	Container *Container `protobuf:"bytes,2,opt,name=container" json:"container,omitempty"`
}

func (m *HubStartTaskRequest) Reset()                    { *m = HubStartTaskRequest{} }
func (m *HubStartTaskRequest) String() string            { return proto.CompactTextString(m) }
func (*HubStartTaskRequest) ProtoMessage()               {}
func (*HubStartTaskRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *HubStartTaskRequest) GetDeal() *Deal {
	if m != nil {
		return m.Deal
	}
	return nil
}

func (m *HubStartTaskRequest) GetContainer() *Container {
	if m != nil {
		return m.Container
	}
	return nil
}

type HubJoinNetworkRequest struct {
	TaskID    string `protobuf:"bytes,1,opt,name=taskID" json:"taskID,omitempty"`
	NetworkID string `protobuf:"bytes,2,opt,name=networkID" json:"networkID,omitempty"`
}

func (m *HubJoinNetworkRequest) Reset()                    { *m = HubJoinNetworkRequest{} }
func (m *HubJoinNetworkRequest) String() string            { return proto.CompactTextString(m) }
func (*HubJoinNetworkRequest) ProtoMessage()               {}
func (*HubJoinNetworkRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *HubJoinNetworkRequest) GetTaskID() string {
	if m != nil {
		return m.TaskID
	}
	return ""
}

func (m *HubJoinNetworkRequest) GetNetworkID() string {
	if m != nil {
		return m.NetworkID
	}
	return ""
}

type HubStartTaskReply struct {
	Id         string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Endpoint   []string `protobuf:"bytes,2,rep,name=endpoint" json:"endpoint,omitempty"`
	HubAddr    string   `protobuf:"bytes,3,opt,name=hubAddr" json:"hubAddr,omitempty"`
	NetworkIDs []string `protobuf:"bytes,4,rep,name=networkIDs" json:"networkIDs,omitempty"`
}

func (m *HubStartTaskReply) Reset()                    { *m = HubStartTaskReply{} }
func (m *HubStartTaskReply) String() string            { return proto.CompactTextString(m) }
func (*HubStartTaskReply) ProtoMessage()               {}
func (*HubStartTaskReply) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *HubStartTaskReply) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *HubStartTaskReply) GetEndpoint() []string {
	if m != nil {
		return m.Endpoint
	}
	return nil
}

func (m *HubStartTaskReply) GetHubAddr() string {
	if m != nil {
		return m.HubAddr
	}
	return ""
}

func (m *HubStartTaskReply) GetNetworkIDs() []string {
	if m != nil {
		return m.NetworkIDs
	}
	return nil
}

type HubStatusReply struct {
	MinerCount      uint64   `protobuf:"varint,1,opt,name=minerCount" json:"minerCount,omitempty"`
	Uptime          uint64   `protobuf:"varint,2,opt,name=uptime" json:"uptime,omitempty"`
	Version         string   `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
	Platform        string   `protobuf:"bytes,4,opt,name=platform" json:"platform,omitempty"`
	EthAddr         string   `protobuf:"bytes,5,opt,name=ethAddr" json:"ethAddr,omitempty"`
	ClientEndpoint  []string `protobuf:"bytes,6,rep,name=clientEndpoint" json:"clientEndpoint,omitempty"`
	WorkerEndpoints []string `protobuf:"bytes,7,rep,name=workerEndpoints" json:"workerEndpoints,omitempty"`
	AnnounceError   string   `protobuf:"bytes,8,opt,name=announceError" json:"announceError,omitempty"`
}

func (m *HubStatusReply) Reset()                    { *m = HubStatusReply{} }
func (m *HubStatusReply) String() string            { return proto.CompactTextString(m) }
func (*HubStatusReply) ProtoMessage()               {}
func (*HubStatusReply) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{4} }

func (m *HubStatusReply) GetMinerCount() uint64 {
	if m != nil {
		return m.MinerCount
	}
	return 0
}

func (m *HubStatusReply) GetUptime() uint64 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *HubStatusReply) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *HubStatusReply) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *HubStatusReply) GetEthAddr() string {
	if m != nil {
		return m.EthAddr
	}
	return ""
}

func (m *HubStatusReply) GetClientEndpoint() []string {
	if m != nil {
		return m.ClientEndpoint
	}
	return nil
}

func (m *HubStatusReply) GetWorkerEndpoints() []string {
	if m != nil {
		return m.WorkerEndpoints
	}
	return nil
}

func (m *HubStatusReply) GetAnnounceError() string {
	if m != nil {
		return m.AnnounceError
	}
	return ""
}

type DealRequest struct {
	BidId    string `protobuf:"bytes,1,opt,name=bidId" json:"bidId,omitempty"`
	AskId    string `protobuf:"bytes,2,opt,name=askId" json:"askId,omitempty"`
	SpecHash string `protobuf:"bytes,4,opt,name=specHash" json:"specHash,omitempty"`
}

func (m *DealRequest) Reset()                    { *m = DealRequest{} }
func (m *DealRequest) String() string            { return proto.CompactTextString(m) }
func (*DealRequest) ProtoMessage()               {}
func (*DealRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{5} }

func (m *DealRequest) GetBidId() string {
	if m != nil {
		return m.BidId
	}
	return ""
}

func (m *DealRequest) GetAskId() string {
	if m != nil {
		return m.AskId
	}
	return ""
}

func (m *DealRequest) GetSpecHash() string {
	if m != nil {
		return m.SpecHash
	}
	return ""
}

type ApproveDealRequest struct {
	DealID *BigInt `protobuf:"bytes,1,opt,name=dealID" json:"dealID,omitempty"`
	BidID  string  `protobuf:"bytes,2,opt,name=bidID" json:"bidID,omitempty"`
	AskID  string  `protobuf:"bytes,3,opt,name=askID" json:"askID,omitempty"`
}

func (m *ApproveDealRequest) Reset()                    { *m = ApproveDealRequest{} }
func (m *ApproveDealRequest) String() string            { return proto.CompactTextString(m) }
func (*ApproveDealRequest) ProtoMessage()               {}
func (*ApproveDealRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{6} }

func (m *ApproveDealRequest) GetDealID() *BigInt {
	if m != nil {
		return m.DealID
	}
	return nil
}

func (m *ApproveDealRequest) GetBidID() string {
	if m != nil {
		return m.BidID
	}
	return ""
}

func (m *ApproveDealRequest) GetAskID() string {
	if m != nil {
		return m.AskID
	}
	return ""
}

type GetDevicePropertiesReply struct {
	Properties map[string]float64 `protobuf:"bytes,1,rep,name=properties" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
}

func (m *GetDevicePropertiesReply) Reset()                    { *m = GetDevicePropertiesReply{} }
func (m *GetDevicePropertiesReply) String() string            { return proto.CompactTextString(m) }
func (*GetDevicePropertiesReply) ProtoMessage()               {}
func (*GetDevicePropertiesReply) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{7} }

func (m *GetDevicePropertiesReply) GetProperties() map[string]float64 {
	if m != nil {
		return m.Properties
	}
	return nil
}

type SetDevicePropertiesRequest struct {
	// Device identifier.
	ID string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	// Its properties.
	Properties map[string]float64 `protobuf:"bytes,2,rep,name=properties" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
}

func (m *SetDevicePropertiesRequest) Reset()                    { *m = SetDevicePropertiesRequest{} }
func (m *SetDevicePropertiesRequest) String() string            { return proto.CompactTextString(m) }
func (*SetDevicePropertiesRequest) ProtoMessage()               {}
func (*SetDevicePropertiesRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{8} }

func (m *SetDevicePropertiesRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *SetDevicePropertiesRequest) GetProperties() map[string]float64 {
	if m != nil {
		return m.Properties
	}
	return nil
}

type SlotsReply struct {
	Slots map[string]*Slot `protobuf:"bytes,1,rep,name=slots" json:"slots,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *SlotsReply) Reset()                    { *m = SlotsReply{} }
func (m *SlotsReply) String() string            { return proto.CompactTextString(m) }
func (*SlotsReply) ProtoMessage()               {}
func (*SlotsReply) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{9} }

func (m *SlotsReply) GetSlots() map[string]*Slot {
	if m != nil {
		return m.Slots
	}
	return nil
}

type GetAllSlotsReply struct {
	Slots map[string]*GetAllSlotsReply_SlotList `protobuf:"bytes,1,rep,name=slots" json:"slots,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *GetAllSlotsReply) Reset()                    { *m = GetAllSlotsReply{} }
func (m *GetAllSlotsReply) String() string            { return proto.CompactTextString(m) }
func (*GetAllSlotsReply) ProtoMessage()               {}
func (*GetAllSlotsReply) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{10} }

func (m *GetAllSlotsReply) GetSlots() map[string]*GetAllSlotsReply_SlotList {
	if m != nil {
		return m.Slots
	}
	return nil
}

type GetAllSlotsReply_SlotList struct {
	Slot []*Slot `protobuf:"bytes,1,rep,name=slot" json:"slot,omitempty"`
}

func (m *GetAllSlotsReply_SlotList) Reset()                    { *m = GetAllSlotsReply_SlotList{} }
func (m *GetAllSlotsReply_SlotList) String() string            { return proto.CompactTextString(m) }
func (*GetAllSlotsReply_SlotList) ProtoMessage()               {}
func (*GetAllSlotsReply_SlotList) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{10, 0} }

func (m *GetAllSlotsReply_SlotList) GetSlot() []*Slot {
	if m != nil {
		return m.Slot
	}
	return nil
}

type AddSlotRequest struct {
	// Miner ID.
	ID string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	// Slot destription.
	Slot *Slot `protobuf:"bytes,2,opt,name=slot" json:"slot,omitempty"`
}

func (m *AddSlotRequest) Reset()                    { *m = AddSlotRequest{} }
func (m *AddSlotRequest) String() string            { return proto.CompactTextString(m) }
func (*AddSlotRequest) ProtoMessage()               {}
func (*AddSlotRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{11} }

func (m *AddSlotRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *AddSlotRequest) GetSlot() *Slot {
	if m != nil {
		return m.Slot
	}
	return nil
}

type RemoveSlotRequest struct {
	ID   string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Slot *Slot  `protobuf:"bytes,2,opt,name=slot" json:"slot,omitempty"`
}

func (m *RemoveSlotRequest) Reset()                    { *m = RemoveSlotRequest{} }
func (m *RemoveSlotRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveSlotRequest) ProtoMessage()               {}
func (*RemoveSlotRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{12} }

func (m *RemoveSlotRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *RemoveSlotRequest) GetSlot() *Slot {
	if m != nil {
		return m.Slot
	}
	return nil
}

type GetRegisteredWorkersReply struct {
	Ids []*ID `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
}

func (m *GetRegisteredWorkersReply) Reset()                    { *m = GetRegisteredWorkersReply{} }
func (m *GetRegisteredWorkersReply) String() string            { return proto.CompactTextString(m) }
func (*GetRegisteredWorkersReply) ProtoMessage()               {}
func (*GetRegisteredWorkersReply) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{13} }

func (m *GetRegisteredWorkersReply) GetIds() []*ID {
	if m != nil {
		return m.Ids
	}
	return nil
}

type TaskListReply struct {
	Info map[string]*TaskListReply_TaskInfo `protobuf:"bytes,1,rep,name=info" json:"info,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *TaskListReply) Reset()                    { *m = TaskListReply{} }
func (m *TaskListReply) String() string            { return proto.CompactTextString(m) }
func (*TaskListReply) ProtoMessage()               {}
func (*TaskListReply) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{14} }

func (m *TaskListReply) GetInfo() map[string]*TaskListReply_TaskInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type TaskListReply_TaskInfo struct {
	Tasks map[string]*TaskStatusReply `protobuf:"bytes,1,rep,name=tasks" json:"tasks,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *TaskListReply_TaskInfo) Reset()                    { *m = TaskListReply_TaskInfo{} }
func (m *TaskListReply_TaskInfo) String() string            { return proto.CompactTextString(m) }
func (*TaskListReply_TaskInfo) ProtoMessage()               {}
func (*TaskListReply_TaskInfo) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{14, 0} }

func (m *TaskListReply_TaskInfo) GetTasks() map[string]*TaskStatusReply {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type CPUDeviceInfo struct {
	// Miners where such device exists.
	Miners []string `protobuf:"bytes,1,rep,name=miners" json:"miners,omitempty"`
	// Its properties.
	Device *CPUDevice `protobuf:"bytes,2,opt,name=device" json:"device,omitempty"`
}

func (m *CPUDeviceInfo) Reset()                    { *m = CPUDeviceInfo{} }
func (m *CPUDeviceInfo) String() string            { return proto.CompactTextString(m) }
func (*CPUDeviceInfo) ProtoMessage()               {}
func (*CPUDeviceInfo) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{15} }

func (m *CPUDeviceInfo) GetMiners() []string {
	if m != nil {
		return m.Miners
	}
	return nil
}

func (m *CPUDeviceInfo) GetDevice() *CPUDevice {
	if m != nil {
		return m.Device
	}
	return nil
}

type GPUDeviceInfo struct {
	// Miners where such device exists.
	Miners []string `protobuf:"bytes,1,rep,name=miners" json:"miners,omitempty"`
	// Its properties.
	Device *GPUDevice `protobuf:"bytes,2,opt,name=device" json:"device,omitempty"`
}

func (m *GPUDeviceInfo) Reset()                    { *m = GPUDeviceInfo{} }
func (m *GPUDeviceInfo) String() string            { return proto.CompactTextString(m) }
func (*GPUDeviceInfo) ProtoMessage()               {}
func (*GPUDeviceInfo) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{16} }

func (m *GPUDeviceInfo) GetMiners() []string {
	if m != nil {
		return m.Miners
	}
	return nil
}

func (m *GPUDeviceInfo) GetDevice() *GPUDevice {
	if m != nil {
		return m.Device
	}
	return nil
}

type DevicesReply struct {
	// CPU unique ID -> Info.
	CPUs map[string]*CPUDeviceInfo `protobuf:"bytes,1,rep,name=CPUs" json:"CPUs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// GPU unique ID -> Info.
	GPUs map[string]*GPUDeviceInfo `protobuf:"bytes,2,rep,name=GPUs" json:"GPUs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *DevicesReply) Reset()                    { *m = DevicesReply{} }
func (m *DevicesReply) String() string            { return proto.CompactTextString(m) }
func (*DevicesReply) ProtoMessage()               {}
func (*DevicesReply) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{17} }

func (m *DevicesReply) GetCPUs() map[string]*CPUDeviceInfo {
	if m != nil {
		return m.CPUs
	}
	return nil
}

func (m *DevicesReply) GetGPUs() map[string]*GPUDeviceInfo {
	if m != nil {
		return m.GPUs
	}
	return nil
}

type InsertSlotRequest struct {
	Slot           *Slot   `protobuf:"bytes,1,opt,name=slot" json:"slot,omitempty"`
	PricePerSecond *BigInt `protobuf:"bytes,4,opt,name=pricePerSecond" json:"pricePerSecond,omitempty"`
	BuyerID        string  `protobuf:"bytes,3,opt,name=buyerID" json:"buyerID,omitempty"`
}

func (m *InsertSlotRequest) Reset()                    { *m = InsertSlotRequest{} }
func (m *InsertSlotRequest) String() string            { return proto.CompactTextString(m) }
func (*InsertSlotRequest) ProtoMessage()               {}
func (*InsertSlotRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{18} }

func (m *InsertSlotRequest) GetSlot() *Slot {
	if m != nil {
		return m.Slot
	}
	return nil
}

func (m *InsertSlotRequest) GetPricePerSecond() *BigInt {
	if m != nil {
		return m.PricePerSecond
	}
	return nil
}

func (m *InsertSlotRequest) GetBuyerID() string {
	if m != nil {
		return m.BuyerID
	}
	return ""
}

type PullTaskRequest struct {
	DealId string `protobuf:"bytes,1,opt,name=dealId" json:"dealId,omitempty"`
	TaskId string `protobuf:"bytes,2,opt,name=taskId" json:"taskId,omitempty"`
}

func (m *PullTaskRequest) Reset()                    { *m = PullTaskRequest{} }
func (m *PullTaskRequest) String() string            { return proto.CompactTextString(m) }
func (*PullTaskRequest) ProtoMessage()               {}
func (*PullTaskRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{19} }

func (m *PullTaskRequest) GetDealId() string {
	if m != nil {
		return m.DealId
	}
	return ""
}

func (m *PullTaskRequest) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

type DealInfoReply struct {
	// ID is deal ID.
	Id *ID `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Order is BID order associated with a deal.
	Order *Order `protobuf:"bytes,2,opt,name=order" json:"order,omitempty"`
	// List of currently running tasks.
	Running *StatusMapReply `protobuf:"bytes,3,opt,name=running" json:"running,omitempty"`
	// List of completed tasks.
	Completed *StatusMapReply `protobuf:"bytes,4,opt,name=completed" json:"completed,omitempty"`
}

func (m *DealInfoReply) Reset()                    { *m = DealInfoReply{} }
func (m *DealInfoReply) String() string            { return proto.CompactTextString(m) }
func (*DealInfoReply) ProtoMessage()               {}
func (*DealInfoReply) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{20} }

func (m *DealInfoReply) GetId() *ID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *DealInfoReply) GetOrder() *Order {
	if m != nil {
		return m.Order
	}
	return nil
}

func (m *DealInfoReply) GetRunning() *StatusMapReply {
	if m != nil {
		return m.Running
	}
	return nil
}

func (m *DealInfoReply) GetCompleted() *StatusMapReply {
	if m != nil {
		return m.Completed
	}
	return nil
}

func init() {
	proto.RegisterType((*ListReply)(nil), "sonm.ListReply")
	proto.RegisterType((*ListReply_ListValue)(nil), "sonm.ListReply.ListValue")
	proto.RegisterType((*HubStartTaskRequest)(nil), "sonm.HubStartTaskRequest")
	proto.RegisterType((*HubJoinNetworkRequest)(nil), "sonm.HubJoinNetworkRequest")
	proto.RegisterType((*HubStartTaskReply)(nil), "sonm.HubStartTaskReply")
	proto.RegisterType((*HubStatusReply)(nil), "sonm.HubStatusReply")
	proto.RegisterType((*DealRequest)(nil), "sonm.DealRequest")
	proto.RegisterType((*ApproveDealRequest)(nil), "sonm.ApproveDealRequest")
	proto.RegisterType((*GetDevicePropertiesReply)(nil), "sonm.GetDevicePropertiesReply")
	proto.RegisterType((*SetDevicePropertiesRequest)(nil), "sonm.SetDevicePropertiesRequest")
	proto.RegisterType((*SlotsReply)(nil), "sonm.SlotsReply")
	proto.RegisterType((*GetAllSlotsReply)(nil), "sonm.GetAllSlotsReply")
	proto.RegisterType((*GetAllSlotsReply_SlotList)(nil), "sonm.GetAllSlotsReply.SlotList")
	proto.RegisterType((*AddSlotRequest)(nil), "sonm.AddSlotRequest")
	proto.RegisterType((*RemoveSlotRequest)(nil), "sonm.RemoveSlotRequest")
	proto.RegisterType((*GetRegisteredWorkersReply)(nil), "sonm.GetRegisteredWorkersReply")
	proto.RegisterType((*TaskListReply)(nil), "sonm.TaskListReply")
	proto.RegisterType((*TaskListReply_TaskInfo)(nil), "sonm.TaskListReply.TaskInfo")
	proto.RegisterType((*CPUDeviceInfo)(nil), "sonm.CPUDeviceInfo")
	proto.RegisterType((*GPUDeviceInfo)(nil), "sonm.GPUDeviceInfo")
	proto.RegisterType((*DevicesReply)(nil), "sonm.DevicesReply")
	proto.RegisterType((*InsertSlotRequest)(nil), "sonm.InsertSlotRequest")
	proto.RegisterType((*PullTaskRequest)(nil), "sonm.PullTaskRequest")
	proto.RegisterType((*DealInfoReply)(nil), "sonm.DealInfoReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Hub service

type HubClient interface {
	// Ping should be used as Healthcheck for Hub
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PingReply, error)
	// Status returns internal hub statistic
	Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HubStatusReply, error)
	// List returns a list for connected Workers
	List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListReply, error)
	// Info returns info about given Worker
	Info(ctx context.Context, in *ID, opts ...grpc.CallOption) (*InfoReply, error)
	// TaskList returns info about all Tasks on all Workers on the Hub
	TaskList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TaskListReply, error)
	PushTask(ctx context.Context, opts ...grpc.CallOption) (Hub_PushTaskClient, error)
	PullTask(ctx context.Context, in *PullTaskRequest, opts ...grpc.CallOption) (Hub_PullTaskClient, error)
	// StartTask schedules the task associcated with a deal on some miner.
	StartTask(ctx context.Context, in *HubStartTaskRequest, opts ...grpc.CallOption) (*HubStartTaskReply, error)
	JoinNetwork(ctx context.Context, in *HubJoinNetworkRequest, opts ...grpc.CallOption) (*NetworkSpec, error)
	StopTask(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error)
	TaskStatus(ctx context.Context, in *ID, opts ...grpc.CallOption) (*TaskStatusReply, error)
	MinerStatus(ctx context.Context, in *ID, opts ...grpc.CallOption) (*StatusMapReply, error)
	TaskLogs(ctx context.Context, in *TaskLogsRequest, opts ...grpc.CallOption) (Hub_TaskLogsClient, error)
	ProposeDeal(ctx context.Context, in *DealRequest, opts ...grpc.CallOption) (*Empty, error)
	ApproveDeal(ctx context.Context, in *ApproveDealRequest, opts ...grpc.CallOption) (*Empty, error)
	// Note: currently used for testing pusposes.
	GetDealInfo(ctx context.Context, in *ID, opts ...grpc.CallOption) (*DealInfoReply, error)
	DiscoverHub(ctx context.Context, in *DiscoverHubRequest, opts ...grpc.CallOption) (*Empty, error)
	// Devices returns list of all available devices that this Hub awares of
	// with tieir full description.
	Devices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DevicesReply, error)
	// MinerDevices returns a list of all available devices for given miner ID.
	MinerDevices(ctx context.Context, in *ID, opts ...grpc.CallOption) (*DevicesReply, error)
	// GetDeviceProperties allows to obtain previously assigned resource
	// properties for a given device.
	GetDeviceProperties(ctx context.Context, in *ID, opts ...grpc.CallOption) (*GetDevicePropertiesReply, error)
	// SetDeviceProperties method allows to specify additional resource
	// properties for a device specified by its ID.
	// This may include GPU's capability to execute a well-known work such as
	// Ethereum mining etc.
	// Note, that this method overrides all previously specified properties.
	SetDeviceProperties(ctx context.Context, in *SetDevicePropertiesRequest, opts ...grpc.CallOption) (*Empty, error)
	// GetRegisteredWorkers returns a list of Worker IDs that
	// allowed to connect to the Hub.
	GetRegisteredWorkers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetRegisteredWorkersReply, error)
	// RegisterWorker adds Worker credentials to be able for them to connect
	// to a Hub.
	RegisterWorker(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error)
	// DeregisterWorkers removed Worker credentials denying them to connect to
	// a Hub.
	DeregisterWorker(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error)
	// GetSlots allows to obtain previously assigned slots for the Hub.
	Slots(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SlotsReply, error)
	// AddSlot allows to assign a new slot.
	// This method can fail if either there are no such resources found or it
	// has been previourly assigned.
	InsertSlot(ctx context.Context, in *InsertSlotRequest, opts ...grpc.CallOption) (*ID, error)
	// RemoveSlot removes the speified slot if fully matches.
	RemoveSlot(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error)
}

type hubClient struct {
	cc *grpc.ClientConn
}

func NewHubClient(cc *grpc.ClientConn) HubClient {
	return &hubClient{cc}
}

func (c *hubClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := grpc.Invoke(ctx, "/sonm.Hub/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HubStatusReply, error) {
	out := new(HubStatusReply)
	err := grpc.Invoke(ctx, "/sonm.Hub/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListReply, error) {
	out := new(ListReply)
	err := grpc.Invoke(ctx, "/sonm.Hub/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) Info(ctx context.Context, in *ID, opts ...grpc.CallOption) (*InfoReply, error) {
	out := new(InfoReply)
	err := grpc.Invoke(ctx, "/sonm.Hub/Info", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) TaskList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TaskListReply, error) {
	out := new(TaskListReply)
	err := grpc.Invoke(ctx, "/sonm.Hub/TaskList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) PushTask(ctx context.Context, opts ...grpc.CallOption) (Hub_PushTaskClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Hub_serviceDesc.Streams[0], c.cc, "/sonm.Hub/PushTask", opts...)
	if err != nil {
		return nil, err
	}
	x := &hubPushTaskClient{stream}
	return x, nil
}

type Hub_PushTaskClient interface {
	Send(*Chunk) error
	Recv() (*Progress, error)
	grpc.ClientStream
}

type hubPushTaskClient struct {
	grpc.ClientStream
}

func (x *hubPushTaskClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *hubPushTaskClient) Recv() (*Progress, error) {
	m := new(Progress)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hubClient) PullTask(ctx context.Context, in *PullTaskRequest, opts ...grpc.CallOption) (Hub_PullTaskClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Hub_serviceDesc.Streams[1], c.cc, "/sonm.Hub/PullTask", opts...)
	if err != nil {
		return nil, err
	}
	x := &hubPullTaskClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Hub_PullTaskClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type hubPullTaskClient struct {
	grpc.ClientStream
}

func (x *hubPullTaskClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hubClient) StartTask(ctx context.Context, in *HubStartTaskRequest, opts ...grpc.CallOption) (*HubStartTaskReply, error) {
	out := new(HubStartTaskReply)
	err := grpc.Invoke(ctx, "/sonm.Hub/StartTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) JoinNetwork(ctx context.Context, in *HubJoinNetworkRequest, opts ...grpc.CallOption) (*NetworkSpec, error) {
	out := new(NetworkSpec)
	err := grpc.Invoke(ctx, "/sonm.Hub/JoinNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) StopTask(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.Hub/StopTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) TaskStatus(ctx context.Context, in *ID, opts ...grpc.CallOption) (*TaskStatusReply, error) {
	out := new(TaskStatusReply)
	err := grpc.Invoke(ctx, "/sonm.Hub/TaskStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) MinerStatus(ctx context.Context, in *ID, opts ...grpc.CallOption) (*StatusMapReply, error) {
	out := new(StatusMapReply)
	err := grpc.Invoke(ctx, "/sonm.Hub/MinerStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) TaskLogs(ctx context.Context, in *TaskLogsRequest, opts ...grpc.CallOption) (Hub_TaskLogsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Hub_serviceDesc.Streams[2], c.cc, "/sonm.Hub/TaskLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &hubTaskLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Hub_TaskLogsClient interface {
	Recv() (*TaskLogsChunk, error)
	grpc.ClientStream
}

type hubTaskLogsClient struct {
	grpc.ClientStream
}

func (x *hubTaskLogsClient) Recv() (*TaskLogsChunk, error) {
	m := new(TaskLogsChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hubClient) ProposeDeal(ctx context.Context, in *DealRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.Hub/ProposeDeal", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) ApproveDeal(ctx context.Context, in *ApproveDealRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.Hub/ApproveDeal", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) GetDealInfo(ctx context.Context, in *ID, opts ...grpc.CallOption) (*DealInfoReply, error) {
	out := new(DealInfoReply)
	err := grpc.Invoke(ctx, "/sonm.Hub/GetDealInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) DiscoverHub(ctx context.Context, in *DiscoverHubRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.Hub/DiscoverHub", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) Devices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DevicesReply, error) {
	out := new(DevicesReply)
	err := grpc.Invoke(ctx, "/sonm.Hub/Devices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) MinerDevices(ctx context.Context, in *ID, opts ...grpc.CallOption) (*DevicesReply, error) {
	out := new(DevicesReply)
	err := grpc.Invoke(ctx, "/sonm.Hub/MinerDevices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) GetDeviceProperties(ctx context.Context, in *ID, opts ...grpc.CallOption) (*GetDevicePropertiesReply, error) {
	out := new(GetDevicePropertiesReply)
	err := grpc.Invoke(ctx, "/sonm.Hub/GetDeviceProperties", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) SetDeviceProperties(ctx context.Context, in *SetDevicePropertiesRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.Hub/SetDeviceProperties", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) GetRegisteredWorkers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetRegisteredWorkersReply, error) {
	out := new(GetRegisteredWorkersReply)
	err := grpc.Invoke(ctx, "/sonm.Hub/GetRegisteredWorkers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) RegisterWorker(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.Hub/RegisterWorker", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) DeregisterWorker(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.Hub/DeregisterWorker", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) Slots(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SlotsReply, error) {
	out := new(SlotsReply)
	err := grpc.Invoke(ctx, "/sonm.Hub/Slots", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) InsertSlot(ctx context.Context, in *InsertSlotRequest, opts ...grpc.CallOption) (*ID, error) {
	out := new(ID)
	err := grpc.Invoke(ctx, "/sonm.Hub/InsertSlot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) RemoveSlot(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.Hub/RemoveSlot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Hub service

type HubServer interface {
	// Ping should be used as Healthcheck for Hub
	Ping(context.Context, *Empty) (*PingReply, error)
	// Status returns internal hub statistic
	Status(context.Context, *Empty) (*HubStatusReply, error)
	// List returns a list for connected Workers
	List(context.Context, *Empty) (*ListReply, error)
	// Info returns info about given Worker
	Info(context.Context, *ID) (*InfoReply, error)
	// TaskList returns info about all Tasks on all Workers on the Hub
	TaskList(context.Context, *Empty) (*TaskListReply, error)
	PushTask(Hub_PushTaskServer) error
	PullTask(*PullTaskRequest, Hub_PullTaskServer) error
	// StartTask schedules the task associcated with a deal on some miner.
	StartTask(context.Context, *HubStartTaskRequest) (*HubStartTaskReply, error)
	JoinNetwork(context.Context, *HubJoinNetworkRequest) (*NetworkSpec, error)
	StopTask(context.Context, *ID) (*Empty, error)
	TaskStatus(context.Context, *ID) (*TaskStatusReply, error)
	MinerStatus(context.Context, *ID) (*StatusMapReply, error)
	TaskLogs(*TaskLogsRequest, Hub_TaskLogsServer) error
	ProposeDeal(context.Context, *DealRequest) (*Empty, error)
	ApproveDeal(context.Context, *ApproveDealRequest) (*Empty, error)
	// Note: currently used for testing pusposes.
	GetDealInfo(context.Context, *ID) (*DealInfoReply, error)
	DiscoverHub(context.Context, *DiscoverHubRequest) (*Empty, error)
	// Devices returns list of all available devices that this Hub awares of
	// with tieir full description.
	Devices(context.Context, *Empty) (*DevicesReply, error)
	// MinerDevices returns a list of all available devices for given miner ID.
	MinerDevices(context.Context, *ID) (*DevicesReply, error)
	// GetDeviceProperties allows to obtain previously assigned resource
	// properties for a given device.
	GetDeviceProperties(context.Context, *ID) (*GetDevicePropertiesReply, error)
	// SetDeviceProperties method allows to specify additional resource
	// properties for a device specified by its ID.
	// This may include GPU's capability to execute a well-known work such as
	// Ethereum mining etc.
	// Note, that this method overrides all previously specified properties.
	SetDeviceProperties(context.Context, *SetDevicePropertiesRequest) (*Empty, error)
	// GetRegisteredWorkers returns a list of Worker IDs that
	// allowed to connect to the Hub.
	GetRegisteredWorkers(context.Context, *Empty) (*GetRegisteredWorkersReply, error)
	// RegisterWorker adds Worker credentials to be able for them to connect
	// to a Hub.
	RegisterWorker(context.Context, *ID) (*Empty, error)
	// DeregisterWorkers removed Worker credentials denying them to connect to
	// a Hub.
	DeregisterWorker(context.Context, *ID) (*Empty, error)
	// GetSlots allows to obtain previously assigned slots for the Hub.
	Slots(context.Context, *Empty) (*SlotsReply, error)
	// AddSlot allows to assign a new slot.
	// This method can fail if either there are no such resources found or it
	// has been previourly assigned.
	InsertSlot(context.Context, *InsertSlotRequest) (*ID, error)
	// RemoveSlot removes the speified slot if fully matches.
	RemoveSlot(context.Context, *ID) (*Empty, error)
}

func RegisterHubServer(s *grpc.Server, srv HubServer) {
	s.RegisterService(&_Hub_serviceDesc, srv)
}

func _Hub_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).Status(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).List(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).Info(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_TaskList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).TaskList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/TaskList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).TaskList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_PushTask_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HubServer).PushTask(&hubPushTaskServer{stream})
}

type Hub_PushTaskServer interface {
	Send(*Progress) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type hubPushTaskServer struct {
	grpc.ServerStream
}

func (x *hubPushTaskServer) Send(m *Progress) error {
	return x.ServerStream.SendMsg(m)
}

func (x *hubPushTaskServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Hub_PullTask_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullTaskRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HubServer).PullTask(m, &hubPullTaskServer{stream})
}

type Hub_PullTaskServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type hubPullTaskServer struct {
	grpc.ServerStream
}

func (x *hubPullTaskServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func _Hub_StartTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HubStartTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).StartTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/StartTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).StartTask(ctx, req.(*HubStartTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_JoinNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HubJoinNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).JoinNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/JoinNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).JoinNetwork(ctx, req.(*HubJoinNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_StopTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).StopTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/StopTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).StopTask(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_TaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).TaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/TaskStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).TaskStatus(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_MinerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).MinerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/MinerStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).MinerStatus(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_TaskLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TaskLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HubServer).TaskLogs(m, &hubTaskLogsServer{stream})
}

type Hub_TaskLogsServer interface {
	Send(*TaskLogsChunk) error
	grpc.ServerStream
}

type hubTaskLogsServer struct {
	grpc.ServerStream
}

func (x *hubTaskLogsServer) Send(m *TaskLogsChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _Hub_ProposeDeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).ProposeDeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/ProposeDeal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).ProposeDeal(ctx, req.(*DealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_ApproveDeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveDealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).ApproveDeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/ApproveDeal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).ApproveDeal(ctx, req.(*ApproveDealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_GetDealInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).GetDealInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/GetDealInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).GetDealInfo(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_DiscoverHub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverHubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).DiscoverHub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/DiscoverHub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).DiscoverHub(ctx, req.(*DiscoverHubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_Devices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).Devices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/Devices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).Devices(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_MinerDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).MinerDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/MinerDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).MinerDevices(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_GetDeviceProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).GetDeviceProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/GetDeviceProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).GetDeviceProperties(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_SetDeviceProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDevicePropertiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).SetDeviceProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/SetDeviceProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).SetDeviceProperties(ctx, req.(*SetDevicePropertiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_GetRegisteredWorkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).GetRegisteredWorkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/GetRegisteredWorkers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).GetRegisteredWorkers(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_RegisterWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).RegisterWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/RegisterWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).RegisterWorker(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_DeregisterWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).DeregisterWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/DeregisterWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).DeregisterWorker(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_Slots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).Slots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/Slots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).Slots(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_InsertSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).InsertSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/InsertSlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).InsertSlot(ctx, req.(*InsertSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_RemoveSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).RemoveSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/RemoveSlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).RemoveSlot(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hub_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sonm.Hub",
	HandlerType: (*HubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Hub_Ping_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Hub_Status_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Hub_List_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _Hub_Info_Handler,
		},
		{
			MethodName: "TaskList",
			Handler:    _Hub_TaskList_Handler,
		},
		{
			MethodName: "StartTask",
			Handler:    _Hub_StartTask_Handler,
		},
		{
			MethodName: "JoinNetwork",
			Handler:    _Hub_JoinNetwork_Handler,
		},
		{
			MethodName: "StopTask",
			Handler:    _Hub_StopTask_Handler,
		},
		{
			MethodName: "TaskStatus",
			Handler:    _Hub_TaskStatus_Handler,
		},
		{
			MethodName: "MinerStatus",
			Handler:    _Hub_MinerStatus_Handler,
		},
		{
			MethodName: "ProposeDeal",
			Handler:    _Hub_ProposeDeal_Handler,
		},
		{
			MethodName: "ApproveDeal",
			Handler:    _Hub_ApproveDeal_Handler,
		},
		{
			MethodName: "GetDealInfo",
			Handler:    _Hub_GetDealInfo_Handler,
		},
		{
			MethodName: "DiscoverHub",
			Handler:    _Hub_DiscoverHub_Handler,
		},
		{
			MethodName: "Devices",
			Handler:    _Hub_Devices_Handler,
		},
		{
			MethodName: "MinerDevices",
			Handler:    _Hub_MinerDevices_Handler,
		},
		{
			MethodName: "GetDeviceProperties",
			Handler:    _Hub_GetDeviceProperties_Handler,
		},
		{
			MethodName: "SetDeviceProperties",
			Handler:    _Hub_SetDeviceProperties_Handler,
		},
		{
			MethodName: "GetRegisteredWorkers",
			Handler:    _Hub_GetRegisteredWorkers_Handler,
		},
		{
			MethodName: "RegisterWorker",
			Handler:    _Hub_RegisterWorker_Handler,
		},
		{
			MethodName: "DeregisterWorker",
			Handler:    _Hub_DeregisterWorker_Handler,
		},
		{
			MethodName: "Slots",
			Handler:    _Hub_Slots_Handler,
		},
		{
			MethodName: "InsertSlot",
			Handler:    _Hub_InsertSlot_Handler,
		},
		{
			MethodName: "RemoveSlot",
			Handler:    _Hub_RemoveSlot_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PushTask",
			Handler:       _Hub_PushTask_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PullTask",
			Handler:       _Hub_PullTask_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TaskLogs",
			Handler:       _Hub_TaskLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "hub.proto",
}

// Begin grpccmd
var _ = grpccmd.RunE

// Hub
var _HubCmd = &cobra.Command{
	Use:   "hub [method]",
	Short: "Subcommand for the Hub service.",
}

var _Hub_PingCmd = &cobra.Command{
	Use:   "ping",
	Short: "Make the Ping method call, input-type: sonm.Empty output-type: sonm.PingReply",
	RunE: grpccmd.RunE(
		"Ping",
		"sonm.Empty",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewHubClient(cc)
		},
	),
}

var _Hub_PingCmd_gen = &cobra.Command{
	Use:   "ping-gen",
	Short: "Generate JSON for method call of Ping (input-type: sonm.Empty)",
	RunE:  grpccmd.TypeToJson("sonm.Empty"),
}

var _Hub_StatusCmd = &cobra.Command{
	Use:   "status",
	Short: "Make the Status method call, input-type: sonm.Empty output-type: sonm.HubStatusReply",
	RunE: grpccmd.RunE(
		"Status",
		"sonm.Empty",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewHubClient(cc)
		},
	),
}

var _Hub_StatusCmd_gen = &cobra.Command{
	Use:   "status-gen",
	Short: "Generate JSON for method call of Status (input-type: sonm.Empty)",
	RunE:  grpccmd.TypeToJson("sonm.Empty"),
}

var _Hub_ListCmd = &cobra.Command{
	Use:   "list",
	Short: "Make the List method call, input-type: sonm.Empty output-type: sonm.ListReply",
	RunE: grpccmd.RunE(
		"List",
		"sonm.Empty",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewHubClient(cc)
		},
	),
}

var _Hub_ListCmd_gen = &cobra.Command{
	Use:   "list-gen",
	Short: "Generate JSON for method call of List (input-type: sonm.Empty)",
	RunE:  grpccmd.TypeToJson("sonm.Empty"),
}

var _Hub_InfoCmd = &cobra.Command{
	Use:   "info",
	Short: "Make the Info method call, input-type: sonm.ID output-type: sonm.InfoReply",
	RunE: grpccmd.RunE(
		"Info",
		"sonm.ID",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewHubClient(cc)
		},
	),
}

var _Hub_InfoCmd_gen = &cobra.Command{
	Use:   "info-gen",
	Short: "Generate JSON for method call of Info (input-type: sonm.ID)",
	RunE:  grpccmd.TypeToJson("sonm.ID"),
}

var _Hub_TaskListCmd = &cobra.Command{
	Use:   "taskList",
	Short: "Make the TaskList method call, input-type: sonm.Empty output-type: sonm.TaskListReply",
	RunE: grpccmd.RunE(
		"TaskList",
		"sonm.Empty",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewHubClient(cc)
		},
	),
}

var _Hub_TaskListCmd_gen = &cobra.Command{
	Use:   "taskList-gen",
	Short: "Generate JSON for method call of TaskList (input-type: sonm.Empty)",
	RunE:  grpccmd.TypeToJson("sonm.Empty"),
}

var _Hub_PushTaskCmd = &cobra.Command{
	Use:   "pushTask",
	Short: "Make the PushTask method call, input-type: sonm.Chunk output-type: sonm.Progress",
	RunE: grpccmd.RunE(
		"PushTask",
		"sonm.Chunk",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewHubClient(cc)
		},
	),
}

var _Hub_PushTaskCmd_gen = &cobra.Command{
	Use:   "pushTask-gen",
	Short: "Generate JSON for method call of PushTask (input-type: sonm.Chunk)",
	RunE:  grpccmd.TypeToJson("sonm.Chunk"),
}

var _Hub_PullTaskCmd = &cobra.Command{
	Use:   "pullTask",
	Short: "Make the PullTask method call, input-type: sonm.PullTaskRequest output-type: sonm.Chunk",
	RunE: grpccmd.RunE(
		"PullTask",
		"sonm.PullTaskRequest",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewHubClient(cc)
		},
	),
}

var _Hub_PullTaskCmd_gen = &cobra.Command{
	Use:   "pullTask-gen",
	Short: "Generate JSON for method call of PullTask (input-type: sonm.PullTaskRequest)",
	RunE:  grpccmd.TypeToJson("sonm.PullTaskRequest"),
}

var _Hub_StartTaskCmd = &cobra.Command{
	Use:   "startTask",
	Short: "Make the StartTask method call, input-type: sonm.HubStartTaskRequest output-type: sonm.HubStartTaskReply",
	RunE: grpccmd.RunE(
		"StartTask",
		"sonm.HubStartTaskRequest",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewHubClient(cc)
		},
	),
}

var _Hub_StartTaskCmd_gen = &cobra.Command{
	Use:   "startTask-gen",
	Short: "Generate JSON for method call of StartTask (input-type: sonm.HubStartTaskRequest)",
	RunE:  grpccmd.TypeToJson("sonm.HubStartTaskRequest"),
}

var _Hub_JoinNetworkCmd = &cobra.Command{
	Use:   "joinNetwork",
	Short: "Make the JoinNetwork method call, input-type: sonm.HubJoinNetworkRequest output-type: sonm.NetworkSpec",
	RunE: grpccmd.RunE(
		"JoinNetwork",
		"sonm.HubJoinNetworkRequest",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewHubClient(cc)
		},
	),
}

var _Hub_JoinNetworkCmd_gen = &cobra.Command{
	Use:   "joinNetwork-gen",
	Short: "Generate JSON for method call of JoinNetwork (input-type: sonm.HubJoinNetworkRequest)",
	RunE:  grpccmd.TypeToJson("sonm.HubJoinNetworkRequest"),
}

var _Hub_StopTaskCmd = &cobra.Command{
	Use:   "stopTask",
	Short: "Make the StopTask method call, input-type: sonm.ID output-type: sonm.Empty",
	RunE: grpccmd.RunE(
		"StopTask",
		"sonm.ID",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewHubClient(cc)
		},
	),
}

var _Hub_StopTaskCmd_gen = &cobra.Command{
	Use:   "stopTask-gen",
	Short: "Generate JSON for method call of StopTask (input-type: sonm.ID)",
	RunE:  grpccmd.TypeToJson("sonm.ID"),
}

var _Hub_TaskStatusCmd = &cobra.Command{
	Use:   "taskStatus",
	Short: "Make the TaskStatus method call, input-type: sonm.ID output-type: sonm.TaskStatusReply",
	RunE: grpccmd.RunE(
		"TaskStatus",
		"sonm.ID",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewHubClient(cc)
		},
	),
}

var _Hub_TaskStatusCmd_gen = &cobra.Command{
	Use:   "taskStatus-gen",
	Short: "Generate JSON for method call of TaskStatus (input-type: sonm.ID)",
	RunE:  grpccmd.TypeToJson("sonm.ID"),
}

var _Hub_MinerStatusCmd = &cobra.Command{
	Use:   "minerStatus",
	Short: "Make the MinerStatus method call, input-type: sonm.ID output-type: sonm.StatusMapReply",
	RunE: grpccmd.RunE(
		"MinerStatus",
		"sonm.ID",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewHubClient(cc)
		},
	),
}

var _Hub_MinerStatusCmd_gen = &cobra.Command{
	Use:   "minerStatus-gen",
	Short: "Generate JSON for method call of MinerStatus (input-type: sonm.ID)",
	RunE:  grpccmd.TypeToJson("sonm.ID"),
}

var _Hub_TaskLogsCmd = &cobra.Command{
	Use:   "taskLogs",
	Short: "Make the TaskLogs method call, input-type: sonm.TaskLogsRequest output-type: sonm.TaskLogsChunk",
	RunE: grpccmd.RunE(
		"TaskLogs",
		"sonm.TaskLogsRequest",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewHubClient(cc)
		},
	),
}

var _Hub_TaskLogsCmd_gen = &cobra.Command{
	Use:   "taskLogs-gen",
	Short: "Generate JSON for method call of TaskLogs (input-type: sonm.TaskLogsRequest)",
	RunE:  grpccmd.TypeToJson("sonm.TaskLogsRequest"),
}

var _Hub_ProposeDealCmd = &cobra.Command{
	Use:   "proposeDeal",
	Short: "Make the ProposeDeal method call, input-type: sonm.DealRequest output-type: sonm.Empty",
	RunE: grpccmd.RunE(
		"ProposeDeal",
		"sonm.DealRequest",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewHubClient(cc)
		},
	),
}

var _Hub_ProposeDealCmd_gen = &cobra.Command{
	Use:   "proposeDeal-gen",
	Short: "Generate JSON for method call of ProposeDeal (input-type: sonm.DealRequest)",
	RunE:  grpccmd.TypeToJson("sonm.DealRequest"),
}

var _Hub_ApproveDealCmd = &cobra.Command{
	Use:   "approveDeal",
	Short: "Make the ApproveDeal method call, input-type: sonm.ApproveDealRequest output-type: sonm.Empty",
	RunE: grpccmd.RunE(
		"ApproveDeal",
		"sonm.ApproveDealRequest",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewHubClient(cc)
		},
	),
}

var _Hub_ApproveDealCmd_gen = &cobra.Command{
	Use:   "approveDeal-gen",
	Short: "Generate JSON for method call of ApproveDeal (input-type: sonm.ApproveDealRequest)",
	RunE:  grpccmd.TypeToJson("sonm.ApproveDealRequest"),
}

var _Hub_GetDealInfoCmd = &cobra.Command{
	Use:   "getDealInfo",
	Short: "Make the GetDealInfo method call, input-type: sonm.ID output-type: sonm.DealInfoReply",
	RunE: grpccmd.RunE(
		"GetDealInfo",
		"sonm.ID",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewHubClient(cc)
		},
	),
}

var _Hub_GetDealInfoCmd_gen = &cobra.Command{
	Use:   "getDealInfo-gen",
	Short: "Generate JSON for method call of GetDealInfo (input-type: sonm.ID)",
	RunE:  grpccmd.TypeToJson("sonm.ID"),
}

var _Hub_DiscoverHubCmd = &cobra.Command{
	Use:   "discoverHub",
	Short: "Make the DiscoverHub method call, input-type: sonm.DiscoverHubRequest output-type: sonm.Empty",
	RunE: grpccmd.RunE(
		"DiscoverHub",
		"sonm.DiscoverHubRequest",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewHubClient(cc)
		},
	),
}

var _Hub_DiscoverHubCmd_gen = &cobra.Command{
	Use:   "discoverHub-gen",
	Short: "Generate JSON for method call of DiscoverHub (input-type: sonm.DiscoverHubRequest)",
	RunE:  grpccmd.TypeToJson("sonm.DiscoverHubRequest"),
}

var _Hub_DevicesCmd = &cobra.Command{
	Use:   "devices",
	Short: "Make the Devices method call, input-type: sonm.Empty output-type: sonm.DevicesReply",
	RunE: grpccmd.RunE(
		"Devices",
		"sonm.Empty",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewHubClient(cc)
		},
	),
}

var _Hub_DevicesCmd_gen = &cobra.Command{
	Use:   "devices-gen",
	Short: "Generate JSON for method call of Devices (input-type: sonm.Empty)",
	RunE:  grpccmd.TypeToJson("sonm.Empty"),
}

var _Hub_MinerDevicesCmd = &cobra.Command{
	Use:   "minerDevices",
	Short: "Make the MinerDevices method call, input-type: sonm.ID output-type: sonm.DevicesReply",
	RunE: grpccmd.RunE(
		"MinerDevices",
		"sonm.ID",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewHubClient(cc)
		},
	),
}

var _Hub_MinerDevicesCmd_gen = &cobra.Command{
	Use:   "minerDevices-gen",
	Short: "Generate JSON for method call of MinerDevices (input-type: sonm.ID)",
	RunE:  grpccmd.TypeToJson("sonm.ID"),
}

var _Hub_GetDevicePropertiesCmd = &cobra.Command{
	Use:   "getDeviceProperties",
	Short: "Make the GetDeviceProperties method call, input-type: sonm.ID output-type: sonm.GetDevicePropertiesReply",
	RunE: grpccmd.RunE(
		"GetDeviceProperties",
		"sonm.ID",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewHubClient(cc)
		},
	),
}

var _Hub_GetDevicePropertiesCmd_gen = &cobra.Command{
	Use:   "getDeviceProperties-gen",
	Short: "Generate JSON for method call of GetDeviceProperties (input-type: sonm.ID)",
	RunE:  grpccmd.TypeToJson("sonm.ID"),
}

var _Hub_SetDevicePropertiesCmd = &cobra.Command{
	Use:   "setDeviceProperties",
	Short: "Make the SetDeviceProperties method call, input-type: sonm.SetDevicePropertiesRequest output-type: sonm.Empty",
	RunE: grpccmd.RunE(
		"SetDeviceProperties",
		"sonm.SetDevicePropertiesRequest",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewHubClient(cc)
		},
	),
}

var _Hub_SetDevicePropertiesCmd_gen = &cobra.Command{
	Use:   "setDeviceProperties-gen",
	Short: "Generate JSON for method call of SetDeviceProperties (input-type: sonm.SetDevicePropertiesRequest)",
	RunE:  grpccmd.TypeToJson("sonm.SetDevicePropertiesRequest"),
}

var _Hub_GetRegisteredWorkersCmd = &cobra.Command{
	Use:   "getRegisteredWorkers",
	Short: "Make the GetRegisteredWorkers method call, input-type: sonm.Empty output-type: sonm.GetRegisteredWorkersReply",
	RunE: grpccmd.RunE(
		"GetRegisteredWorkers",
		"sonm.Empty",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewHubClient(cc)
		},
	),
}

var _Hub_GetRegisteredWorkersCmd_gen = &cobra.Command{
	Use:   "getRegisteredWorkers-gen",
	Short: "Generate JSON for method call of GetRegisteredWorkers (input-type: sonm.Empty)",
	RunE:  grpccmd.TypeToJson("sonm.Empty"),
}

var _Hub_RegisterWorkerCmd = &cobra.Command{
	Use:   "registerWorker",
	Short: "Make the RegisterWorker method call, input-type: sonm.ID output-type: sonm.Empty",
	RunE: grpccmd.RunE(
		"RegisterWorker",
		"sonm.ID",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewHubClient(cc)
		},
	),
}

var _Hub_RegisterWorkerCmd_gen = &cobra.Command{
	Use:   "registerWorker-gen",
	Short: "Generate JSON for method call of RegisterWorker (input-type: sonm.ID)",
	RunE:  grpccmd.TypeToJson("sonm.ID"),
}

var _Hub_DeregisterWorkerCmd = &cobra.Command{
	Use:   "deregisterWorker",
	Short: "Make the DeregisterWorker method call, input-type: sonm.ID output-type: sonm.Empty",
	RunE: grpccmd.RunE(
		"DeregisterWorker",
		"sonm.ID",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewHubClient(cc)
		},
	),
}

var _Hub_DeregisterWorkerCmd_gen = &cobra.Command{
	Use:   "deregisterWorker-gen",
	Short: "Generate JSON for method call of DeregisterWorker (input-type: sonm.ID)",
	RunE:  grpccmd.TypeToJson("sonm.ID"),
}

var _Hub_SlotsCmd = &cobra.Command{
	Use:   "slots",
	Short: "Make the Slots method call, input-type: sonm.Empty output-type: sonm.SlotsReply",
	RunE: grpccmd.RunE(
		"Slots",
		"sonm.Empty",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewHubClient(cc)
		},
	),
}

var _Hub_SlotsCmd_gen = &cobra.Command{
	Use:   "slots-gen",
	Short: "Generate JSON for method call of Slots (input-type: sonm.Empty)",
	RunE:  grpccmd.TypeToJson("sonm.Empty"),
}

var _Hub_InsertSlotCmd = &cobra.Command{
	Use:   "insertSlot",
	Short: "Make the InsertSlot method call, input-type: sonm.InsertSlotRequest output-type: sonm.ID",
	RunE: grpccmd.RunE(
		"InsertSlot",
		"sonm.InsertSlotRequest",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewHubClient(cc)
		},
	),
}

var _Hub_InsertSlotCmd_gen = &cobra.Command{
	Use:   "insertSlot-gen",
	Short: "Generate JSON for method call of InsertSlot (input-type: sonm.InsertSlotRequest)",
	RunE:  grpccmd.TypeToJson("sonm.InsertSlotRequest"),
}

var _Hub_RemoveSlotCmd = &cobra.Command{
	Use:   "removeSlot",
	Short: "Make the RemoveSlot method call, input-type: sonm.ID output-type: sonm.Empty",
	RunE: grpccmd.RunE(
		"RemoveSlot",
		"sonm.ID",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewHubClient(cc)
		},
	),
}

var _Hub_RemoveSlotCmd_gen = &cobra.Command{
	Use:   "removeSlot-gen",
	Short: "Generate JSON for method call of RemoveSlot (input-type: sonm.ID)",
	RunE:  grpccmd.TypeToJson("sonm.ID"),
}

// Register commands with the root command and service command
func init() {
	grpccmd.RegisterServiceCmd(_HubCmd)
	_HubCmd.AddCommand(
		_Hub_PingCmd,
		_Hub_PingCmd_gen,
		_Hub_StatusCmd,
		_Hub_StatusCmd_gen,
		_Hub_ListCmd,
		_Hub_ListCmd_gen,
		_Hub_InfoCmd,
		_Hub_InfoCmd_gen,
		_Hub_TaskListCmd,
		_Hub_TaskListCmd_gen,
		_Hub_PushTaskCmd,
		_Hub_PushTaskCmd_gen,
		_Hub_PullTaskCmd,
		_Hub_PullTaskCmd_gen,
		_Hub_StartTaskCmd,
		_Hub_StartTaskCmd_gen,
		_Hub_JoinNetworkCmd,
		_Hub_JoinNetworkCmd_gen,
		_Hub_StopTaskCmd,
		_Hub_StopTaskCmd_gen,
		_Hub_TaskStatusCmd,
		_Hub_TaskStatusCmd_gen,
		_Hub_MinerStatusCmd,
		_Hub_MinerStatusCmd_gen,
		_Hub_TaskLogsCmd,
		_Hub_TaskLogsCmd_gen,
		_Hub_ProposeDealCmd,
		_Hub_ProposeDealCmd_gen,
		_Hub_ApproveDealCmd,
		_Hub_ApproveDealCmd_gen,
		_Hub_GetDealInfoCmd,
		_Hub_GetDealInfoCmd_gen,
		_Hub_DiscoverHubCmd,
		_Hub_DiscoverHubCmd_gen,
		_Hub_DevicesCmd,
		_Hub_DevicesCmd_gen,
		_Hub_MinerDevicesCmd,
		_Hub_MinerDevicesCmd_gen,
		_Hub_GetDevicePropertiesCmd,
		_Hub_GetDevicePropertiesCmd_gen,
		_Hub_SetDevicePropertiesCmd,
		_Hub_SetDevicePropertiesCmd_gen,
		_Hub_GetRegisteredWorkersCmd,
		_Hub_GetRegisteredWorkersCmd_gen,
		_Hub_RegisterWorkerCmd,
		_Hub_RegisterWorkerCmd_gen,
		_Hub_DeregisterWorkerCmd,
		_Hub_DeregisterWorkerCmd_gen,
		_Hub_SlotsCmd,
		_Hub_SlotsCmd_gen,
		_Hub_InsertSlotCmd,
		_Hub_InsertSlotCmd_gen,
		_Hub_RemoveSlotCmd,
		_Hub_RemoveSlotCmd_gen,
	)
}

// End grpccmd

func init() { proto.RegisterFile("hub.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 1526 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0xcd, 0x6e, 0xdb, 0xc6,
	0x16, 0x16, 0x65, 0x49, 0x96, 0x8e, 0x6c, 0xd9, 0x1e, 0x39, 0x8e, 0xc2, 0xe4, 0xfa, 0x3a, 0x4c,
	0x6e, 0xe2, 0xdc, 0xdc, 0x28, 0x8e, 0x6e, 0x9b, 0x14, 0x01, 0x82, 0x56, 0xb5, 0x1c, 0x59, 0x45,
	0x7e, 0x04, 0xba, 0x6e, 0xd1, 0x25, 0x25, 0x8e, 0x6d, 0xc2, 0x12, 0xc9, 0x0e, 0x87, 0x2e, 0xbc,
	0x2e, 0xba, 0x2d, 0xba, 0xee, 0x1b, 0x74, 0x57, 0xa0, 0x40, 0x77, 0x7d, 0x89, 0xbe, 0x41, 0xdf,
	0xa4, 0x98, 0x3f, 0x72, 0x28, 0x51, 0x4e, 0x8b, 0xa0, 0x3b, 0x9e, 0x33, 0xe7, 0xe7, 0x9b, 0x73,
	0xe6, 0xfc, 0x48, 0x50, 0x3b, 0x8b, 0x47, 0xed, 0x90, 0x04, 0x34, 0x40, 0xa5, 0x28, 0xf0, 0xa7,
	0x66, 0x6d, 0xe4, 0xb9, 0x82, 0x61, 0xae, 0x8c, 0xbc, 0x53, 0xcf, 0xa7, 0x92, 0x42, 0x63, 0x27,
	0x74, 0x46, 0xde, 0xc4, 0xa3, 0x1e, 0x8e, 0x24, 0x6f, 0x6d, 0x1c, 0xf8, 0xd4, 0xf1, 0x7c, 0x4c,
	0x24, 0x03, 0x5c, 0xec, 0x4c, 0xd4, 0xa1, 0xe7, 0x33, 0x8b, 0xbe, 0xe7, 0x08, 0x86, 0xf5, 0x8b,
	0x01, 0xb5, 0x57, 0x5e, 0x44, 0x6d, 0x1c, 0x4e, 0x2e, 0xd1, 0x23, 0x28, 0x79, 0xfe, 0x49, 0xd0,
	0x32, 0x76, 0x96, 0x76, 0xeb, 0x9d, 0x1b, 0x6d, 0x26, 0xdb, 0x4e, 0x8e, 0xdb, 0x03, 0xff, 0x24,
	0x38, 0xf0, 0x29, 0xb9, 0xb4, 0xb9, 0x98, 0x79, 0x47, 0xe8, 0x7e, 0xe1, 0x4c, 0x62, 0x8c, 0xb6,
	0xa0, 0x72, 0xc1, 0x3e, 0x22, 0xae, 0x5d, 0xb3, 0x25, 0x65, 0xda, 0x50, 0x4b, 0xf4, 0xd0, 0x3a,
	0x2c, 0x9d, 0xe3, 0xcb, 0x96, 0xb1, 0x63, 0xec, 0xd6, 0x6c, 0xf6, 0x89, 0x1e, 0x43, 0x99, 0x0b,
	0xb6, 0x8a, 0x3b, 0x46, 0x9e, 0xcf, 0xc4, 0x81, 0x2d, 0xe4, 0x9e, 0x17, 0x3f, 0x32, 0x2c, 0x17,
	0x9a, 0x87, 0xf1, 0xe8, 0x88, 0x3a, 0x84, 0x7e, 0xee, 0x44, 0xe7, 0x36, 0xfe, 0x3a, 0xc6, 0x11,
	0x45, 0xdb, 0x50, 0x62, 0x77, 0xe5, 0xe6, 0xeb, 0x1d, 0x10, 0xa6, 0x7a, 0xd8, 0x99, 0xd8, 0x9c,
	0x8f, 0x1e, 0x41, 0x2d, 0x09, 0x8e, 0xf4, 0xb7, 0x26, 0x84, 0xf6, 0x15, 0xdb, 0x4e, 0x25, 0xac,
	0xd7, 0x70, 0xed, 0x30, 0x1e, 0x7d, 0x16, 0x78, 0xfe, 0x1b, 0x4c, 0xbf, 0x09, 0x48, 0xe2, 0x67,
	0x0b, 0x2a, 0xd4, 0x89, 0xce, 0x07, 0x3d, 0x79, 0x11, 0x49, 0xa1, 0x5b, 0x50, 0xf3, 0x85, 0xe4,
	0xa0, 0xc7, 0xed, 0xd7, 0xec, 0x94, 0x61, 0x5d, 0xc2, 0x46, 0x16, 0x34, 0x8b, 0x78, 0x03, 0x8a,
	0x9e, 0x2b, 0xcd, 0x14, 0x3d, 0x17, 0x99, 0x50, 0xc5, 0xbe, 0x1b, 0x06, 0x9e, 0x4f, 0x5b, 0x45,
	0x1e, 0xc7, 0x84, 0x46, 0x2d, 0x58, 0x3e, 0x8b, 0x47, 0x5d, 0xd7, 0x25, 0xad, 0x25, 0xae, 0xa0,
	0x48, 0xb4, 0x0d, 0x90, 0xf8, 0x89, 0x5a, 0x25, 0xae, 0xa7, 0x71, 0xac, 0x1f, 0x8a, 0xd0, 0x10,
	0xbe, 0x69, 0x1c, 0x09, 0xc7, 0xdb, 0x00, 0x53, 0x76, 0xcb, 0xfd, 0x20, 0xf6, 0x29, 0x07, 0x50,
	0xb2, 0x35, 0x0e, 0xbb, 0x63, 0x1c, 0x52, 0x6f, 0x2a, 0x12, 0x53, 0xb2, 0x25, 0xc5, 0x40, 0x5c,
	0x60, 0x12, 0x79, 0x81, 0xaf, 0x40, 0x48, 0x92, 0x41, 0x0f, 0x27, 0x0e, 0x3d, 0x09, 0xc8, 0xb4,
	0x55, 0xe2, 0x47, 0x09, 0xcd, 0xb4, 0x30, 0x3d, 0xe3, 0xd0, 0xcb, 0x42, 0x4b, 0x92, 0xe8, 0x1e,
	0x34, 0xc6, 0x13, 0x0f, 0xfb, 0xf4, 0x40, 0x5d, 0xbb, 0xc2, 0xe1, 0xcf, 0x70, 0xd1, 0x2e, 0xac,
	0xb1, 0xdb, 0x60, 0xa2, 0x38, 0x51, 0x6b, 0x99, 0x0b, 0xce, 0xb2, 0xd1, 0x5d, 0x58, 0x75, 0x7c,
	0x3f, 0x88, 0xfd, 0x31, 0x3e, 0x20, 0x24, 0x20, 0xad, 0x2a, 0xf7, 0x98, 0x65, 0x5a, 0xc7, 0x50,
	0xe7, 0x2f, 0x43, 0xa6, 0x74, 0x13, 0xca, 0x23, 0xcf, 0x1d, 0xa8, 0x54, 0x08, 0x82, 0x71, 0x59,
	0x66, 0x5d, 0x99, 0x4c, 0x41, 0xb0, 0x8b, 0x46, 0x21, 0x1e, 0x1f, 0x3a, 0xd1, 0x99, 0xba, 0xa8,
	0xa2, 0xad, 0x13, 0x40, 0xdd, 0x30, 0x24, 0xc1, 0x05, 0xd6, 0xad, 0xdf, 0x85, 0x0a, 0x7b, 0x80,
	0xf2, 0xc1, 0xd4, 0x3b, 0x2b, 0xe2, 0xd5, 0x7d, 0xea, 0x9d, 0x0e, 0x7c, 0x6a, 0xcb, 0x33, 0x85,
	0x41, 0x3d, 0x1d, 0x41, 0x28, 0x0c, 0x3d, 0x19, 0x6e, 0x41, 0x58, 0x3f, 0x19, 0xd0, 0xea, 0x63,
	0xda, 0xc3, 0x17, 0xde, 0x18, 0x0f, 0x49, 0x10, 0x62, 0xc2, 0x7a, 0x80, 0xc8, 0xed, 0x1b, 0x80,
	0x30, 0x61, 0xc9, 0x62, 0x6e, 0x0b, 0x97, 0x8b, 0x74, 0xda, 0x29, 0x2d, 0x2a, 0x5c, 0xb3, 0x60,
	0xbe, 0x80, 0xb5, 0x99, 0xe3, 0x9c, 0x42, 0xde, 0xd4, 0x0b, 0xd9, 0xd0, 0xab, 0xf5, 0x37, 0x03,
	0xcc, 0xa3, 0x3c, 0xbf, 0x22, 0x38, 0x0d, 0x28, 0x26, 0x95, 0x54, 0x1c, 0xf4, 0xd0, 0x30, 0x83,
	0xbe, 0xc8, 0xd1, 0xef, 0x09, 0xf4, 0x8b, 0xad, 0xfc, 0x93, 0xf8, 0xbf, 0x33, 0x00, 0x8e, 0x26,
	0x01, 0x95, 0xd1, 0x7d, 0x02, 0xe5, 0x88, 0x51, 0x32, 0xb0, 0x37, 0x25, 0xb4, 0x44, 0x40, 0x7c,
	0x0a, 0x14, 0x42, 0xd2, 0xec, 0x49, 0x03, 0x8b, 0x7c, 0xef, 0x64, 0x9b, 0x20, 0xa4, 0x26, 0x75,
	0x1c, 0xbf, 0x1b, 0xb0, 0xde, 0xc7, 0xb4, 0x3b, 0x99, 0x68, 0x68, 0x9e, 0x65, 0xd1, 0xdc, 0x4e,
	0xd2, 0x9c, 0x11, 0xcb, 0xc1, 0xf4, 0x5f, 0xa8, 0x32, 0x26, 0xeb, 0xaf, 0xac, 0x71, 0x32, 0xa6,
	0xb4, 0xa1, 0xbb, 0xe7, 0x7c, 0xf3, 0xab, 0x77, 0xe0, 0xff, 0x30, 0x8b, 0xff, 0xdf, 0x57, 0x80,
	0xe0, 0x9d, 0x5d, 0xbb, 0xd4, 0x27, 0xd0, 0xe8, 0xba, 0x2e, 0xf7, 0xb5, 0xe0, 0x3d, 0x28, 0x70,
	0xf3, 0xb1, 0xe1, 0x7c, 0x6b, 0x1f, 0x36, 0x6c, 0x3c, 0x0d, 0x2e, 0xf0, 0xfb, 0x18, 0x79, 0x06,
	0x37, 0xfa, 0x98, 0xda, 0xf8, 0xd4, 0x8b, 0x28, 0x26, 0xd8, 0xfd, 0x92, 0x37, 0x15, 0x19, 0x63,
	0x13, 0x96, 0x3c, 0x57, 0x45, 0xb8, 0x2a, 0x74, 0x07, 0x3d, 0x9b, 0x31, 0xad, 0x5f, 0x8b, 0xb0,
	0xca, 0xda, 0x79, 0x3a, 0x44, 0x9f, 0x64, 0x86, 0xe8, 0xbf, 0x84, 0x78, 0x46, 0x64, 0x6e, 0x90,
	0xfe, 0x68, 0x40, 0x95, 0x49, 0x30, 0x3e, 0x7a, 0x01, 0x65, 0x36, 0x4f, 0x94, 0xbf, 0xfb, 0x79,
	0x06, 0x94, 0x30, 0xff, 0x50, 0x79, 0xe5, 0x5a, 0xe6, 0x5b, 0x80, 0x94, 0x99, 0x93, 0xab, 0x87,
	0xd9, 0x5c, 0x5d, 0x4b, 0xcd, 0x6b, 0xe3, 0x41, 0xcb, 0x90, 0x79, 0x7c, 0xf5, 0x00, 0xef, 0x64,
	0xed, 0xdd, 0xba, 0x0a, 0xae, 0x9e, 0xf8, 0x21, 0xac, 0xee, 0x0f, 0x8f, 0x45, 0x39, 0xf3, 0x7b,
	0x6f, 0x41, 0x85, 0xcf, 0x9f, 0x64, 0x81, 0x10, 0x14, 0xba, 0xcf, 0x9a, 0x27, 0x93, 0x9a, 0x19,
	0xd9, 0x4a, 0xd9, 0x96, 0xc7, 0xcc, 0x62, 0xff, 0x7d, 0x2c, 0xf6, 0xe7, 0x2c, 0x7e, 0x5f, 0x84,
	0x15, 0xc1, 0x92, 0x2f, 0x61, 0x0f, 0x4a, 0xfb, 0xc3, 0x63, 0x95, 0x9a, 0x5b, 0x6a, 0xc3, 0x48,
	0x25, 0x18, 0x2c, 0x99, 0x0f, 0x2e, 0xc9, 0x34, 0xfa, 0x4c, 0xa3, 0xb8, 0x50, 0xa3, 0x9f, 0x6a,
	0xb0, 0x4f, 0xf3, 0x15, 0xd4, 0x12, 0x23, 0x39, 0xf1, 0x7e, 0x90, 0x8d, 0x77, 0x73, 0x26, 0x1a,
	0x33, 0x61, 0x66, 0xd6, 0xfa, 0x7f, 0xdb, 0x5a, 0x7f, 0x81, 0x35, 0xeb, 0x5b, 0x03, 0x36, 0x06,
	0x7e, 0x84, 0x09, 0xd5, 0x8b, 0x2d, 0x6d, 0x1f, 0xb9, 0xc5, 0x85, 0x3e, 0x80, 0x46, 0x48, 0x58,
	0xd7, 0xc6, 0xe4, 0x08, 0x8f, 0x03, 0xdf, 0xe5, 0x63, 0x73, 0x76, 0x0c, 0xce, 0xc8, 0xb0, 0x9d,
	0x61, 0x14, 0x5f, 0x62, 0x92, 0x8c, 0x3e, 0x45, 0x5a, 0x5d, 0x58, 0x1b, 0xc6, 0x93, 0x89, 0xbe,
	0xfa, 0x6d, 0xc9, 0x09, 0xab, 0x06, 0xb8, 0xa4, 0x92, 0x55, 0x4d, 0x8d, 0x70, 0x49, 0x59, 0x3f,
	0x1b, 0xb0, 0xca, 0x26, 0x34, 0xbf, 0x20, 0x4f, 0x6d, 0x2b, 0xd9, 0xc4, 0xf4, 0x1a, 0x67, 0x3b,
	0xd9, 0x6d, 0x28, 0x07, 0xc4, 0x4d, 0x56, 0xc6, 0xba, 0x38, 0x7c, 0xcb, 0x58, 0xb6, 0x38, 0x41,
	0x6d, 0x58, 0x26, 0xb1, 0xef, 0x7b, 0xfe, 0x29, 0xc7, 0x5a, 0xef, 0x6c, 0xca, 0x20, 0xf0, 0x92,
	0x7a, 0xed, 0x84, 0xa2, 0xaa, 0x94, 0x10, 0xea, 0xb0, 0x4d, 0x74, 0x1a, 0x4e, 0x30, 0xc5, 0x2a,
	0x18, 0xf9, 0x1a, 0xa9, 0x58, 0xe7, 0x0f, 0x80, 0xa5, 0xc3, 0x78, 0x84, 0xee, 0x41, 0x69, 0xc8,
	0x6c, 0x48, 0x1c, 0x07, 0xd3, 0x90, 0x5e, 0x9a, 0xf2, 0x09, 0xb3, 0x03, 0xae, 0x68, 0x15, 0xd0,
	0x23, 0xa8, 0x08, 0x63, 0x59, 0x49, 0xe9, 0x27, 0xbb, 0x0e, 0x5a, 0x05, 0x66, 0x96, 0xcf, 0x82,
	0x3c, 0xb3, 0x49, 0x25, 0x5b, 0x05, 0x74, 0x07, 0x4a, 0xbc, 0xb8, 0x92, 0x18, 0x29, 0xa1, 0x24,
	0x94, 0x56, 0x01, 0xb5, 0x45, 0x3f, 0x9b, 0x37, 0xd8, 0xcc, 0x69, 0x0f, 0x1c, 0x6b, 0x75, 0x18,
	0x47, 0x67, 0x8c, 0xad, 0xe4, 0xf7, 0xcf, 0x62, 0xff, 0xdc, 0x6c, 0xc8, 0x7b, 0x91, 0xe0, 0x94,
	0xe0, 0x28, 0xb2, 0x0a, 0xbb, 0xc6, 0x9e, 0x81, 0x3a, 0x4c, 0x5c, 0x3c, 0x00, 0x24, 0x1b, 0xd8,
	0xcc, 0x83, 0x30, 0x75, 0x2b, 0x56, 0x61, 0xcf, 0x40, 0x5d, 0xa8, 0x25, 0xbb, 0x37, 0xba, 0xa1,
	0x07, 0x21, 0xf3, 0x23, 0xc2, 0xbc, 0x9e, 0x77, 0x24, 0x50, 0x7e, 0x0c, 0x75, 0xed, 0xd7, 0x00,
	0xba, 0x99, 0x48, 0xce, 0xff, 0x46, 0x30, 0x37, 0xc4, 0xa1, 0xe4, 0x1e, 0x85, 0x78, 0xcc, 0x63,
	0x57, 0x3d, 0xa2, 0x41, 0xc8, 0x21, 0xa4, 0xf1, 0xd3, 0x03, 0x64, 0x15, 0xd0, 0x63, 0xd1, 0xc0,
	0x65, 0xee, 0x52, 0xb1, 0xfc, 0x4e, 0xcd, 0x15, 0xea, 0xaf, 0x59, 0x63, 0x9b, 0xd3, 0xc8, 0x7d,
	0x52, 0x56, 0x01, 0x3d, 0x97, 0xd9, 0x09, 0x4e, 0x23, 0xa4, 0x59, 0x65, 0xb4, 0x82, 0xdf, 0xcc,
	0xb2, 0xd3, 0x30, 0x3e, 0x86, 0x3a, 0xdb, 0xa5, 0x82, 0x88, 0x2f, 0xb8, 0x68, 0x43, 0xfb, 0x91,
	0x95, 0x8d, 0xbc, 0xba, 0xce, 0x53, 0xa8, 0x6b, 0x1b, 0x31, 0x6a, 0x89, 0xd3, 0xf9, 0x25, 0x79,
	0x56, 0xaf, 0x0d, 0x75, 0xbe, 0xac, 0x8a, 0x1a, 0xd5, 0x6e, 0xd5, 0x4c, 0x5d, 0xea, 0x4f, 0xee,
	0x29, 0xd4, 0x7b, 0x5e, 0x34, 0x0e, 0x2e, 0x30, 0x61, 0x55, 0x22, 0xfd, 0x68, 0xac, 0x05, 0x7e,
	0xfe, 0x07, 0xcb, 0xb2, 0x1d, 0x67, 0x5f, 0x2a, 0x9a, 0x6f, 0xd5, 0x1c, 0xd5, 0x0a, 0x8f, 0xb5,
	0x52, 0x49, 0x61, 0xe5, 0xcb, 0x77, 0xa1, 0x99, 0xb3, 0x72, 0x6b, 0x6a, 0xdb, 0x57, 0xef, 0xe5,
	0x56, 0x01, 0xbd, 0x84, 0x66, 0xce, 0xde, 0x8b, 0x76, 0xde, 0xb5, 0x12, 0xcf, 0x5e, 0xf4, 0x25,
	0x6c, 0xe6, 0xad, 0x38, 0xd9, 0x5b, 0xa7, 0xab, 0x5b, 0xfe, 0x2e, 0x64, 0x15, 0xd0, 0x03, 0x68,
	0xa8, 0x33, 0x71, 0xb2, 0xf8, 0x29, 0x3f, 0x84, 0xf5, 0x1e, 0x26, 0x7f, 0x51, 0x78, 0x17, 0xca,
	0x7c, 0x57, 0xcc, 0x02, 0x5a, 0x9f, 0x5d, 0xaf, 0xad, 0x02, 0x7a, 0x02, 0x90, 0x0e, 0x21, 0x74,
	0x5d, 0xb5, 0x9f, 0x99, 0xb1, 0x64, 0x26, 0x9e, 0xac, 0x02, 0xfa, 0x0f, 0x40, 0xba, 0x24, 0x2e,
	0xc4, 0x30, 0xaa, 0xf0, 0x7f, 0x45, 0xfe, 0xff, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcb, 0xa8,
	0x90, 0xfe, 0x83, 0x11, 0x00, 0x00,
}
