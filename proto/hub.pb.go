// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hub.proto

package sonm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ListReply struct {
	Info map[string]*ListReply_ListValue `protobuf:"bytes,1,rep,name=info" json:"info,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ListReply) Reset()                    { *m = ListReply{} }
func (m *ListReply) String() string            { return proto.CompactTextString(m) }
func (*ListReply) ProtoMessage()               {}
func (*ListReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *ListReply) GetInfo() map[string]*ListReply_ListValue {
	if m != nil {
		return m.Info
	}
	return nil
}

type ListReply_ListValue struct {
	Values []string `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
}

func (m *ListReply_ListValue) Reset()                    { *m = ListReply_ListValue{} }
func (m *ListReply_ListValue) String() string            { return proto.CompactTextString(m) }
func (*ListReply_ListValue) ProtoMessage()               {}
func (*ListReply_ListValue) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0, 0} }

func (m *ListReply_ListValue) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

type TaskRequirements struct {
	// How much resources consumes a task. This is used both for scheduling and for cgroups configuration.
	Resources *TaskResourceRequirements `protobuf:"bytes,1,opt,name=resources" json:"resources,omitempty"`
	// Optional miner ID restrictions (currently IP:port), that are allowed to start a task.
	Miners []string `protobuf:"bytes,2,rep,name=miners" json:"miners,omitempty"`
}

func (m *TaskRequirements) Reset()                    { *m = TaskRequirements{} }
func (m *TaskRequirements) String() string            { return proto.CompactTextString(m) }
func (*TaskRequirements) ProtoMessage()               {}
func (*TaskRequirements) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *TaskRequirements) GetResources() *TaskResourceRequirements {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *TaskRequirements) GetMiners() []string {
	if m != nil {
		return m.Miners
	}
	return nil
}

type HubStartTaskRequest struct {
	Requirements  *TaskRequirements `protobuf:"bytes,1,opt,name=requirements" json:"requirements,omitempty"`
	Registry      string            `protobuf:"bytes,2,opt,name=registry" json:"registry,omitempty"`
	Image         string            `protobuf:"bytes,3,opt,name=image" json:"image,omitempty"`
	Auth          string            `protobuf:"bytes,4,opt,name=auth" json:"auth,omitempty"`
	PublicKeyData string            `protobuf:"bytes,5,opt,name=PublicKeyData" json:"PublicKeyData,omitempty"`
	CommitOnStop  bool              `protobuf:"varint,6,opt,name=commitOnStop" json:"commitOnStop,omitempty"`
	Env           map[string]string `protobuf:"bytes,7,rep,name=env" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *HubStartTaskRequest) Reset()                    { *m = HubStartTaskRequest{} }
func (m *HubStartTaskRequest) String() string            { return proto.CompactTextString(m) }
func (*HubStartTaskRequest) ProtoMessage()               {}
func (*HubStartTaskRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *HubStartTaskRequest) GetRequirements() *TaskRequirements {
	if m != nil {
		return m.Requirements
	}
	return nil
}

func (m *HubStartTaskRequest) GetRegistry() string {
	if m != nil {
		return m.Registry
	}
	return ""
}

func (m *HubStartTaskRequest) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *HubStartTaskRequest) GetAuth() string {
	if m != nil {
		return m.Auth
	}
	return ""
}

func (m *HubStartTaskRequest) GetPublicKeyData() string {
	if m != nil {
		return m.PublicKeyData
	}
	return ""
}

func (m *HubStartTaskRequest) GetCommitOnStop() bool {
	if m != nil {
		return m.CommitOnStop
	}
	return false
}

func (m *HubStartTaskRequest) GetEnv() map[string]string {
	if m != nil {
		return m.Env
	}
	return nil
}

type HubStartTaskReply struct {
	Id       string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Endpoint []string `protobuf:"bytes,2,rep,name=endpoint" json:"endpoint,omitempty"`
}

func (m *HubStartTaskReply) Reset()                    { *m = HubStartTaskReply{} }
func (m *HubStartTaskReply) String() string            { return proto.CompactTextString(m) }
func (*HubStartTaskReply) ProtoMessage()               {}
func (*HubStartTaskReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *HubStartTaskReply) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *HubStartTaskReply) GetEndpoint() []string {
	if m != nil {
		return m.Endpoint
	}
	return nil
}

type HubStatusReply struct {
	MinerCount uint64 `protobuf:"varint,1,opt,name=minerCount" json:"minerCount,omitempty"`
	Uptime     uint64 `protobuf:"varint,2,opt,name=uptime" json:"uptime,omitempty"`
	Version    string `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
	Platform   string `protobuf:"bytes,4,opt,name=platform" json:"platform,omitempty"`
	EthAddr    string `protobuf:"bytes,5,opt,name=ethAddr" json:"ethAddr,omitempty"`
}

func (m *HubStatusReply) Reset()                    { *m = HubStatusReply{} }
func (m *HubStatusReply) String() string            { return proto.CompactTextString(m) }
func (*HubStatusReply) ProtoMessage()               {}
func (*HubStatusReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *HubStatusReply) GetMinerCount() uint64 {
	if m != nil {
		return m.MinerCount
	}
	return 0
}

func (m *HubStatusReply) GetUptime() uint64 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *HubStatusReply) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *HubStatusReply) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *HubStatusReply) GetEthAddr() string {
	if m != nil {
		return m.EthAddr
	}
	return ""
}

type DealRequest struct {
	BidId string `protobuf:"bytes,1,opt,name=bidId" json:"bidId,omitempty"`
	AskId string `protobuf:"bytes,2,opt,name=askId" json:"askId,omitempty"`
	Order *Order `protobuf:"bytes,3,opt,name=order" json:"order,omitempty"`
}

func (m *DealRequest) Reset()                    { *m = DealRequest{} }
func (m *DealRequest) String() string            { return proto.CompactTextString(m) }
func (*DealRequest) ProtoMessage()               {}
func (*DealRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *DealRequest) GetBidId() string {
	if m != nil {
		return m.BidId
	}
	return ""
}

func (m *DealRequest) GetAskId() string {
	if m != nil {
		return m.AskId
	}
	return ""
}

func (m *DealRequest) GetOrder() *Order {
	if m != nil {
		return m.Order
	}
	return nil
}

type GetDevicePropertiesReply struct {
	Properties map[string]float64 `protobuf:"bytes,1,rep,name=properties" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
}

func (m *GetDevicePropertiesReply) Reset()                    { *m = GetDevicePropertiesReply{} }
func (m *GetDevicePropertiesReply) String() string            { return proto.CompactTextString(m) }
func (*GetDevicePropertiesReply) ProtoMessage()               {}
func (*GetDevicePropertiesReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *GetDevicePropertiesReply) GetProperties() map[string]float64 {
	if m != nil {
		return m.Properties
	}
	return nil
}

type SetDevicePropertiesRequest struct {
	// Device identifier.
	ID string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	// Its properties.
	Properties map[string]float64 `protobuf:"bytes,2,rep,name=properties" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
}

func (m *SetDevicePropertiesRequest) Reset()                    { *m = SetDevicePropertiesRequest{} }
func (m *SetDevicePropertiesRequest) String() string            { return proto.CompactTextString(m) }
func (*SetDevicePropertiesRequest) ProtoMessage()               {}
func (*SetDevicePropertiesRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *SetDevicePropertiesRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *SetDevicePropertiesRequest) GetProperties() map[string]float64 {
	if m != nil {
		return m.Properties
	}
	return nil
}

type SlotsReply struct {
	Slot []*Slot `protobuf:"bytes,1,rep,name=slot" json:"slot,omitempty"`
}

func (m *SlotsReply) Reset()                    { *m = SlotsReply{} }
func (m *SlotsReply) String() string            { return proto.CompactTextString(m) }
func (*SlotsReply) ProtoMessage()               {}
func (*SlotsReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

func (m *SlotsReply) GetSlot() []*Slot {
	if m != nil {
		return m.Slot
	}
	return nil
}

type GetAllSlotsReply struct {
	Slots map[string]*GetAllSlotsReply_SlotList `protobuf:"bytes,1,rep,name=slots" json:"slots,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *GetAllSlotsReply) Reset()                    { *m = GetAllSlotsReply{} }
func (m *GetAllSlotsReply) String() string            { return proto.CompactTextString(m) }
func (*GetAllSlotsReply) ProtoMessage()               {}
func (*GetAllSlotsReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{9} }

func (m *GetAllSlotsReply) GetSlots() map[string]*GetAllSlotsReply_SlotList {
	if m != nil {
		return m.Slots
	}
	return nil
}

type GetAllSlotsReply_SlotList struct {
	Slot []*Slot `protobuf:"bytes,1,rep,name=slot" json:"slot,omitempty"`
}

func (m *GetAllSlotsReply_SlotList) Reset()                    { *m = GetAllSlotsReply_SlotList{} }
func (m *GetAllSlotsReply_SlotList) String() string            { return proto.CompactTextString(m) }
func (*GetAllSlotsReply_SlotList) ProtoMessage()               {}
func (*GetAllSlotsReply_SlotList) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{9, 0} }

func (m *GetAllSlotsReply_SlotList) GetSlot() []*Slot {
	if m != nil {
		return m.Slot
	}
	return nil
}

type AddSlotRequest struct {
	// Miner ID.
	ID string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	// Slot destription.
	Slot *Slot `protobuf:"bytes,2,opt,name=slot" json:"slot,omitempty"`
}

func (m *AddSlotRequest) Reset()                    { *m = AddSlotRequest{} }
func (m *AddSlotRequest) String() string            { return proto.CompactTextString(m) }
func (*AddSlotRequest) ProtoMessage()               {}
func (*AddSlotRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{10} }

func (m *AddSlotRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *AddSlotRequest) GetSlot() *Slot {
	if m != nil {
		return m.Slot
	}
	return nil
}

type RemoveSlotRequest struct {
	ID   string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Slot *Slot  `protobuf:"bytes,2,opt,name=slot" json:"slot,omitempty"`
}

func (m *RemoveSlotRequest) Reset()                    { *m = RemoveSlotRequest{} }
func (m *RemoveSlotRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveSlotRequest) ProtoMessage()               {}
func (*RemoveSlotRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{11} }

func (m *RemoveSlotRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *RemoveSlotRequest) GetSlot() *Slot {
	if m != nil {
		return m.Slot
	}
	return nil
}

type GetRegistredWorkersReply struct {
	Ids []*ID `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
}

func (m *GetRegistredWorkersReply) Reset()                    { *m = GetRegistredWorkersReply{} }
func (m *GetRegistredWorkersReply) String() string            { return proto.CompactTextString(m) }
func (*GetRegistredWorkersReply) ProtoMessage()               {}
func (*GetRegistredWorkersReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{12} }

func (m *GetRegistredWorkersReply) GetIds() []*ID {
	if m != nil {
		return m.Ids
	}
	return nil
}

type TaskListReply struct {
	Info map[string]*TaskListReply_TaskInfo `protobuf:"bytes,1,rep,name=info" json:"info,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *TaskListReply) Reset()                    { *m = TaskListReply{} }
func (m *TaskListReply) String() string            { return proto.CompactTextString(m) }
func (*TaskListReply) ProtoMessage()               {}
func (*TaskListReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{13} }

func (m *TaskListReply) GetInfo() map[string]*TaskListReply_TaskInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type TaskListReply_TaskInfo struct {
	Tasks map[string]*TaskStatusReply `protobuf:"bytes,1,rep,name=tasks" json:"tasks,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *TaskListReply_TaskInfo) Reset()                    { *m = TaskListReply_TaskInfo{} }
func (m *TaskListReply_TaskInfo) String() string            { return proto.CompactTextString(m) }
func (*TaskListReply_TaskInfo) ProtoMessage()               {}
func (*TaskListReply_TaskInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{13, 0} }

func (m *TaskListReply_TaskInfo) GetTasks() map[string]*TaskStatusReply {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type CPUDeviceInfo struct {
	// Miners where such device exists.
	Miners []string `protobuf:"bytes,1,rep,name=miners" json:"miners,omitempty"`
	// Its properties.
	Device *CPUDevice `protobuf:"bytes,2,opt,name=device" json:"device,omitempty"`
}

func (m *CPUDeviceInfo) Reset()                    { *m = CPUDeviceInfo{} }
func (m *CPUDeviceInfo) String() string            { return proto.CompactTextString(m) }
func (*CPUDeviceInfo) ProtoMessage()               {}
func (*CPUDeviceInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{14} }

func (m *CPUDeviceInfo) GetMiners() []string {
	if m != nil {
		return m.Miners
	}
	return nil
}

func (m *CPUDeviceInfo) GetDevice() *CPUDevice {
	if m != nil {
		return m.Device
	}
	return nil
}

type GPUDeviceInfo struct {
	// Miners where such device exists.
	Miners []string `protobuf:"bytes,1,rep,name=miners" json:"miners,omitempty"`
	// Its properties.
	Device *GPUDevice `protobuf:"bytes,2,opt,name=device" json:"device,omitempty"`
}

func (m *GPUDeviceInfo) Reset()                    { *m = GPUDeviceInfo{} }
func (m *GPUDeviceInfo) String() string            { return proto.CompactTextString(m) }
func (*GPUDeviceInfo) ProtoMessage()               {}
func (*GPUDeviceInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{15} }

func (m *GPUDeviceInfo) GetMiners() []string {
	if m != nil {
		return m.Miners
	}
	return nil
}

func (m *GPUDeviceInfo) GetDevice() *GPUDevice {
	if m != nil {
		return m.Device
	}
	return nil
}

type DevicesReply struct {
	// CPU unique ID -> Info.
	CPUs map[string]*CPUDeviceInfo `protobuf:"bytes,1,rep,name=CPUs" json:"CPUs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// GPU unique ID -> Info.
	GPUs map[string]*GPUDeviceInfo `protobuf:"bytes,2,rep,name=GPUs" json:"GPUs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *DevicesReply) Reset()                    { *m = DevicesReply{} }
func (m *DevicesReply) String() string            { return proto.CompactTextString(m) }
func (*DevicesReply) ProtoMessage()               {}
func (*DevicesReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{16} }

func (m *DevicesReply) GetCPUs() map[string]*CPUDeviceInfo {
	if m != nil {
		return m.CPUs
	}
	return nil
}

func (m *DevicesReply) GetGPUs() map[string]*GPUDeviceInfo {
	if m != nil {
		return m.GPUs
	}
	return nil
}

func init() {
	proto.RegisterType((*ListReply)(nil), "sonm.ListReply")
	proto.RegisterType((*ListReply_ListValue)(nil), "sonm.ListReply.ListValue")
	proto.RegisterType((*TaskRequirements)(nil), "sonm.TaskRequirements")
	proto.RegisterType((*HubStartTaskRequest)(nil), "sonm.HubStartTaskRequest")
	proto.RegisterType((*HubStartTaskReply)(nil), "sonm.HubStartTaskReply")
	proto.RegisterType((*HubStatusReply)(nil), "sonm.HubStatusReply")
	proto.RegisterType((*DealRequest)(nil), "sonm.DealRequest")
	proto.RegisterType((*GetDevicePropertiesReply)(nil), "sonm.GetDevicePropertiesReply")
	proto.RegisterType((*SetDevicePropertiesRequest)(nil), "sonm.SetDevicePropertiesRequest")
	proto.RegisterType((*SlotsReply)(nil), "sonm.SlotsReply")
	proto.RegisterType((*GetAllSlotsReply)(nil), "sonm.GetAllSlotsReply")
	proto.RegisterType((*GetAllSlotsReply_SlotList)(nil), "sonm.GetAllSlotsReply.SlotList")
	proto.RegisterType((*AddSlotRequest)(nil), "sonm.AddSlotRequest")
	proto.RegisterType((*RemoveSlotRequest)(nil), "sonm.RemoveSlotRequest")
	proto.RegisterType((*GetRegistredWorkersReply)(nil), "sonm.GetRegistredWorkersReply")
	proto.RegisterType((*TaskListReply)(nil), "sonm.TaskListReply")
	proto.RegisterType((*TaskListReply_TaskInfo)(nil), "sonm.TaskListReply.TaskInfo")
	proto.RegisterType((*CPUDeviceInfo)(nil), "sonm.CPUDeviceInfo")
	proto.RegisterType((*GPUDeviceInfo)(nil), "sonm.GPUDeviceInfo")
	proto.RegisterType((*DevicesReply)(nil), "sonm.DevicesReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Hub service

type HubClient interface {
	// Ping should be used as Healthcheck for Hub
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PingReply, error)
	// Status returns internal hub statistic
	Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HubStatusReply, error)
	// List returns a list for connected Workers
	List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListReply, error)
	// Info returns info about given Worker
	Info(ctx context.Context, in *ID, opts ...grpc.CallOption) (*InfoReply, error)
	// TaskList returns info about all Tasks on all Workers on the Hub
	TaskList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TaskListReply, error)
	StartTask(ctx context.Context, in *HubStartTaskRequest, opts ...grpc.CallOption) (*HubStartTaskReply, error)
	StopTask(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error)
	TaskStatus(ctx context.Context, in *ID, opts ...grpc.CallOption) (*TaskStatusReply, error)
	MinerStatus(ctx context.Context, in *ID, opts ...grpc.CallOption) (*StatusMapReply, error)
	TaskLogs(ctx context.Context, in *TaskLogsRequest, opts ...grpc.CallOption) (Hub_TaskLogsClient, error)
	ProposeDeal(ctx context.Context, in *DealRequest, opts ...grpc.CallOption) (*Empty, error)
	DiscoverHub(ctx context.Context, in *DiscoverHubRequest, opts ...grpc.CallOption) (*Empty, error)
	// Devices returns list of all available devices that this Hub awares of
	// with tieir full description.
	Devices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DevicesReply, error)
	// GetDeviceProperties allows to obtain previously assigned resource
	// properties for a given device.
	// TODO: Just string?
	GetDeviceProperties(ctx context.Context, in *ID, opts ...grpc.CallOption) (*GetDevicePropertiesReply, error)
	// SetDeviceProperties method allows to specify additional resource
	// properties for a device specified by its ID.
	// This may include GPU's capability to execute a well-known work such as
	// Ethereum mining etc.
	// Note, that this method overrides all previously specified properties.
	SetDeviceProperties(ctx context.Context, in *SetDevicePropertiesRequest, opts ...grpc.CallOption) (*Empty, error)
	// GetRegistredWorkers returns a list of Worker IDs that
	// allowed to connet to the Hub
	GetRegistredWorkers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetRegistredWorkersReply, error)
	// RegisterWorker allows Worker with given ID
	// to connect to the Hub
	RegisterWorker(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error)
	// RegisterWorkers deny Worker with given ID
	// to connect to the Hub
	UnregisterWorker(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error)
	// GetSlots allows to obtain previously assigned slots for the Hub.
	Slots(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SlotsReply, error)
	// AddSlot allows to assign a new slot.
	// This method can fail if either there are no such resources found or it
	// has been previourly assigned.
	InsertSlot(ctx context.Context, in *Slot, opts ...grpc.CallOption) (*Empty, error)
	// RemoveSlot removes the speified slot if fully matches.
	RemoveSlot(ctx context.Context, in *Slot, opts ...grpc.CallOption) (*Empty, error)
}

type hubClient struct {
	cc *grpc.ClientConn
}

func NewHubClient(cc *grpc.ClientConn) HubClient {
	return &hubClient{cc}
}

func (c *hubClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := grpc.Invoke(ctx, "/sonm.Hub/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HubStatusReply, error) {
	out := new(HubStatusReply)
	err := grpc.Invoke(ctx, "/sonm.Hub/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListReply, error) {
	out := new(ListReply)
	err := grpc.Invoke(ctx, "/sonm.Hub/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) Info(ctx context.Context, in *ID, opts ...grpc.CallOption) (*InfoReply, error) {
	out := new(InfoReply)
	err := grpc.Invoke(ctx, "/sonm.Hub/Info", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) TaskList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TaskListReply, error) {
	out := new(TaskListReply)
	err := grpc.Invoke(ctx, "/sonm.Hub/TaskList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) StartTask(ctx context.Context, in *HubStartTaskRequest, opts ...grpc.CallOption) (*HubStartTaskReply, error) {
	out := new(HubStartTaskReply)
	err := grpc.Invoke(ctx, "/sonm.Hub/StartTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) StopTask(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.Hub/StopTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) TaskStatus(ctx context.Context, in *ID, opts ...grpc.CallOption) (*TaskStatusReply, error) {
	out := new(TaskStatusReply)
	err := grpc.Invoke(ctx, "/sonm.Hub/TaskStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) MinerStatus(ctx context.Context, in *ID, opts ...grpc.CallOption) (*StatusMapReply, error) {
	out := new(StatusMapReply)
	err := grpc.Invoke(ctx, "/sonm.Hub/MinerStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) TaskLogs(ctx context.Context, in *TaskLogsRequest, opts ...grpc.CallOption) (Hub_TaskLogsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Hub_serviceDesc.Streams[0], c.cc, "/sonm.Hub/TaskLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &hubTaskLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Hub_TaskLogsClient interface {
	Recv() (*TaskLogsChunk, error)
	grpc.ClientStream
}

type hubTaskLogsClient struct {
	grpc.ClientStream
}

func (x *hubTaskLogsClient) Recv() (*TaskLogsChunk, error) {
	m := new(TaskLogsChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hubClient) ProposeDeal(ctx context.Context, in *DealRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.Hub/ProposeDeal", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) DiscoverHub(ctx context.Context, in *DiscoverHubRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.Hub/DiscoverHub", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) Devices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DevicesReply, error) {
	out := new(DevicesReply)
	err := grpc.Invoke(ctx, "/sonm.Hub/Devices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) GetDeviceProperties(ctx context.Context, in *ID, opts ...grpc.CallOption) (*GetDevicePropertiesReply, error) {
	out := new(GetDevicePropertiesReply)
	err := grpc.Invoke(ctx, "/sonm.Hub/GetDeviceProperties", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) SetDeviceProperties(ctx context.Context, in *SetDevicePropertiesRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.Hub/SetDeviceProperties", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) GetRegistredWorkers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetRegistredWorkersReply, error) {
	out := new(GetRegistredWorkersReply)
	err := grpc.Invoke(ctx, "/sonm.Hub/GetRegistredWorkers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) RegisterWorker(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.Hub/RegisterWorker", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) UnregisterWorker(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.Hub/UnregisterWorker", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) Slots(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SlotsReply, error) {
	out := new(SlotsReply)
	err := grpc.Invoke(ctx, "/sonm.Hub/Slots", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) InsertSlot(ctx context.Context, in *Slot, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.Hub/InsertSlot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) RemoveSlot(ctx context.Context, in *Slot, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.Hub/RemoveSlot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Hub service

type HubServer interface {
	// Ping should be used as Healthcheck for Hub
	Ping(context.Context, *Empty) (*PingReply, error)
	// Status returns internal hub statistic
	Status(context.Context, *Empty) (*HubStatusReply, error)
	// List returns a list for connected Workers
	List(context.Context, *Empty) (*ListReply, error)
	// Info returns info about given Worker
	Info(context.Context, *ID) (*InfoReply, error)
	// TaskList returns info about all Tasks on all Workers on the Hub
	TaskList(context.Context, *Empty) (*TaskListReply, error)
	StartTask(context.Context, *HubStartTaskRequest) (*HubStartTaskReply, error)
	StopTask(context.Context, *ID) (*Empty, error)
	TaskStatus(context.Context, *ID) (*TaskStatusReply, error)
	MinerStatus(context.Context, *ID) (*StatusMapReply, error)
	TaskLogs(*TaskLogsRequest, Hub_TaskLogsServer) error
	ProposeDeal(context.Context, *DealRequest) (*Empty, error)
	DiscoverHub(context.Context, *DiscoverHubRequest) (*Empty, error)
	// Devices returns list of all available devices that this Hub awares of
	// with tieir full description.
	Devices(context.Context, *Empty) (*DevicesReply, error)
	// GetDeviceProperties allows to obtain previously assigned resource
	// properties for a given device.
	// TODO: Just string?
	GetDeviceProperties(context.Context, *ID) (*GetDevicePropertiesReply, error)
	// SetDeviceProperties method allows to specify additional resource
	// properties for a device specified by its ID.
	// This may include GPU's capability to execute a well-known work such as
	// Ethereum mining etc.
	// Note, that this method overrides all previously specified properties.
	SetDeviceProperties(context.Context, *SetDevicePropertiesRequest) (*Empty, error)
	// GetRegistredWorkers returns a list of Worker IDs that
	// allowed to connet to the Hub
	GetRegistredWorkers(context.Context, *Empty) (*GetRegistredWorkersReply, error)
	// RegisterWorker allows Worker with given ID
	// to connect to the Hub
	RegisterWorker(context.Context, *ID) (*Empty, error)
	// RegisterWorkers deny Worker with given ID
	// to connect to the Hub
	UnregisterWorker(context.Context, *ID) (*Empty, error)
	// GetSlots allows to obtain previously assigned slots for the Hub.
	Slots(context.Context, *Empty) (*SlotsReply, error)
	// AddSlot allows to assign a new slot.
	// This method can fail if either there are no such resources found or it
	// has been previourly assigned.
	InsertSlot(context.Context, *Slot) (*Empty, error)
	// RemoveSlot removes the speified slot if fully matches.
	RemoveSlot(context.Context, *Slot) (*Empty, error)
}

func RegisterHubServer(s *grpc.Server, srv HubServer) {
	s.RegisterService(&_Hub_serviceDesc, srv)
}

func _Hub_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).Status(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).List(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).Info(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_TaskList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).TaskList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/TaskList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).TaskList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_StartTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HubStartTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).StartTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/StartTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).StartTask(ctx, req.(*HubStartTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_StopTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).StopTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/StopTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).StopTask(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_TaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).TaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/TaskStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).TaskStatus(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_MinerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).MinerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/MinerStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).MinerStatus(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_TaskLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TaskLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HubServer).TaskLogs(m, &hubTaskLogsServer{stream})
}

type Hub_TaskLogsServer interface {
	Send(*TaskLogsChunk) error
	grpc.ServerStream
}

type hubTaskLogsServer struct {
	grpc.ServerStream
}

func (x *hubTaskLogsServer) Send(m *TaskLogsChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _Hub_ProposeDeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).ProposeDeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/ProposeDeal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).ProposeDeal(ctx, req.(*DealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_DiscoverHub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverHubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).DiscoverHub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/DiscoverHub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).DiscoverHub(ctx, req.(*DiscoverHubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_Devices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).Devices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/Devices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).Devices(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_GetDeviceProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).GetDeviceProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/GetDeviceProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).GetDeviceProperties(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_SetDeviceProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDevicePropertiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).SetDeviceProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/SetDeviceProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).SetDeviceProperties(ctx, req.(*SetDevicePropertiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_GetRegistredWorkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).GetRegistredWorkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/GetRegistredWorkers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).GetRegistredWorkers(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_RegisterWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).RegisterWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/RegisterWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).RegisterWorker(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_UnregisterWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).UnregisterWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/UnregisterWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).UnregisterWorker(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_Slots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).Slots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/Slots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).Slots(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_InsertSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Slot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).InsertSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/InsertSlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).InsertSlot(ctx, req.(*Slot))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_RemoveSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Slot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).RemoveSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/RemoveSlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).RemoveSlot(ctx, req.(*Slot))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hub_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sonm.Hub",
	HandlerType: (*HubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Hub_Ping_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Hub_Status_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Hub_List_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _Hub_Info_Handler,
		},
		{
			MethodName: "TaskList",
			Handler:    _Hub_TaskList_Handler,
		},
		{
			MethodName: "StartTask",
			Handler:    _Hub_StartTask_Handler,
		},
		{
			MethodName: "StopTask",
			Handler:    _Hub_StopTask_Handler,
		},
		{
			MethodName: "TaskStatus",
			Handler:    _Hub_TaskStatus_Handler,
		},
		{
			MethodName: "MinerStatus",
			Handler:    _Hub_MinerStatus_Handler,
		},
		{
			MethodName: "ProposeDeal",
			Handler:    _Hub_ProposeDeal_Handler,
		},
		{
			MethodName: "DiscoverHub",
			Handler:    _Hub_DiscoverHub_Handler,
		},
		{
			MethodName: "Devices",
			Handler:    _Hub_Devices_Handler,
		},
		{
			MethodName: "GetDeviceProperties",
			Handler:    _Hub_GetDeviceProperties_Handler,
		},
		{
			MethodName: "SetDeviceProperties",
			Handler:    _Hub_SetDeviceProperties_Handler,
		},
		{
			MethodName: "GetRegistredWorkers",
			Handler:    _Hub_GetRegistredWorkers_Handler,
		},
		{
			MethodName: "RegisterWorker",
			Handler:    _Hub_RegisterWorker_Handler,
		},
		{
			MethodName: "UnregisterWorker",
			Handler:    _Hub_UnregisterWorker_Handler,
		},
		{
			MethodName: "Slots",
			Handler:    _Hub_Slots_Handler,
		},
		{
			MethodName: "InsertSlot",
			Handler:    _Hub_InsertSlot_Handler,
		},
		{
			MethodName: "RemoveSlot",
			Handler:    _Hub_RemoveSlot_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TaskLogs",
			Handler:       _Hub_TaskLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "hub.proto",
}

func init() { proto.RegisterFile("hub.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 1229 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0x6d, 0x6f, 0xe3, 0x44,
	0x10, 0x8e, 0xf3, 0xd2, 0x26, 0x93, 0xbe, 0x6e, 0xca, 0xe1, 0xb3, 0xa0, 0xf4, 0x7c, 0x88, 0xf6,
	0xb8, 0xbb, 0x5c, 0x29, 0x50, 0x50, 0xc5, 0x09, 0xaa, 0xa6, 0xe4, 0x22, 0xee, 0x68, 0xe4, 0x52,
	0x10, 0x12, 0x5f, 0x9c, 0x78, 0xdb, 0xae, 0x92, 0x78, 0xcd, 0x7a, 0x1d, 0x29, 0x7f, 0x82, 0xcf,
	0x08, 0x7e, 0x01, 0x9f, 0x91, 0xf8, 0xc6, 0x6f, 0x40, 0xe2, 0x17, 0xa1, 0x7d, 0xf1, 0x5b, 0xea,
	0xb4, 0xa0, 0x13, 0xdf, 0x3c, 0xb3, 0x33, 0xcf, 0xcc, 0xce, 0x33, 0xbb, 0xb3, 0x86, 0xc6, 0x75,
	0x34, 0x68, 0x07, 0x8c, 0x72, 0x8a, 0xaa, 0x21, 0xf5, 0x27, 0x56, 0x63, 0x40, 0x3c, 0xa5, 0xb0,
	0xd0, 0xd0, 0x0d, 0xdc, 0x01, 0x19, 0x13, 0x4e, 0x70, 0xa8, 0x75, 0xeb, 0xc4, 0x17, 0x66, 0x3e,
	0x71, 0x95, 0xc2, 0xfe, 0xdd, 0x80, 0xc6, 0x4b, 0x12, 0x72, 0x07, 0x07, 0xe3, 0x19, 0x7a, 0x0a,
	0x55, 0xe2, 0x5f, 0x52, 0xd3, 0xd8, 0xa9, 0xec, 0x35, 0x0f, 0xee, 0xb7, 0x85, 0x6d, 0x3b, 0x59,
	0x6e, 0xf7, 0xfc, 0x4b, 0x7a, 0xea, 0x73, 0x36, 0x73, 0xa4, 0x99, 0xf5, 0x50, 0xf9, 0x7e, 0xeb,
	0x8e, 0x23, 0x8c, 0xee, 0xc1, 0xd2, 0x54, 0x7c, 0x84, 0xd2, 0xbb, 0xe1, 0x68, 0xc9, 0x72, 0xa0,
	0x91, 0xf8, 0xa1, 0x0d, 0xa8, 0x8c, 0xf0, 0xcc, 0x34, 0x76, 0x8c, 0xbd, 0x86, 0x23, 0x3e, 0xd1,
	0x33, 0xa8, 0x49, 0x43, 0xb3, 0xbc, 0x63, 0x14, 0xc5, 0x4c, 0x02, 0x38, 0xca, 0xee, 0xa8, 0xfc,
	0xa9, 0x61, 0x5f, 0xc3, 0xc6, 0x37, 0x6e, 0x38, 0x72, 0xf0, 0x8f, 0x11, 0x61, 0x78, 0x82, 0x7d,
	0x1e, 0xa2, 0xcf, 0xa0, 0xc1, 0x70, 0x48, 0x23, 0x36, 0x94, 0x29, 0x08, 0xb0, 0x6d, 0x05, 0xa6,
	0x4c, 0xd5, 0x52, 0xd6, 0xc5, 0x49, 0x1d, 0x44, 0xf6, 0x13, 0xe2, 0x63, 0x16, 0x9a, 0x65, 0x95,
	0xbd, 0x92, 0xec, 0xbf, 0xca, 0xd0, 0x7a, 0x11, 0x0d, 0xce, 0xb9, 0xcb, 0x78, 0x1c, 0x12, 0x87,
	0x1c, 0x1d, 0xc1, 0x0a, 0xcb, 0x40, 0xe9, 0x80, 0xf7, 0xb2, 0x01, 0x33, 0x81, 0x72, 0xb6, 0xc8,
	0x82, 0x3a, 0xc3, 0x57, 0x24, 0xe4, 0x6c, 0x26, 0x77, 0xdd, 0x70, 0x12, 0x19, 0x6d, 0x41, 0x8d,
	0x4c, 0xdc, 0x2b, 0x6c, 0x56, 0xe4, 0x82, 0x12, 0x10, 0x82, 0xaa, 0x1b, 0xf1, 0x6b, 0xb3, 0x2a,
	0x95, 0xf2, 0x1b, 0xbd, 0x0b, 0xab, 0xfd, 0x68, 0x30, 0x26, 0xc3, 0xaf, 0xf0, 0xac, 0xe3, 0x72,
	0xd7, 0xac, 0xc9, 0xc5, 0xbc, 0x12, 0xd9, 0xb0, 0x32, 0xa4, 0x93, 0x09, 0xe1, 0x67, 0xfe, 0x39,
	0xa7, 0x81, 0xb9, 0xb4, 0x63, 0xec, 0xd5, 0x9d, 0x9c, 0x0e, 0x7d, 0x04, 0x15, 0xec, 0x4f, 0xcd,
	0x65, 0x49, 0xba, 0xad, 0xb6, 0x50, 0xb0, 0xe7, 0xf6, 0xa9, 0x3f, 0x55, 0xec, 0x0b, 0x73, 0xeb,
	0x10, 0xea, 0xb1, 0xa2, 0x80, 0xd6, 0xad, 0x2c, 0xad, 0x8d, 0x2c, 0x77, 0x9f, 0xc3, 0x66, 0x1e,
	0x5c, 0x34, 0xde, 0x1a, 0x94, 0x89, 0xa7, 0xfd, 0xcb, 0xc4, 0x13, 0x25, 0xc2, 0xbe, 0x17, 0x50,
	0xe2, 0x73, 0x4d, 0x48, 0x22, 0xdb, 0x3f, 0x1b, 0xb0, 0xa6, 0x10, 0x78, 0x14, 0x2a, 0xf7, 0x6d,
	0x00, 0xc9, 0xd7, 0x09, 0x8d, 0x7c, 0x2e, 0x61, 0xaa, 0x4e, 0x46, 0x23, 0xd8, 0x8d, 0x02, 0x4e,
	0x26, 0x2a, 0x9d, 0xaa, 0xa3, 0x25, 0x64, 0xc2, 0xf2, 0x14, 0xb3, 0x90, 0x50, 0x5f, 0xd7, 0x3b,
	0x16, 0x45, 0x02, 0xc1, 0xd8, 0xe5, 0x97, 0x94, 0x4d, 0x74, 0xd5, 0x13, 0x59, 0x78, 0x61, 0x7e,
	0x7d, 0xec, 0x79, 0x4c, 0xd7, 0x3c, 0x16, 0xed, 0x1f, 0xa0, 0xd9, 0xc1, 0xee, 0x38, 0x6e, 0x92,
	0x2d, 0xa8, 0x0d, 0x88, 0xd7, 0x8b, 0x37, 0xa6, 0x04, 0xa1, 0x75, 0xc3, 0x51, 0xcf, 0x8b, 0x4b,
	0x23, 0x05, 0xf4, 0x00, 0x6a, 0x94, 0x79, 0x98, 0xc9, 0x44, 0x9a, 0x07, 0x4d, 0x45, 0xc3, 0x99,
	0x50, 0x39, 0x6a, 0xc5, 0xfe, 0xcd, 0x00, 0xb3, 0x8b, 0x79, 0x07, 0x4f, 0xc9, 0x10, 0xf7, 0x19,
	0x0d, 0x30, 0x13, 0x47, 0x5b, 0x95, 0xe0, 0x6b, 0x80, 0x20, 0x51, 0xe9, 0x03, 0xdc, 0x56, 0x20,
	0x8b, 0x7c, 0xda, 0xa9, 0xac, 0x78, 0xcd, 0x20, 0x58, 0xcf, 0x61, 0x7d, 0x6e, 0xf9, 0x2e, 0x96,
	0x8d, 0x2c, 0xcb, 0x7f, 0x1a, 0x60, 0x9d, 0x17, 0xc5, 0x55, 0x95, 0x59, 0x83, 0x72, 0xaf, 0x13,
	0xf3, 0xdd, 0xeb, 0xa0, 0x7e, 0x2e, 0xfb, 0xb2, 0xcc, 0x7e, 0x5f, 0x65, 0xbf, 0x18, 0xe5, 0xff,
	0xcc, 0xff, 0x09, 0xc0, 0xf9, 0x98, 0xf2, 0xa4, 0xbf, 0xaa, 0xe1, 0x98, 0x72, 0x5d, 0x56, 0xd0,
	0x89, 0x8d, 0x29, 0x77, 0xa4, 0xde, 0xfe, 0xdb, 0x80, 0x8d, 0x2e, 0xe6, 0xc7, 0xe3, 0x71, 0xc6,
	0xe9, 0x13, 0xa8, 0x89, 0xc5, 0x98, 0x8c, 0x07, 0x09, 0x19, 0x39, 0x33, 0x09, 0xa3, 0xf3, 0x57,
	0xf6, 0xd6, 0xfb, 0x50, 0x17, 0x4a, 0x71, 0xf3, 0xdd, 0x15, 0xd9, 0xfa, 0x5e, 0xe7, 0xb9, 0x68,
	0x87, 0x1f, 0xe7, 0xaf, 0xd7, 0x77, 0x6e, 0x49, 0x42, 0xde, 0xb9, 0x99, 0x12, 0x7c, 0x01, 0x6b,
	0xc7, 0x9e, 0x27, 0x63, 0x2d, 0x60, 0x2d, 0x4e, 0x4e, 0x61, 0xdf, 0x2c, 0xcb, 0x09, 0x6c, 0x3a,
	0x78, 0x42, 0xa7, 0xf8, 0x75, 0x40, 0x0e, 0x65, 0xd3, 0x3b, 0xea, 0x82, 0xc4, 0xde, 0x77, 0x94,
	0x8d, 0x30, 0xd3, 0x25, 0xb6, 0xa0, 0x42, 0xbc, 0xb8, 0xc0, 0x75, 0xe5, 0xda, 0xeb, 0x38, 0x42,
	0x69, 0xff, 0x51, 0x86, 0x55, 0x71, 0xc1, 0xa4, 0xd3, 0xed, 0x83, 0xdc, 0x74, 0x7b, 0x3b, 0xbd,
	0xab, 0x17, 0x4f, 0xb8, 0x5f, 0x0c, 0xa8, 0x0b, 0x0b, 0xa1, 0x47, 0xcf, 0xa1, 0xc6, 0xdd, 0x70,
	0x14, 0xc7, 0xdb, 0x2d, 0x02, 0x88, 0x8d, 0xe5, 0x47, 0x4c, 0xab, 0xf4, 0xb2, 0xce, 0x00, 0x52,
	0x65, 0x01, 0x55, 0x8f, 0xf3, 0x54, 0xbd, 0x91, 0xc2, 0x67, 0xae, 0xba, 0x0c, 0x41, 0xd6, 0xc5,
	0xed, 0x93, 0xf5, 0x20, 0x8f, 0xf7, 0xd6, 0x6d, 0xe9, 0x66, 0x79, 0xef, 0xc3, 0xea, 0x49, 0xff,
	0x42, 0x9d, 0x39, 0xb9, 0xef, 0x74, 0x36, 0x1a, 0xd9, 0xd9, 0x88, 0x76, 0x61, 0xc9, 0x93, 0x56,
	0x3a, 0xc2, 0xba, 0x8a, 0x90, 0x38, 0x3b, 0x7a, 0x59, 0x20, 0x76, 0x5f, 0x07, 0xb1, 0x7b, 0x03,
	0xf1, 0xa7, 0x32, 0xac, 0x28, 0x95, 0xee, 0x84, 0x7d, 0xa8, 0x9e, 0xf4, 0x2f, 0x62, 0x6a, 0xf4,
	0x5e, 0xb3, 0x16, 0x22, 0x2d, 0xcd, 0x87, 0xb4, 0x14, 0x1e, 0x5d, 0xe1, 0x51, 0x5e, 0xe8, 0xd1,
	0x4d, 0x3d, 0xc4, 0xa7, 0xf5, 0x12, 0x1a, 0x09, 0x48, 0x41, 0xbd, 0x1f, 0xe5, 0xeb, 0xdd, 0x9a,
	0xab, 0xc6, 0x5c, 0x99, 0x05, 0x5a, 0xf7, 0x3f, 0xa3, 0x75, 0x17, 0xa0, 0x1d, 0xfc, 0x5a, 0x87,
	0xca, 0x8b, 0x68, 0x80, 0xde, 0x83, 0x6a, 0x9f, 0xf8, 0x57, 0x48, 0xcf, 0x8f, 0xd3, 0x49, 0xc0,
	0x67, 0x96, 0x2e, 0xa3, 0x58, 0x90, 0x3b, 0xb3, 0x4b, 0xe8, 0x29, 0x2c, 0xa9, 0xae, 0xca, 0x5b,
	0x6e, 0x65, 0xa7, 0x7f, 0xdc, 0x73, 0x76, 0x49, 0xc0, 0xca, 0xeb, 0xa8, 0x08, 0x36, 0xe9, 0x26,
	0xbb, 0x84, 0x1e, 0x42, 0x55, 0x12, 0x9c, 0x9c, 0xc5, 0xd8, 0x48, 0xe6, 0xab, 0x8d, 0xda, 0xea,
	0x4c, 0xdd, 0x04, 0x6c, 0x15, 0xb4, 0xa8, 0x5d, 0x42, 0xc7, 0xd0, 0x48, 0x9e, 0x0b, 0xe8, 0xfe,
	0xc2, 0xf7, 0x89, 0xf5, 0x66, 0xd1, 0x52, 0x9c, 0x57, 0x5d, 0x3c, 0x75, 0x24, 0x42, 0x9a, 0x5b,
	0x36, 0xb8, 0x5d, 0x42, 0xcf, 0xd4, 0x01, 0xd5, 0x75, 0x49, 0xcd, 0x8a, 0x4f, 0xa2, 0x74, 0x68,
	0xbe, 0x12, 0x8d, 0x7b, 0xc3, 0x43, 0x97, 0x51, 0xe9, 0x5f, 0xb9, 0x41, 0xec, 0x70, 0xa4, 0x77,
	0x4e, 0xaf, 0x42, 0x94, 0x41, 0x15, 0x72, 0xbc, 0x89, 0x56, 0x5e, 0x7d, 0x72, 0x1d, 0xf9, 0x23,
	0xbb, 0xb4, 0x6f, 0x88, 0x60, 0x62, 0xa0, 0xd1, 0x10, 0x8b, 0x27, 0x06, 0xda, 0x8c, 0x1b, 0x36,
	0x79, 0x6e, 0xcc, 0x6f, 0xe7, 0x10, 0x9a, 0x1d, 0x12, 0x0e, 0xe9, 0x14, 0x33, 0xd1, 0x19, 0xa6,
	0x76, 0x48, 0x55, 0x0b, 0xfc, 0x9e, 0xc0, 0xb2, 0x3e, 0x06, 0x79, 0x76, 0xd0, 0xcd, 0x23, 0x22,
	0xc9, 0x69, 0x15, 0xbc, 0x2f, 0x32, 0xb5, 0xd8, 0xbe, 0xfd, 0x11, 0x62, 0x97, 0xd0, 0x97, 0xd0,
	0x2a, 0x18, 0xf2, 0x68, 0xe7, 0xae, 0xf9, 0x3f, 0x9f, 0x78, 0x47, 0xa6, 0x32, 0x3f, 0x29, 0xf2,
	0x9b, 0x48, 0xb3, 0x29, 0x9c, 0x28, 0x76, 0x09, 0x3d, 0x82, 0x35, 0xb5, 0x84, 0x99, 0x5a, 0x59,
	0xdc, 0x30, 0x8f, 0x61, 0xe3, 0xc2, 0x67, 0xff, 0xd2, 0x78, 0x0f, 0x6a, 0x72, 0xe0, 0xe6, 0xf3,
	0xd9, 0x48, 0xe7, 0x5d, 0x92, 0xc1, 0x2e, 0x40, 0xcf, 0x0f, 0x31, 0xe3, 0x42, 0x8b, 0x32, 0x13,
	0x71, 0x1e, 0x72, 0x17, 0x20, 0x9d, 0xaf, 0xb7, 0x18, 0x0e, 0x96, 0xe4, 0xcf, 0xde, 0x87, 0xff,
	0x04, 0x00, 0x00, 0xff, 0xff, 0x85, 0xc2, 0x51, 0x58, 0x2f, 0x0e, 0x00, 0x00,
}
