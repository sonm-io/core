// Code generated by protoc-gen-go. DO NOT EDIT.
// source: miner.proto

package sonm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MinerStartRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Container describes container settings.
	Container     *Container                `protobuf:"bytes,2,opt,name=container" json:"container,omitempty"`
	RestartPolicy *ContainerRestartPolicy   `protobuf:"bytes,3,opt,name=restartPolicy" json:"restartPolicy,omitempty"`
	Resources     *TaskResourceRequirements `protobuf:"bytes,4,opt,name=resources" json:"resources,omitempty"`
	// OrderId describes an unique order identifier.
	// It is here for proper resource allocation and limitation.
	OrderId string `protobuf:"bytes,5,opt,name=orderId" json:"orderId,omitempty"`
}

func (m *MinerStartRequest) Reset()                    { *m = MinerStartRequest{} }
func (m *MinerStartRequest) String() string            { return proto.CompactTextString(m) }
func (*MinerStartRequest) ProtoMessage()               {}
func (*MinerStartRequest) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{0} }

func (m *MinerStartRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MinerStartRequest) GetContainer() *Container {
	if m != nil {
		return m.Container
	}
	return nil
}

func (m *MinerStartRequest) GetRestartPolicy() *ContainerRestartPolicy {
	if m != nil {
		return m.RestartPolicy
	}
	return nil
}

func (m *MinerStartRequest) GetResources() *TaskResourceRequirements {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *MinerStartRequest) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

type MinerStartReply struct {
	Container string `protobuf:"bytes,1,opt,name=container" json:"container,omitempty"`
	// PortMap represent port mapping between container network and host ones.
	PortMap    map[string]*Endpoints `protobuf:"bytes,2,rep,name=portMap" json:"portMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	NetworkIDs []string              `protobuf:"bytes,3,rep,name=networkIDs" json:"networkIDs,omitempty"`
}

func (m *MinerStartReply) Reset()                    { *m = MinerStartReply{} }
func (m *MinerStartReply) String() string            { return proto.CompactTextString(m) }
func (*MinerStartReply) ProtoMessage()               {}
func (*MinerStartReply) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{1} }

func (m *MinerStartReply) GetContainer() string {
	if m != nil {
		return m.Container
	}
	return ""
}

func (m *MinerStartReply) GetPortMap() map[string]*Endpoints {
	if m != nil {
		return m.PortMap
	}
	return nil
}

func (m *MinerStartReply) GetNetworkIDs() []string {
	if m != nil {
		return m.NetworkIDs
	}
	return nil
}

type TaskInfo struct {
	Request *MinerStartRequest `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
	Reply   *MinerStartReply   `protobuf:"bytes,2,opt,name=reply" json:"reply,omitempty"`
}

func (m *TaskInfo) Reset()                    { *m = TaskInfo{} }
func (m *TaskInfo) String() string            { return proto.CompactTextString(m) }
func (*TaskInfo) ProtoMessage()               {}
func (*TaskInfo) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{2} }

func (m *TaskInfo) GetRequest() *MinerStartRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *TaskInfo) GetReply() *MinerStartReply {
	if m != nil {
		return m.Reply
	}
	return nil
}

type Endpoints struct {
	Endpoints []*SocketAddr `protobuf:"bytes,1,rep,name=endpoints" json:"endpoints,omitempty"`
}

func (m *Endpoints) Reset()                    { *m = Endpoints{} }
func (m *Endpoints) String() string            { return proto.CompactTextString(m) }
func (*Endpoints) ProtoMessage()               {}
func (*Endpoints) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{3} }

func (m *Endpoints) GetEndpoints() []*SocketAddr {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

type MinerStatusMapRequest struct {
}

func (m *MinerStatusMapRequest) Reset()                    { *m = MinerStatusMapRequest{} }
func (m *MinerStatusMapRequest) String() string            { return proto.CompactTextString(m) }
func (*MinerStatusMapRequest) ProtoMessage()               {}
func (*MinerStatusMapRequest) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{4} }

type SaveRequest struct {
	ImageID string `protobuf:"bytes,1,opt,name=imageID" json:"imageID,omitempty"`
}

func (m *SaveRequest) Reset()                    { *m = SaveRequest{} }
func (m *SaveRequest) String() string            { return proto.CompactTextString(m) }
func (*SaveRequest) ProtoMessage()               {}
func (*SaveRequest) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{5} }

func (m *SaveRequest) GetImageID() string {
	if m != nil {
		return m.ImageID
	}
	return ""
}

func init() {
	proto.RegisterType((*MinerStartRequest)(nil), "sonm.MinerStartRequest")
	proto.RegisterType((*MinerStartReply)(nil), "sonm.MinerStartReply")
	proto.RegisterType((*TaskInfo)(nil), "sonm.TaskInfo")
	proto.RegisterType((*Endpoints)(nil), "sonm.Endpoints")
	proto.RegisterType((*MinerStatusMapRequest)(nil), "sonm.MinerStatusMapRequest")
	proto.RegisterType((*SaveRequest)(nil), "sonm.SaveRequest")
}

func init() { proto.RegisterFile("miner.proto", fileDescriptor10) }

var fileDescriptor10 = []byte{
	// 422 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x52, 0xd1, 0x6e, 0xd3, 0x30,
	0x14, 0x55, 0x92, 0x95, 0x92, 0x1b, 0xa0, 0xc3, 0xd2, 0x34, 0xab, 0x9a, 0xa6, 0x2a, 0x12, 0xa2,
	0x12, 0x22, 0x12, 0xe5, 0x05, 0xc1, 0x5e, 0x80, 0xed, 0xa1, 0x42, 0x95, 0x26, 0x97, 0x1f, 0x30,
	0xcd, 0x05, 0x99, 0x36, 0x76, 0xb0, 0x9d, 0xa1, 0xfc, 0x2a, 0x1f, 0xc1, 0x37, 0x20, 0xc7, 0xf1,
	0x92, 0x8d, 0xbd, 0xf9, 0xde, 0x7b, 0xce, 0xc9, 0x39, 0x37, 0x17, 0xb2, 0x4a, 0x48, 0xd4, 0x45,
	0xad, 0x95, 0x55, 0xe4, 0xc8, 0x28, 0x59, 0xcd, 0x67, 0x3b, 0x25, 0x2d, 0x1f, 0xda, 0xf3, 0x99,
	0x90, 0x6e, 0x20, 0x05, 0xef, 0x1b, 0xa9, 0x44, 0xeb, 0x9f, 0xf9, 0xdf, 0x08, 0x9e, 0x6f, 0x1c,
	0x76, 0x6b, 0xb9, 0xb6, 0x0c, 0x7f, 0x35, 0x68, 0x2c, 0x79, 0x06, 0xb1, 0x28, 0x69, 0xb4, 0x88,
	0x96, 0x29, 0x8b, 0x45, 0x49, 0x5e, 0x43, 0x7a, 0x2b, 0x4a, 0xe3, 0x45, 0xb4, 0xcc, 0x56, 0xb3,
	0xc2, 0x69, 0x16, 0x9f, 0x43, 0x9b, 0x0d, 0x08, 0xf2, 0x09, 0x9e, 0x6a, 0x34, 0x4e, 0xf0, 0x5a,
	0x1d, 0xc4, 0xae, 0xa5, 0x49, 0x47, 0x39, 0xbb, 0x4f, 0x19, 0x63, 0xd8, 0x5d, 0x0a, 0xb9, 0x80,
	0x54, 0xa3, 0x51, 0x8d, 0xde, 0xa1, 0xa1, 0x47, 0x1d, 0xff, 0xdc, 0xf3, 0xbf, 0x72, 0xb3, 0x67,
	0xfd, 0xc8, 0x19, 0x16, 0x1a, 0x2b, 0x94, 0xd6, 0xb0, 0x81, 0x40, 0x28, 0x4c, 0x95, 0x2e, 0x51,
	0xaf, 0x4b, 0x3a, 0xe9, 0x52, 0x84, 0x32, 0xff, 0x13, 0xc1, 0x6c, 0x1c, 0xb8, 0x3e, 0xb4, 0xe4,
	0x6c, 0x1c, 0xcf, 0xa7, 0x1e, 0xa5, 0xb9, 0x80, 0x69, 0xad, 0xb4, 0xdd, 0xf0, 0x9a, 0xc6, 0x8b,
	0x64, 0x99, 0xad, 0x72, 0xef, 0xe3, 0x9e, 0x4a, 0x71, 0xed, 0x41, 0x57, 0xd2, 0xea, 0x96, 0x05,
	0x0a, 0x39, 0x07, 0x90, 0x68, 0x7f, 0x2b, 0xbd, 0x5f, 0x5f, 0x1a, 0x9a, 0x2c, 0x92, 0x65, 0xca,
	0x46, 0x9d, 0xf9, 0x17, 0x78, 0x32, 0x26, 0x92, 0x63, 0x48, 0xf6, 0xd8, 0xf6, 0x2e, 0xdc, 0x93,
	0xbc, 0x80, 0xc9, 0x0d, 0x3f, 0x34, 0x78, 0x77, 0xf1, 0x57, 0xb2, 0xac, 0x95, 0x70, 0xb1, 0xfd,
	0xf4, 0x7d, 0xfc, 0x2e, 0xca, 0x7f, 0xc2, 0x63, 0xb7, 0x9d, 0xb5, 0xfc, 0xae, 0xc8, 0x1b, 0x98,
	0x6a, 0xff, 0x3b, 0x3b, 0xb1, 0x6c, 0x75, 0xfa, 0xbf, 0xed, 0x6e, 0xcc, 0x02, 0x8e, 0xbc, 0x82,
	0x89, 0x76, 0x51, 0xfa, 0x2f, 0x9d, 0x3c, 0x98, 0x93, 0x79, 0x4c, 0xfe, 0x01, 0xd2, 0x5b, 0x0f,
	0xa4, 0x80, 0x14, 0x43, 0x41, 0xa3, 0x6e, 0x4b, 0xc7, 0x9e, 0xbd, 0x55, 0xbb, 0x3d, 0xda, 0x8f,
	0x65, 0xa9, 0xd9, 0x00, 0xc9, 0x4f, 0xe1, 0x24, 0xc8, 0xda, 0xc6, 0x6c, 0x78, 0xdd, 0x7b, 0xc9,
	0x5f, 0x42, 0xb6, 0xe5, 0x37, 0x18, 0x0e, 0x91, 0xc2, 0x54, 0x54, 0xfc, 0x07, 0xae, 0x2f, 0xfb,
	0x8d, 0x84, 0xf2, 0xdb, 0xa3, 0xee, 0x7e, 0xdf, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xff, 0xe5,
	0xd2, 0xad, 0x01, 0x03, 0x00, 0x00,
}
