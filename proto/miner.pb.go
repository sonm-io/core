// Code generated by protoc-gen-go. DO NOT EDIT.
// source: miner.proto

package sonm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MinerInfoRequest struct {
}

func (m *MinerInfoRequest) Reset()                    { *m = MinerInfoRequest{} }
func (m *MinerInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*MinerInfoRequest) ProtoMessage()               {}
func (*MinerInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

type MinerHandshakeRequest struct {
	Hub string `protobuf:"bytes,1,opt,name=hub" json:"hub,omitempty"`
}

func (m *MinerHandshakeRequest) Reset()                    { *m = MinerHandshakeRequest{} }
func (m *MinerHandshakeRequest) String() string            { return proto.CompactTextString(m) }
func (*MinerHandshakeRequest) ProtoMessage()               {}
func (*MinerHandshakeRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *MinerHandshakeRequest) GetHub() string {
	if m != nil {
		return m.Hub
	}
	return ""
}

type MinerHandshakeReply struct {
	Miner        string        `protobuf:"bytes,1,opt,name=miner" json:"miner,omitempty"`
	Capabilities *Capabilities `protobuf:"bytes,2,opt,name=capabilities" json:"capabilities,omitempty"`
}

func (m *MinerHandshakeReply) Reset()                    { *m = MinerHandshakeReply{} }
func (m *MinerHandshakeReply) String() string            { return proto.CompactTextString(m) }
func (*MinerHandshakeReply) ProtoMessage()               {}
func (*MinerHandshakeReply) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *MinerHandshakeReply) GetMiner() string {
	if m != nil {
		return m.Miner
	}
	return ""
}

func (m *MinerHandshakeReply) GetCapabilities() *Capabilities {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

type MinerStartRequest struct {
	Id            string                  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Registry      string                  `protobuf:"bytes,2,opt,name=registry" json:"registry,omitempty"`
	Image         string                  `protobuf:"bytes,3,opt,name=image" json:"image,omitempty"`
	Auth          string                  `protobuf:"bytes,4,opt,name=auth" json:"auth,omitempty"`
	RestartPolicy *ContainerRestartPolicy `protobuf:"bytes,5,opt,name=restartPolicy" json:"restartPolicy,omitempty"`
	Resources     *ContainerResources     `protobuf:"bytes,6,opt,name=resources" json:"resources,omitempty"`
}

func (m *MinerStartRequest) Reset()                    { *m = MinerStartRequest{} }
func (m *MinerStartRequest) String() string            { return proto.CompactTextString(m) }
func (*MinerStartRequest) ProtoMessage()               {}
func (*MinerStartRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *MinerStartRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MinerStartRequest) GetRegistry() string {
	if m != nil {
		return m.Registry
	}
	return ""
}

func (m *MinerStartRequest) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *MinerStartRequest) GetAuth() string {
	if m != nil {
		return m.Auth
	}
	return ""
}

func (m *MinerStartRequest) GetRestartPolicy() *ContainerRestartPolicy {
	if m != nil {
		return m.RestartPolicy
	}
	return nil
}

func (m *MinerStartRequest) GetResources() *ContainerResources {
	if m != nil {
		return m.Resources
	}
	return nil
}

type MinerStartReply struct {
	Container string                          `protobuf:"bytes,1,opt,name=container" json:"container,omitempty"`
	Ports     map[string]*MinerStartReplyPort `protobuf:"bytes,2,rep,name=Ports" json:"Ports,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *MinerStartReply) Reset()                    { *m = MinerStartReply{} }
func (m *MinerStartReply) String() string            { return proto.CompactTextString(m) }
func (*MinerStartReply) ProtoMessage()               {}
func (*MinerStartReply) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *MinerStartReply) GetContainer() string {
	if m != nil {
		return m.Container
	}
	return ""
}

func (m *MinerStartReply) GetPorts() map[string]*MinerStartReplyPort {
	if m != nil {
		return m.Ports
	}
	return nil
}

type MinerStartReplyPort struct {
	IP   string `protobuf:"bytes,1,opt,name=IP" json:"IP,omitempty"`
	Port string `protobuf:"bytes,2,opt,name=port" json:"port,omitempty"`
}

func (m *MinerStartReplyPort) Reset()                    { *m = MinerStartReplyPort{} }
func (m *MinerStartReplyPort) String() string            { return proto.CompactTextString(m) }
func (*MinerStartReplyPort) ProtoMessage()               {}
func (*MinerStartReplyPort) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4, 0} }

func (m *MinerStartReplyPort) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *MinerStartReplyPort) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

type MinerStatusMapRequest struct {
}

func (m *MinerStatusMapRequest) Reset()                    { *m = MinerStatusMapRequest{} }
func (m *MinerStatusMapRequest) String() string            { return proto.CompactTextString(m) }
func (*MinerStatusMapRequest) ProtoMessage()               {}
func (*MinerStatusMapRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

func init() {
	proto.RegisterType((*MinerInfoRequest)(nil), "sonm.MinerInfoRequest")
	proto.RegisterType((*MinerHandshakeRequest)(nil), "sonm.MinerHandshakeRequest")
	proto.RegisterType((*MinerHandshakeReply)(nil), "sonm.MinerHandshakeReply")
	proto.RegisterType((*MinerStartRequest)(nil), "sonm.MinerStartRequest")
	proto.RegisterType((*MinerStartReply)(nil), "sonm.MinerStartReply")
	proto.RegisterType((*MinerStartReplyPort)(nil), "sonm.MinerStartReply.port")
	proto.RegisterType((*MinerStatusMapRequest)(nil), "sonm.MinerStatusMapRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Miner service

type MinerClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
	Info(ctx context.Context, in *MinerInfoRequest, opts ...grpc.CallOption) (*InfoReply, error)
	Handshake(ctx context.Context, in *MinerHandshakeRequest, opts ...grpc.CallOption) (*MinerHandshakeReply, error)
	Start(ctx context.Context, in *MinerStartRequest, opts ...grpc.CallOption) (*MinerStartReply, error)
	Stop(ctx context.Context, in *StopTaskRequest, opts ...grpc.CallOption) (*StopTaskReply, error)
	TasksStatus(ctx context.Context, opts ...grpc.CallOption) (Miner_TasksStatusClient, error)
}

type minerClient struct {
	cc *grpc.ClientConn
}

func NewMinerClient(cc *grpc.ClientConn) MinerClient {
	return &minerClient{cc}
}

func (c *minerClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := grpc.Invoke(ctx, "/sonm.Miner/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minerClient) Info(ctx context.Context, in *MinerInfoRequest, opts ...grpc.CallOption) (*InfoReply, error) {
	out := new(InfoReply)
	err := grpc.Invoke(ctx, "/sonm.Miner/Info", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minerClient) Handshake(ctx context.Context, in *MinerHandshakeRequest, opts ...grpc.CallOption) (*MinerHandshakeReply, error) {
	out := new(MinerHandshakeReply)
	err := grpc.Invoke(ctx, "/sonm.Miner/Handshake", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minerClient) Start(ctx context.Context, in *MinerStartRequest, opts ...grpc.CallOption) (*MinerStartReply, error) {
	out := new(MinerStartReply)
	err := grpc.Invoke(ctx, "/sonm.Miner/Start", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minerClient) Stop(ctx context.Context, in *StopTaskRequest, opts ...grpc.CallOption) (*StopTaskReply, error) {
	out := new(StopTaskReply)
	err := grpc.Invoke(ctx, "/sonm.Miner/Stop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minerClient) TasksStatus(ctx context.Context, opts ...grpc.CallOption) (Miner_TasksStatusClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Miner_serviceDesc.Streams[0], c.cc, "/sonm.Miner/TasksStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &minerTasksStatusClient{stream}
	return x, nil
}

type Miner_TasksStatusClient interface {
	Send(*MinerStatusMapRequest) error
	Recv() (*StatusMapReply, error)
	grpc.ClientStream
}

type minerTasksStatusClient struct {
	grpc.ClientStream
}

func (x *minerTasksStatusClient) Send(m *MinerStatusMapRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *minerTasksStatusClient) Recv() (*StatusMapReply, error) {
	m := new(StatusMapReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Miner service

type MinerServer interface {
	Ping(context.Context, *PingRequest) (*PingReply, error)
	Info(context.Context, *MinerInfoRequest) (*InfoReply, error)
	Handshake(context.Context, *MinerHandshakeRequest) (*MinerHandshakeReply, error)
	Start(context.Context, *MinerStartRequest) (*MinerStartReply, error)
	Stop(context.Context, *StopTaskRequest) (*StopTaskReply, error)
	TasksStatus(Miner_TasksStatusServer) error
}

func RegisterMinerServer(s *grpc.Server, srv MinerServer) {
	s.RegisterService(&_Miner_serviceDesc, srv)
}

func _Miner_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Miner/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinerServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Miner_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MinerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinerServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Miner/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinerServer).Info(ctx, req.(*MinerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Miner_Handshake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MinerHandshakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinerServer).Handshake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Miner/Handshake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinerServer).Handshake(ctx, req.(*MinerHandshakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Miner_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MinerStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinerServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Miner/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinerServer).Start(ctx, req.(*MinerStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Miner_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinerServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Miner/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinerServer).Stop(ctx, req.(*StopTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Miner_TasksStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MinerServer).TasksStatus(&minerTasksStatusServer{stream})
}

type Miner_TasksStatusServer interface {
	Send(*StatusMapReply) error
	Recv() (*MinerStatusMapRequest, error)
	grpc.ServerStream
}

type minerTasksStatusServer struct {
	grpc.ServerStream
}

func (x *minerTasksStatusServer) Send(m *StatusMapReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *minerTasksStatusServer) Recv() (*MinerStatusMapRequest, error) {
	m := new(MinerStatusMapRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Miner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sonm.Miner",
	HandlerType: (*MinerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Miner_Ping_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _Miner_Info_Handler,
		},
		{
			MethodName: "Handshake",
			Handler:    _Miner_Handshake_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _Miner_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Miner_Stop_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TasksStatus",
			Handler:       _Miner_TasksStatus_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "miner.proto",
}

func init() { proto.RegisterFile("miner.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 515 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x54, 0x5d, 0x8f, 0xd2, 0x40,
	0x14, 0xdd, 0x42, 0xbb, 0x91, 0x8b, 0xca, 0xee, 0xdd, 0x5d, 0xb7, 0xd6, 0x7d, 0x20, 0x7d, 0x42,
	0x63, 0xc8, 0x8a, 0x86, 0xa8, 0x8f, 0x9a, 0x35, 0xf2, 0xb0, 0x09, 0x29, 0xfb, 0x07, 0x06, 0x18,
	0x61, 0x42, 0xe9, 0xd4, 0x99, 0xa9, 0x49, 0x7f, 0xb0, 0x89, 0xfe, 0x8b, 0xcd, 0x7c, 0x14, 0x4a,
	0x97, 0x27, 0x66, 0xce, 0x3d, 0xe7, 0xde, 0x33, 0xa7, 0x37, 0x40, 0x77, 0xcb, 0x32, 0x2a, 0x86,
	0xb9, 0xe0, 0x8a, 0xa3, 0x2f, 0x79, 0xb6, 0x8d, 0x7a, 0x2c, 0xd3, 0xbf, 0x19, 0x23, 0x16, 0x8e,
	0x70, 0x41, 0x72, 0x32, 0x67, 0x29, 0x53, 0x8c, 0x4a, 0x8b, 0xc5, 0x08, 0x67, 0xf7, 0x5a, 0x39,
	0xc9, 0x7e, 0xf1, 0x84, 0xfe, 0x2e, 0xa8, 0x54, 0xf1, 0x5b, 0xb8, 0x32, 0xd8, 0x4f, 0x92, 0x2d,
	0xe5, 0x9a, 0x6c, 0xa8, 0x2b, 0xe0, 0x19, 0xb4, 0xd7, 0xc5, 0x3c, 0xf4, 0xfa, 0xde, 0xa0, 0x93,
	0xe8, 0x63, 0xbc, 0x80, 0x8b, 0x26, 0x35, 0x4f, 0x4b, 0xbc, 0x84, 0xc0, 0xf8, 0x71, 0x54, 0x7b,
	0xc1, 0x31, 0x3c, 0xaf, 0x3b, 0x08, 0x5b, 0x7d, 0x6f, 0xd0, 0x1d, 0xe1, 0x50, 0xbb, 0x1c, 0x7e,
	0xaf, 0x55, 0x92, 0x03, 0x5e, 0xfc, 0xd7, 0x83, 0x73, 0x33, 0x65, 0xa6, 0x88, 0x50, 0x95, 0x99,
	0x97, 0xd0, 0x62, 0x4b, 0x37, 0xa0, 0xc5, 0x96, 0x18, 0xc1, 0x33, 0x41, 0x57, 0x4c, 0x2a, 0x51,
	0x9a, 0xce, 0x9d, 0x64, 0x77, 0xd7, 0x7e, 0xd8, 0x96, 0xac, 0x68, 0xd8, 0xb6, 0x7e, 0xcc, 0x05,
	0x11, 0x7c, 0x52, 0xa8, 0x75, 0xe8, 0x1b, 0xd0, 0x9c, 0xf1, 0x1b, 0xbc, 0x10, 0x54, 0xea, 0x39,
	0x53, 0x9e, 0xb2, 0x45, 0x19, 0x06, 0xc6, 0xe4, 0x8d, 0x33, 0xc9, 0x33, 0x45, 0xb4, 0x93, 0xa4,
	0xce, 0x49, 0x0e, 0x25, 0x38, 0x86, 0x8e, 0xa0, 0x92, 0x17, 0x62, 0x41, 0x65, 0x78, 0x6a, 0xf4,
	0xe1, 0x53, 0xbd, 0xad, 0x27, 0x7b, 0x6a, 0xfc, 0xdf, 0x83, 0x5e, 0xfd, 0x9d, 0x3a, 0xc9, 0x1b,
	0xe8, 0x2c, 0x2a, 0x91, 0x7b, 0xec, 0x1e, 0xc0, 0x31, 0x04, 0x53, 0x2e, 0x94, 0x8e, 0xb2, 0x3d,
	0xe8, 0x8e, 0xfa, 0x76, 0x4a, 0xa3, 0xc7, 0xd0, 0x50, 0xee, 0x32, 0x25, 0xca, 0xc4, 0xd2, 0xa3,
	0x77, 0xe0, 0xe7, 0x5c, 0x98, 0x0c, 0x27, 0xd3, 0x2a, 0xc3, 0xc9, 0x54, 0x27, 0xa2, 0x71, 0x97,
	0x9f, 0x39, 0x47, 0x0f, 0x00, 0xfb, 0x06, 0x7a, 0x05, 0x36, 0xb4, 0xac, 0x56, 0x60, 0x43, 0x4b,
	0xbc, 0x85, 0xe0, 0x0f, 0x49, 0x0b, 0xea, 0x3e, 0x67, 0x74, 0xdc, 0x83, 0x6e, 0x95, 0x58, 0xe2,
	0xd7, 0xd6, 0x67, 0x2f, 0xbe, 0x76, 0x3b, 0x36, 0x53, 0x44, 0x15, 0xf2, 0x9e, 0xe4, 0xee, 0xb3,
	0x8e, 0xfe, 0xb5, 0x20, 0x30, 0x15, 0x7c, 0x0f, 0xfe, 0x94, 0x65, 0x2b, 0x3c, 0xb7, 0x1d, 0xf5,
	0xd9, 0x91, 0xa2, 0x5e, 0x1d, 0xca, 0xd3, 0x32, 0x3e, 0xc1, 0x0f, 0xe0, 0xeb, 0x1d, 0xc6, 0x57,
	0xb5, 0xf9, 0xb5, 0xa5, 0xae, 0x24, 0x16, 0xb2, 0x92, 0x3b, 0xe8, 0xec, 0xf6, 0x16, 0xdf, 0xd4,
	0x74, 0xcd, 0xc5, 0x8f, 0x5e, 0x1f, 0x2f, 0xda, 0x36, 0x5f, 0x20, 0x30, 0x0f, 0xc5, 0xeb, 0xa7,
	0x4f, 0xb7, 0xf2, 0xab, 0xa3, 0x99, 0xc4, 0x27, 0xf8, 0x09, 0xfc, 0x99, 0xe2, 0x39, 0x3a, 0x82,
	0x3e, 0x3f, 0x10, 0xb9, 0xa9, 0x74, 0x17, 0x4d, 0xd8, 0xaa, 0x7e, 0x40, 0x57, 0x5f, 0xa5, 0xcd,
	0xee, 0xc0, 0x79, 0x33, 0xce, 0xe8, 0xb2, 0x6a, 0xb1, 0xc3, 0x4d, 0x8f, 0x81, 0x77, 0xeb, 0xcd,
	0x4f, 0xcd, 0x5f, 0xc0, 0xc7, 0xc7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4d, 0xe5, 0x0f, 0x82, 0x3c,
	0x04, 0x00, 0x00,
}
