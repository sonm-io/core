// Code generated by protoc-gen-go. DO NOT EDIT.
// source: marketplace.proto

package sonm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// grpccmd imports
import (
	"io"

	"github.com/spf13/cobra"
	"github.com/sshaman1101/grpccmd"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// todo: as we decided to make Node's search method simpliest as possible
// this request is meaningless.
//
// Deprecated: Node's `GetOrders` method must return only orders
// for current eth address.
type GetOrdersRequest struct {
	Type         MarketOrderType `protobuf:"varint,1,opt,name=type,enum=sonm.MarketOrderType" json:"type,omitempty"`
	Price        *BigInt         `protobuf:"bytes,2,opt,name=Price" json:"Price,omitempty"`
	Counterparty *EthAddress     `protobuf:"bytes,3,opt,name=Counterparty" json:"Counterparty,omitempty"`
	Count        uint64          `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
}

func (m *GetOrdersRequest) Reset()                    { *m = GetOrdersRequest{} }
func (m *GetOrdersRequest) String() string            { return proto.CompactTextString(m) }
func (*GetOrdersRequest) ProtoMessage()               {}
func (*GetOrdersRequest) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{0} }

func (m *GetOrdersRequest) GetType() MarketOrderType {
	if m != nil {
		return m.Type
	}
	return MarketOrderType_MARKET_ANY
}

func (m *GetOrdersRequest) GetPrice() *BigInt {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *GetOrdersRequest) GetCounterparty() *EthAddress {
	if m != nil {
		return m.Counterparty
	}
	return nil
}

func (m *GetOrdersRequest) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

// GetProcessingReply represent Node's local
// orders processing status
type GetProcessingReply struct {
	Orders map[string]*GetProcessingReply_ProcessedOrder `protobuf:"bytes,2,rep,name=orders" json:"orders,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *GetProcessingReply) Reset()                    { *m = GetProcessingReply{} }
func (m *GetProcessingReply) String() string            { return proto.CompactTextString(m) }
func (*GetProcessingReply) ProtoMessage()               {}
func (*GetProcessingReply) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{1} }

func (m *GetProcessingReply) GetOrders() map[string]*GetProcessingReply_ProcessedOrder {
	if m != nil {
		return m.Orders
	}
	return nil
}

type GetProcessingReply_ProcessedOrder struct {
	Id        string     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Status    uint32     `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	Timestamp *Timestamp `protobuf:"bytes,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Extra     string     `protobuf:"bytes,4,opt,name=extra" json:"extra,omitempty"`
}

func (m *GetProcessingReply_ProcessedOrder) Reset()         { *m = GetProcessingReply_ProcessedOrder{} }
func (m *GetProcessingReply_ProcessedOrder) String() string { return proto.CompactTextString(m) }
func (*GetProcessingReply_ProcessedOrder) ProtoMessage()    {}
func (*GetProcessingReply_ProcessedOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor10, []int{1, 0}
}

func (m *GetProcessingReply_ProcessedOrder) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GetProcessingReply_ProcessedOrder) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GetProcessingReply_ProcessedOrder) GetTimestamp() *Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *GetProcessingReply_ProcessedOrder) GetExtra() string {
	if m != nil {
		return m.Extra
	}
	return ""
}

type TouchOrdersRequest struct {
	IDs []string `protobuf:"bytes,1,rep,name=IDs" json:"IDs,omitempty"`
}

func (m *TouchOrdersRequest) Reset()                    { *m = TouchOrdersRequest{} }
func (m *TouchOrdersRequest) String() string            { return proto.CompactTextString(m) }
func (*TouchOrdersRequest) ProtoMessage()               {}
func (*TouchOrdersRequest) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{2} }

func (m *TouchOrdersRequest) GetIDs() []string {
	if m != nil {
		return m.IDs
	}
	return nil
}

func init() {
	proto.RegisterType((*GetOrdersRequest)(nil), "sonm.GetOrdersRequest")
	proto.RegisterType((*GetProcessingReply)(nil), "sonm.GetProcessingReply")
	proto.RegisterType((*GetProcessingReply_ProcessedOrder)(nil), "sonm.GetProcessingReply.ProcessedOrder")
	proto.RegisterType((*TouchOrdersRequest)(nil), "sonm.TouchOrdersRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Market service

type MarketClient interface {
	// GetOrders returns orders by given filter parameters.
	// Note that set of filters may be changed in the closest future.
	GetOrders(ctx context.Context, in *GetOrdersRequest, opts ...grpc.CallOption) (*OrdersReply, error)
	// CreateOrder places new order on the Marketplace.
	// Note that current impl of Node API prevents you from
	// creating ASKs orders.
	CreateOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error)
	// GetOrderByID returns order by given ID.
	// If order save an `inactive` status returns error instead.
	GetOrderByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Order, error)
	// CancelOrder removes active order from the Marketplace.
	CancelOrder(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error)
}

type marketClient struct {
	cc *grpc.ClientConn
}

func NewMarketClient(cc *grpc.ClientConn) MarketClient {
	return &marketClient{cc}
}

func (c *marketClient) GetOrders(ctx context.Context, in *GetOrdersRequest, opts ...grpc.CallOption) (*OrdersReply, error) {
	out := new(OrdersReply)
	err := grpc.Invoke(ctx, "/sonm.Market/GetOrders", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) CreateOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := grpc.Invoke(ctx, "/sonm.Market/CreateOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) GetOrderByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := grpc.Invoke(ctx, "/sonm.Market/GetOrderByID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) CancelOrder(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.Market/CancelOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Market service

type MarketServer interface {
	// GetOrders returns orders by given filter parameters.
	// Note that set of filters may be changed in the closest future.
	GetOrders(context.Context, *GetOrdersRequest) (*OrdersReply, error)
	// CreateOrder places new order on the Marketplace.
	// Note that current impl of Node API prevents you from
	// creating ASKs orders.
	CreateOrder(context.Context, *Order) (*Order, error)
	// GetOrderByID returns order by given ID.
	// If order save an `inactive` status returns error instead.
	GetOrderByID(context.Context, *ID) (*Order, error)
	// CancelOrder removes active order from the Marketplace.
	CancelOrder(context.Context, *ID) (*Empty, error)
}

func RegisterMarketServer(s *grpc.Server, srv MarketServer) {
	s.RegisterService(&_Market_serviceDesc, srv)
}

func _Market_GetOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).GetOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Market/GetOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).GetOrders(ctx, req.(*GetOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Market/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).CreateOrder(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_GetOrderByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).GetOrderByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Market/GetOrderByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).GetOrderByID(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Market/CancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).CancelOrder(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

var _Market_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sonm.Market",
	HandlerType: (*MarketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrders",
			Handler:    _Market_GetOrders_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _Market_CreateOrder_Handler,
		},
		{
			MethodName: "GetOrderByID",
			Handler:    _Market_GetOrderByID_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _Market_CancelOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "marketplace.proto",
}

// Begin grpccmd
var _ = grpccmd.RunE

// Market
var _MarketCmd = &cobra.Command{
	Use:   "market [method]",
	Short: "Subcommand for the Market service.",
}

var _Market_GetOrdersCmd = &cobra.Command{
	Use:   "getOrders",
	Short: "Make the GetOrders method call, input-type: sonm.GetOrdersRequest output-type: sonm.OrdersReply",
	RunE: grpccmd.RunE(
		"GetOrders",
		"sonm.GetOrdersRequest",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewMarketClient(cc)
		},
	),
}

var _Market_GetOrdersCmd_gen = &cobra.Command{
	Use:   "getOrders-gen",
	Short: "Generate JSON for method call of GetOrders (input-type: sonm.GetOrdersRequest)",
	RunE:  grpccmd.TypeToJson("sonm.GetOrdersRequest"),
}

var _Market_CreateOrderCmd = &cobra.Command{
	Use:   "createOrder",
	Short: "Make the CreateOrder method call, input-type: sonm.Order output-type: sonm.Order",
	RunE: grpccmd.RunE(
		"CreateOrder",
		"sonm.Order",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewMarketClient(cc)
		},
	),
}

var _Market_CreateOrderCmd_gen = &cobra.Command{
	Use:   "createOrder-gen",
	Short: "Generate JSON for method call of CreateOrder (input-type: sonm.Order)",
	RunE:  grpccmd.TypeToJson("sonm.Order"),
}

var _Market_GetOrderByIDCmd = &cobra.Command{
	Use:   "getOrderByID",
	Short: "Make the GetOrderByID method call, input-type: sonm.ID output-type: sonm.Order",
	RunE: grpccmd.RunE(
		"GetOrderByID",
		"sonm.ID",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewMarketClient(cc)
		},
	),
}

var _Market_GetOrderByIDCmd_gen = &cobra.Command{
	Use:   "getOrderByID-gen",
	Short: "Generate JSON for method call of GetOrderByID (input-type: sonm.ID)",
	RunE:  grpccmd.TypeToJson("sonm.ID"),
}

var _Market_CancelOrderCmd = &cobra.Command{
	Use:   "cancelOrder",
	Short: "Make the CancelOrder method call, input-type: sonm.ID output-type: sonm.Empty",
	RunE: grpccmd.RunE(
		"CancelOrder",
		"sonm.ID",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewMarketClient(cc)
		},
	),
}

var _Market_CancelOrderCmd_gen = &cobra.Command{
	Use:   "cancelOrder-gen",
	Short: "Generate JSON for method call of CancelOrder (input-type: sonm.ID)",
	RunE:  grpccmd.TypeToJson("sonm.ID"),
}

// Register commands with the root command and service command
func init() {
	grpccmd.RegisterServiceCmd(_MarketCmd)
	_MarketCmd.AddCommand(
		_Market_GetOrdersCmd,
		_Market_GetOrdersCmd_gen,
		_Market_CreateOrderCmd,
		_Market_CreateOrderCmd_gen,
		_Market_GetOrderByIDCmd,
		_Market_GetOrderByIDCmd_gen,
		_Market_CancelOrderCmd,
		_Market_CancelOrderCmd_gen,
	)
}

// End grpccmd

func init() { proto.RegisterFile("marketplace.proto", fileDescriptor10) }

var fileDescriptor10 = []byte{
	// 463 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0x6b, 0x3b, 0x89, 0xf0, 0x38, 0xa4, 0xe9, 0x0a, 0x2a, 0xcb, 0x27, 0xcb, 0x42, 0x6d,
	0x7a, 0x20, 0x87, 0xc0, 0xa1, 0x42, 0x70, 0xa0, 0x49, 0x54, 0xf9, 0x80, 0xa8, 0x56, 0x79, 0x81,
	0x8d, 0x3d, 0x4a, 0x56, 0xf5, 0x3f, 0x76, 0xd7, 0x80, 0x0f, 0x3c, 0x12, 0x47, 0xae, 0x3c, 0x1b,
	0xf2, 0xae, 0x1d, 0x12, 0x2a, 0x6e, 0x9e, 0x6f, 0x7e, 0x3b, 0x9f, 0xbf, 0xd9, 0x85, 0x8b, 0x9c,
	0x89, 0x47, 0x54, 0x55, 0xc6, 0x12, 0x9c, 0x57, 0xa2, 0x54, 0x25, 0x19, 0xc8, 0xb2, 0xc8, 0x83,
	0xf1, 0x96, 0xef, 0x78, 0xa1, 0x8c, 0x16, 0xb8, 0xe9, 0xb7, 0x7d, 0xf7, 0x79, 0xce, 0x8b, 0x16,
	0x28, 0x38, 0xeb, 0x05, 0xc5, 0x73, 0x94, 0x8a, 0xe5, 0x95, 0x11, 0xa2, 0x9f, 0x16, 0x4c, 0xef,
	0x51, 0x7d, 0x16, 0x29, 0x0a, 0x49, 0xf1, 0x4b, 0x8d, 0x52, 0x91, 0x1b, 0x18, 0xa8, 0xa6, 0x42,
	0xdf, 0x0a, 0xad, 0xd9, 0x64, 0xf1, 0x72, 0xde, 0xce, 0x98, 0x7f, 0xd2, 0xe6, 0x1a, 0xdc, 0x34,
	0x15, 0x52, 0x8d, 0x90, 0x08, 0x86, 0x0f, 0x82, 0x27, 0xe8, 0xdb, 0xa1, 0x35, 0xf3, 0x16, 0x63,
	0xc3, 0xde, 0xf1, 0x5d, 0x5c, 0x28, 0x6a, 0x5a, 0xe4, 0x2d, 0x8c, 0x97, 0x65, 0x5d, 0x28, 0x14,
	0x15, 0x13, 0xaa, 0xf1, 0x1d, 0x8d, 0x4e, 0x0d, 0xba, 0x56, 0xfb, 0x8f, 0x69, 0x2a, 0x50, 0x4a,
	0x7a, 0x42, 0x91, 0x17, 0x30, 0x4c, 0xda, 0xda, 0x1f, 0x84, 0xd6, 0x6c, 0x40, 0x4d, 0x11, 0xfd,
	0xb2, 0x81, 0xdc, 0xa3, 0x7a, 0x10, 0x65, 0x82, 0x52, 0xf2, 0x62, 0x47, 0xb1, 0xca, 0x1a, 0xf2,
	0x1e, 0x46, 0xa5, 0x8e, 0xe0, 0xdb, 0xa1, 0x33, 0xf3, 0x16, 0xaf, 0xcc, 0xf0, 0xa7, 0xe4, 0xdc,
	0x24, 0x5d, 0x17, 0x4a, 0x34, 0xb4, 0x3b, 0x13, 0xfc, 0x80, 0x49, 0x87, 0x61, 0xaa, 0xfb, 0x64,
	0x02, 0x36, 0x4f, 0x75, 0x7e, 0x97, 0xda, 0x3c, 0x25, 0x97, 0x30, 0x92, 0x8a, 0xa9, 0x5a, 0xea,
	0x9c, 0xcf, 0x69, 0x57, 0x91, 0xd7, 0xe0, 0x1e, 0x36, 0xda, 0xe5, 0x3a, 0x37, 0xd6, 0x9b, 0x5e,
	0xa6, 0x7f, 0x89, 0x36, 0x13, 0x7e, 0x57, 0x82, 0xe9, 0x4c, 0x2e, 0x35, 0x45, 0xb0, 0x05, 0xef,
	0xe8, 0xaf, 0xc8, 0x14, 0x9c, 0x47, 0x6c, 0x3a, 0xf3, 0xf6, 0x93, 0x7c, 0x80, 0xe1, 0x57, 0x96,
	0xd5, 0xfd, 0x92, 0xaf, 0xff, 0x1b, 0xee, 0x34, 0x05, 0x35, 0xa7, 0xde, 0xd9, 0xb7, 0x56, 0x74,
	0x05, 0x64, 0x53, 0xd6, 0xc9, 0xfe, 0xf4, 0xa2, 0xa7, 0xe0, 0xc4, 0x2b, 0xe9, 0x5b, 0xa1, 0xd3,
	0x5a, 0xc5, 0x2b, 0xb9, 0xf8, 0x6d, 0xc1, 0xc8, 0xdc, 0x34, 0xb9, 0x05, 0xf7, 0xf0, 0x32, 0xc8,
	0xe5, 0xc1, 0xf3, 0x64, 0x42, 0x70, 0x61, 0xf4, 0x5e, 0xac, 0xb2, 0x26, 0x3a, 0x23, 0x37, 0xe0,
	0x2d, 0x05, 0x32, 0x85, 0x66, 0x99, 0xde, 0x11, 0x13, 0x1c, 0x17, 0xd1, 0x19, 0xb9, 0x86, 0x71,
	0x3f, 0xf3, 0xae, 0x89, 0x57, 0xe4, 0x99, 0x69, 0xc7, 0xab, 0x7f, 0xc1, 0x2b, 0xf0, 0x96, 0xac,
	0x48, 0x30, 0x33, 0x33, 0x9f, 0x70, 0xeb, 0xbc, 0x52, 0x4d, 0x74, 0xb6, 0x1d, 0xe9, 0x77, 0xfd,
	0xe6, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5a, 0xc4, 0x63, 0x85, 0x2d, 0x03, 0x00, 0x00,
}
