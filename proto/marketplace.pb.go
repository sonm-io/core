// Code generated by protoc-gen-go. DO NOT EDIT.
// source: marketplace.proto

package sonm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// grpccmd imports
import (
	"io"

	"github.com/spf13/cobra"
	"github.com/sshaman1101/grpccmd"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type OrderType int32

const (
	OrderType_ANY OrderType = 0
	OrderType_BID OrderType = 1
	OrderType_ASK OrderType = 2
)

var OrderType_name = map[int32]string{
	0: "ANY",
	1: "BID",
	2: "ASK",
}
var OrderType_value = map[string]int32{
	"ANY": 0,
	"BID": 1,
	"ASK": 2,
}

func (x OrderType) String() string {
	return proto.EnumName(OrderType_name, int32(x))
}
func (OrderType) EnumDescriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

type OrderStatus int32

const (
	OrderStatus_ORDER_UNKNOWN  OrderStatus = 0
	OrderStatus_ORDER_INACTIVE OrderStatus = 1
	OrderStatus_ORDER_ACTIVE   OrderStatus = 2
)

var OrderStatus_name = map[int32]string{
	0: "ORDER_UNKNOWN",
	1: "ORDER_INACTIVE",
	2: "ORDER_ACTIVE",
}
var OrderStatus_value = map[string]int32{
	"ORDER_UNKNOWN":  0,
	"ORDER_INACTIVE": 1,
	"ORDER_ACTIVE":   2,
}

func (x OrderStatus) String() string {
	return proto.EnumName(OrderStatus_name, int32(x))
}
func (OrderStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor7, []int{1} }

type IdentityLevel int32

const (
	IdentityLevel_ANONYMOUS    IdentityLevel = 0
	IdentityLevel_PSEUDONYMOUS IdentityLevel = 1
	IdentityLevel_IDENTIFIED   IdentityLevel = 2
)

var IdentityLevel_name = map[int32]string{
	0: "ANONYMOUS",
	1: "PSEUDONYMOUS",
	2: "IDENTIFIED",
}
var IdentityLevel_value = map[string]int32{
	"ANONYMOUS":    0,
	"PSEUDONYMOUS": 1,
	"IDENTIFIED":   2,
}

func (x IdentityLevel) String() string {
	return proto.EnumName(IdentityLevel_name, int32(x))
}
func (IdentityLevel) EnumDescriptor() ([]byte, []int) { return fileDescriptor7, []int{2} }

type DealStatus int32

const (
	DealStatus_DEAL_UNKNOWN  DealStatus = 0
	DealStatus_DEAL_ACCEPTED DealStatus = 1
	DealStatus_DEAL_CLOSED   DealStatus = 2
)

var DealStatus_name = map[int32]string{
	0: "DEAL_UNKNOWN",
	1: "DEAL_ACCEPTED",
	2: "DEAL_CLOSED",
}
var DealStatus_value = map[string]int32{
	"DEAL_UNKNOWN":  0,
	"DEAL_ACCEPTED": 1,
	"DEAL_CLOSED":   2,
}

func (x DealStatus) String() string {
	return proto.EnumName(DealStatus_name, int32(x))
}
func (DealStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor7, []int{3} }

type ChangeRequestStatus int32

const (
	ChangeRequestStatus_REQUEST_UNKNOWN  ChangeRequestStatus = 0
	ChangeRequestStatus_REQUEST_CREATED  ChangeRequestStatus = 1
	ChangeRequestStatus_REQUEST_CANCELED ChangeRequestStatus = 2
	ChangeRequestStatus_REQUEST_REJECTED ChangeRequestStatus = 3
	ChangeRequestStatus_REQUEST_ACCEPTED ChangeRequestStatus = 4
)

var ChangeRequestStatus_name = map[int32]string{
	0: "REQUEST_UNKNOWN",
	1: "REQUEST_CREATED",
	2: "REQUEST_CANCELED",
	3: "REQUEST_REJECTED",
	4: "REQUEST_ACCEPTED",
}
var ChangeRequestStatus_value = map[string]int32{
	"REQUEST_UNKNOWN":  0,
	"REQUEST_CREATED":  1,
	"REQUEST_CANCELED": 2,
	"REQUEST_REJECTED": 3,
	"REQUEST_ACCEPTED": 4,
}

func (x ChangeRequestStatus) String() string {
	return proto.EnumName(ChangeRequestStatus_name, int32(x))
}
func (ChangeRequestStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor7, []int{4} }

type GetOrdersReply struct {
	Orders []*Order `protobuf:"bytes,1,rep,name=orders" json:"orders,omitempty"`
}

func (m *GetOrdersReply) Reset()                    { *m = GetOrdersReply{} }
func (m *GetOrdersReply) String() string            { return proto.CompactTextString(m) }
func (*GetOrdersReply) ProtoMessage()               {}
func (*GetOrdersReply) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

func (m *GetOrdersReply) GetOrders() []*Order {
	if m != nil {
		return m.Orders
	}
	return nil
}

type Benchmarks struct {
	Values []uint64 `protobuf:"varint,1,rep,packed,name=values" json:"values,omitempty"`
}

func (m *Benchmarks) Reset()                    { *m = Benchmarks{} }
func (m *Benchmarks) String() string            { return proto.CompactTextString(m) }
func (*Benchmarks) ProtoMessage()               {}
func (*Benchmarks) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{1} }

func (m *Benchmarks) GetValues() []uint64 {
	if m != nil {
		return m.Values
	}
	return nil
}

type Deal struct {
	Id             *BigInt     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Benchmarks     *Benchmarks `protobuf:"bytes,2,opt,name=benchmarks" json:"benchmarks,omitempty"`
	SupplierID     *EthAddress `protobuf:"bytes,3,opt,name=supplierID" json:"supplierID,omitempty"`
	ConsumerID     *EthAddress `protobuf:"bytes,4,opt,name=consumerID" json:"consumerID,omitempty"`
	MasterID       *EthAddress `protobuf:"bytes,5,opt,name=masterID" json:"masterID,omitempty"`
	AskID          *BigInt     `protobuf:"bytes,6,opt,name=askID" json:"askID,omitempty"`
	BidID          *BigInt     `protobuf:"bytes,7,opt,name=bidID" json:"bidID,omitempty"`
	Duration       uint64      `protobuf:"varint,8,opt,name=duration" json:"duration,omitempty"`
	Price          *BigInt     `protobuf:"bytes,9,opt,name=price" json:"price,omitempty"`
	StartTime      *Timestamp  `protobuf:"bytes,10,opt,name=startTime" json:"startTime,omitempty"`
	EndTime        *Timestamp  `protobuf:"bytes,11,opt,name=endTime" json:"endTime,omitempty"`
	Status         DealStatus  `protobuf:"varint,12,opt,name=status,enum=sonm.DealStatus" json:"status,omitempty"`
	BlockedBalance *BigInt     `protobuf:"bytes,13,opt,name=blockedBalance" json:"blockedBalance,omitempty"`
	TotalPayout    *BigInt     `protobuf:"bytes,14,opt,name=totalPayout" json:"totalPayout,omitempty"`
	LastBillTS     *Timestamp  `protobuf:"bytes,15,opt,name=lastBillTS" json:"lastBillTS,omitempty"`
}

func (m *Deal) Reset()                    { *m = Deal{} }
func (m *Deal) String() string            { return proto.CompactTextString(m) }
func (*Deal) ProtoMessage()               {}
func (*Deal) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{2} }

func (m *Deal) GetId() *BigInt {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Deal) GetBenchmarks() *Benchmarks {
	if m != nil {
		return m.Benchmarks
	}
	return nil
}

func (m *Deal) GetSupplierID() *EthAddress {
	if m != nil {
		return m.SupplierID
	}
	return nil
}

func (m *Deal) GetConsumerID() *EthAddress {
	if m != nil {
		return m.ConsumerID
	}
	return nil
}

func (m *Deal) GetMasterID() *EthAddress {
	if m != nil {
		return m.MasterID
	}
	return nil
}

func (m *Deal) GetAskID() *BigInt {
	if m != nil {
		return m.AskID
	}
	return nil
}

func (m *Deal) GetBidID() *BigInt {
	if m != nil {
		return m.BidID
	}
	return nil
}

func (m *Deal) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *Deal) GetPrice() *BigInt {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *Deal) GetStartTime() *Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *Deal) GetEndTime() *Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *Deal) GetStatus() DealStatus {
	if m != nil {
		return m.Status
	}
	return DealStatus_DEAL_UNKNOWN
}

func (m *Deal) GetBlockedBalance() *BigInt {
	if m != nil {
		return m.BlockedBalance
	}
	return nil
}

func (m *Deal) GetTotalPayout() *BigInt {
	if m != nil {
		return m.TotalPayout
	}
	return nil
}

func (m *Deal) GetLastBillTS() *Timestamp {
	if m != nil {
		return m.LastBillTS
	}
	return nil
}

type Order struct {
	Id             *BigInt       `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	DealID         *BigInt       `protobuf:"bytes,2,opt,name=dealID" json:"dealID,omitempty"`
	OrderType      OrderType     `protobuf:"varint,3,opt,name=orderType,enum=sonm.OrderType" json:"orderType,omitempty"`
	OrderStatus    OrderStatus   `protobuf:"varint,4,opt,name=orderStatus,enum=sonm.OrderStatus" json:"orderStatus,omitempty"`
	AuthorID       *EthAddress   `protobuf:"bytes,5,opt,name=authorID" json:"authorID,omitempty"`
	CounterpartyID *EthAddress   `protobuf:"bytes,6,opt,name=counterpartyID" json:"counterpartyID,omitempty"`
	Duration       uint64        `protobuf:"varint,7,opt,name=duration" json:"duration,omitempty"`
	Price          *BigInt       `protobuf:"bytes,8,opt,name=price" json:"price,omitempty"`
	Netflags       uint64        `protobuf:"varint,9,opt,name=netflags" json:"netflags,omitempty"`
	IdentityLevel  IdentityLevel `protobuf:"varint,10,opt,name=identityLevel,enum=sonm.IdentityLevel" json:"identityLevel,omitempty"`
	Blacklist      string        `protobuf:"bytes,11,opt,name=blacklist" json:"blacklist,omitempty"`
	Tag            []byte        `protobuf:"bytes,12,opt,name=tag,proto3" json:"tag,omitempty"`
	Benchmarks     *Benchmarks   `protobuf:"bytes,13,opt,name=benchmarks" json:"benchmarks,omitempty"`
	FrozenSum      *BigInt       `protobuf:"bytes,14,opt,name=frozenSum" json:"frozenSum,omitempty"`
}

func (m *Order) Reset()                    { *m = Order{} }
func (m *Order) String() string            { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()               {}
func (*Order) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{3} }

func (m *Order) GetId() *BigInt {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Order) GetDealID() *BigInt {
	if m != nil {
		return m.DealID
	}
	return nil
}

func (m *Order) GetOrderType() OrderType {
	if m != nil {
		return m.OrderType
	}
	return OrderType_ANY
}

func (m *Order) GetOrderStatus() OrderStatus {
	if m != nil {
		return m.OrderStatus
	}
	return OrderStatus_ORDER_UNKNOWN
}

func (m *Order) GetAuthorID() *EthAddress {
	if m != nil {
		return m.AuthorID
	}
	return nil
}

func (m *Order) GetCounterpartyID() *EthAddress {
	if m != nil {
		return m.CounterpartyID
	}
	return nil
}

func (m *Order) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *Order) GetPrice() *BigInt {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *Order) GetNetflags() uint64 {
	if m != nil {
		return m.Netflags
	}
	return 0
}

func (m *Order) GetIdentityLevel() IdentityLevel {
	if m != nil {
		return m.IdentityLevel
	}
	return IdentityLevel_ANONYMOUS
}

func (m *Order) GetBlacklist() string {
	if m != nil {
		return m.Blacklist
	}
	return ""
}

func (m *Order) GetTag() []byte {
	if m != nil {
		return m.Tag
	}
	return nil
}

func (m *Order) GetBenchmarks() *Benchmarks {
	if m != nil {
		return m.Benchmarks
	}
	return nil
}

func (m *Order) GetFrozenSum() *BigInt {
	if m != nil {
		return m.FrozenSum
	}
	return nil
}

type BidNetwork struct {
	Overlay  bool `protobuf:"varint,1,opt,name=overlay" json:"overlay,omitempty"`
	Outbound bool `protobuf:"varint,2,opt,name=outbound" json:"outbound,omitempty"`
	Incoming bool `protobuf:"varint,3,opt,name=incoming" json:"incoming,omitempty"`
}

func (m *BidNetwork) Reset()                    { *m = BidNetwork{} }
func (m *BidNetwork) String() string            { return proto.CompactTextString(m) }
func (*BidNetwork) ProtoMessage()               {}
func (*BidNetwork) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{4} }

func (m *BidNetwork) GetOverlay() bool {
	if m != nil {
		return m.Overlay
	}
	return false
}

func (m *BidNetwork) GetOutbound() bool {
	if m != nil {
		return m.Outbound
	}
	return false
}

func (m *BidNetwork) GetIncoming() bool {
	if m != nil {
		return m.Incoming
	}
	return false
}

type BidResources struct {
	Network    *BidNetwork       `protobuf:"bytes,1,opt,name=network" json:"network,omitempty"`
	Benchmarks map[string]uint64 `protobuf:"bytes,2,rep,name=benchmarks" json:"benchmarks,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (m *BidResources) Reset()                    { *m = BidResources{} }
func (m *BidResources) String() string            { return proto.CompactTextString(m) }
func (*BidResources) ProtoMessage()               {}
func (*BidResources) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{5} }

func (m *BidResources) GetNetwork() *BidNetwork {
	if m != nil {
		return m.Network
	}
	return nil
}

func (m *BidResources) GetBenchmarks() map[string]uint64 {
	if m != nil {
		return m.Benchmarks
	}
	return nil
}

type BidOrder struct {
	ID           string        `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Duration     *Duration     `protobuf:"bytes,2,opt,name=duration" json:"duration,omitempty"`
	Price        *Price        `protobuf:"bytes,3,opt,name=price" json:"price,omitempty"`
	Blacklist    *EthAddress   `protobuf:"bytes,4,opt,name=blacklist" json:"blacklist,omitempty"`
	Identity     IdentityLevel `protobuf:"varint,5,opt,name=identity,enum=sonm.IdentityLevel" json:"identity,omitempty"`
	Tag          string        `protobuf:"bytes,6,opt,name=tag" json:"tag,omitempty"`
	Counterparty *EthAddress   `protobuf:"bytes,7,opt,name=Counterparty" json:"Counterparty,omitempty"`
	Resources    *BidResources `protobuf:"bytes,8,opt,name=resources" json:"resources,omitempty"`
}

func (m *BidOrder) Reset()                    { *m = BidOrder{} }
func (m *BidOrder) String() string            { return proto.CompactTextString(m) }
func (*BidOrder) ProtoMessage()               {}
func (*BidOrder) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{6} }

func (m *BidOrder) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *BidOrder) GetDuration() *Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (m *BidOrder) GetPrice() *Price {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *BidOrder) GetBlacklist() *EthAddress {
	if m != nil {
		return m.Blacklist
	}
	return nil
}

func (m *BidOrder) GetIdentity() IdentityLevel {
	if m != nil {
		return m.Identity
	}
	return IdentityLevel_ANONYMOUS
}

func (m *BidOrder) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *BidOrder) GetCounterparty() *EthAddress {
	if m != nil {
		return m.Counterparty
	}
	return nil
}

func (m *BidOrder) GetResources() *BidResources {
	if m != nil {
		return m.Resources
	}
	return nil
}

func init() {
	proto.RegisterType((*GetOrdersReply)(nil), "sonm.GetOrdersReply")
	proto.RegisterType((*Benchmarks)(nil), "sonm.Benchmarks")
	proto.RegisterType((*Deal)(nil), "sonm.Deal")
	proto.RegisterType((*Order)(nil), "sonm.Order")
	proto.RegisterType((*BidNetwork)(nil), "sonm.BidNetwork")
	proto.RegisterType((*BidResources)(nil), "sonm.BidResources")
	proto.RegisterType((*BidOrder)(nil), "sonm.BidOrder")
	proto.RegisterEnum("sonm.OrderType", OrderType_name, OrderType_value)
	proto.RegisterEnum("sonm.OrderStatus", OrderStatus_name, OrderStatus_value)
	proto.RegisterEnum("sonm.IdentityLevel", IdentityLevel_name, IdentityLevel_value)
	proto.RegisterEnum("sonm.DealStatus", DealStatus_name, DealStatus_value)
	proto.RegisterEnum("sonm.ChangeRequestStatus", ChangeRequestStatus_name, ChangeRequestStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Market service

type MarketClient interface {
	// GetOrders returns orders by given filter parameters.
	// Note that set of filters may be changed in the closest future.
	GetOrders(ctx context.Context, in *Count, opts ...grpc.CallOption) (*GetOrdersReply, error)
	// CreateOrder places new order on the Marketplace.
	// Note that current impl of Node API prevents you from
	// creating ASKs orders.
	CreateOrder(ctx context.Context, in *BidOrder, opts ...grpc.CallOption) (*Order, error)
	// GetOrderByID returns order by given ID.
	// If order save an `inactive` status returns error instead.
	GetOrderByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Order, error)
	// CancelOrder removes active order from the Marketplace.
	CancelOrder(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error)
}

type marketClient struct {
	cc *grpc.ClientConn
}

func NewMarketClient(cc *grpc.ClientConn) MarketClient {
	return &marketClient{cc}
}

func (c *marketClient) GetOrders(ctx context.Context, in *Count, opts ...grpc.CallOption) (*GetOrdersReply, error) {
	out := new(GetOrdersReply)
	err := grpc.Invoke(ctx, "/sonm.Market/GetOrders", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) CreateOrder(ctx context.Context, in *BidOrder, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := grpc.Invoke(ctx, "/sonm.Market/CreateOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) GetOrderByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := grpc.Invoke(ctx, "/sonm.Market/GetOrderByID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) CancelOrder(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.Market/CancelOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Market service

type MarketServer interface {
	// GetOrders returns orders by given filter parameters.
	// Note that set of filters may be changed in the closest future.
	GetOrders(context.Context, *Count) (*GetOrdersReply, error)
	// CreateOrder places new order on the Marketplace.
	// Note that current impl of Node API prevents you from
	// creating ASKs orders.
	CreateOrder(context.Context, *BidOrder) (*Order, error)
	// GetOrderByID returns order by given ID.
	// If order save an `inactive` status returns error instead.
	GetOrderByID(context.Context, *ID) (*Order, error)
	// CancelOrder removes active order from the Marketplace.
	CancelOrder(context.Context, *ID) (*Empty, error)
}

func RegisterMarketServer(s *grpc.Server, srv MarketServer) {
	s.RegisterService(&_Market_serviceDesc, srv)
}

func _Market_GetOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Count)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).GetOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Market/GetOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).GetOrders(ctx, req.(*Count))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BidOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Market/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).CreateOrder(ctx, req.(*BidOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_GetOrderByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).GetOrderByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Market/GetOrderByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).GetOrderByID(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Market/CancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).CancelOrder(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

var _Market_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sonm.Market",
	HandlerType: (*MarketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrders",
			Handler:    _Market_GetOrders_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _Market_CreateOrder_Handler,
		},
		{
			MethodName: "GetOrderByID",
			Handler:    _Market_GetOrderByID_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _Market_CancelOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "marketplace.proto",
}

// Begin grpccmd
var _ = grpccmd.RunE

// Market
var _MarketCmd = &cobra.Command{
	Use:   "market [method]",
	Short: "Subcommand for the Market service.",
}

var _Market_GetOrdersCmd = &cobra.Command{
	Use:   "getOrders",
	Short: "Make the GetOrders method call, input-type: sonm.Count output-type: sonm.GetOrdersReply",
	RunE: grpccmd.RunE(
		"GetOrders",
		"sonm.Count",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewMarketClient(cc)
		},
	),
}

var _Market_GetOrdersCmd_gen = &cobra.Command{
	Use:   "getOrders-gen",
	Short: "Generate JSON for method call of GetOrders (input-type: sonm.Count)",
	RunE:  grpccmd.TypeToJson("sonm.Count"),
}

var _Market_CreateOrderCmd = &cobra.Command{
	Use:   "createOrder",
	Short: "Make the CreateOrder method call, input-type: sonm.BidOrder output-type: sonm.Order",
	RunE: grpccmd.RunE(
		"CreateOrder",
		"sonm.BidOrder",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewMarketClient(cc)
		},
	),
}

var _Market_CreateOrderCmd_gen = &cobra.Command{
	Use:   "createOrder-gen",
	Short: "Generate JSON for method call of CreateOrder (input-type: sonm.BidOrder)",
	RunE:  grpccmd.TypeToJson("sonm.BidOrder"),
}

var _Market_GetOrderByIDCmd = &cobra.Command{
	Use:   "getOrderByID",
	Short: "Make the GetOrderByID method call, input-type: sonm.ID output-type: sonm.Order",
	RunE: grpccmd.RunE(
		"GetOrderByID",
		"sonm.ID",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewMarketClient(cc)
		},
	),
}

var _Market_GetOrderByIDCmd_gen = &cobra.Command{
	Use:   "getOrderByID-gen",
	Short: "Generate JSON for method call of GetOrderByID (input-type: sonm.ID)",
	RunE:  grpccmd.TypeToJson("sonm.ID"),
}

var _Market_CancelOrderCmd = &cobra.Command{
	Use:   "cancelOrder",
	Short: "Make the CancelOrder method call, input-type: sonm.ID output-type: sonm.Empty",
	RunE: grpccmd.RunE(
		"CancelOrder",
		"sonm.ID",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewMarketClient(cc)
		},
	),
}

var _Market_CancelOrderCmd_gen = &cobra.Command{
	Use:   "cancelOrder-gen",
	Short: "Generate JSON for method call of CancelOrder (input-type: sonm.ID)",
	RunE:  grpccmd.TypeToJson("sonm.ID"),
}

// Register commands with the root command and service command
func init() {
	grpccmd.RegisterServiceCmd(_MarketCmd)
	_MarketCmd.AddCommand(
		_Market_GetOrdersCmd,
		_Market_GetOrdersCmd_gen,
		_Market_CreateOrderCmd,
		_Market_CreateOrderCmd_gen,
		_Market_GetOrderByIDCmd,
		_Market_GetOrderByIDCmd_gen,
		_Market_CancelOrderCmd,
		_Market_CancelOrderCmd_gen,
	)
}

// End grpccmd

func init() { proto.RegisterFile("marketplace.proto", fileDescriptor7) }

var fileDescriptor7 = []byte{
	// 1111 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0xdf, 0x8f, 0xdb, 0x44,
	0x10, 0x8e, 0x73, 0xb9, 0xfc, 0x98, 0x24, 0x4e, 0x6e, 0xef, 0x84, 0xac, 0xa8, 0x0f, 0x87, 0xa9,
	0xca, 0x11, 0x95, 0x6b, 0x75, 0x2d, 0x52, 0x41, 0x42, 0x22, 0x89, 0x5d, 0x64, 0x7a, 0x4d, 0x8e,
	0x4d, 0x0e, 0xd4, 0x17, 0xd0, 0x26, 0xde, 0xe6, 0x56, 0x71, 0xec, 0x60, 0xaf, 0x0f, 0x85, 0x37,
	0x9e, 0xf9, 0x8b, 0x90, 0xe0, 0x8d, 0x3f, 0x0c, 0xed, 0xfa, 0x47, 0x36, 0xb9, 0x04, 0xfa, 0xe6,
	0xf9, 0xe6, 0x9b, 0xf1, 0xec, 0xec, 0xb7, 0xb3, 0x0b, 0x27, 0x4b, 0x12, 0x2e, 0x28, 0x5f, 0x79,
	0x64, 0x46, 0x2f, 0x57, 0x61, 0xc0, 0x03, 0x54, 0x8a, 0x02, 0x7f, 0xd9, 0x69, 0x4c, 0xd9, 0x9c,
	0xf9, 0x3c, 0xc1, 0x3a, 0x2d, 0xe6, 0x0b, 0xd4, 0x67, 0x24, 0x03, 0x38, 0x5b, 0xd2, 0x88, 0x93,
	0xe5, 0x2a, 0x01, 0xcc, 0x2f, 0x40, 0xff, 0x96, 0xf2, 0x51, 0xe8, 0xd2, 0x30, 0xc2, 0x74, 0xe5,
	0xad, 0xd1, 0x27, 0x50, 0x0e, 0xa4, 0x69, 0x68, 0xe7, 0x47, 0x17, 0xf5, 0xab, 0xfa, 0xa5, 0x48,
	0x71, 0x29, 0x29, 0x38, 0x75, 0x99, 0x8f, 0x01, 0xfa, 0xd4, 0x9f, 0xdd, 0x89, 0x32, 0x22, 0xf4,
	0x11, 0x94, 0xef, 0x89, 0x17, 0xd3, 0x24, 0xa4, 0x84, 0x53, 0xcb, 0xfc, 0xe3, 0x18, 0x4a, 0x16,
	0x25, 0x1e, 0x7a, 0x04, 0x45, 0xe6, 0x1a, 0xda, 0xb9, 0x76, 0x51, 0xbf, 0x6a, 0x24, 0xf9, 0xfa,
	0x6c, 0xee, 0xf8, 0x1c, 0x17, 0x99, 0x8b, 0x9e, 0x03, 0x4c, 0xf3, 0x64, 0x46, 0x51, 0xb2, 0xda,
	0x29, 0x2b, 0xc7, 0xb1, 0xc2, 0x11, 0x11, 0x51, 0xbc, 0x5a, 0x79, 0x8c, 0x86, 0x8e, 0x65, 0x1c,
	0xa9, 0x11, 0x36, 0xbf, 0xeb, 0xb9, 0x6e, 0x48, 0xa3, 0x08, 0x2b, 0x1c, 0x11, 0x31, 0x0b, 0xfc,
	0x28, 0x5e, 0xca, 0x88, 0xd2, 0xa1, 0x88, 0x0d, 0x07, 0x3d, 0x85, 0xea, 0x92, 0x44, 0x5c, 0xf2,
	0x8f, 0x0f, 0xf0, 0x73, 0x06, 0x32, 0xe1, 0x98, 0x44, 0x0b, 0xc7, 0x32, 0xca, 0x7b, 0x16, 0x99,
	0xb8, 0x04, 0x67, 0xca, 0x5c, 0xc7, 0x32, 0x2a, 0xfb, 0x38, 0xd2, 0x85, 0x3a, 0x50, 0x75, 0xe3,
	0x90, 0x70, 0x16, 0xf8, 0x46, 0xf5, 0x5c, 0xbb, 0x28, 0xe1, 0xdc, 0x16, 0xf1, 0xab, 0x90, 0xcd,
	0xa8, 0x51, 0xdb, 0x17, 0x2f, 0x5d, 0xe8, 0x73, 0xa8, 0x45, 0x9c, 0x84, 0x7c, 0xc2, 0x96, 0xd4,
	0x00, 0xc9, 0x6b, 0x25, 0xbc, 0x49, 0xb6, 0xf3, 0x78, 0xc3, 0x40, 0x9f, 0x41, 0x85, 0xfa, 0xae,
	0x24, 0xd7, 0xf7, 0x93, 0x33, 0x3f, 0xba, 0x80, 0x72, 0xc4, 0x09, 0x8f, 0x23, 0xa3, 0x71, 0xae,
	0x5d, 0xe8, 0x59, 0x37, 0xc4, 0xfe, 0x8e, 0x25, 0x8e, 0x53, 0x3f, 0x7a, 0x09, 0xfa, 0xd4, 0x0b,
	0x66, 0x0b, 0xea, 0xf6, 0x89, 0x47, 0xfc, 0x19, 0x35, 0x9a, 0x7b, 0x0a, 0xde, 0xe1, 0xa0, 0x4b,
	0xa8, 0xf3, 0x80, 0x13, 0xef, 0x86, 0xac, 0x83, 0x98, 0x1b, 0xfa, 0x9e, 0x10, 0x95, 0x80, 0x9e,
	0x01, 0x78, 0x24, 0xe2, 0x7d, 0xe6, 0x79, 0x93, 0xb1, 0xd1, 0xda, 0x5f, 0xbd, 0x42, 0x31, 0xff,
	0x2a, 0xc1, 0xb1, 0x54, 0xf1, 0xff, 0xc8, 0xf1, 0x31, 0x94, 0x5d, 0x4a, 0x3c, 0xc7, 0x4a, 0xa5,
	0xb8, 0xcd, 0x48, 0x7d, 0xa2, 0xd1, 0xf2, 0x2c, 0x4c, 0xd6, 0x2b, 0x2a, 0x15, 0xa8, 0x67, 0x7f,
	0x1f, 0x65, 0x30, 0xde, 0x30, 0xd0, 0x0b, 0xa8, 0x4b, 0x23, 0x69, 0x95, 0x14, 0xa0, 0x7e, 0x75,
	0xa2, 0x04, 0xa4, 0x3d, 0x54, 0x59, 0x42, 0x82, 0x24, 0xe6, 0x77, 0xc1, 0x7f, 0x4a, 0x30, 0x63,
	0xa0, 0x57, 0xa0, 0xcf, 0x82, 0xd8, 0xe7, 0x34, 0x5c, 0x91, 0x90, 0xaf, 0x73, 0x2d, 0x3e, 0x8c,
	0xd9, 0xe1, 0x6d, 0x89, 0xae, 0x72, 0x48, 0x74, 0xd5, 0xc3, 0xa2, 0xeb, 0x40, 0xd5, 0xa7, 0xfc,
	0xbd, 0x47, 0xe6, 0x91, 0xd4, 0x66, 0x09, 0xe7, 0x36, 0xfa, 0x12, 0x9a, 0xcc, 0xa5, 0x3e, 0x67,
	0x7c, 0x7d, 0x4d, 0xef, 0xa9, 0x27, 0x45, 0xa9, 0x5f, 0x9d, 0x26, 0x79, 0x1c, 0xd5, 0x85, 0xb7,
	0x99, 0xe8, 0x11, 0xd4, 0xa6, 0x1e, 0x99, 0x2d, 0x3c, 0x16, 0x71, 0x29, 0xcf, 0x1a, 0xde, 0x00,
	0xa8, 0x0d, 0x47, 0x9c, 0xcc, 0xa5, 0x18, 0x1b, 0x58, 0x7c, 0xee, 0xcc, 0x91, 0xe6, 0x07, 0xcc,
	0x91, 0x2e, 0xd4, 0xde, 0x87, 0xc1, 0x6f, 0xd4, 0x1f, 0xc7, 0xcb, 0xbd, 0x8a, 0xdb, 0xb8, 0xcd,
	0x9f, 0x00, 0xfa, 0xcc, 0x1d, 0x52, 0xfe, 0x6b, 0x10, 0x2e, 0x90, 0x01, 0x95, 0xe0, 0x9e, 0x86,
	0x1e, 0x59, 0x4b, 0x1d, 0x55, 0x71, 0x66, 0x8a, 0x66, 0x04, 0x31, 0x9f, 0x06, 0xb1, 0xef, 0x4a,
	0x01, 0x55, 0x71, 0x6e, 0x0b, 0x1f, 0xf3, 0x67, 0xc1, 0x92, 0xf9, 0x73, 0xa9, 0x99, 0x2a, 0xce,
	0x6d, 0xf3, 0x6f, 0x0d, 0x1a, 0x7d, 0xe6, 0x62, 0x1a, 0x05, 0x71, 0x38, 0xa3, 0xa2, 0xb8, 0x8a,
	0x9f, 0xfc, 0x2d, 0x95, 0x6a, 0xb6, 0x96, 0xbc, 0x0a, 0x9c, 0x11, 0x50, 0x7f, 0x67, 0x84, 0x8a,
	0xc1, 0x6d, 0xe6, 0xf4, 0x3c, 0xa7, 0xd2, 0x07, 0xdb, 0xe7, 0xe1, 0x5a, 0x6d, 0x46, 0xe7, 0x6b,
	0x68, 0xed, 0xb8, 0x45, 0x8f, 0x17, 0x34, 0x59, 0x61, 0x0d, 0x8b, 0x4f, 0x74, 0x06, 0xc7, 0x72,
	0xb8, 0xcb, 0xa5, 0x95, 0x70, 0x62, 0x7c, 0x55, 0x7c, 0xa5, 0x99, 0xff, 0x14, 0xa1, 0xda, 0x67,
	0x6e, 0x72, 0xc2, 0x74, 0x28, 0x3a, 0x56, 0x1a, 0x57, 0x74, 0x2c, 0xd4, 0x55, 0x14, 0x96, 0x9c,
	0x2a, 0x3d, 0x1d, 0x1f, 0x29, 0xaa, 0x28, 0xee, 0xe3, 0x4c, 0x71, 0xc9, 0x5c, 0x4f, 0xef, 0x9f,
	0x1b, 0x01, 0x65, 0x82, 0xbb, 0x54, 0x95, 0x71, 0x68, 0x98, 0x2b, 0x5a, 0x79, 0x06, 0xd5, 0x4c,
	0x5a, 0xf2, 0x20, 0x1d, 0xd0, 0x5f, 0x4e, 0xca, 0xc4, 0x55, 0x4e, 0x16, 0x2e, 0xc4, 0xf5, 0x12,
	0x1a, 0x03, 0xe5, 0xd4, 0xa4, 0x33, 0xfc, 0xe1, 0x5f, 0xb7, 0x58, 0xe8, 0x39, 0xd4, 0xc2, 0xac,
	0xf9, 0xe9, 0x09, 0x42, 0x0f, 0xb7, 0x05, 0x6f, 0x48, 0xdd, 0x27, 0x50, 0xcb, 0x07, 0x08, 0xaa,
	0xc0, 0x51, 0x6f, 0xf8, 0xae, 0x5d, 0x10, 0x1f, 0x7d, 0xc7, 0x6a, 0x6b, 0x12, 0x19, 0xbf, 0x69,
	0x17, 0xbb, 0xaf, 0xa1, 0xae, 0xcc, 0x0d, 0x74, 0x02, 0xcd, 0x11, 0xb6, 0x6c, 0xfc, 0xf3, 0xed,
	0xf0, 0xcd, 0x70, 0xf4, 0xe3, 0xb0, 0x5d, 0x40, 0x08, 0xf4, 0x04, 0x72, 0x86, 0xbd, 0xc1, 0xc4,
	0xf9, 0xc1, 0x6e, 0x6b, 0xa8, 0x0d, 0x8d, 0x04, 0x4b, 0x91, 0x62, 0xf7, 0x1b, 0x68, 0x6e, 0x35,
	0x01, 0x35, 0xa1, 0xd6, 0x1b, 0x8e, 0x86, 0xef, 0xde, 0x8e, 0x6e, 0xc7, 0xed, 0x82, 0x88, 0xb8,
	0x19, 0xdb, 0xb7, 0x56, 0x86, 0x68, 0x48, 0x07, 0x70, 0x2c, 0x7b, 0x38, 0x71, 0x5e, 0x3b, 0xb6,
	0xd5, 0x2e, 0x76, 0xfb, 0x00, 0x9b, 0x4b, 0x40, 0xf0, 0x2d, 0xbb, 0x77, 0xad, 0xd4, 0x71, 0x02,
	0x4d, 0x89, 0xf4, 0x06, 0x03, 0xfb, 0x66, 0x62, 0x8b, 0x55, 0xb4, 0xa0, 0x2e, 0xa1, 0xc1, 0xf5,
	0x68, 0x2c, 0x73, 0xfc, 0xae, 0xc1, 0xe9, 0xe0, 0x8e, 0xf8, 0x73, 0x8a, 0xe9, 0x2f, 0x31, 0x8d,
	0x78, 0x9a, 0xed, 0x14, 0x5a, 0xd8, 0xfe, 0xfe, 0xd6, 0x1e, 0x4f, 0x94, 0x84, 0x0a, 0x38, 0xc0,
	0x76, 0x2f, 0x49, 0x79, 0x06, 0xed, 0x1c, 0xec, 0x0d, 0x07, 0xf6, 0xb5, 0xc8, 0xab, 0xa2, 0xd8,
	0xfe, 0xce, 0x1e, 0x08, 0xee, 0x91, 0x8a, 0xe6, 0x45, 0x95, 0xae, 0xfe, 0xd4, 0xa0, 0xfc, 0x56,
	0x3e, 0xab, 0xc4, 0xb6, 0xe5, 0xaf, 0x22, 0x94, 0x0a, 0x50, 0xee, 0x6b, 0xe7, 0x2c, 0x31, 0xb6,
	0xdf, 0x4c, 0x66, 0x01, 0x3d, 0x85, 0xfa, 0x20, 0xa4, 0x84, 0xd3, 0x54, 0xff, 0xf9, 0x26, 0x4b,
	0xbb, 0xa3, 0x3e, 0xa2, 0xcc, 0x02, 0xfa, 0x14, 0x1a, 0x59, 0x86, 0xbe, 0x18, 0xc0, 0xd5, 0x54,
	0x8d, 0xd6, 0x2e, 0xf1, 0x09, 0xd4, 0x07, 0xe2, 0x76, 0xf4, 0x92, 0xb4, 0x0f, 0x78, 0xf6, 0x72,
	0xc5, 0xd7, 0x66, 0x61, 0x5a, 0x96, 0xaf, 0xb9, 0x17, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xfd,
	0xdf, 0x9c, 0x1c, 0x18, 0x0a, 0x00, 0x00,
}
