// Code generated by protoc-gen-go. DO NOT EDIT.
// source: marketplace.proto

package sonm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// grpccmd imports
import (
	"io"

	"github.com/spf13/cobra"
	"github.com/sshaman1101/grpccmd"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GetOrdersRequest struct {
	// Order keeps slot and type for searching
	Order *Order `protobuf:"bytes,1,opt,name=order" json:"order,omitempty"`
	// Count describe how namy results must be returned (order by price)
	Count uint64 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *GetOrdersRequest) Reset()                    { *m = GetOrdersRequest{} }
func (m *GetOrdersRequest) String() string            { return proto.CompactTextString(m) }
func (*GetOrdersRequest) ProtoMessage()               {}
func (*GetOrdersRequest) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{0} }

func (m *GetOrdersRequest) GetOrder() *Order {
	if m != nil {
		return m.Order
	}
	return nil
}

func (m *GetOrdersRequest) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type GetOrdersReply struct {
	Orders []*Order `protobuf:"bytes,1,rep,name=orders" json:"orders,omitempty"`
}

func (m *GetOrdersReply) Reset()                    { *m = GetOrdersReply{} }
func (m *GetOrdersReply) String() string            { return proto.CompactTextString(m) }
func (*GetOrdersReply) ProtoMessage()               {}
func (*GetOrdersReply) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{1} }

func (m *GetOrdersReply) GetOrders() []*Order {
	if m != nil {
		return m.Orders
	}
	return nil
}

// GetProcessingReply represent Node's local
// orders processing status
type GetProcessingReply struct {
	Orders map[string]*GetProcessingReply_ProcessedOrder `protobuf:"bytes,2,rep,name=orders" json:"orders,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *GetProcessingReply) Reset()                    { *m = GetProcessingReply{} }
func (m *GetProcessingReply) String() string            { return proto.CompactTextString(m) }
func (*GetProcessingReply) ProtoMessage()               {}
func (*GetProcessingReply) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{2} }

func (m *GetProcessingReply) GetOrders() map[string]*GetProcessingReply_ProcessedOrder {
	if m != nil {
		return m.Orders
	}
	return nil
}

type GetProcessingReply_ProcessedOrder struct {
	Id        string     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Status    uint32     `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	Timestamp *Timestamp `protobuf:"bytes,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Extra     string     `protobuf:"bytes,4,opt,name=extra" json:"extra,omitempty"`
}

func (m *GetProcessingReply_ProcessedOrder) Reset()         { *m = GetProcessingReply_ProcessedOrder{} }
func (m *GetProcessingReply_ProcessedOrder) String() string { return proto.CompactTextString(m) }
func (*GetProcessingReply_ProcessedOrder) ProtoMessage()    {}
func (*GetProcessingReply_ProcessedOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{2, 0}
}

func (m *GetProcessingReply_ProcessedOrder) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GetProcessingReply_ProcessedOrder) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GetProcessingReply_ProcessedOrder) GetTimestamp() *Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *GetProcessingReply_ProcessedOrder) GetExtra() string {
	if m != nil {
		return m.Extra
	}
	return ""
}

type TouchOrdersRequest struct {
	IDs []string `protobuf:"bytes,1,rep,name=IDs" json:"IDs,omitempty"`
}

func (m *TouchOrdersRequest) Reset()                    { *m = TouchOrdersRequest{} }
func (m *TouchOrdersRequest) String() string            { return proto.CompactTextString(m) }
func (*TouchOrdersRequest) ProtoMessage()               {}
func (*TouchOrdersRequest) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{3} }

func (m *TouchOrdersRequest) GetIDs() []string {
	if m != nil {
		return m.IDs
	}
	return nil
}

func init() {
	proto.RegisterType((*GetOrdersRequest)(nil), "sonm.GetOrdersRequest")
	proto.RegisterType((*GetOrdersReply)(nil), "sonm.GetOrdersReply")
	proto.RegisterType((*GetProcessingReply)(nil), "sonm.GetProcessingReply")
	proto.RegisterType((*GetProcessingReply_ProcessedOrder)(nil), "sonm.GetProcessingReply.ProcessedOrder")
	proto.RegisterType((*TouchOrdersRequest)(nil), "sonm.TouchOrdersRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Market service

type MarketClient interface {
	// GetOrders returns orders by given filter parameters.
	// Note that set of filters may be changed in the closest future.
	GetOrders(ctx context.Context, in *GetOrdersRequest, opts ...grpc.CallOption) (*GetOrdersReply, error)
	// CreateOrder places new order on the Marketplace.
	// Note that current impl of Node API prevents you from
	// creating ASKs orders.
	CreateOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error)
	// GetOrderByID returns order by given ID.
	// If order save an `inactive` status returns error instead.
	GetOrderByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Order, error)
	// CancelOrder removes active order from the Marketplace.
	// todo(sshaman1101): use `ID` as parameter instead of whole `Order` struct.
	CancelOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Empty, error)
	// GetProcessing returns currently processing orders.
	// todo: rethink and improve.
	GetProcessing(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetProcessingReply, error)
	// todo: remove
	TouchOrders(ctx context.Context, in *TouchOrdersRequest, opts ...grpc.CallOption) (*Empty, error)
}

type marketClient struct {
	cc *grpc.ClientConn
}

func NewMarketClient(cc *grpc.ClientConn) MarketClient {
	return &marketClient{cc}
}

func (c *marketClient) GetOrders(ctx context.Context, in *GetOrdersRequest, opts ...grpc.CallOption) (*GetOrdersReply, error) {
	out := new(GetOrdersReply)
	err := grpc.Invoke(ctx, "/sonm.Market/GetOrders", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) CreateOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := grpc.Invoke(ctx, "/sonm.Market/CreateOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) GetOrderByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := grpc.Invoke(ctx, "/sonm.Market/GetOrderByID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) CancelOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.Market/CancelOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) GetProcessing(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetProcessingReply, error) {
	out := new(GetProcessingReply)
	err := grpc.Invoke(ctx, "/sonm.Market/GetProcessing", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) TouchOrders(ctx context.Context, in *TouchOrdersRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.Market/TouchOrders", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Market service

type MarketServer interface {
	// GetOrders returns orders by given filter parameters.
	// Note that set of filters may be changed in the closest future.
	GetOrders(context.Context, *GetOrdersRequest) (*GetOrdersReply, error)
	// CreateOrder places new order on the Marketplace.
	// Note that current impl of Node API prevents you from
	// creating ASKs orders.
	CreateOrder(context.Context, *Order) (*Order, error)
	// GetOrderByID returns order by given ID.
	// If order save an `inactive` status returns error instead.
	GetOrderByID(context.Context, *ID) (*Order, error)
	// CancelOrder removes active order from the Marketplace.
	// todo(sshaman1101): use `ID` as parameter instead of whole `Order` struct.
	CancelOrder(context.Context, *Order) (*Empty, error)
	// GetProcessing returns currently processing orders.
	// todo: rethink and improve.
	GetProcessing(context.Context, *Empty) (*GetProcessingReply, error)
	// todo: remove
	TouchOrders(context.Context, *TouchOrdersRequest) (*Empty, error)
}

func RegisterMarketServer(s *grpc.Server, srv MarketServer) {
	s.RegisterService(&_Market_serviceDesc, srv)
}

func _Market_GetOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).GetOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Market/GetOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).GetOrders(ctx, req.(*GetOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Market/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).CreateOrder(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_GetOrderByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).GetOrderByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Market/GetOrderByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).GetOrderByID(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Market/CancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).CancelOrder(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_GetProcessing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).GetProcessing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Market/GetProcessing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).GetProcessing(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_TouchOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TouchOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).TouchOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Market/TouchOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).TouchOrders(ctx, req.(*TouchOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Market_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sonm.Market",
	HandlerType: (*MarketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrders",
			Handler:    _Market_GetOrders_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _Market_CreateOrder_Handler,
		},
		{
			MethodName: "GetOrderByID",
			Handler:    _Market_GetOrderByID_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _Market_CancelOrder_Handler,
		},
		{
			MethodName: "GetProcessing",
			Handler:    _Market_GetProcessing_Handler,
		},
		{
			MethodName: "TouchOrders",
			Handler:    _Market_TouchOrders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "marketplace.proto",
}

// Begin grpccmd
var _ = grpccmd.RunE

// Market
var _MarketCmd = &cobra.Command{
	Use:   "market [method]",
	Short: "Subcommand for the Market service.",
}

var _Market_GetOrdersCmd = &cobra.Command{
	Use:   "getOrders",
	Short: "Make the GetOrders method call, input-type: sonm.GetOrdersRequest output-type: sonm.GetOrdersReply",
	RunE: grpccmd.RunE(
		"GetOrders",
		"sonm.GetOrdersRequest",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewMarketClient(cc)
		},
	),
}

var _Market_GetOrdersCmd_gen = &cobra.Command{
	Use:   "getOrders-gen",
	Short: "Generate JSON for method call of GetOrders (input-type: sonm.GetOrdersRequest)",
	RunE:  grpccmd.TypeToJson("sonm.GetOrdersRequest"),
}

var _Market_CreateOrderCmd = &cobra.Command{
	Use:   "createOrder",
	Short: "Make the CreateOrder method call, input-type: sonm.Order output-type: sonm.Order",
	RunE: grpccmd.RunE(
		"CreateOrder",
		"sonm.Order",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewMarketClient(cc)
		},
	),
}

var _Market_CreateOrderCmd_gen = &cobra.Command{
	Use:   "createOrder-gen",
	Short: "Generate JSON for method call of CreateOrder (input-type: sonm.Order)",
	RunE:  grpccmd.TypeToJson("sonm.Order"),
}

var _Market_GetOrderByIDCmd = &cobra.Command{
	Use:   "getOrderByID",
	Short: "Make the GetOrderByID method call, input-type: sonm.ID output-type: sonm.Order",
	RunE: grpccmd.RunE(
		"GetOrderByID",
		"sonm.ID",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewMarketClient(cc)
		},
	),
}

var _Market_GetOrderByIDCmd_gen = &cobra.Command{
	Use:   "getOrderByID-gen",
	Short: "Generate JSON for method call of GetOrderByID (input-type: sonm.ID)",
	RunE:  grpccmd.TypeToJson("sonm.ID"),
}

var _Market_CancelOrderCmd = &cobra.Command{
	Use:   "cancelOrder",
	Short: "Make the CancelOrder method call, input-type: sonm.Order output-type: sonm.Empty",
	RunE: grpccmd.RunE(
		"CancelOrder",
		"sonm.Order",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewMarketClient(cc)
		},
	),
}

var _Market_CancelOrderCmd_gen = &cobra.Command{
	Use:   "cancelOrder-gen",
	Short: "Generate JSON for method call of CancelOrder (input-type: sonm.Order)",
	RunE:  grpccmd.TypeToJson("sonm.Order"),
}

var _Market_GetProcessingCmd = &cobra.Command{
	Use:   "getProcessing",
	Short: "Make the GetProcessing method call, input-type: sonm.Empty output-type: sonm.GetProcessingReply",
	RunE: grpccmd.RunE(
		"GetProcessing",
		"sonm.Empty",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewMarketClient(cc)
		},
	),
}

var _Market_GetProcessingCmd_gen = &cobra.Command{
	Use:   "getProcessing-gen",
	Short: "Generate JSON for method call of GetProcessing (input-type: sonm.Empty)",
	RunE:  grpccmd.TypeToJson("sonm.Empty"),
}

var _Market_TouchOrdersCmd = &cobra.Command{
	Use:   "touchOrders",
	Short: "Make the TouchOrders method call, input-type: sonm.TouchOrdersRequest output-type: sonm.Empty",
	RunE: grpccmd.RunE(
		"TouchOrders",
		"sonm.TouchOrdersRequest",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewMarketClient(cc)
		},
	),
}

var _Market_TouchOrdersCmd_gen = &cobra.Command{
	Use:   "touchOrders-gen",
	Short: "Generate JSON for method call of TouchOrders (input-type: sonm.TouchOrdersRequest)",
	RunE:  grpccmd.TypeToJson("sonm.TouchOrdersRequest"),
}

// Register commands with the root command and service command
func init() {
	grpccmd.RegisterServiceCmd(_MarketCmd)
	_MarketCmd.AddCommand(
		_Market_GetOrdersCmd,
		_Market_GetOrdersCmd_gen,
		_Market_CreateOrderCmd,
		_Market_CreateOrderCmd_gen,
		_Market_GetOrderByIDCmd,
		_Market_GetOrderByIDCmd_gen,
		_Market_CancelOrderCmd,
		_Market_CancelOrderCmd_gen,
		_Market_GetProcessingCmd,
		_Market_GetProcessingCmd_gen,
		_Market_TouchOrdersCmd,
		_Market_TouchOrdersCmd_gen,
	)
}

// End grpccmd

func init() { proto.RegisterFile("marketplace.proto", fileDescriptor9) }

var fileDescriptor9 = []byte{
	// 431 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0xcb, 0x8e, 0xd3, 0x40,
	0x10, 0x8c, 0x9d, 0x87, 0x70, 0x9b, 0xcd, 0x86, 0xd6, 0x6a, 0x65, 0xf9, 0x14, 0x0c, 0x62, 0x97,
	0x03, 0x39, 0x04, 0x81, 0x56, 0x3c, 0x2e, 0x90, 0xd5, 0x2a, 0x42, 0x08, 0x34, 0xda, 0x1f, 0x98,
	0xd8, 0x2d, 0xb0, 0xe2, 0x17, 0x33, 0x63, 0x84, 0x0f, 0x7c, 0x16, 0x7c, 0x1f, 0x9a, 0x19, 0x27,
	0xd8, 0x89, 0x72, 0x9b, 0xae, 0xee, 0xaa, 0x4a, 0x57, 0xc7, 0xf0, 0x28, 0xe7, 0x62, 0x4b, 0xaa,
	0xca, 0x78, 0x4c, 0x8b, 0x4a, 0x94, 0xaa, 0xc4, 0x91, 0x2c, 0x8b, 0x3c, 0xf4, 0x36, 0x69, 0x62,
	0x81, 0xf0, 0x3c, 0x2d, 0x34, 0x54, 0xa4, 0x7c, 0x07, 0xa8, 0x34, 0x27, 0xa9, 0x78, 0x5e, 0x59,
	0x20, 0xfa, 0x04, 0xb3, 0x3b, 0x52, 0x5f, 0x44, 0x42, 0x42, 0x32, 0xfa, 0x51, 0x93, 0x54, 0xf8,
	0x18, 0xc6, 0xa5, 0x06, 0x02, 0x67, 0xee, 0x5c, 0xfb, 0x4b, 0x7f, 0xa1, 0x35, 0x16, 0x66, 0x86,
	0xd9, 0x0e, 0x5e, 0xc0, 0x38, 0x2e, 0xeb, 0x42, 0x05, 0xee, 0xdc, 0xb9, 0x1e, 0x31, 0x5b, 0x44,
	0xaf, 0x60, 0xda, 0x11, 0xab, 0xb2, 0x06, 0x9f, 0xc0, 0xc4, 0x10, 0x64, 0xe0, 0xcc, 0x87, 0x87,
	0x5a, 0x6d, 0x2b, 0xfa, 0xe3, 0x02, 0xde, 0x91, 0xfa, 0x2a, 0xca, 0x98, 0xa4, 0x4c, 0x8b, 0x6f,
	0x96, 0xfb, 0x6e, 0xcf, 0x75, 0x0d, 0xf7, 0xa9, 0xe5, 0x1e, 0x4f, 0x5a, 0x39, 0x79, 0x5b, 0x28,
	0xd1, 0xec, 0x44, 0xc3, 0xdf, 0x30, 0x6d, 0xc7, 0x28, 0x31, 0x7d, 0x9c, 0x82, 0x9b, 0x26, 0x66,
	0x27, 0x8f, 0xb9, 0x69, 0x82, 0x97, 0x30, 0x91, 0x8a, 0xab, 0x5a, 0x9a, 0x25, 0xce, 0x58, 0x5b,
	0xe1, 0x0b, 0xf0, 0xf6, 0x29, 0x05, 0x43, 0x13, 0xc1, 0xb9, 0xb5, 0xbe, 0xdf, 0xc1, 0xec, 0xff,
	0x84, 0x8e, 0x82, 0x7e, 0x29, 0xc1, 0x83, 0x91, 0x51, 0xb6, 0x45, 0xb8, 0x01, 0xbf, 0xf3, 0xab,
	0x70, 0x06, 0xc3, 0x2d, 0x35, 0xad, 0xb9, 0x7e, 0xe2, 0x7b, 0x18, 0xff, 0xe4, 0x59, 0x4d, 0xc6,
	0xdc, 0x5f, 0x5e, 0x9d, 0x5c, 0xae, 0xbf, 0x05, 0xb3, 0xac, 0x37, 0xee, 0x8d, 0x13, 0x3d, 0x03,
	0xbc, 0x2f, 0xeb, 0xf8, 0x7b, 0xff, 0x7a, 0x33, 0x18, 0xae, 0x57, 0x36, 0x6f, 0x8f, 0xe9, 0xe7,
	0xf2, 0xaf, 0x0b, 0x93, 0xcf, 0xe6, 0xcf, 0x82, 0x6f, 0xc1, 0xdb, 0x5f, 0x08, 0x2f, 0xf7, 0x9e,
	0x3d, 0x85, 0xf0, 0xe2, 0x08, 0xaf, 0xb2, 0x26, 0x1a, 0xe0, 0x73, 0xf0, 0x3f, 0x0a, 0xe2, 0x8a,
	0x6c, 0x9e, 0xdd, 0x5b, 0x86, 0xdd, 0x22, 0x1a, 0xe0, 0x15, 0x3c, 0xdc, 0xd1, 0x3f, 0x34, 0xeb,
	0x15, 0x3e, 0xb0, 0xed, 0xf5, 0xea, 0x70, 0x50, 0x6b, 0xf2, 0x22, 0xa6, 0xec, 0xb4, 0xe6, 0x6d,
	0x5e, 0x29, 0x6d, 0x7f, 0x03, 0x67, 0xbd, 0x78, 0xb0, 0xdb, 0x0f, 0x83, 0x53, 0x01, 0x46, 0x03,
	0x7c, 0x0d, 0x7e, 0x27, 0x28, 0x6c, 0x47, 0x8f, 0xb3, 0x3b, 0x70, 0xdc, 0x4c, 0xcc, 0x37, 0xf2,
	0xf2, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2e, 0x5f, 0x23, 0xc2, 0x6b, 0x03, 0x00, 0x00,
}
