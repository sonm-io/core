// Code generated by protoc-gen-go. DO NOT EDIT.
// source: marketplace.proto

package sonm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GetOrdersRequest struct {
	// Slot describe resuorces to search for
	Slot *Slot `protobuf:"bytes,1,opt,name=slot" json:"slot,omitempty"`
	// OrderType describe a type of orders to search
	OrderType OrderType `protobuf:"varint,2,opt,name=orderType,enum=sonm.OrderType" json:"orderType,omitempty"`
	// Count describe how namy results must be returned (order by price)
	Count uint64 `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
}

func (m *GetOrdersRequest) Reset()                    { *m = GetOrdersRequest{} }
func (m *GetOrdersRequest) String() string            { return proto.CompactTextString(m) }
func (*GetOrdersRequest) ProtoMessage()               {}
func (*GetOrdersRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *GetOrdersRequest) GetSlot() *Slot {
	if m != nil {
		return m.Slot
	}
	return nil
}

func (m *GetOrdersRequest) GetOrderType() OrderType {
	if m != nil {
		return m.OrderType
	}
	return OrderType_ANY
}

func (m *GetOrdersRequest) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type GetOrdersReply struct {
	Orders []*Order `protobuf:"bytes,1,rep,name=orders" json:"orders,omitempty"`
}

func (m *GetOrdersReply) Reset()                    { *m = GetOrdersReply{} }
func (m *GetOrdersReply) String() string            { return proto.CompactTextString(m) }
func (*GetOrdersReply) ProtoMessage()               {}
func (*GetOrdersReply) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

func (m *GetOrdersReply) GetOrders() []*Order {
	if m != nil {
		return m.Orders
	}
	return nil
}

// GetProcessingReply represent Node's local
// orders processing status
type GetProcessingReply struct {
	Orders map[string]*GetProcessingReply_ProcessedOrder `protobuf:"bytes,2,rep,name=orders" json:"orders,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *GetProcessingReply) Reset()                    { *m = GetProcessingReply{} }
func (m *GetProcessingReply) String() string            { return proto.CompactTextString(m) }
func (*GetProcessingReply) ProtoMessage()               {}
func (*GetProcessingReply) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{2} }

func (m *GetProcessingReply) GetOrders() map[string]*GetProcessingReply_ProcessedOrder {
	if m != nil {
		return m.Orders
	}
	return nil
}

type GetProcessingReply_ProcessedOrder struct {
	Id        string     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Status    uint32     `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	Timestamp *Timestamp `protobuf:"bytes,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Extra     string     `protobuf:"bytes,4,opt,name=extra" json:"extra,omitempty"`
}

func (m *GetProcessingReply_ProcessedOrder) Reset()         { *m = GetProcessingReply_ProcessedOrder{} }
func (m *GetProcessingReply_ProcessedOrder) String() string { return proto.CompactTextString(m) }
func (*GetProcessingReply_ProcessedOrder) ProtoMessage()    {}
func (*GetProcessingReply_ProcessedOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor6, []int{2, 0}
}

func (m *GetProcessingReply_ProcessedOrder) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GetProcessingReply_ProcessedOrder) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GetProcessingReply_ProcessedOrder) GetTimestamp() *Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *GetProcessingReply_ProcessedOrder) GetExtra() string {
	if m != nil {
		return m.Extra
	}
	return ""
}

func init() {
	proto.RegisterType((*GetOrdersRequest)(nil), "sonm.GetOrdersRequest")
	proto.RegisterType((*GetOrdersReply)(nil), "sonm.GetOrdersReply")
	proto.RegisterType((*GetProcessingReply)(nil), "sonm.GetProcessingReply")
	proto.RegisterType((*GetProcessingReply_ProcessedOrder)(nil), "sonm.GetProcessingReply.ProcessedOrder")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Market service

type MarketClient interface {
	GetOrders(ctx context.Context, in *GetOrdersRequest, opts ...grpc.CallOption) (*GetOrdersReply, error)
	GetOrderByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Order, error)
	CreateOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error)
	CancelOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Empty, error)
	// GetProcessing returns currently processing orders
	// not required in Marketplace service
	// must be implemented on Node
	GetProcessing(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetProcessingReply, error)
}

type marketClient struct {
	cc *grpc.ClientConn
}

func NewMarketClient(cc *grpc.ClientConn) MarketClient {
	return &marketClient{cc}
}

func (c *marketClient) GetOrders(ctx context.Context, in *GetOrdersRequest, opts ...grpc.CallOption) (*GetOrdersReply, error) {
	out := new(GetOrdersReply)
	err := grpc.Invoke(ctx, "/sonm.Market/GetOrders", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) GetOrderByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := grpc.Invoke(ctx, "/sonm.Market/GetOrderByID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) CreateOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := grpc.Invoke(ctx, "/sonm.Market/CreateOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) CancelOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.Market/CancelOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) GetProcessing(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetProcessingReply, error) {
	out := new(GetProcessingReply)
	err := grpc.Invoke(ctx, "/sonm.Market/GetProcessing", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Market service

type MarketServer interface {
	GetOrders(context.Context, *GetOrdersRequest) (*GetOrdersReply, error)
	GetOrderByID(context.Context, *ID) (*Order, error)
	CreateOrder(context.Context, *Order) (*Order, error)
	CancelOrder(context.Context, *Order) (*Empty, error)
	// GetProcessing returns currently processing orders
	// not required in Marketplace service
	// must be implemented on Node
	GetProcessing(context.Context, *Empty) (*GetProcessingReply, error)
}

func RegisterMarketServer(s *grpc.Server, srv MarketServer) {
	s.RegisterService(&_Market_serviceDesc, srv)
}

func _Market_GetOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).GetOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Market/GetOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).GetOrders(ctx, req.(*GetOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_GetOrderByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).GetOrderByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Market/GetOrderByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).GetOrderByID(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Market/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).CreateOrder(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Market/CancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).CancelOrder(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_GetProcessing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).GetProcessing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Market/GetProcessing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).GetProcessing(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Market_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sonm.Market",
	HandlerType: (*MarketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrders",
			Handler:    _Market_GetOrders_Handler,
		},
		{
			MethodName: "GetOrderByID",
			Handler:    _Market_GetOrderByID_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _Market_CreateOrder_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _Market_CancelOrder_Handler,
		},
		{
			MethodName: "GetProcessing",
			Handler:    _Market_GetProcessing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "marketplace.proto",
}

func init() { proto.RegisterFile("marketplace.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 421 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x8d, 0x9d, 0x34, 0x22, 0x63, 0x9a, 0x96, 0x51, 0x55, 0x59, 0x3e, 0xa0, 0xc8, 0x20, 0x35,
	0x1c, 0xc8, 0xc1, 0x08, 0xa9, 0xe2, 0xe3, 0x02, 0xad, 0xaa, 0x1e, 0x50, 0xd1, 0xd2, 0x3f, 0xb0,
	0x89, 0x47, 0xc8, 0xaa, 0xed, 0x35, 0xbb, 0x63, 0xc0, 0x07, 0x7e, 0x16, 0x7f, 0x0f, 0x21, 0xef,
	0xda, 0xa9, 0xa3, 0x36, 0x37, 0xcf, 0x9b, 0xf7, 0x66, 0xfc, 0xde, 0x0e, 0x3c, 0x2b, 0xa4, 0xbe,
	0x23, 0xae, 0x72, 0xb9, 0xa1, 0x55, 0xa5, 0x15, 0x2b, 0x9c, 0x18, 0x55, 0x16, 0xd1, 0x6c, 0x9d,
	0xa5, 0x0e, 0x88, 0x8e, 0xb2, 0xb2, 0x85, 0xca, 0x4c, 0x3a, 0x20, 0xfe, 0x05, 0xc7, 0x57, 0xc4,
	0x37, 0x3a, 0x25, 0x6d, 0x04, 0xfd, 0xa8, 0xc9, 0x30, 0x3e, 0x87, 0x89, 0xc9, 0x15, 0x87, 0xde,
	0xc2, 0x5b, 0x06, 0x09, 0xac, 0x5a, 0xc5, 0xea, 0x5b, 0xae, 0x58, 0x58, 0x1c, 0x5f, 0xc3, 0x4c,
	0xb5, 0x82, 0xdb, 0xa6, 0xa2, 0xd0, 0x5f, 0x78, 0xcb, 0x79, 0x72, 0xe4, 0x48, 0x37, 0x3d, 0x2c,
	0xee, 0x19, 0x78, 0x02, 0x07, 0x1b, 0x55, 0x97, 0x1c, 0x8e, 0x17, 0xde, 0x72, 0x22, 0x5c, 0x11,
	0xbf, 0x85, 0xf9, 0x60, 0x71, 0x95, 0x37, 0xf8, 0x02, 0xa6, 0x56, 0x64, 0x42, 0x6f, 0x31, 0x5e,
	0x06, 0x49, 0x30, 0x98, 0x29, 0xba, 0x56, 0xfc, 0xd7, 0x07, 0xbc, 0x22, 0xfe, 0xaa, 0xd5, 0x86,
	0x8c, 0xc9, 0xca, 0xef, 0x4e, 0xfb, 0x61, 0xab, 0xf5, 0xad, 0xf6, 0xa5, 0xd3, 0x3e, 0x64, 0xba,
	0x71, 0xe6, 0xb2, 0x64, 0xdd, 0xf4, 0x43, 0xa3, 0x3f, 0x30, 0xef, 0x68, 0x94, 0xda, 0x3e, 0xce,
	0xc1, 0xcf, 0x52, 0x1b, 0xc0, 0x4c, 0xf8, 0x59, 0x8a, 0xa7, 0x30, 0x35, 0x2c, 0xb9, 0x36, 0xd6,
	0xef, 0xa1, 0xe8, 0xaa, 0x36, 0x0a, 0xce, 0x0a, 0x32, 0x2c, 0x8b, 0xca, 0xfa, 0x0b, 0xfa, 0x28,
	0x6e, 0x7b, 0x58, 0xdc, 0x33, 0xda, 0x28, 0xe8, 0x37, 0x6b, 0x19, 0x4e, 0xec, 0x64, 0x57, 0x44,
	0x6b, 0x08, 0x06, 0x7f, 0x85, 0xc7, 0x30, 0xbe, 0xa3, 0xa6, 0x5b, 0xde, 0x7e, 0xe2, 0x47, 0x38,
	0xf8, 0x29, 0xf3, 0xda, 0x85, 0x1d, 0x24, 0x67, 0x7b, 0xcd, 0xed, 0xba, 0x10, 0x4e, 0xf5, 0xce,
	0x3f, 0xf7, 0x92, 0x7f, 0x1e, 0x4c, 0xbf, 0xd8, 0xfb, 0xc0, 0xf7, 0x30, 0xdb, 0x26, 0x8f, 0xa7,
	0xdb, 0x59, 0x3b, 0x37, 0x10, 0x9d, 0x3c, 0xc0, 0xab, 0xbc, 0x89, 0x47, 0x78, 0x06, 0x4f, 0x7b,
	0xec, 0x53, 0x73, 0x7d, 0x81, 0x4f, 0x1c, 0xef, 0xfa, 0x22, 0x1a, 0x3e, 0x57, 0x3c, 0xc2, 0x57,
	0x10, 0x7c, 0xd6, 0x24, 0x99, 0x5c, 0xa0, 0xc3, 0xee, 0x63, 0x54, 0x59, 0x6e, 0x28, 0xdf, 0x4f,
	0xbd, 0x2c, 0x2a, 0x6e, 0xd7, 0x9f, 0xc3, 0xe1, 0x8e, 0x6d, 0x1c, 0xf6, 0xa3, 0x70, 0x5f, 0x30,
	0xf1, 0x68, 0x3d, 0xb5, 0xf7, 0xfe, 0xe6, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x98, 0x5b, 0x4a,
	0xe6, 0x26, 0x03, 0x00, 0x00,
}
