// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bid.proto

/*
Package sonm is a generated protocol buffer package.

It is generated from these files:
	bid.proto
	bigint.proto
	capabilities.proto
	deal.proto
	hub.proto
	insonmnia.proto
	locator.proto
	marketplace.proto
	miner.proto
	node.proto

It has these top-level messages:
	Geo
	Resources
	Slot
	Order
	BigInt
	Capabilities
	CPUDevice
	RAMDevice
	GPUDevice
	Deal
	ListReply
	HubStartTaskRequest
	HubStartTaskReply
	HubStatusReply
	DealRequest
	GetDevicePropertiesReply
	SetDevicePropertiesRequest
	SlotsReply
	GetAllSlotsReply
	AddSlotRequest
	RemoveSlotRequest
	GetRegisteredWorkersReply
	TaskListReply
	CPUDeviceInfo
	GPUDeviceInfo
	DevicesReply
	InsertSlotRequest
	PullTaskRequest
	DealInfoReply
	CompletedTask
	Empty
	ID
	TaskID
	PingReply
	CPUUsage
	MemoryUsage
	NetworkUsage
	ResourceUsage
	InfoReply
	TaskStatusReply
	AvailableResources
	StatusMapReply
	ContainerRestartPolicy
	TaskLogsRequest
	TaskLogsChunk
	DiscoverHubRequest
	TaskResourceRequirements
	Timestamp
	Chunk
	Progress
	AnnounceRequest
	ResolveRequest
	ResolveReply
	GetOrdersRequest
	GetOrdersReply
	GetProcessingReply
	MinerHandshakeRequest
	MinerHandshakeReply
	MinerStartRequest
	SocketAddr
	MinerStartReply
	TaskInfo
	Route
	MinerStatusMapRequest
	SaveRequest
	TaskListRequest
	DealListRequest
	DealListReply
*/
package sonm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type OrderType int32

const (
	OrderType_ANY OrderType = 0
	OrderType_BID OrderType = 1
	OrderType_ASK OrderType = 2
)

var OrderType_name = map[int32]string{
	0: "ANY",
	1: "BID",
	2: "ASK",
}
var OrderType_value = map[string]int32{
	"ANY": 0,
	"BID": 1,
	"ASK": 2,
}

func (x OrderType) String() string {
	return proto.EnumName(OrderType_name, int32(x))
}
func (OrderType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Geo represent GeoIP results for node
type Geo struct {
	Country string  `protobuf:"bytes,1,opt,name=country" json:"country,omitempty"`
	City    string  `protobuf:"bytes,2,opt,name=city" json:"city,omitempty"`
	Lat     float32 `protobuf:"fixed32,3,opt,name=lat" json:"lat,omitempty"`
	Lon     float32 `protobuf:"fixed32,4,opt,name=lon" json:"lon,omitempty"`
}

func (m *Geo) Reset()                    { *m = Geo{} }
func (m *Geo) String() string            { return proto.CompactTextString(m) }
func (*Geo) ProtoMessage()               {}
func (*Geo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Geo) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Geo) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Geo) GetLat() float32 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *Geo) GetLon() float32 {
	if m != nil {
		return m.Lon
	}
	return 0
}

type Resources struct {
	// CPU core count
	CpuCores uint64 `protobuf:"varint,1,opt,name=cpuCores" json:"cpuCores,omitempty"`
	// RAM, in bytes
	RamBytes uint64 `protobuf:"varint,2,opt,name=ramBytes" json:"ramBytes,omitempty"`
	// GPU devices count
	GpuCount GPUCount `protobuf:"varint,3,opt,name=gpuCount,enum=sonm.GPUCount" json:"gpuCount,omitempty"`
	// todo: discuss
	// storage volume, in Megabytes
	Storage uint64 `protobuf:"varint,4,opt,name=storage" json:"storage,omitempty"`
	// Inbound network traffic (the higher value), in bytes
	NetTrafficIn uint64 `protobuf:"varint,5,opt,name=netTrafficIn" json:"netTrafficIn,omitempty"`
	// Outbound network traffic (the higher value), in bytes
	NetTrafficOut uint64 `protobuf:"varint,6,opt,name=netTrafficOut" json:"netTrafficOut,omitempty"`
	// Allowed network connections
	NetworkType NetworkType `protobuf:"varint,7,opt,name=networkType,enum=sonm.NetworkType" json:"networkType,omitempty"`
	// Other properties/benchmarks. The higher means better.
	Properties map[string]float64 `protobuf:"bytes,8,rep,name=properties" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
}

func (m *Resources) Reset()                    { *m = Resources{} }
func (m *Resources) String() string            { return proto.CompactTextString(m) }
func (*Resources) ProtoMessage()               {}
func (*Resources) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Resources) GetCpuCores() uint64 {
	if m != nil {
		return m.CpuCores
	}
	return 0
}

func (m *Resources) GetRamBytes() uint64 {
	if m != nil {
		return m.RamBytes
	}
	return 0
}

func (m *Resources) GetGpuCount() GPUCount {
	if m != nil {
		return m.GpuCount
	}
	return GPUCount_NO_GPU
}

func (m *Resources) GetStorage() uint64 {
	if m != nil {
		return m.Storage
	}
	return 0
}

func (m *Resources) GetNetTrafficIn() uint64 {
	if m != nil {
		return m.NetTrafficIn
	}
	return 0
}

func (m *Resources) GetNetTrafficOut() uint64 {
	if m != nil {
		return m.NetTrafficOut
	}
	return 0
}

func (m *Resources) GetNetworkType() NetworkType {
	if m != nil {
		return m.NetworkType
	}
	return NetworkType_NO_NETWORK
}

func (m *Resources) GetProperties() map[string]float64 {
	if m != nil {
		return m.Properties
	}
	return nil
}

type Slot struct {
	// Buyer’s rating. Got from Buyer’s profile for BID orders rating_supplier.
	BuyerRating int64 `protobuf:"varint,1,opt,name=buyerRating" json:"buyerRating,omitempty"`
	// Supplier’s rating. Got from Supplier’s profile for ASK orders.
	SupplierRating int64 `protobuf:"varint,2,opt,name=supplierRating" json:"supplierRating,omitempty"`
	// Geo represent Worker's position
	Geo *Geo `protobuf:"bytes,3,opt,name=geo" json:"geo,omitempty"`
	// Hardware resources requirements
	Resources *Resources `protobuf:"bytes,4,opt,name=resources" json:"resources,omitempty"`
	// Duration is resource rent duration in seconds
	Duration uint64 `protobuf:"varint,5,opt,name=duration" json:"duration,omitempty"`
}

func (m *Slot) Reset()                    { *m = Slot{} }
func (m *Slot) String() string            { return proto.CompactTextString(m) }
func (*Slot) ProtoMessage()               {}
func (*Slot) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Slot) GetBuyerRating() int64 {
	if m != nil {
		return m.BuyerRating
	}
	return 0
}

func (m *Slot) GetSupplierRating() int64 {
	if m != nil {
		return m.SupplierRating
	}
	return 0
}

func (m *Slot) GetGeo() *Geo {
	if m != nil {
		return m.Geo
	}
	return nil
}

func (m *Slot) GetResources() *Resources {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *Slot) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

type Order struct {
	// Order ID, UUIDv4
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Buyer's EtherumID
	ByuerID string `protobuf:"bytes,2,opt,name=byuerID" json:"byuerID,omitempty"`
	// Supplier's is EtherumID
	SupplierID string `protobuf:"bytes,3,opt,name=supplierID" json:"supplierID,omitempty"`
	// Order price
	// todo(all): remove this filed
	Price string `protobuf:"bytes,4,opt,name=price" json:"price,omitempty"`
	// Order type (Bid or Ask)
	OrderType OrderType `protobuf:"varint,5,opt,name=orderType,enum=sonm.OrderType" json:"orderType,omitempty"`
	// Slot describe resource requiements
	Slot *Slot `protobuf:"bytes,6,opt,name=slot" json:"slot,omitempty"`
	// PricePerSecond specifies order price for ordered resources per second.
	PricePerSecond *BigInt `protobuf:"bytes,7,opt,name=pricePerSecond" json:"pricePerSecond,omitempty"`
}

func (m *Order) Reset()                    { *m = Order{} }
func (m *Order) String() string            { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()               {}
func (*Order) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Order) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Order) GetByuerID() string {
	if m != nil {
		return m.ByuerID
	}
	return ""
}

func (m *Order) GetSupplierID() string {
	if m != nil {
		return m.SupplierID
	}
	return ""
}

func (m *Order) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

func (m *Order) GetOrderType() OrderType {
	if m != nil {
		return m.OrderType
	}
	return OrderType_ANY
}

func (m *Order) GetSlot() *Slot {
	if m != nil {
		return m.Slot
	}
	return nil
}

func (m *Order) GetPricePerSecond() *BigInt {
	if m != nil {
		return m.PricePerSecond
	}
	return nil
}

func init() {
	proto.RegisterType((*Geo)(nil), "sonm.Geo")
	proto.RegisterType((*Resources)(nil), "sonm.Resources")
	proto.RegisterType((*Slot)(nil), "sonm.Slot")
	proto.RegisterType((*Order)(nil), "sonm.Order")
	proto.RegisterEnum("sonm.OrderType", OrderType_name, OrderType_value)
}

func init() { proto.RegisterFile("bid.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 548 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x53, 0xdd, 0x8a, 0xd3, 0x40,
	0x14, 0x36, 0x3f, 0xdd, 0x6d, 0x4e, 0x6a, 0x5b, 0x07, 0x2f, 0x42, 0x85, 0xb5, 0x14, 0x59, 0xca,
	0x82, 0xbd, 0xc8, 0x7a, 0x21, 0x82, 0x88, 0xb5, 0xb2, 0x14, 0x61, 0x5b, 0xa6, 0x2b, 0xe2, 0x65,
	0x9a, 0xcc, 0x86, 0x61, 0xbb, 0x33, 0x61, 0x32, 0x51, 0xf2, 0x06, 0x3e, 0x92, 0x0f, 0xe5, 0x43,
	0xc8, 0x9c, 0x69, 0xd2, 0x6e, 0xef, 0xce, 0xf7, 0x9d, 0x6f, 0x72, 0x7e, 0xbe, 0x13, 0x08, 0xb6,
	0x3c, 0x9b, 0x15, 0x4a, 0x6a, 0x49, 0xfc, 0x52, 0x8a, 0xc7, 0x51, 0x6f, 0xcb, 0x73, 0x2e, 0xb4,
	0xe5, 0x46, 0x03, 0x2e, 0x0c, 0x2b, 0x78, 0x62, 0x89, 0xc9, 0x0f, 0xf0, 0x6e, 0x98, 0x24, 0x11,
	0x9c, 0xa7, 0xb2, 0x12, 0x5a, 0xd5, 0x91, 0x33, 0x76, 0xa6, 0x01, 0x6d, 0x20, 0x21, 0xe0, 0xa7,
	0x5c, 0xd7, 0x91, 0x8b, 0x34, 0xc6, 0x64, 0x08, 0xde, 0x2e, 0xd1, 0x91, 0x37, 0x76, 0xa6, 0x2e,
	0x35, 0x21, 0x32, 0x52, 0x44, 0xfe, 0x9e, 0x91, 0x62, 0xf2, 0xc7, 0x83, 0x80, 0xb2, 0x52, 0x56,
	0x2a, 0x65, 0x25, 0x19, 0x41, 0x37, 0x2d, 0xaa, 0x2f, 0x52, 0xb1, 0x12, 0x0b, 0xf8, 0xb4, 0xc5,
	0x26, 0xa7, 0x92, 0xc7, 0x79, 0xad, 0x59, 0x89, 0x55, 0x7c, 0xda, 0x62, 0x72, 0x05, 0xdd, 0xdc,
	0xe8, 0x2a, 0x61, 0xcb, 0xf5, 0xe3, 0xfe, 0xcc, 0x0c, 0x30, 0xbb, 0x59, 0x7f, 0x47, 0x96, 0xb6,
	0x79, 0x33, 0x43, 0xa9, 0xa5, 0x4a, 0x72, 0x86, 0x7d, 0xf8, 0xb4, 0x81, 0x64, 0x02, 0x3d, 0xc1,
	0xf4, 0x9d, 0x4a, 0xee, 0xef, 0x79, 0xba, 0x14, 0x51, 0x07, 0xd3, 0x4f, 0x38, 0xf2, 0x06, 0x9e,
	0x1f, 0xf0, 0xaa, 0xd2, 0xd1, 0x19, 0x8a, 0x9e, 0x92, 0xe4, 0x1a, 0x42, 0xc1, 0xf4, 0x6f, 0xa9,
	0x1e, 0xee, 0xea, 0x82, 0x45, 0xe7, 0xd8, 0xd2, 0x0b, 0xdb, 0xd2, 0xed, 0x21, 0x41, 0x8f, 0x55,
	0xe4, 0x13, 0x40, 0xa1, 0x64, 0xc1, 0x94, 0xe6, 0xac, 0x8c, 0xba, 0x63, 0x6f, 0x1a, 0xc6, 0xaf,
	0xed, 0x9b, 0x76, 0x43, 0xb3, 0x75, 0xab, 0xf8, 0x6a, 0xf6, 0x4e, 0x8f, 0x9e, 0x8c, 0x3e, 0xc2,
	0xe0, 0x24, 0x6d, 0x16, 0xfe, 0xc0, 0x1a, 0xb3, 0x4c, 0x48, 0x5e, 0x42, 0xe7, 0x57, 0xb2, 0xab,
	0x18, 0xee, 0xd0, 0xa1, 0x16, 0x7c, 0x70, 0xdf, 0x3b, 0x93, 0xbf, 0x0e, 0xf8, 0x9b, 0x9d, 0xd4,
	0x64, 0x0c, 0xe1, 0xb6, 0xaa, 0x99, 0xa2, 0x89, 0xe6, 0x22, 0xc7, 0xc7, 0x1e, 0x3d, 0xa6, 0xc8,
	0x25, 0xf4, 0xcb, 0xaa, 0x28, 0x76, 0xbc, 0x15, 0xb9, 0x28, 0x3a, 0x61, 0xc9, 0x2b, 0xf0, 0x72,
	0x26, 0xd1, 0x92, 0x30, 0x0e, 0xf6, 0x96, 0x30, 0x49, 0x0d, 0x4b, 0xde, 0x42, 0xa0, 0x9a, 0xb9,
	0xd0, 0x8a, 0x30, 0x1e, 0x9c, 0x8c, 0x4b, 0x0f, 0x0a, 0xe3, 0x7f, 0x56, 0xa9, 0x44, 0x73, 0xd9,
	0x38, 0xd3, 0xe2, 0xc9, 0x3f, 0x07, 0x3a, 0x2b, 0x95, 0x31, 0x45, 0xfa, 0xe0, 0xf2, 0x6c, 0x3f,
	0xaf, 0xcb, 0x33, 0xe3, 0xf6, 0xb6, 0xae, 0x98, 0x5a, 0x2e, 0xf6, 0xa7, 0xd9, 0x40, 0x72, 0x01,
	0xd0, 0x74, 0xbb, 0x5c, 0x60, 0x8b, 0x01, 0x3d, 0x62, 0xcc, 0xa2, 0x0a, 0xc5, 0x53, 0x7b, 0x25,
	0x01, 0xb5, 0xc0, 0x34, 0x2d, 0x4d, 0x21, 0xf4, 0xb5, 0x83, 0xbe, 0xee, 0x9b, 0x5e, 0x35, 0x34,
	0x3d, 0x28, 0xc8, 0x05, 0xf8, 0xe5, 0x4e, 0xda, 0x2b, 0x09, 0x63, 0xb0, 0x4a, 0xb3, 0x64, 0x8a,
	0x3c, 0x79, 0x07, 0x7d, 0xfc, 0xee, 0x9a, 0xa9, 0x0d, 0x4b, 0xa5, 0xc8, 0xf0, 0x56, 0xc2, 0xb8,
	0x67, 0x95, 0x73, 0x9e, 0x2f, 0x85, 0xa6, 0x27, 0x9a, 0xab, 0x4b, 0x08, 0xda, 0x6a, 0xe4, 0x1c,
	0xbc, 0xcf, 0xb7, 0x3f, 0x87, 0xcf, 0x4c, 0x30, 0x5f, 0x2e, 0x86, 0x0e, 0x32, 0x9b, 0x6f, 0x43,
	0x77, 0x7b, 0x86, 0x3f, 0xef, 0xf5, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc8, 0x3c, 0x3d, 0x03,
	0xee, 0x03, 0x00, 0x00,
}
