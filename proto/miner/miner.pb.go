// Code generated by protoc-gen-go. DO NOT EDIT.
// source: miner/miner.proto

/*
Package miner is a generated protocol buffer package.

It is generated from these files:
	miner/miner.proto

It has these top-level messages:
	PingRequest
	PingReply
	InfoRequest
	InfoReply
	HandshakeRequest
	HandshakeReply
	StartRequest
	StartReply
	StopRequest
	StopReply
	TasksStatusRequest
	TaskStatus
	TasksStatusReply
*/
package miner

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TaskStatus_Status int32

const (
	TaskStatus_UNKNOWN  TaskStatus_Status = 0
	TaskStatus_SPOOLING TaskStatus_Status = 1
	TaskStatus_SPAWNING TaskStatus_Status = 2
	TaskStatus_RUNNING  TaskStatus_Status = 3
	TaskStatus_FINISHED TaskStatus_Status = 4
	TaskStatus_BROKEN   TaskStatus_Status = 5
)

var TaskStatus_Status_name = map[int32]string{
	0: "UNKNOWN",
	1: "SPOOLING",
	2: "SPAWNING",
	3: "RUNNING",
	4: "FINISHED",
	5: "BROKEN",
}
var TaskStatus_Status_value = map[string]int32{
	"UNKNOWN":  0,
	"SPOOLING": 1,
	"SPAWNING": 2,
	"RUNNING":  3,
	"FINISHED": 4,
	"BROKEN":   5,
}

func (x TaskStatus_Status) String() string {
	return proto.EnumName(TaskStatus_Status_name, int32(x))
}
func (TaskStatus_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{11, 0} }

type PingRequest struct {
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PingReply struct {
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *PingReply) Reset()                    { *m = PingReply{} }
func (m *PingReply) String() string            { return proto.CompactTextString(m) }
func (*PingReply) ProtoMessage()               {}
func (*PingReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PingReply) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type InfoRequest struct {
}

func (m *InfoRequest) Reset()                    { *m = InfoRequest{} }
func (m *InfoRequest) String() string            { return proto.CompactTextString(m) }
func (*InfoRequest) ProtoMessage()               {}
func (*InfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type InfoReply struct {
	Stats map[string]*InfoReplyStats `protobuf:"bytes,1,rep,name=Stats,json=stats" json:"Stats,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *InfoReply) Reset()                    { *m = InfoReply{} }
func (m *InfoReply) String() string            { return proto.CompactTextString(m) }
func (*InfoReply) ProtoMessage()               {}
func (*InfoReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *InfoReply) GetStats() map[string]*InfoReplyStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

type InfoReplyStats struct {
	CPU    *InfoReplyStatsCpu    `protobuf:"bytes,1,opt,name=CPU,json=cPU" json:"CPU,omitempty"`
	Memory *InfoReplyStatsMemory `protobuf:"bytes,2,opt,name=Memory,json=memory" json:"Memory,omitempty"`
}

func (m *InfoReplyStats) Reset()                    { *m = InfoReplyStats{} }
func (m *InfoReplyStats) String() string            { return proto.CompactTextString(m) }
func (*InfoReplyStats) ProtoMessage()               {}
func (*InfoReplyStats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

func (m *InfoReplyStats) GetCPU() *InfoReplyStatsCpu {
	if m != nil {
		return m.CPU
	}
	return nil
}

func (m *InfoReplyStats) GetMemory() *InfoReplyStatsMemory {
	if m != nil {
		return m.Memory
	}
	return nil
}

type InfoReplyStatsCpu struct {
	TotalUsage uint64 `protobuf:"varint,1,opt,name=totalUsage" json:"totalUsage,omitempty"`
}

func (m *InfoReplyStatsCpu) Reset()                    { *m = InfoReplyStatsCpu{} }
func (m *InfoReplyStatsCpu) String() string            { return proto.CompactTextString(m) }
func (*InfoReplyStatsCpu) ProtoMessage()               {}
func (*InfoReplyStatsCpu) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0, 0} }

func (m *InfoReplyStatsCpu) GetTotalUsage() uint64 {
	if m != nil {
		return m.TotalUsage
	}
	return 0
}

type InfoReplyStatsMemory struct {
	MaxUsage uint64 `protobuf:"varint,1,opt,name=maxUsage" json:"maxUsage,omitempty"`
}

func (m *InfoReplyStatsMemory) Reset()                    { *m = InfoReplyStatsMemory{} }
func (m *InfoReplyStatsMemory) String() string            { return proto.CompactTextString(m) }
func (*InfoReplyStatsMemory) ProtoMessage()               {}
func (*InfoReplyStatsMemory) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0, 1} }

func (m *InfoReplyStatsMemory) GetMaxUsage() uint64 {
	if m != nil {
		return m.MaxUsage
	}
	return 0
}

type HandshakeRequest struct {
	Hub string `protobuf:"bytes,1,opt,name=hub" json:"hub,omitempty"`
}

func (m *HandshakeRequest) Reset()                    { *m = HandshakeRequest{} }
func (m *HandshakeRequest) String() string            { return proto.CompactTextString(m) }
func (*HandshakeRequest) ProtoMessage()               {}
func (*HandshakeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *HandshakeRequest) GetHub() string {
	if m != nil {
		return m.Hub
	}
	return ""
}

type HandshakeReply struct {
	Miner string `protobuf:"bytes,1,opt,name=miner" json:"miner,omitempty"`
}

func (m *HandshakeReply) Reset()                    { *m = HandshakeReply{} }
func (m *HandshakeReply) String() string            { return proto.CompactTextString(m) }
func (*HandshakeReply) ProtoMessage()               {}
func (*HandshakeReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *HandshakeReply) GetMiner() string {
	if m != nil {
		return m.Miner
	}
	return ""
}

type StartRequest struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Registry string `protobuf:"bytes,2,opt,name=registry" json:"registry,omitempty"`
	Image    string `protobuf:"bytes,3,opt,name=image" json:"image,omitempty"`
}

func (m *StartRequest) Reset()                    { *m = StartRequest{} }
func (m *StartRequest) String() string            { return proto.CompactTextString(m) }
func (*StartRequest) ProtoMessage()               {}
func (*StartRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *StartRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *StartRequest) GetRegistry() string {
	if m != nil {
		return m.Registry
	}
	return ""
}

func (m *StartRequest) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

type StartReply struct {
	Container string                     `protobuf:"bytes,1,opt,name=container" json:"container,omitempty"`
	Ports     map[string]*StartReplyPort `protobuf:"bytes,2,rep,name=Ports,json=ports" json:"Ports,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *StartReply) Reset()                    { *m = StartReply{} }
func (m *StartReply) String() string            { return proto.CompactTextString(m) }
func (*StartReply) ProtoMessage()               {}
func (*StartReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *StartReply) GetContainer() string {
	if m != nil {
		return m.Container
	}
	return ""
}

func (m *StartReply) GetPorts() map[string]*StartReplyPort {
	if m != nil {
		return m.Ports
	}
	return nil
}

type StartReplyPort struct {
	IP   string `protobuf:"bytes,1,opt,name=IP,json=iP" json:"IP,omitempty"`
	Port string `protobuf:"bytes,2,opt,name=port" json:"port,omitempty"`
}

func (m *StartReplyPort) Reset()                    { *m = StartReplyPort{} }
func (m *StartReplyPort) String() string            { return proto.CompactTextString(m) }
func (*StartReplyPort) ProtoMessage()               {}
func (*StartReplyPort) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7, 0} }

func (m *StartReplyPort) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *StartReplyPort) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

type StopRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *StopRequest) Reset()                    { *m = StopRequest{} }
func (m *StopRequest) String() string            { return proto.CompactTextString(m) }
func (*StopRequest) ProtoMessage()               {}
func (*StopRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *StopRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type StopReply struct {
}

func (m *StopReply) Reset()                    { *m = StopReply{} }
func (m *StopReply) String() string            { return proto.CompactTextString(m) }
func (*StopReply) ProtoMessage()               {}
func (*StopReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type TasksStatusRequest struct {
}

func (m *TasksStatusRequest) Reset()                    { *m = TasksStatusRequest{} }
func (m *TasksStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*TasksStatusRequest) ProtoMessage()               {}
func (*TasksStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type TaskStatus struct {
	Status TaskStatus_Status `protobuf:"varint,1,opt,name=status,enum=miner.TaskStatus_Status" json:"status,omitempty"`
}

func (m *TaskStatus) Reset()                    { *m = TaskStatus{} }
func (m *TaskStatus) String() string            { return proto.CompactTextString(m) }
func (*TaskStatus) ProtoMessage()               {}
func (*TaskStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *TaskStatus) GetStatus() TaskStatus_Status {
	if m != nil {
		return m.Status
	}
	return TaskStatus_UNKNOWN
}

type TasksStatusReply struct {
	Statuses map[string]*TaskStatus `protobuf:"bytes,1,rep,name=statuses" json:"statuses,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *TasksStatusReply) Reset()                    { *m = TasksStatusReply{} }
func (m *TasksStatusReply) String() string            { return proto.CompactTextString(m) }
func (*TasksStatusReply) ProtoMessage()               {}
func (*TasksStatusReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *TasksStatusReply) GetStatuses() map[string]*TaskStatus {
	if m != nil {
		return m.Statuses
	}
	return nil
}

func init() {
	proto.RegisterType((*PingRequest)(nil), "miner.PingRequest")
	proto.RegisterType((*PingReply)(nil), "miner.PingReply")
	proto.RegisterType((*InfoRequest)(nil), "miner.InfoRequest")
	proto.RegisterType((*InfoReply)(nil), "miner.InfoReply")
	proto.RegisterType((*InfoReplyStats)(nil), "miner.InfoReply.stats")
	proto.RegisterType((*InfoReplyStatsCpu)(nil), "miner.InfoReply.stats.cpu")
	proto.RegisterType((*InfoReplyStatsMemory)(nil), "miner.InfoReply.stats.memory")
	proto.RegisterType((*HandshakeRequest)(nil), "miner.HandshakeRequest")
	proto.RegisterType((*HandshakeReply)(nil), "miner.HandshakeReply")
	proto.RegisterType((*StartRequest)(nil), "miner.StartRequest")
	proto.RegisterType((*StartReply)(nil), "miner.StartReply")
	proto.RegisterType((*StartReplyPort)(nil), "miner.StartReply.port")
	proto.RegisterType((*StopRequest)(nil), "miner.StopRequest")
	proto.RegisterType((*StopReply)(nil), "miner.StopReply")
	proto.RegisterType((*TasksStatusRequest)(nil), "miner.TasksStatusRequest")
	proto.RegisterType((*TaskStatus)(nil), "miner.TaskStatus")
	proto.RegisterType((*TasksStatusReply)(nil), "miner.TasksStatusReply")
	proto.RegisterEnum("miner.TaskStatus_Status", TaskStatus_Status_name, TaskStatus_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Miner service

type MinerClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
	Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoReply, error)
	Handshake(ctx context.Context, in *HandshakeRequest, opts ...grpc.CallOption) (*HandshakeReply, error)
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartReply, error)
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopReply, error)
	TasksStatus(ctx context.Context, opts ...grpc.CallOption) (Miner_TasksStatusClient, error)
}

type minerClient struct {
	cc *grpc.ClientConn
}

func NewMinerClient(cc *grpc.ClientConn) MinerClient {
	return &minerClient{cc}
}

func (c *minerClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := grpc.Invoke(ctx, "/miner.Miner/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minerClient) Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoReply, error) {
	out := new(InfoReply)
	err := grpc.Invoke(ctx, "/miner.Miner/Info", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minerClient) Handshake(ctx context.Context, in *HandshakeRequest, opts ...grpc.CallOption) (*HandshakeReply, error) {
	out := new(HandshakeReply)
	err := grpc.Invoke(ctx, "/miner.Miner/Handshake", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minerClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartReply, error) {
	out := new(StartReply)
	err := grpc.Invoke(ctx, "/miner.Miner/Start", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minerClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopReply, error) {
	out := new(StopReply)
	err := grpc.Invoke(ctx, "/miner.Miner/Stop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minerClient) TasksStatus(ctx context.Context, opts ...grpc.CallOption) (Miner_TasksStatusClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Miner_serviceDesc.Streams[0], c.cc, "/miner.Miner/TasksStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &minerTasksStatusClient{stream}
	return x, nil
}

type Miner_TasksStatusClient interface {
	Send(*TasksStatusRequest) error
	Recv() (*TasksStatusReply, error)
	grpc.ClientStream
}

type minerTasksStatusClient struct {
	grpc.ClientStream
}

func (x *minerTasksStatusClient) Send(m *TasksStatusRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *minerTasksStatusClient) Recv() (*TasksStatusReply, error) {
	m := new(TasksStatusReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Miner service

type MinerServer interface {
	Ping(context.Context, *PingRequest) (*PingReply, error)
	Info(context.Context, *InfoRequest) (*InfoReply, error)
	Handshake(context.Context, *HandshakeRequest) (*HandshakeReply, error)
	Start(context.Context, *StartRequest) (*StartReply, error)
	Stop(context.Context, *StopRequest) (*StopReply, error)
	TasksStatus(Miner_TasksStatusServer) error
}

func RegisterMinerServer(s *grpc.Server, srv MinerServer) {
	s.RegisterService(&_Miner_serviceDesc, srv)
}

func _Miner_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/miner.Miner/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinerServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Miner_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinerServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/miner.Miner/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinerServer).Info(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Miner_Handshake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandshakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinerServer).Handshake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/miner.Miner/Handshake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinerServer).Handshake(ctx, req.(*HandshakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Miner_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinerServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/miner.Miner/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinerServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Miner_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinerServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/miner.Miner/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinerServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Miner_TasksStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MinerServer).TasksStatus(&minerTasksStatusServer{stream})
}

type Miner_TasksStatusServer interface {
	Send(*TasksStatusReply) error
	Recv() (*TasksStatusRequest, error)
	grpc.ServerStream
}

type minerTasksStatusServer struct {
	grpc.ServerStream
}

func (x *minerTasksStatusServer) Send(m *TasksStatusReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *minerTasksStatusServer) Recv() (*TasksStatusRequest, error) {
	m := new(TasksStatusRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Miner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "miner.Miner",
	HandlerType: (*MinerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Miner_Ping_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _Miner_Info_Handler,
		},
		{
			MethodName: "Handshake",
			Handler:    _Miner_Handshake_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _Miner_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Miner_Stop_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TasksStatus",
			Handler:       _Miner_TasksStatus_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "miner/miner.proto",
}

func init() { proto.RegisterFile("miner/miner.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 687 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xdd, 0x4e, 0xd4, 0x40,
	0x14, 0xde, 0xb6, 0xdb, 0x95, 0x9e, 0x02, 0x29, 0x23, 0xc2, 0x5a, 0xc1, 0x98, 0x0a, 0x4a, 0x0c,
	0xa9, 0xb8, 0xc6, 0xc4, 0x98, 0x78, 0x81, 0x8a, 0xb0, 0x41, 0xba, 0x4d, 0xd7, 0x0d, 0xde, 0x96,
	0xa5, 0xc2, 0x86, 0xdd, 0x6d, 0x6d, 0xa7, 0xc6, 0x7d, 0x13, 0x5f, 0xc0, 0x87, 0xf0, 0x1d, 0xbc,
	0xf2, 0xda, 0x87, 0x31, 0x67, 0x66, 0xda, 0x4e, 0x5d, 0x48, 0xbc, 0x69, 0xe7, 0xcc, 0x7c, 0xdf,
	0x39, 0xdf, 0x9c, 0x9f, 0x81, 0x95, 0xc9, 0x68, 0x1a, 0xa5, 0x4f, 0xd9, 0xd7, 0x4d, 0xd2, 0x98,
	0xc6, 0x44, 0x67, 0x86, 0xb3, 0x04, 0xa6, 0x3f, 0x9a, 0x5e, 0x04, 0xd1, 0x97, 0x3c, 0xca, 0xa8,
	0xf3, 0x10, 0x0c, 0x6e, 0x26, 0xe3, 0x19, 0x59, 0x83, 0x56, 0x46, 0x43, 0x9a, 0x67, 0x6d, 0xe5,
	0x81, 0xb2, 0x63, 0x04, 0xc2, 0x42, 0x4e, 0x77, 0xfa, 0x39, 0x2e, 0x38, 0xbf, 0x54, 0x30, 0xb8,
	0x8d, 0xa4, 0x67, 0xa0, 0xf7, 0x69, 0x48, 0x91, 0xa3, 0xed, 0x98, 0x9d, 0x7b, 0x2e, 0x0f, 0x5a,
	0x02, 0x5c, 0x76, 0x7a, 0x30, 0xa5, 0xe9, 0x2c, 0xd0, 0xd1, 0x61, 0x66, 0xff, 0x54, 0x80, 0xaf,
	0xc8, 0x2e, 0x68, 0x6f, 0xfd, 0x01, 0x0b, 0x67, 0x76, 0xec, 0x39, 0x2a, 0x03, 0xb9, 0xc3, 0x24,
	0x0f, 0xb4, 0xa1, 0x3f, 0x20, 0x2f, 0xa0, 0x75, 0x12, 0x4d, 0xe2, 0x74, 0xd6, 0x56, 0x19, 0x61,
	0xf3, 0x06, 0xc2, 0x84, 0x81, 0x82, 0x16, 0xff, 0xdb, 0xdb, 0xa0, 0x0d, 0x93, 0x9c, 0xdc, 0x07,
	0xa0, 0x31, 0x0d, 0xc7, 0x83, 0x2c, 0xbc, 0x88, 0x58, 0xc8, 0x66, 0x20, 0xed, 0xd8, 0x5b, 0x20,
	0x08, 0xc4, 0x86, 0x85, 0x49, 0xf8, 0x4d, 0xc6, 0x95, 0xb6, 0xed, 0x03, 0x54, 0x17, 0x22, 0x16,
	0x68, 0x57, 0xd1, 0x4c, 0xa4, 0x0b, 0x97, 0x64, 0x17, 0xf4, 0xaf, 0xe1, 0x38, 0x8f, 0x84, 0xc4,
	0xb5, 0xeb, 0x25, 0x06, 0x1c, 0xf4, 0x4a, 0x7d, 0xa9, 0x38, 0x5b, 0x60, 0x1d, 0x85, 0xd3, 0xf3,
	0xec, 0x32, 0xbc, 0x8a, 0x44, 0x8a, 0xd1, 0xef, 0x65, 0x7e, 0x56, 0xf8, 0xbd, 0xcc, 0xcf, 0x9c,
	0x47, 0xb0, 0x2c, 0xa1, 0x30, 0xf1, 0xab, 0xc0, 0x4b, 0x2a, 0x50, 0xa2, 0xbe, 0x3e, 0x2c, 0xf6,
	0x69, 0x98, 0xd2, 0xc2, 0xd3, 0x32, 0xa8, 0xa3, 0x73, 0x01, 0x51, 0x47, 0xe7, 0x78, 0xb7, 0x34,
	0xba, 0x18, 0x65, 0x54, 0x64, 0xd1, 0x08, 0x4a, 0x1b, 0x3d, 0x8e, 0x26, 0x78, 0x69, 0x8d, 0x7b,
	0x64, 0x86, 0xf3, 0x47, 0x61, 0x57, 0x46, 0x97, 0x18, 0x76, 0x03, 0x8c, 0x61, 0x3c, 0xa5, 0xa1,
	0x14, 0xba, 0xda, 0x20, 0x1d, 0xd0, 0xfd, 0x38, 0xa5, 0x59, 0x5b, 0x65, 0xdd, 0xb0, 0x21, 0xae,
	0x5f, 0xf1, 0x5d, 0x76, 0x2c, 0xda, 0x21, 0xc1, 0xb5, 0xfd, 0x04, 0x9a, 0xb8, 0x40, 0xa9, 0x5d,
	0xbf, 0x94, 0xea, 0x13, 0xc2, 0xf7, 0x85, 0x4c, 0xb6, 0xc6, 0xf4, 0x57, 0x0e, 0xfe, 0x3f, 0xfd,
	0x52, 0x7c, 0x74, 0x23, 0xa7, 0x7f, 0x13, 0xcc, 0x3e, 0x8d, 0x93, 0x1b, 0xf2, 0xe5, 0x98, 0x60,
	0xf0, 0xe3, 0x64, 0x3c, 0x73, 0x56, 0x81, 0x7c, 0x0c, 0xb3, 0xab, 0xac, 0xcf, 0xe6, 0xa2, 0x98,
	0x87, 0xef, 0x0a, 0x00, 0x6e, 0xf3, 0x5d, 0xb2, 0x57, 0x9b, 0xa2, 0xe5, 0x4e, 0x5b, 0x68, 0xa8,
	0x20, 0xae, 0xe0, 0x17, 0xf3, 0xf5, 0x09, 0x5a, 0x82, 0x6b, 0xc2, 0xad, 0x81, 0x77, 0xec, 0xf5,
	0x4e, 0x3d, 0xab, 0x41, 0x16, 0x61, 0xa1, 0xef, 0xf7, 0x7a, 0x1f, 0xba, 0xde, 0xa1, 0xa5, 0x70,
	0x6b, 0xff, 0xd4, 0x43, 0x4b, 0x45, 0x60, 0x30, 0xf0, 0x98, 0xa1, 0xe1, 0xd1, 0xfb, 0xae, 0xd7,
	0xed, 0x1f, 0x1d, 0xbc, 0xb3, 0x9a, 0x04, 0xa0, 0xf5, 0x26, 0xe8, 0x1d, 0x1f, 0x78, 0x96, 0xee,
	0xfc, 0x50, 0xc0, 0xaa, 0x29, 0xc6, 0x0a, 0xee, 0xc3, 0x02, 0x0f, 0x1c, 0x15, 0x43, 0xbb, 0x2d,
	0x49, 0x94, 0xa1, 0x42, 0x68, 0x24, 0xea, 0x55, 0xd2, 0x6c, 0x0f, 0x96, 0x6a, 0x47, 0xd7, 0x54,
	0xe2, 0x71, 0xbd, 0x12, 0x2b, 0x73, 0x59, 0x90, 0x8a, 0xd0, 0xf9, 0xad, 0x82, 0x7e, 0xc2, 0x1a,
	0xc8, 0x85, 0x26, 0x3e, 0x48, 0x84, 0x08, 0xbc, 0xf4, 0x58, 0xd9, 0x56, 0x6d, 0x0f, 0x0b, 0xd2,
	0x40, 0x3c, 0xce, 0x56, 0x89, 0x97, 0x1e, 0xaa, 0x12, 0x5f, 0x0e, 0x9f, 0xd3, 0x20, 0xaf, 0xc1,
	0x28, 0xe7, 0x88, 0xac, 0x0b, 0xc0, 0xbf, 0xf3, 0x67, 0xdf, 0x99, 0x3f, 0xe0, 0x74, 0xfe, 0xda,
	0xa5, 0x94, 0xdc, 0xae, 0x77, 0x16, 0xa7, 0xad, 0xcc, 0xb5, 0x1b, 0x57, 0x88, 0x1d, 0x54, 0x2a,
	0x94, 0xba, 0xad, 0x54, 0x58, 0xb5, 0x58, 0x83, 0x1c, 0x82, 0x29, 0xd5, 0x81, 0xdc, 0xbd, 0xae,
	0x36, 0x9c, 0xbd, 0x7e, 0x43, 0xd9, 0x9c, 0xc6, 0x8e, 0xb2, 0xa7, 0x9c, 0xb5, 0xd8, 0xc3, 0xff,
	0xfc, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf9, 0xef, 0x88, 0xa0, 0x0d, 0x06, 0x00, 0x00,
}
