// Code generated by protoc-gen-go. DO NOT EDIT.
// source: worker.proto

package sonm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TaskStatusReply_Status int32

const (
	TaskStatusReply_UNKNOWN  TaskStatusReply_Status = 0
	TaskStatusReply_SPOOLING TaskStatusReply_Status = 1
	TaskStatusReply_SPAWNING TaskStatusReply_Status = 2
	TaskStatusReply_RUNNING  TaskStatusReply_Status = 3
	TaskStatusReply_FINISHED TaskStatusReply_Status = 4
	TaskStatusReply_BROKEN   TaskStatusReply_Status = 5
)

var TaskStatusReply_Status_name = map[int32]string{
	0: "UNKNOWN",
	1: "SPOOLING",
	2: "SPAWNING",
	3: "RUNNING",
	4: "FINISHED",
	5: "BROKEN",
}
var TaskStatusReply_Status_value = map[string]int32{
	"UNKNOWN":  0,
	"SPOOLING": 1,
	"SPAWNING": 2,
	"RUNNING":  3,
	"FINISHED": 4,
	"BROKEN":   5,
}

func (x TaskStatusReply_Status) String() string {
	return proto.EnumName(TaskStatusReply_Status_name, int32(x))
}
func (TaskStatusReply_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor15, []int{11, 0} }

type TaskTag struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *TaskTag) Reset()                    { *m = TaskTag{} }
func (m *TaskTag) String() string            { return proto.CompactTextString(m) }
func (*TaskTag) ProtoMessage()               {}
func (*TaskTag) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{0} }

func (m *TaskTag) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type TaskSpec struct {
	// Container describes container settings.
	Container *Container        `protobuf:"bytes,1,opt,name=container" json:"container,omitempty"`
	Registry  *Registry         `protobuf:"bytes,2,opt,name=registry" json:"registry,omitempty"`
	Resources *AskPlanResources `protobuf:"bytes,3,opt,name=resources" json:"resources,omitempty"`
	Tag       *TaskTag          `protobuf:"bytes,4,opt,name=tag" json:"tag,omitempty"`
}

func (m *TaskSpec) Reset()                    { *m = TaskSpec{} }
func (m *TaskSpec) String() string            { return proto.CompactTextString(m) }
func (*TaskSpec) ProtoMessage()               {}
func (*TaskSpec) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{1} }

func (m *TaskSpec) GetContainer() *Container {
	if m != nil {
		return m.Container
	}
	return nil
}

func (m *TaskSpec) GetRegistry() *Registry {
	if m != nil {
		return m.Registry
	}
	return nil
}

func (m *TaskSpec) GetResources() *AskPlanResources {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *TaskSpec) GetTag() *TaskTag {
	if m != nil {
		return m.Tag
	}
	return nil
}

type StartTaskRequest struct {
	// Deal points to the deal associated with workers where the task should be
	// started.
	DealID *BigInt   `protobuf:"bytes,1,opt,name=dealID" json:"dealID,omitempty"`
	Spec   *TaskSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
}

func (m *StartTaskRequest) Reset()                    { *m = StartTaskRequest{} }
func (m *StartTaskRequest) String() string            { return proto.CompactTextString(m) }
func (*StartTaskRequest) ProtoMessage()               {}
func (*StartTaskRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{2} }

func (m *StartTaskRequest) GetDealID() *BigInt {
	if m != nil {
		return m.DealID
	}
	return nil
}

func (m *StartTaskRequest) GetSpec() *TaskSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type WorkerJoinNetworkRequest struct {
	TaskID    string `protobuf:"bytes,1,opt,name=taskID" json:"taskID,omitempty"`
	NetworkID string `protobuf:"bytes,2,opt,name=networkID" json:"networkID,omitempty"`
}

func (m *WorkerJoinNetworkRequest) Reset()                    { *m = WorkerJoinNetworkRequest{} }
func (m *WorkerJoinNetworkRequest) String() string            { return proto.CompactTextString(m) }
func (*WorkerJoinNetworkRequest) ProtoMessage()               {}
func (*WorkerJoinNetworkRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{3} }

func (m *WorkerJoinNetworkRequest) GetTaskID() string {
	if m != nil {
		return m.TaskID
	}
	return ""
}

func (m *WorkerJoinNetworkRequest) GetNetworkID() string {
	if m != nil {
		return m.NetworkID
	}
	return ""
}

type StartTaskReply struct {
	Id         string                `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	PortMap    map[string]*Endpoints `protobuf:"bytes,2,rep,name=portMap" json:"portMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	NetworkIDs []string              `protobuf:"bytes,3,rep,name=networkIDs" json:"networkIDs,omitempty"`
}

func (m *StartTaskReply) Reset()                    { *m = StartTaskReply{} }
func (m *StartTaskReply) String() string            { return proto.CompactTextString(m) }
func (*StartTaskReply) ProtoMessage()               {}
func (*StartTaskReply) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{4} }

func (m *StartTaskReply) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *StartTaskReply) GetPortMap() map[string]*Endpoints {
	if m != nil {
		return m.PortMap
	}
	return nil
}

func (m *StartTaskReply) GetNetworkIDs() []string {
	if m != nil {
		return m.NetworkIDs
	}
	return nil
}

type StatusReply struct {
	Uptime              uint64      `protobuf:"varint,1,opt,name=uptime" json:"uptime,omitempty"`
	Version             string      `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	Platform            string      `protobuf:"bytes,3,opt,name=platform" json:"platform,omitempty"`
	EthAddr             string      `protobuf:"bytes,4,opt,name=ethAddr" json:"ethAddr,omitempty"`
	TaskCount           uint32      `protobuf:"varint,5,opt,name=taskCount" json:"taskCount,omitempty"`
	DWHStatus           string      `protobuf:"bytes,6,opt,name=DWHStatus" json:"DWHStatus,omitempty"`
	RendezvousStatus    string      `protobuf:"bytes,7,opt,name=rendezvousStatus" json:"rendezvousStatus,omitempty"`
	Master              *EthAddress `protobuf:"bytes,8,opt,name=master" json:"master,omitempty"`
	Admin               *EthAddress `protobuf:"bytes,9,opt,name=admin" json:"admin,omitempty"`
	IsMasterConfirmed   bool        `protobuf:"varint,10,opt,name=isMasterConfirmed" json:"isMasterConfirmed,omitempty"`
	IsBenchmarkFinished bool        `protobuf:"varint,11,opt,name=isBenchmarkFinished" json:"isBenchmarkFinished,omitempty"`
}

func (m *StatusReply) Reset()                    { *m = StatusReply{} }
func (m *StatusReply) String() string            { return proto.CompactTextString(m) }
func (*StatusReply) ProtoMessage()               {}
func (*StatusReply) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{5} }

func (m *StatusReply) GetUptime() uint64 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *StatusReply) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *StatusReply) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *StatusReply) GetEthAddr() string {
	if m != nil {
		return m.EthAddr
	}
	return ""
}

func (m *StatusReply) GetTaskCount() uint32 {
	if m != nil {
		return m.TaskCount
	}
	return 0
}

func (m *StatusReply) GetDWHStatus() string {
	if m != nil {
		return m.DWHStatus
	}
	return ""
}

func (m *StatusReply) GetRendezvousStatus() string {
	if m != nil {
		return m.RendezvousStatus
	}
	return ""
}

func (m *StatusReply) GetMaster() *EthAddress {
	if m != nil {
		return m.Master
	}
	return nil
}

func (m *StatusReply) GetAdmin() *EthAddress {
	if m != nil {
		return m.Admin
	}
	return nil
}

func (m *StatusReply) GetIsMasterConfirmed() bool {
	if m != nil {
		return m.IsMasterConfirmed
	}
	return false
}

func (m *StatusReply) GetIsBenchmarkFinished() bool {
	if m != nil {
		return m.IsBenchmarkFinished
	}
	return false
}

type AskPlansReply struct {
	AskPlans map[string]*AskPlan `protobuf:"bytes,1,rep,name=askPlans" json:"askPlans,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *AskPlansReply) Reset()                    { *m = AskPlansReply{} }
func (m *AskPlansReply) String() string            { return proto.CompactTextString(m) }
func (*AskPlansReply) ProtoMessage()               {}
func (*AskPlansReply) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{6} }

func (m *AskPlansReply) GetAskPlans() map[string]*AskPlan {
	if m != nil {
		return m.AskPlans
	}
	return nil
}

type TaskListReply struct {
	Info map[string]*TaskStatusReply `protobuf:"bytes,1,rep,name=info" json:"info,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *TaskListReply) Reset()                    { *m = TaskListReply{} }
func (m *TaskListReply) String() string            { return proto.CompactTextString(m) }
func (*TaskListReply) ProtoMessage()               {}
func (*TaskListReply) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{7} }

func (m *TaskListReply) GetInfo() map[string]*TaskStatusReply {
	if m != nil {
		return m.Info
	}
	return nil
}

type DevicesReply struct {
	CPU     *CPU     `protobuf:"bytes,1,opt,name=CPU" json:"CPU,omitempty"`
	GPUs    []*GPU   `protobuf:"bytes,2,rep,name=GPUs" json:"GPUs,omitempty"`
	RAM     *RAM     `protobuf:"bytes,3,opt,name=RAM" json:"RAM,omitempty"`
	Network *Network `protobuf:"bytes,4,opt,name=network" json:"network,omitempty"`
	Storage *Storage `protobuf:"bytes,5,opt,name=storage" json:"storage,omitempty"`
}

func (m *DevicesReply) Reset()                    { *m = DevicesReply{} }
func (m *DevicesReply) String() string            { return proto.CompactTextString(m) }
func (*DevicesReply) ProtoMessage()               {}
func (*DevicesReply) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{8} }

func (m *DevicesReply) GetCPU() *CPU {
	if m != nil {
		return m.CPU
	}
	return nil
}

func (m *DevicesReply) GetGPUs() []*GPU {
	if m != nil {
		return m.GPUs
	}
	return nil
}

func (m *DevicesReply) GetRAM() *RAM {
	if m != nil {
		return m.RAM
	}
	return nil
}

func (m *DevicesReply) GetNetwork() *Network {
	if m != nil {
		return m.Network
	}
	return nil
}

func (m *DevicesReply) GetStorage() *Storage {
	if m != nil {
		return m.Storage
	}
	return nil
}

type PullTaskRequest struct {
	DealId string `protobuf:"bytes,1,opt,name=dealId" json:"dealId,omitempty"`
	TaskId string `protobuf:"bytes,2,opt,name=taskId" json:"taskId,omitempty"`
}

func (m *PullTaskRequest) Reset()                    { *m = PullTaskRequest{} }
func (m *PullTaskRequest) String() string            { return proto.CompactTextString(m) }
func (*PullTaskRequest) ProtoMessage()               {}
func (*PullTaskRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{9} }

func (m *PullTaskRequest) GetDealId() string {
	if m != nil {
		return m.DealId
	}
	return ""
}

func (m *PullTaskRequest) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

type DealInfoReply struct {
	Deal *Deal `protobuf:"bytes,1,opt,name=deal" json:"deal,omitempty"`
	// List of currently running tasks.
	Running map[string]*TaskStatusReply `protobuf:"bytes,2,rep,name=running" json:"running,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// List of completed tasks.
	Completed map[string]*TaskStatusReply `protobuf:"bytes,3,rep,name=completed" json:"completed,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Resources is a real resources (cores, ram bytes, GPU devices, etc)
	// allocated on a worker for this deal.
	Resources *AskPlanResources `protobuf:"bytes,4,opt,name=resources" json:"resources,omitempty"`
	PublicIPs []string          `protobuf:"bytes,5,rep,name=publicIPs" json:"publicIPs,omitempty"`
}

func (m *DealInfoReply) Reset()                    { *m = DealInfoReply{} }
func (m *DealInfoReply) String() string            { return proto.CompactTextString(m) }
func (*DealInfoReply) ProtoMessage()               {}
func (*DealInfoReply) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{10} }

func (m *DealInfoReply) GetDeal() *Deal {
	if m != nil {
		return m.Deal
	}
	return nil
}

func (m *DealInfoReply) GetRunning() map[string]*TaskStatusReply {
	if m != nil {
		return m.Running
	}
	return nil
}

func (m *DealInfoReply) GetCompleted() map[string]*TaskStatusReply {
	if m != nil {
		return m.Completed
	}
	return nil
}

func (m *DealInfoReply) GetResources() *AskPlanResources {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *DealInfoReply) GetPublicIPs() []string {
	if m != nil {
		return m.PublicIPs
	}
	return nil
}

type TaskStatusReply struct {
	Status    TaskStatusReply_Status `protobuf:"varint,1,opt,name=status,enum=sonm.TaskStatusReply_Status" json:"status,omitempty"`
	ImageName string                 `protobuf:"bytes,2,opt,name=imageName" json:"imageName,omitempty"`
	PortMap   map[string]*Endpoints  `protobuf:"bytes,3,rep,name=portMap" json:"portMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Uptime    uint64                 `protobuf:"varint,4,opt,name=uptime" json:"uptime,omitempty"`
	Usage     *ResourceUsage         `protobuf:"bytes,5,opt,name=usage" json:"usage,omitempty"`
	// TODO: looks like we need to use TaskSpec here
	AllocatedResources *AskPlanResources `protobuf:"bytes,6,opt,name=allocatedResources" json:"allocatedResources,omitempty"`
	Tag                *TaskTag          `protobuf:"bytes,7,opt,name=tag" json:"tag,omitempty"`
}

func (m *TaskStatusReply) Reset()                    { *m = TaskStatusReply{} }
func (m *TaskStatusReply) String() string            { return proto.CompactTextString(m) }
func (*TaskStatusReply) ProtoMessage()               {}
func (*TaskStatusReply) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{11} }

func (m *TaskStatusReply) GetStatus() TaskStatusReply_Status {
	if m != nil {
		return m.Status
	}
	return TaskStatusReply_UNKNOWN
}

func (m *TaskStatusReply) GetImageName() string {
	if m != nil {
		return m.ImageName
	}
	return ""
}

func (m *TaskStatusReply) GetPortMap() map[string]*Endpoints {
	if m != nil {
		return m.PortMap
	}
	return nil
}

func (m *TaskStatusReply) GetUptime() uint64 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *TaskStatusReply) GetUsage() *ResourceUsage {
	if m != nil {
		return m.Usage
	}
	return nil
}

func (m *TaskStatusReply) GetAllocatedResources() *AskPlanResources {
	if m != nil {
		return m.AllocatedResources
	}
	return nil
}

func (m *TaskStatusReply) GetTag() *TaskTag {
	if m != nil {
		return m.Tag
	}
	return nil
}

type ResourcePool struct {
	All  *AskPlanResources            `protobuf:"bytes,1,opt,name=all" json:"all,omitempty"`
	Used map[string]*AskPlanResources `protobuf:"bytes,2,rep,name=used" json:"used,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ResourcePool) Reset()                    { *m = ResourcePool{} }
func (m *ResourcePool) String() string            { return proto.CompactTextString(m) }
func (*ResourcePool) ProtoMessage()               {}
func (*ResourcePool) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{12} }

func (m *ResourcePool) GetAll() *AskPlanResources {
	if m != nil {
		return m.All
	}
	return nil
}

func (m *ResourcePool) GetUsed() map[string]*AskPlanResources {
	if m != nil {
		return m.Used
	}
	return nil
}

type SchedulerData struct {
	TaskToAskPlan map[string]string        `protobuf:"bytes,1,rep,name=taskToAskPlan" json:"taskToAskPlan,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MainPool      *ResourcePool            `protobuf:"bytes,2,opt,name=mainPool" json:"mainPool,omitempty"`
	AskPlanPools  map[string]*ResourcePool `protobuf:"bytes,3,rep,name=askPlanPools" json:"askPlanPools,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *SchedulerData) Reset()                    { *m = SchedulerData{} }
func (m *SchedulerData) String() string            { return proto.CompactTextString(m) }
func (*SchedulerData) ProtoMessage()               {}
func (*SchedulerData) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{13} }

func (m *SchedulerData) GetTaskToAskPlan() map[string]string {
	if m != nil {
		return m.TaskToAskPlan
	}
	return nil
}

func (m *SchedulerData) GetMainPool() *ResourcePool {
	if m != nil {
		return m.MainPool
	}
	return nil
}

func (m *SchedulerData) GetAskPlanPools() map[string]*ResourcePool {
	if m != nil {
		return m.AskPlanPools
	}
	return nil
}

type SalesmanData struct {
	AskPlanCGroups map[string]string `protobuf:"bytes,2,rep,name=askPlanCGroups" json:"askPlanCGroups,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Deals          map[string]*Deal  `protobuf:"bytes,3,rep,name=deals" json:"deals,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Orders         map[string]*Order `protobuf:"bytes,4,rep,name=orders" json:"orders,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *SalesmanData) Reset()                    { *m = SalesmanData{} }
func (m *SalesmanData) String() string            { return proto.CompactTextString(m) }
func (*SalesmanData) ProtoMessage()               {}
func (*SalesmanData) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{14} }

func (m *SalesmanData) GetAskPlanCGroups() map[string]string {
	if m != nil {
		return m.AskPlanCGroups
	}
	return nil
}

func (m *SalesmanData) GetDeals() map[string]*Deal {
	if m != nil {
		return m.Deals
	}
	return nil
}

func (m *SalesmanData) GetOrders() map[string]*Order {
	if m != nil {
		return m.Orders
	}
	return nil
}

type DebugStateReply struct {
	SchedulerData *SchedulerData `protobuf:"bytes,1,opt,name=schedulerData" json:"schedulerData,omitempty"`
	SalesmanData  *SalesmanData  `protobuf:"bytes,2,opt,name=salesmanData" json:"salesmanData,omitempty"`
}

func (m *DebugStateReply) Reset()                    { *m = DebugStateReply{} }
func (m *DebugStateReply) String() string            { return proto.CompactTextString(m) }
func (*DebugStateReply) ProtoMessage()               {}
func (*DebugStateReply) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{15} }

func (m *DebugStateReply) GetSchedulerData() *SchedulerData {
	if m != nil {
		return m.SchedulerData
	}
	return nil
}

func (m *DebugStateReply) GetSalesmanData() *SalesmanData {
	if m != nil {
		return m.SalesmanData
	}
	return nil
}

type PurgeTasksRequest struct {
	DealID *BigInt `protobuf:"bytes,1,opt,name=dealID" json:"dealID,omitempty"`
}

func (m *PurgeTasksRequest) Reset()                    { *m = PurgeTasksRequest{} }
func (m *PurgeTasksRequest) String() string            { return proto.CompactTextString(m) }
func (*PurgeTasksRequest) ProtoMessage()               {}
func (*PurgeTasksRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{16} }

func (m *PurgeTasksRequest) GetDealID() *BigInt {
	if m != nil {
		return m.DealID
	}
	return nil
}

func init() {
	proto.RegisterType((*TaskTag)(nil), "sonm.TaskTag")
	proto.RegisterType((*TaskSpec)(nil), "sonm.TaskSpec")
	proto.RegisterType((*StartTaskRequest)(nil), "sonm.StartTaskRequest")
	proto.RegisterType((*WorkerJoinNetworkRequest)(nil), "sonm.WorkerJoinNetworkRequest")
	proto.RegisterType((*StartTaskReply)(nil), "sonm.StartTaskReply")
	proto.RegisterType((*StatusReply)(nil), "sonm.StatusReply")
	proto.RegisterType((*AskPlansReply)(nil), "sonm.AskPlansReply")
	proto.RegisterType((*TaskListReply)(nil), "sonm.TaskListReply")
	proto.RegisterType((*DevicesReply)(nil), "sonm.DevicesReply")
	proto.RegisterType((*PullTaskRequest)(nil), "sonm.PullTaskRequest")
	proto.RegisterType((*DealInfoReply)(nil), "sonm.DealInfoReply")
	proto.RegisterType((*TaskStatusReply)(nil), "sonm.TaskStatusReply")
	proto.RegisterType((*ResourcePool)(nil), "sonm.ResourcePool")
	proto.RegisterType((*SchedulerData)(nil), "sonm.SchedulerData")
	proto.RegisterType((*SalesmanData)(nil), "sonm.SalesmanData")
	proto.RegisterType((*DebugStateReply)(nil), "sonm.DebugStateReply")
	proto.RegisterType((*PurgeTasksRequest)(nil), "sonm.PurgeTasksRequest")
	proto.RegisterEnum("sonm.TaskStatusReply_Status", TaskStatusReply_Status_name, TaskStatusReply_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for WorkerManagement service

type WorkerManagementClient interface {
	// Status produse a detailed info about worker
	Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusReply, error)
	// Devices provides detailed information about device
	// and show benchmark results.
	Devices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DevicesReply, error)
	// FreeDevices provides information about unallocated resources
	// that can be turned into ask-plans.
	// Deprecated: no longer usable.
	FreeDevices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DevicesReply, error)
	// Tasks produces a list of all running tasks on the worker
	Tasks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TaskListReply, error)
	// AskPlans allows to obtain previously assigned Ask Plans from for a given worker.
	AskPlans(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AskPlansReply, error)
	// CreateAskPlan allows to create rules
	// for creating Ask orders on Marketplace
	CreateAskPlan(ctx context.Context, in *AskPlan, opts ...grpc.CallOption) (*ID, error)
	// RemoveAskPlan allows to remove rules
	// for creating Ask orders on Marketplace
	RemoveAskPlan(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error)
	// PurgeAskPlans removes all ask-plans
	// Deprecated: use PurgeAsksPlansDetailed instead
	PurgeAskPlans(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// PurgeAsksPlansDetailed removes all ask-plans in sync manner and returns error for each ask-plan (if it's present)
	PurgeAskPlansDetailed(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ErrorByStringID, error)
	// Schedule maintenance for worker: it will attempt to close all deals till that time point
	ScheduleMaintenance(ctx context.Context, in *Timestamp, opts ...grpc.CallOption) (*Empty, error)
	// Get next planned maintenance
	NextMaintenance(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Timestamp, error)
	// Get useful debugging info - scheduler state and salesman state
	DebugState(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DebugStateReply, error)
	// Remove benchmark cached value by specified benchmark ID
	RemoveBenchmark(ctx context.Context, in *NumericID, opts ...grpc.CallOption) (*Empty, error)
	// Schedule full rebenchmarking on next restart
	PurgeBenchmarks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type workerManagementClient struct {
	cc *grpc.ClientConn
}

func NewWorkerManagementClient(cc *grpc.ClientConn) WorkerManagementClient {
	return &workerManagementClient{cc}
}

func (c *workerManagementClient) Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := grpc.Invoke(ctx, "/sonm.WorkerManagement/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerManagementClient) Devices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DevicesReply, error) {
	out := new(DevicesReply)
	err := grpc.Invoke(ctx, "/sonm.WorkerManagement/Devices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerManagementClient) FreeDevices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DevicesReply, error) {
	out := new(DevicesReply)
	err := grpc.Invoke(ctx, "/sonm.WorkerManagement/FreeDevices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerManagementClient) Tasks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TaskListReply, error) {
	out := new(TaskListReply)
	err := grpc.Invoke(ctx, "/sonm.WorkerManagement/Tasks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerManagementClient) AskPlans(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AskPlansReply, error) {
	out := new(AskPlansReply)
	err := grpc.Invoke(ctx, "/sonm.WorkerManagement/AskPlans", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerManagementClient) CreateAskPlan(ctx context.Context, in *AskPlan, opts ...grpc.CallOption) (*ID, error) {
	out := new(ID)
	err := grpc.Invoke(ctx, "/sonm.WorkerManagement/CreateAskPlan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerManagementClient) RemoveAskPlan(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.WorkerManagement/RemoveAskPlan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerManagementClient) PurgeAskPlans(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.WorkerManagement/PurgeAskPlans", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerManagementClient) PurgeAskPlansDetailed(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ErrorByStringID, error) {
	out := new(ErrorByStringID)
	err := grpc.Invoke(ctx, "/sonm.WorkerManagement/PurgeAskPlansDetailed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerManagementClient) ScheduleMaintenance(ctx context.Context, in *Timestamp, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.WorkerManagement/ScheduleMaintenance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerManagementClient) NextMaintenance(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Timestamp, error) {
	out := new(Timestamp)
	err := grpc.Invoke(ctx, "/sonm.WorkerManagement/NextMaintenance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerManagementClient) DebugState(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DebugStateReply, error) {
	out := new(DebugStateReply)
	err := grpc.Invoke(ctx, "/sonm.WorkerManagement/DebugState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerManagementClient) RemoveBenchmark(ctx context.Context, in *NumericID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.WorkerManagement/RemoveBenchmark", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerManagementClient) PurgeBenchmarks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.WorkerManagement/PurgeBenchmarks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WorkerManagement service

type WorkerManagementServer interface {
	// Status produse a detailed info about worker
	Status(context.Context, *Empty) (*StatusReply, error)
	// Devices provides detailed information about device
	// and show benchmark results.
	Devices(context.Context, *Empty) (*DevicesReply, error)
	// FreeDevices provides information about unallocated resources
	// that can be turned into ask-plans.
	// Deprecated: no longer usable.
	FreeDevices(context.Context, *Empty) (*DevicesReply, error)
	// Tasks produces a list of all running tasks on the worker
	Tasks(context.Context, *Empty) (*TaskListReply, error)
	// AskPlans allows to obtain previously assigned Ask Plans from for a given worker.
	AskPlans(context.Context, *Empty) (*AskPlansReply, error)
	// CreateAskPlan allows to create rules
	// for creating Ask orders on Marketplace
	CreateAskPlan(context.Context, *AskPlan) (*ID, error)
	// RemoveAskPlan allows to remove rules
	// for creating Ask orders on Marketplace
	RemoveAskPlan(context.Context, *ID) (*Empty, error)
	// PurgeAskPlans removes all ask-plans
	// Deprecated: use PurgeAsksPlansDetailed instead
	PurgeAskPlans(context.Context, *Empty) (*Empty, error)
	// PurgeAsksPlansDetailed removes all ask-plans in sync manner and returns error for each ask-plan (if it's present)
	PurgeAskPlansDetailed(context.Context, *Empty) (*ErrorByStringID, error)
	// Schedule maintenance for worker: it will attempt to close all deals till that time point
	ScheduleMaintenance(context.Context, *Timestamp) (*Empty, error)
	// Get next planned maintenance
	NextMaintenance(context.Context, *Empty) (*Timestamp, error)
	// Get useful debugging info - scheduler state and salesman state
	DebugState(context.Context, *Empty) (*DebugStateReply, error)
	// Remove benchmark cached value by specified benchmark ID
	RemoveBenchmark(context.Context, *NumericID) (*Empty, error)
	// Schedule full rebenchmarking on next restart
	PurgeBenchmarks(context.Context, *Empty) (*Empty, error)
}

func RegisterWorkerManagementServer(s *grpc.Server, srv WorkerManagementServer) {
	s.RegisterService(&_WorkerManagement_serviceDesc, srv)
}

func _WorkerManagement_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerManagementServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.WorkerManagement/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerManagementServer).Status(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerManagement_Devices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerManagementServer).Devices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.WorkerManagement/Devices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerManagementServer).Devices(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerManagement_FreeDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerManagementServer).FreeDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.WorkerManagement/FreeDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerManagementServer).FreeDevices(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerManagement_Tasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerManagementServer).Tasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.WorkerManagement/Tasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerManagementServer).Tasks(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerManagement_AskPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerManagementServer).AskPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.WorkerManagement/AskPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerManagementServer).AskPlans(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerManagement_CreateAskPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AskPlan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerManagementServer).CreateAskPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.WorkerManagement/CreateAskPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerManagementServer).CreateAskPlan(ctx, req.(*AskPlan))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerManagement_RemoveAskPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerManagementServer).RemoveAskPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.WorkerManagement/RemoveAskPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerManagementServer).RemoveAskPlan(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerManagement_PurgeAskPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerManagementServer).PurgeAskPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.WorkerManagement/PurgeAskPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerManagementServer).PurgeAskPlans(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerManagement_PurgeAskPlansDetailed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerManagementServer).PurgeAskPlansDetailed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.WorkerManagement/PurgeAskPlansDetailed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerManagementServer).PurgeAskPlansDetailed(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerManagement_ScheduleMaintenance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Timestamp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerManagementServer).ScheduleMaintenance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.WorkerManagement/ScheduleMaintenance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerManagementServer).ScheduleMaintenance(ctx, req.(*Timestamp))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerManagement_NextMaintenance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerManagementServer).NextMaintenance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.WorkerManagement/NextMaintenance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerManagementServer).NextMaintenance(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerManagement_DebugState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerManagementServer).DebugState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.WorkerManagement/DebugState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerManagementServer).DebugState(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerManagement_RemoveBenchmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumericID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerManagementServer).RemoveBenchmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.WorkerManagement/RemoveBenchmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerManagementServer).RemoveBenchmark(ctx, req.(*NumericID))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerManagement_PurgeBenchmarks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerManagementServer).PurgeBenchmarks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.WorkerManagement/PurgeBenchmarks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerManagementServer).PurgeBenchmarks(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _WorkerManagement_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sonm.WorkerManagement",
	HandlerType: (*WorkerManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _WorkerManagement_Status_Handler,
		},
		{
			MethodName: "Devices",
			Handler:    _WorkerManagement_Devices_Handler,
		},
		{
			MethodName: "FreeDevices",
			Handler:    _WorkerManagement_FreeDevices_Handler,
		},
		{
			MethodName: "Tasks",
			Handler:    _WorkerManagement_Tasks_Handler,
		},
		{
			MethodName: "AskPlans",
			Handler:    _WorkerManagement_AskPlans_Handler,
		},
		{
			MethodName: "CreateAskPlan",
			Handler:    _WorkerManagement_CreateAskPlan_Handler,
		},
		{
			MethodName: "RemoveAskPlan",
			Handler:    _WorkerManagement_RemoveAskPlan_Handler,
		},
		{
			MethodName: "PurgeAskPlans",
			Handler:    _WorkerManagement_PurgeAskPlans_Handler,
		},
		{
			MethodName: "PurgeAskPlansDetailed",
			Handler:    _WorkerManagement_PurgeAskPlansDetailed_Handler,
		},
		{
			MethodName: "ScheduleMaintenance",
			Handler:    _WorkerManagement_ScheduleMaintenance_Handler,
		},
		{
			MethodName: "NextMaintenance",
			Handler:    _WorkerManagement_NextMaintenance_Handler,
		},
		{
			MethodName: "DebugState",
			Handler:    _WorkerManagement_DebugState_Handler,
		},
		{
			MethodName: "RemoveBenchmark",
			Handler:    _WorkerManagement_RemoveBenchmark_Handler,
		},
		{
			MethodName: "PurgeBenchmarks",
			Handler:    _WorkerManagement_PurgeBenchmarks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "worker.proto",
}

// Client API for Worker service

type WorkerClient interface {
	PushTask(ctx context.Context, opts ...grpc.CallOption) (Worker_PushTaskClient, error)
	PullTask(ctx context.Context, in *PullTaskRequest, opts ...grpc.CallOption) (Worker_PullTaskClient, error)
	// StartTask schedules the task associcated with a deal.
	StartTask(ctx context.Context, in *StartTaskRequest, opts ...grpc.CallOption) (*StartTaskReply, error)
	StopTask(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error)
	// PurgeTasks stops all tasks by given deal
	PurgeTasks(ctx context.Context, in *PurgeTasksRequest, opts ...grpc.CallOption) (*ErrorByStringID, error)
	TaskStatus(ctx context.Context, in *ID, opts ...grpc.CallOption) (*TaskStatusReply, error)
	JoinNetwork(ctx context.Context, in *WorkerJoinNetworkRequest, opts ...grpc.CallOption) (*NetworkSpec, error)
	TaskLogs(ctx context.Context, in *TaskLogsRequest, opts ...grpc.CallOption) (Worker_TaskLogsClient, error)
	// Note: currently used for testing pusposes.
	GetDealInfo(ctx context.Context, in *ID, opts ...grpc.CallOption) (*DealInfoReply, error)
}

type workerClient struct {
	cc *grpc.ClientConn
}

func NewWorkerClient(cc *grpc.ClientConn) WorkerClient {
	return &workerClient{cc}
}

func (c *workerClient) PushTask(ctx context.Context, opts ...grpc.CallOption) (Worker_PushTaskClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Worker_serviceDesc.Streams[0], c.cc, "/sonm.Worker/PushTask", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerPushTaskClient{stream}
	return x, nil
}

type Worker_PushTaskClient interface {
	Send(*Chunk) error
	Recv() (*Progress, error)
	grpc.ClientStream
}

type workerPushTaskClient struct {
	grpc.ClientStream
}

func (x *workerPushTaskClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *workerPushTaskClient) Recv() (*Progress, error) {
	m := new(Progress)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workerClient) PullTask(ctx context.Context, in *PullTaskRequest, opts ...grpc.CallOption) (Worker_PullTaskClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Worker_serviceDesc.Streams[1], c.cc, "/sonm.Worker/PullTask", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerPullTaskClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Worker_PullTaskClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type workerPullTaskClient struct {
	grpc.ClientStream
}

func (x *workerPullTaskClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workerClient) StartTask(ctx context.Context, in *StartTaskRequest, opts ...grpc.CallOption) (*StartTaskReply, error) {
	out := new(StartTaskReply)
	err := grpc.Invoke(ctx, "/sonm.Worker/StartTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) StopTask(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.Worker/StopTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) PurgeTasks(ctx context.Context, in *PurgeTasksRequest, opts ...grpc.CallOption) (*ErrorByStringID, error) {
	out := new(ErrorByStringID)
	err := grpc.Invoke(ctx, "/sonm.Worker/PurgeTasks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) TaskStatus(ctx context.Context, in *ID, opts ...grpc.CallOption) (*TaskStatusReply, error) {
	out := new(TaskStatusReply)
	err := grpc.Invoke(ctx, "/sonm.Worker/TaskStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) JoinNetwork(ctx context.Context, in *WorkerJoinNetworkRequest, opts ...grpc.CallOption) (*NetworkSpec, error) {
	out := new(NetworkSpec)
	err := grpc.Invoke(ctx, "/sonm.Worker/JoinNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) TaskLogs(ctx context.Context, in *TaskLogsRequest, opts ...grpc.CallOption) (Worker_TaskLogsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Worker_serviceDesc.Streams[2], c.cc, "/sonm.Worker/TaskLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerTaskLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Worker_TaskLogsClient interface {
	Recv() (*TaskLogsChunk, error)
	grpc.ClientStream
}

type workerTaskLogsClient struct {
	grpc.ClientStream
}

func (x *workerTaskLogsClient) Recv() (*TaskLogsChunk, error) {
	m := new(TaskLogsChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workerClient) GetDealInfo(ctx context.Context, in *ID, opts ...grpc.CallOption) (*DealInfoReply, error) {
	out := new(DealInfoReply)
	err := grpc.Invoke(ctx, "/sonm.Worker/GetDealInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Worker service

type WorkerServer interface {
	PushTask(Worker_PushTaskServer) error
	PullTask(*PullTaskRequest, Worker_PullTaskServer) error
	// StartTask schedules the task associcated with a deal.
	StartTask(context.Context, *StartTaskRequest) (*StartTaskReply, error)
	StopTask(context.Context, *ID) (*Empty, error)
	// PurgeTasks stops all tasks by given deal
	PurgeTasks(context.Context, *PurgeTasksRequest) (*ErrorByStringID, error)
	TaskStatus(context.Context, *ID) (*TaskStatusReply, error)
	JoinNetwork(context.Context, *WorkerJoinNetworkRequest) (*NetworkSpec, error)
	TaskLogs(*TaskLogsRequest, Worker_TaskLogsServer) error
	// Note: currently used for testing pusposes.
	GetDealInfo(context.Context, *ID) (*DealInfoReply, error)
}

func RegisterWorkerServer(s *grpc.Server, srv WorkerServer) {
	s.RegisterService(&_Worker_serviceDesc, srv)
}

func _Worker_PushTask_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WorkerServer).PushTask(&workerPushTaskServer{stream})
}

type Worker_PushTaskServer interface {
	Send(*Progress) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type workerPushTaskServer struct {
	grpc.ServerStream
}

func (x *workerPushTaskServer) Send(m *Progress) error {
	return x.ServerStream.SendMsg(m)
}

func (x *workerPushTaskServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Worker_PullTask_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullTaskRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkerServer).PullTask(m, &workerPullTaskServer{stream})
}

type Worker_PullTaskServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type workerPullTaskServer struct {
	grpc.ServerStream
}

func (x *workerPullTaskServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func _Worker_StartTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).StartTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Worker/StartTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).StartTask(ctx, req.(*StartTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_StopTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).StopTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Worker/StopTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).StopTask(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_PurgeTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).PurgeTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Worker/PurgeTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).PurgeTasks(ctx, req.(*PurgeTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_TaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).TaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Worker/TaskStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).TaskStatus(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_JoinNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerJoinNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).JoinNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Worker/JoinNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).JoinNetwork(ctx, req.(*WorkerJoinNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_TaskLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TaskLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkerServer).TaskLogs(m, &workerTaskLogsServer{stream})
}

type Worker_TaskLogsServer interface {
	Send(*TaskLogsChunk) error
	grpc.ServerStream
}

type workerTaskLogsServer struct {
	grpc.ServerStream
}

func (x *workerTaskLogsServer) Send(m *TaskLogsChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _Worker_GetDealInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).GetDealInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Worker/GetDealInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).GetDealInfo(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

var _Worker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sonm.Worker",
	HandlerType: (*WorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartTask",
			Handler:    _Worker_StartTask_Handler,
		},
		{
			MethodName: "StopTask",
			Handler:    _Worker_StopTask_Handler,
		},
		{
			MethodName: "PurgeTasks",
			Handler:    _Worker_PurgeTasks_Handler,
		},
		{
			MethodName: "TaskStatus",
			Handler:    _Worker_TaskStatus_Handler,
		},
		{
			MethodName: "JoinNetwork",
			Handler:    _Worker_JoinNetwork_Handler,
		},
		{
			MethodName: "GetDealInfo",
			Handler:    _Worker_GetDealInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PushTask",
			Handler:       _Worker_PushTask_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PullTask",
			Handler:       _Worker_PullTask_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TaskLogs",
			Handler:       _Worker_TaskLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "worker.proto",
}

func init() { proto.RegisterFile("worker.proto", fileDescriptor15) }

var fileDescriptor15 = []byte{
	// 1826 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xdd, 0x72, 0x23, 0x47,
	0x15, 0x96, 0xac, 0xff, 0x23, 0xc9, 0x96, 0xdb, 0x89, 0x51, 0x89, 0xdd, 0xe0, 0x4c, 0x48, 0x10,
	0x9b, 0x5d, 0xe1, 0x38, 0x21, 0x45, 0x36, 0x84, 0x8a, 0x6d, 0xd9, 0x8e, 0xb2, 0x6b, 0x59, 0xb4,
	0xd6, 0xb5, 0x5c, 0x50, 0x45, 0xb5, 0x35, 0x6d, 0x79, 0xca, 0x33, 0x3d, 0xc3, 0x74, 0x8f, 0xc1,
	0x5c, 0x73, 0x4f, 0x15, 0x97, 0x14, 0x2f, 0xc0, 0x23, 0x50, 0xc0, 0x0b, 0xf0, 0x30, 0x70, 0xc7,
	0x35, 0xd5, 0xd3, 0xdd, 0xf3, 0x23, 0x8f, 0x28, 0xb6, 0x6a, 0xef, 0xa6, 0xcf, 0xf9, 0xce, 0x4f,
	0x7f, 0x7d, 0xfa, 0x74, 0xf7, 0x40, 0xe7, 0x37, 0x7e, 0x78, 0x4b, 0xc3, 0x51, 0x10, 0xfa, 0xc2,
	0x47, 0x55, 0xee, 0x33, 0x6f, 0xb0, 0x49, 0xf8, 0xed, 0xaf, 0x02, 0x97, 0x30, 0x25, 0x1d, 0x74,
	0xae, 0x9c, 0xa5, 0xc3, 0x84, 0x1e, 0xa1, 0x05, 0x09, 0xc8, 0x95, 0xe3, 0x3a, 0xc2, 0xa1, 0x5c,
	0xcb, 0xb6, 0x16, 0x3e, 0x13, 0xc4, 0x61, 0xc6, 0xd1, 0x60, 0xcb, 0x61, 0xd2, 0x15, 0x73, 0x88,
	0x16, 0x6c, 0x7b, 0x24, 0xbc, 0xa5, 0x22, 0x70, 0xc9, 0x82, 0x6a, 0x51, 0x8b, 0x51, 0xe3, 0x73,
	0x4b, 0x38, 0x1e, 0xe5, 0x82, 0x78, 0x81, 0x12, 0x58, 0x8f, 0xa1, 0xf1, 0x8a, 0xf0, 0xdb, 0x57,
	0x64, 0x89, 0x10, 0x54, 0x6d, 0x22, 0x48, 0xbf, 0xbc, 0x57, 0x1e, 0x76, 0x70, 0xfc, 0x6d, 0xfd,
	0xbd, 0x0c, 0x4d, 0xa9, 0x9f, 0x07, 0x74, 0x81, 0x9e, 0x41, 0x2b, 0x09, 0x1f, 0xa3, 0xda, 0x07,
	0x5b, 0x23, 0x19, 0x7d, 0x74, 0x6c, 0xc4, 0x38, 0x45, 0xa0, 0x27, 0xd0, 0x0c, 0xe9, 0xd2, 0xe1,
	0x22, 0xbc, 0xef, 0x6f, 0xc4, 0xe8, 0x4d, 0x85, 0xc6, 0x5a, 0x8a, 0x13, 0x3d, 0xfa, 0x0c, 0x5a,
	0x21, 0xe5, 0x7e, 0x14, 0x2e, 0x28, 0xef, 0x57, 0x62, 0xf0, 0xae, 0x02, 0x1f, 0xf2, 0xdb, 0x99,
	0x4b, 0x18, 0x36, 0x5a, 0x9c, 0x02, 0xd1, 0xf7, 0xa0, 0x22, 0xc8, 0xb2, 0x5f, 0x8d, 0xf1, 0x5d,
	0x85, 0xd7, 0xb3, 0xc1, 0x52, 0x63, 0xfd, 0x12, 0x7a, 0x73, 0x41, 0x42, 0x21, 0x85, 0x98, 0xfe,
	0x3a, 0xa2, 0x5c, 0xa0, 0xef, 0x43, 0xdd, 0xa6, 0xc4, 0x9d, 0x8c, 0xf5, 0x14, 0x3a, 0xca, 0xee,
	0xc8, 0x59, 0x4e, 0x98, 0xc0, 0x5a, 0x87, 0x2c, 0xa8, 0xf2, 0x80, 0x2e, 0xf2, 0x89, 0x1b, 0x26,
	0x70, 0xac, 0xb3, 0x66, 0xd0, 0x7f, 0x1d, 0x2f, 0xea, 0xb7, 0xbe, 0xc3, 0xa6, 0x54, 0xc8, 0x15,
	0x36, 0x51, 0x76, 0xa1, 0x2e, 0x08, 0xbf, 0xd5, 0x51, 0x5a, 0x58, 0x8f, 0xd0, 0x23, 0x90, 0xab,
	0x21, 0x91, 0x93, 0x71, 0xec, 0xbc, 0x85, 0x53, 0x81, 0xf5, 0xcf, 0x32, 0x6c, 0x66, 0x12, 0x0e,
	0xdc, 0x7b, 0xb4, 0x09, 0x1b, 0x8e, 0xad, 0x9d, 0x6c, 0x38, 0x36, 0xfa, 0x12, 0x1a, 0x81, 0x1f,
	0x8a, 0x73, 0x12, 0xf4, 0x37, 0xf6, 0x2a, 0xc3, 0xf6, 0xc1, 0xfb, 0x2a, 0xb7, 0xbc, 0xd9, 0x68,
	0xa6, 0x30, 0x27, 0x4c, 0xf2, 0x6c, 0x2c, 0xd0, 0x7b, 0x00, 0x49, 0x30, 0xc9, 0x73, 0x65, 0xd8,
	0xc2, 0x19, 0xc9, 0xe0, 0x05, 0x74, 0xb2, 0x86, 0xa8, 0x07, 0x95, 0x5b, 0x7a, 0xaf, 0xa3, 0xcb,
	0x4f, 0xf4, 0x21, 0xd4, 0xee, 0x88, 0x1b, 0x51, 0x4d, 0x8c, 0x5e, 0xff, 0x13, 0x66, 0x07, 0xbe,
	0xc3, 0x04, 0xc7, 0x4a, 0xfb, 0x7c, 0xe3, 0x27, 0x65, 0xeb, 0x0f, 0x15, 0x68, 0xcf, 0x05, 0x11,
	0x11, 0x57, 0x33, 0xd9, 0x85, 0x7a, 0x14, 0xc8, 0xfa, 0x8b, 0xfd, 0x55, 0xb1, 0x1e, 0xa1, 0x3e,
	0x34, 0xee, 0x68, 0xc8, 0x1d, 0x9f, 0x69, 0x42, 0xcc, 0x10, 0x0d, 0xa0, 0x19, 0xb8, 0x44, 0x5c,
	0xfb, 0xa1, 0x17, 0x17, 0x45, 0x0b, 0x27, 0x63, 0x69, 0x45, 0xc5, 0xcd, 0xa1, 0x6d, 0x87, 0xf1,
	0xfa, 0xb7, 0xb0, 0x19, 0x4a, 0x8a, 0x25, 0xd9, 0xc7, 0x7e, 0xc4, 0x44, 0xbf, 0xb6, 0x57, 0x1e,
	0x76, 0x71, 0x2a, 0x90, 0xda, 0xf1, 0xeb, 0x6f, 0x54, 0x5e, 0xfd, 0xba, 0x5a, 0x80, 0x44, 0x80,
	0x9e, 0x40, 0x2f, 0xa4, 0xcc, 0xa6, 0xbf, 0xbb, 0xf3, 0x23, 0xae, 0x41, 0x8d, 0x18, 0xf4, 0x40,
	0x8e, 0x86, 0x50, 0xf7, 0x08, 0x17, 0x34, 0xec, 0x37, 0x63, 0x2e, 0x7a, 0x9a, 0x0b, 0x95, 0x06,
	0xe5, 0x1c, 0x6b, 0x3d, 0xfa, 0x08, 0x6a, 0xc4, 0xf6, 0x1c, 0xd6, 0x6f, 0xad, 0x01, 0x2a, 0x35,
	0x7a, 0x0a, 0xdb, 0x0e, 0x3f, 0x8f, 0x6d, 0x8e, 0x7d, 0x76, 0xed, 0x84, 0x1e, 0xb5, 0xfb, 0xb0,
	0x57, 0x1e, 0x36, 0xf1, 0x43, 0x05, 0xda, 0x87, 0x1d, 0x87, 0x1f, 0x51, 0xb6, 0xb8, 0x91, 0x5b,
	0xfe, 0xd4, 0x61, 0x0e, 0xbf, 0xa1, 0x76, 0xbf, 0x1d, 0xe3, 0x8b, 0x54, 0xd6, 0x9f, 0xca, 0xd0,
	0xd5, 0xfb, 0x49, 0xaf, 0xc9, 0x57, 0xd0, 0x24, 0x5a, 0xd0, 0x2f, 0x67, 0xcb, 0x29, 0x07, 0x4b,
	0x46, 0xaa, 0x9c, 0x12, 0x93, 0xc1, 0xb7, 0xa9, 0xbf, 0x75, 0x05, 0xf3, 0x41, 0xbe, 0x60, 0xba,
	0xf9, 0x5d, 0x9d, 0x29, 0x97, 0x3f, 0x96, 0xa1, 0x2b, 0xeb, 0xf7, 0xa5, 0xc3, 0x85, 0x4a, 0xee,
	0x13, 0xa8, 0x3a, 0xec, 0xda, 0xd7, 0x89, 0x3d, 0x4e, 0xf7, 0x60, 0x02, 0x19, 0x4d, 0xd8, 0xb5,
	0xaf, 0x92, 0x8a, 0xa1, 0x83, 0x29, 0xb4, 0x12, 0x51, 0x41, 0x32, 0x1f, 0xe7, 0x93, 0x79, 0x37,
	0xb3, 0xad, 0xd3, 0x42, 0xcd, 0x26, 0xf5, 0xd7, 0x32, 0x74, 0xc6, 0xf4, 0xce, 0x91, 0x8d, 0x27,
	0xce, 0xe9, 0xbb, 0x50, 0x39, 0x9e, 0x5d, 0xea, 0xd6, 0xd1, 0xd2, 0xdd, 0x6f, 0x76, 0x89, 0xa5,
	0x14, 0x3d, 0x86, 0xea, 0xd9, 0xec, 0x92, 0xeb, 0x8d, 0xa9, 0xb5, 0x67, 0xb3, 0x4b, 0x1c, 0x8b,
	0xa5, 0x2d, 0x3e, 0x3c, 0xd7, 0xed, 0x4d, 0x6b, 0xf1, 0xe1, 0x39, 0x96, 0x52, 0xf4, 0x03, 0x68,
	0xe8, 0x8d, 0x98, 0xef, 0x67, 0xa6, 0xaf, 0x18, 0xad, 0x04, 0x72, 0xe1, 0x87, 0x64, 0x49, 0xe3,
	0xe2, 0x4e, 0x80, 0x73, 0x25, 0xc4, 0x46, 0x6b, 0x1d, 0xc2, 0xd6, 0x2c, 0x72, 0xdd, 0x6c, 0xef,
	0xdb, 0xd5, 0xbd, 0xcf, 0x34, 0x14, 0x3d, 0x4a, 0xba, 0x95, 0xad, 0x77, 0xa0, 0x1e, 0x59, 0x7f,
	0xa9, 0x40, 0x77, 0x2c, 0x21, 0xec, 0xda, 0x57, 0xf3, 0x7f, 0x0f, 0xaa, 0xd2, 0x46, 0x13, 0x00,
	0x2a, 0xb4, 0x84, 0xe0, 0x58, 0x8e, 0x9e, 0x43, 0x23, 0x8c, 0x18, 0x73, 0xd8, 0x52, 0xb3, 0xb0,
	0x97, 0x42, 0x12, 0x2f, 0x23, 0xac, 0x20, 0xba, 0x3b, 0x69, 0x03, 0xf4, 0xb5, 0x3c, 0x5f, 0xbc,
	0xc0, 0xa5, 0x82, 0xda, 0x71, 0x73, 0x6a, 0x1f, 0x58, 0x45, 0xd6, 0xc7, 0x06, 0xa4, 0xec, 0x53,
	0xa3, 0xfc, 0x31, 0x52, 0xfd, 0x7f, 0x8f, 0x91, 0x47, 0xd0, 0x0a, 0xa2, 0x2b, 0xd7, 0x59, 0x4c,
	0x66, 0xbc, 0x5f, 0x8b, 0x9b, 0x62, 0x2a, 0x18, 0xfc, 0x1c, 0x3a, 0xd9, 0x74, 0xdf, 0x42, 0x55,
	0x0d, 0xe6, 0xb0, 0x99, 0x9f, 0xc3, 0xdb, 0x28, 0xd5, 0xff, 0x54, 0x60, 0x6b, 0x45, 0x8d, 0x3e,
	0x83, 0x3a, 0x57, 0x4d, 0x4c, 0x7a, 0xde, 0x3c, 0x78, 0x54, 0xe8, 0x65, 0xa4, 0xbf, 0x35, 0x56,
	0xf2, 0xe1, 0x78, 0x64, 0x49, 0xa7, 0xc4, 0xa3, 0xe6, 0x8c, 0x4a, 0x04, 0xe8, 0xa7, 0xe9, 0x01,
	0x94, 0x5b, 0xa3, 0x55, 0xa7, 0xc5, 0x27, 0x50, 0x7a, 0x08, 0x54, 0x73, 0x87, 0xc0, 0x0f, 0xa1,
	0x16, 0xf1, 0xb4, 0xa6, 0x77, 0xcc, 0x4d, 0x41, 0xad, 0xd1, 0xa5, 0x54, 0x61, 0x85, 0x40, 0xa7,
	0x80, 0x88, 0xeb, 0xfa, 0x0b, 0x22, 0xa8, 0x9d, 0xac, 0x67, 0xdc, 0xca, 0xd7, 0xaf, 0x76, 0x81,
	0x85, 0xb9, 0x3d, 0x34, 0xd6, 0xdd, 0x1e, 0xde, 0xee, 0x69, 0xf8, 0x0b, 0xa8, 0xeb, 0x73, 0xa3,
	0x0d, 0x8d, 0xcb, 0xe9, 0x8b, 0xe9, 0xc5, 0xeb, 0x69, 0xaf, 0x84, 0x3a, 0xd0, 0x9c, 0xcf, 0x2e,
	0x2e, 0x5e, 0x4e, 0xa6, 0x67, 0xbd, 0xb2, 0x1a, 0x1d, 0xbe, 0x9e, 0xca, 0xd1, 0x86, 0x04, 0xe2,
	0xcb, 0x69, 0x3c, 0xa8, 0x48, 0xd5, 0xe9, 0x64, 0x3a, 0x99, 0x7f, 0x73, 0x32, 0xee, 0x55, 0x11,
	0x40, 0xfd, 0x08, 0x5f, 0xbc, 0x38, 0x99, 0xf6, 0x6a, 0xd6, 0xdf, 0xca, 0xd0, 0x31, 0xb3, 0x9a,
	0xf9, 0xbe, 0x8b, 0x86, 0x50, 0x21, 0xae, 0xd9, 0xa2, 0xeb, 0x18, 0x91, 0x10, 0xb4, 0x0f, 0xd5,
	0x88, 0x53, 0x5b, 0x6f, 0xd5, 0x47, 0x79, 0xd2, 0xa5, 0xaf, 0xd1, 0x25, 0x37, 0xdb, 0x2c, 0x46,
	0x0e, 0x2e, 0xa0, 0x95, 0x88, 0x0a, 0x08, 0x79, 0x9a, 0x27, 0x64, 0x5d, 0xf0, 0x0c, 0x2f, 0xff,
	0xde, 0x80, 0xee, 0x7c, 0x71, 0x43, 0xed, 0xc8, 0xa5, 0xe1, 0x98, 0x08, 0x82, 0x5e, 0x42, 0x57,
	0xb6, 0x9f, 0x57, 0xbe, 0x36, 0xd3, 0xfd, 0xff, 0x23, 0xdd, 0xe6, 0xb2, 0x58, 0xb5, 0x5e, 0x06,
	0xa8, 0xf2, 0xcc, 0x1b, 0xa3, 0x11, 0x34, 0x3d, 0xe2, 0x30, 0x39, 0x19, 0x9d, 0x14, 0x7a, 0x38,
	0x4d, 0x9c, 0x60, 0xd0, 0x04, 0x3a, 0xfa, 0x78, 0x93, 0x43, 0xae, 0x6b, 0xfc, 0xc3, 0xa2, 0xe0,
	0x87, 0x19, 0x9c, 0x8a, 0x9d, 0x33, 0x1d, 0x7c, 0x0d, 0xe8, 0x61, 0x7e, 0x05, 0xa4, 0xbd, 0x93,
	0x25, 0xad, 0x95, 0x6f, 0x14, 0xdb, 0x0f, 0x82, 0x14, 0x38, 0x18, 0xe6, 0x59, 0x2f, 0x9a, 0x60,
	0x86, 0xf1, 0x3f, 0x57, 0xa0, 0x33, 0x27, 0x2e, 0xe5, 0x1e, 0x61, 0x31, 0xe1, 0x53, 0xd8, 0xd4,
	0x79, 0x1f, 0x9f, 0x85, 0x7e, 0x14, 0x98, 0x03, 0xcc, 0x30, 0x9e, 0xc1, 0x9a, 0x39, 0x6b, 0xa0,
	0x9a, 0xf5, 0x8a, 0x35, 0xfa, 0x14, 0x6a, 0xf2, 0x2c, 0x30, 0xdc, 0x3d, 0x2e, 0x70, 0x23, 0x1b,
	0xba, 0xb6, 0x56, 0x58, 0xf4, 0x39, 0xd4, 0xfd, 0xd0, 0xa6, 0xa1, 0xec, 0xdb, 0xd2, 0xea, 0xbd,
	0x02, 0xab, 0x8b, 0x18, 0xa0, 0xcc, 0x34, 0x7a, 0x70, 0x08, 0x3b, 0x05, 0x39, 0xbd, 0x11, 0xcb,
	0x63, 0x80, 0x34, 0x9f, 0x02, 0xcb, 0xbd, 0x3c, 0xbd, 0xd9, 0x43, 0x2f, 0xe3, 0xe5, 0x14, 0xda,
	0x99, 0xfc, 0x0a, 0xdc, 0xbc, 0x9f, 0x77, 0xd3, 0x56, 0x6e, 0x62, 0x9b, 0xec, 0xf2, 0xfc, 0xbe,
	0x0c, 0x5b, 0x63, 0x7a, 0x15, 0x2d, 0x65, 0xbb, 0xa0, 0xaa, 0x8f, 0x7f, 0x01, 0x5d, 0x9e, 0x2d,
	0x3d, 0xbd, 0xb7, 0x77, 0x0a, 0xaa, 0x12, 0xe7, 0x91, 0xe8, 0x73, 0xe8, 0xf0, 0x0c, 0x87, 0xf9,
	0x12, 0xc9, 0xb2, 0x8b, 0x73, 0x38, 0xeb, 0x0b, 0xd8, 0x9e, 0x45, 0xe1, 0x92, 0xca, 0x0a, 0xe6,
	0x6f, 0xf4, 0x76, 0x3a, 0xf8, 0x47, 0x0d, 0x7a, 0xea, 0x61, 0x74, 0x4e, 0x18, 0x59, 0x52, 0x8f,
	0x32, 0x81, 0x9e, 0xa4, 0xfd, 0x4f, 0x77, 0x49, 0x2f, 0x10, 0xf7, 0x83, 0xed, 0xe4, 0xf5, 0x62,
	0x0e, 0x0e, 0xab, 0x84, 0x9e, 0x42, 0x43, 0x5f, 0xba, 0xf2, 0x60, 0x64, 0x98, 0x4f, 0x2f, 0x64,
	0x56, 0x09, 0xed, 0x43, 0xfb, 0x34, 0xa4, 0xf4, 0x0d, 0x2c, 0x3e, 0x86, 0x5a, 0x3c, 0xad, 0x3c,
	0x76, 0xa7, 0xe0, 0x82, 0x69, 0x95, 0x64, 0x03, 0x31, 0x77, 0xdc, 0x42, 0x7c, 0xee, 0xa6, 0x6c,
	0x95, 0xd0, 0x13, 0xe8, 0x1e, 0x87, 0x94, 0x08, 0x6a, 0x3a, 0x50, 0xfe, 0xca, 0x3b, 0x68, 0xaa,
	0xe1, 0x64, 0x6c, 0x95, 0xd0, 0x10, 0xba, 0x98, 0x7a, 0xfe, 0x5d, 0x82, 0x4d, 0x94, 0x83, 0x6c,
	0xa8, 0x38, 0xe5, 0x6e, 0xbc, 0x1c, 0xc5, 0xa9, 0xac, 0x80, 0xbf, 0x82, 0x77, 0x73, 0xe0, 0x31,
	0x15, 0xc4, 0x71, 0xa9, 0x9d, 0x37, 0xd2, 0x57, 0x8a, 0x93, 0x30, 0xf4, 0xc3, 0xa3, 0xfb, 0xb9,
	0x08, 0x1d, 0xb6, 0x8c, 0xb3, 0xfa, 0x31, 0xec, 0x98, 0x92, 0x3a, 0x27, 0x0e, 0x13, 0x94, 0x11,
	0xb6, 0xa0, 0x48, 0x9f, 0x6e, 0xaf, 0xcc, 0x1f, 0x84, 0xd5, 0xa8, 0x9f, 0xc0, 0xd6, 0x94, 0xfe,
	0x56, 0x64, 0x4d, 0x72, 0xf1, 0x56, 0xed, 0xad, 0x12, 0x3a, 0x90, 0x3b, 0xcf, 0x94, 0x7a, 0x61,
	0x76, 0x2b, 0x3b, 0x41, 0x85, 0x51, 0x9c, 0x25, 0xef, 0x1b, 0x93, 0xd9, 0x34, 0xf2, 0x68, 0xe8,
	0x2c, 0x1e, 0x92, 0xf7, 0x4c, 0xde, 0x84, 0xc3, 0x65, 0x6a, 0xf1, 0x3f, 0xe9, 0x3b, 0xf8, 0x57,
	0x05, 0xea, 0xaa, 0x7e, 0xd1, 0x33, 0x68, 0xce, 0x22, 0x7e, 0x23, 0x6b, 0xc2, 0x98, 0x1c, 0xdf,
	0x44, 0xec, 0x76, 0xa0, 0xff, 0x08, 0xcc, 0x42, 0x7f, 0x29, 0x5f, 0x70, 0x56, 0x69, 0x58, 0xde,
	0x2f, 0xa3, 0x03, 0x09, 0x57, 0x57, 0x6e, 0xa4, 0x27, 0xb0, 0x72, 0x05, 0x1f, 0x64, 0xbd, 0x58,
	0xa5, 0xfd, 0x32, 0xfa, 0x12, 0x5a, 0xc9, 0xdb, 0x1d, 0xed, 0x3e, 0x78, 0xcc, 0x2b, 0xab, 0x77,
	0x8a, 0x1e, 0xf9, 0x56, 0x09, 0x7d, 0x00, 0xcd, 0xb9, 0xf0, 0x83, 0xd8, 0x76, 0x6d, 0xed, 0xfc,
	0x0c, 0x20, 0xdd, 0xca, 0xe8, 0x3b, 0x26, 0xaf, 0x95, 0xcd, 0xbd, 0xbe, 0x1e, 0x7e, 0x04, 0x90,
	0x5e, 0xee, 0x32, 0x61, 0x8a, 0xef, 0xa4, 0x56, 0x09, 0x1d, 0x41, 0x3b, 0xf3, 0x4b, 0x04, 0xe9,
	0x56, 0xbe, 0xee, 0x5f, 0x89, 0xe9, 0x01, 0x5a, 0x3a, 0x0f, 0xe8, 0xc2, 0x2a, 0xa1, 0xe7, 0xea,
	0xc7, 0xd3, 0x4b, 0x7f, 0xc9, 0x51, 0x26, 0x90, 0x1c, 0x1b, 0xbb, 0x9d, 0xbc, 0x38, 0xa5, 0x74,
	0x04, 0xed, 0x33, 0x2a, 0xcc, 0xa3, 0x21, 0x93, 0xf1, 0x4e, 0xc1, 0x73, 0xc2, 0x2a, 0x5d, 0xd5,
	0xe3, 0x7f, 0x61, 0x9f, 0xfe, 0x37, 0x00, 0x00, 0xff, 0xff, 0x84, 0xfe, 0xb2, 0x68, 0xa4, 0x13,
	0x00, 0x00,
}
