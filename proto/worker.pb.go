// Code generated by protoc-gen-go. DO NOT EDIT.
// source: worker.proto

package sonm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// grpccmd imports
import (
	"io"

	"github.com/spf13/cobra"
	"github.com/sshaman1101/grpccmd"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TaskStatusReply_Status int32

const (
	TaskStatusReply_UNKNOWN  TaskStatusReply_Status = 0
	TaskStatusReply_SPOOLING TaskStatusReply_Status = 1
	TaskStatusReply_SPAWNING TaskStatusReply_Status = 2
	TaskStatusReply_RUNNING  TaskStatusReply_Status = 3
	TaskStatusReply_FINISHED TaskStatusReply_Status = 4
	TaskStatusReply_BROKEN   TaskStatusReply_Status = 5
)

var TaskStatusReply_Status_name = map[int32]string{
	0: "UNKNOWN",
	1: "SPOOLING",
	2: "SPAWNING",
	3: "RUNNING",
	4: "FINISHED",
	5: "BROKEN",
}
var TaskStatusReply_Status_value = map[string]int32{
	"UNKNOWN":  0,
	"SPOOLING": 1,
	"SPAWNING": 2,
	"RUNNING":  3,
	"FINISHED": 4,
	"BROKEN":   5,
}

func (x TaskStatusReply_Status) String() string {
	return proto.EnumName(TaskStatusReply_Status_name, int32(x))
}
func (TaskStatusReply_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor14, []int{9, 0} }

type StartTaskRequest struct {
	// Deal points to the deal associated with workers where the task should be
	// started.
	Deal *Deal `protobuf:"bytes,1,opt,name=deal" json:"deal,omitempty"`
	// Container describes container settings.
	Container *Container        `protobuf:"bytes,2,opt,name=container" json:"container,omitempty"`
	Resources *AskPlanResources `protobuf:"bytes,3,opt,name=resources" json:"resources,omitempty"`
}

func (m *StartTaskRequest) Reset()                    { *m = StartTaskRequest{} }
func (m *StartTaskRequest) String() string            { return proto.CompactTextString(m) }
func (*StartTaskRequest) ProtoMessage()               {}
func (*StartTaskRequest) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{0} }

func (m *StartTaskRequest) GetDeal() *Deal {
	if m != nil {
		return m.Deal
	}
	return nil
}

func (m *StartTaskRequest) GetContainer() *Container {
	if m != nil {
		return m.Container
	}
	return nil
}

func (m *StartTaskRequest) GetResources() *AskPlanResources {
	if m != nil {
		return m.Resources
	}
	return nil
}

type WorkerJoinNetworkRequest struct {
	TaskID    string `protobuf:"bytes,1,opt,name=taskID" json:"taskID,omitempty"`
	NetworkID string `protobuf:"bytes,2,opt,name=networkID" json:"networkID,omitempty"`
}

func (m *WorkerJoinNetworkRequest) Reset()                    { *m = WorkerJoinNetworkRequest{} }
func (m *WorkerJoinNetworkRequest) String() string            { return proto.CompactTextString(m) }
func (*WorkerJoinNetworkRequest) ProtoMessage()               {}
func (*WorkerJoinNetworkRequest) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{1} }

func (m *WorkerJoinNetworkRequest) GetTaskID() string {
	if m != nil {
		return m.TaskID
	}
	return ""
}

func (m *WorkerJoinNetworkRequest) GetNetworkID() string {
	if m != nil {
		return m.NetworkID
	}
	return ""
}

type StartTaskReply struct {
	Id         string                `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	PortMap    map[string]*Endpoints `protobuf:"bytes,2,rep,name=portMap" json:"portMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	NetworkIDs []string              `protobuf:"bytes,3,rep,name=networkIDs" json:"networkIDs,omitempty"`
}

func (m *StartTaskReply) Reset()                    { *m = StartTaskReply{} }
func (m *StartTaskReply) String() string            { return proto.CompactTextString(m) }
func (*StartTaskReply) ProtoMessage()               {}
func (*StartTaskReply) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{2} }

func (m *StartTaskReply) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *StartTaskReply) GetPortMap() map[string]*Endpoints {
	if m != nil {
		return m.PortMap
	}
	return nil
}

func (m *StartTaskReply) GetNetworkIDs() []string {
	if m != nil {
		return m.NetworkIDs
	}
	return nil
}

type StatusReply struct {
	Uptime           uint64 `protobuf:"varint,1,opt,name=uptime" json:"uptime,omitempty"`
	Version          string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	Platform         string `protobuf:"bytes,3,opt,name=platform" json:"platform,omitempty"`
	EthAddr          string `protobuf:"bytes,4,opt,name=ethAddr" json:"ethAddr,omitempty"`
	TaskCount        uint32 `protobuf:"varint,5,opt,name=taskCount" json:"taskCount,omitempty"`
	DWHStatus        string `protobuf:"bytes,6,opt,name=DWHStatus" json:"DWHStatus,omitempty"`
	RendezvousStatus string `protobuf:"bytes,7,opt,name=rendezvousStatus" json:"rendezvousStatus,omitempty"`
}

func (m *StatusReply) Reset()                    { *m = StatusReply{} }
func (m *StatusReply) String() string            { return proto.CompactTextString(m) }
func (*StatusReply) ProtoMessage()               {}
func (*StatusReply) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{3} }

func (m *StatusReply) GetUptime() uint64 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *StatusReply) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *StatusReply) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *StatusReply) GetEthAddr() string {
	if m != nil {
		return m.EthAddr
	}
	return ""
}

func (m *StatusReply) GetTaskCount() uint32 {
	if m != nil {
		return m.TaskCount
	}
	return 0
}

func (m *StatusReply) GetDWHStatus() string {
	if m != nil {
		return m.DWHStatus
	}
	return ""
}

func (m *StatusReply) GetRendezvousStatus() string {
	if m != nil {
		return m.RendezvousStatus
	}
	return ""
}

type AskPlansReply struct {
	AskPlans map[string]*AskPlan `protobuf:"bytes,1,rep,name=askPlans" json:"askPlans,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *AskPlansReply) Reset()                    { *m = AskPlansReply{} }
func (m *AskPlansReply) String() string            { return proto.CompactTextString(m) }
func (*AskPlansReply) ProtoMessage()               {}
func (*AskPlansReply) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{4} }

func (m *AskPlansReply) GetAskPlans() map[string]*AskPlan {
	if m != nil {
		return m.AskPlans
	}
	return nil
}

type TaskListReply struct {
	Info map[string]*TaskStatusReply `protobuf:"bytes,1,rep,name=info" json:"info,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *TaskListReply) Reset()                    { *m = TaskListReply{} }
func (m *TaskListReply) String() string            { return proto.CompactTextString(m) }
func (*TaskListReply) ProtoMessage()               {}
func (*TaskListReply) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{5} }

func (m *TaskListReply) GetInfo() map[string]*TaskStatusReply {
	if m != nil {
		return m.Info
	}
	return nil
}

type DevicesReply struct {
	CPU     *CPU     `protobuf:"bytes,1,opt,name=CPU" json:"CPU,omitempty"`
	GPUs    []*GPU   `protobuf:"bytes,2,rep,name=GPUs" json:"GPUs,omitempty"`
	RAM     *RAM     `protobuf:"bytes,3,opt,name=RAM" json:"RAM,omitempty"`
	Network *Network `protobuf:"bytes,4,opt,name=network" json:"network,omitempty"`
	Storage *Storage `protobuf:"bytes,5,opt,name=storage" json:"storage,omitempty"`
}

func (m *DevicesReply) Reset()                    { *m = DevicesReply{} }
func (m *DevicesReply) String() string            { return proto.CompactTextString(m) }
func (*DevicesReply) ProtoMessage()               {}
func (*DevicesReply) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{6} }

func (m *DevicesReply) GetCPU() *CPU {
	if m != nil {
		return m.CPU
	}
	return nil
}

func (m *DevicesReply) GetGPUs() []*GPU {
	if m != nil {
		return m.GPUs
	}
	return nil
}

func (m *DevicesReply) GetRAM() *RAM {
	if m != nil {
		return m.RAM
	}
	return nil
}

func (m *DevicesReply) GetNetwork() *Network {
	if m != nil {
		return m.Network
	}
	return nil
}

func (m *DevicesReply) GetStorage() *Storage {
	if m != nil {
		return m.Storage
	}
	return nil
}

type PullTaskRequest struct {
	DealId string `protobuf:"bytes,1,opt,name=dealId" json:"dealId,omitempty"`
	TaskId string `protobuf:"bytes,2,opt,name=taskId" json:"taskId,omitempty"`
}

func (m *PullTaskRequest) Reset()                    { *m = PullTaskRequest{} }
func (m *PullTaskRequest) String() string            { return proto.CompactTextString(m) }
func (*PullTaskRequest) ProtoMessage()               {}
func (*PullTaskRequest) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{7} }

func (m *PullTaskRequest) GetDealId() string {
	if m != nil {
		return m.DealId
	}
	return ""
}

func (m *PullTaskRequest) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

type DealInfoReply struct {
	Deal *Deal `protobuf:"bytes,1,opt,name=deal" json:"deal,omitempty"`
	// List of currently running tasks.
	Running *StatusMapReply `protobuf:"bytes,2,opt,name=running" json:"running,omitempty"`
	// List of completed tasks.
	Completed *StatusMapReply `protobuf:"bytes,3,opt,name=completed" json:"completed,omitempty"`
	// Resources is a real resources (cores, ram bytes, GPU devices, etc)
	// allocated on a worker for this deal.
	Resources *AskPlanResources `protobuf:"bytes,4,opt,name=resources" json:"resources,omitempty"`
}

func (m *DealInfoReply) Reset()                    { *m = DealInfoReply{} }
func (m *DealInfoReply) String() string            { return proto.CompactTextString(m) }
func (*DealInfoReply) ProtoMessage()               {}
func (*DealInfoReply) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{8} }

func (m *DealInfoReply) GetDeal() *Deal {
	if m != nil {
		return m.Deal
	}
	return nil
}

func (m *DealInfoReply) GetRunning() *StatusMapReply {
	if m != nil {
		return m.Running
	}
	return nil
}

func (m *DealInfoReply) GetCompleted() *StatusMapReply {
	if m != nil {
		return m.Completed
	}
	return nil
}

func (m *DealInfoReply) GetResources() *AskPlanResources {
	if m != nil {
		return m.Resources
	}
	return nil
}

type TaskStatusReply struct {
	Status             TaskStatusReply_Status `protobuf:"varint,1,opt,name=status,enum=sonm.TaskStatusReply_Status" json:"status,omitempty"`
	ImageName          string                 `protobuf:"bytes,2,opt,name=imageName" json:"imageName,omitempty"`
	PortMap            map[string]*Endpoints  `protobuf:"bytes,3,rep,name=portMap" json:"portMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Uptime             uint64                 `protobuf:"varint,4,opt,name=uptime" json:"uptime,omitempty"`
	Usage              *ResourceUsage         `protobuf:"bytes,5,opt,name=usage" json:"usage,omitempty"`
	AllocatedResources *AskPlanResources      `protobuf:"bytes,6,opt,name=allocatedResources" json:"allocatedResources,omitempty"`
}

func (m *TaskStatusReply) Reset()                    { *m = TaskStatusReply{} }
func (m *TaskStatusReply) String() string            { return proto.CompactTextString(m) }
func (*TaskStatusReply) ProtoMessage()               {}
func (*TaskStatusReply) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{9} }

func (m *TaskStatusReply) GetStatus() TaskStatusReply_Status {
	if m != nil {
		return m.Status
	}
	return TaskStatusReply_UNKNOWN
}

func (m *TaskStatusReply) GetImageName() string {
	if m != nil {
		return m.ImageName
	}
	return ""
}

func (m *TaskStatusReply) GetPortMap() map[string]*Endpoints {
	if m != nil {
		return m.PortMap
	}
	return nil
}

func (m *TaskStatusReply) GetUptime() uint64 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *TaskStatusReply) GetUsage() *ResourceUsage {
	if m != nil {
		return m.Usage
	}
	return nil
}

func (m *TaskStatusReply) GetAllocatedResources() *AskPlanResources {
	if m != nil {
		return m.AllocatedResources
	}
	return nil
}

type StatusMapReply struct {
	Statuses map[string]*TaskStatusReply `protobuf:"bytes,1,rep,name=statuses" json:"statuses,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *StatusMapReply) Reset()                    { *m = StatusMapReply{} }
func (m *StatusMapReply) String() string            { return proto.CompactTextString(m) }
func (*StatusMapReply) ProtoMessage()               {}
func (*StatusMapReply) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{10} }

func (m *StatusMapReply) GetStatuses() map[string]*TaskStatusReply {
	if m != nil {
		return m.Statuses
	}
	return nil
}

func init() {
	proto.RegisterType((*StartTaskRequest)(nil), "sonm.StartTaskRequest")
	proto.RegisterType((*WorkerJoinNetworkRequest)(nil), "sonm.WorkerJoinNetworkRequest")
	proto.RegisterType((*StartTaskReply)(nil), "sonm.StartTaskReply")
	proto.RegisterType((*StatusReply)(nil), "sonm.StatusReply")
	proto.RegisterType((*AskPlansReply)(nil), "sonm.AskPlansReply")
	proto.RegisterType((*TaskListReply)(nil), "sonm.TaskListReply")
	proto.RegisterType((*DevicesReply)(nil), "sonm.DevicesReply")
	proto.RegisterType((*PullTaskRequest)(nil), "sonm.PullTaskRequest")
	proto.RegisterType((*DealInfoReply)(nil), "sonm.DealInfoReply")
	proto.RegisterType((*TaskStatusReply)(nil), "sonm.TaskStatusReply")
	proto.RegisterType((*StatusMapReply)(nil), "sonm.StatusMapReply")
	proto.RegisterEnum("sonm.TaskStatusReply_Status", TaskStatusReply_Status_name, TaskStatusReply_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for WorkerManagement service

type WorkerManagementClient interface {
	// Status produse a detailed info about worker
	Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusReply, error)
	// Devices provides detailed information about device
	// and show benchmark results.
	Devices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DevicesReply, error)
	// FreeDevices provides information about unallocated resources
	// that can be turned into ask-plans.
	FreeDevices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DevicesReply, error)
	// Tasks produces a list of all running tasks on the worker
	Tasks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TaskListReply, error)
	// AskPlans allows to obtain previously assigned Ask Plans from for a given worker.
	AskPlans(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AskPlansReply, error)
	// CreateAskPlan allows to create rules
	// for creating Ask orders on Marketplace
	CreateAskPlan(ctx context.Context, in *AskPlan, opts ...grpc.CallOption) (*ID, error)
	// RemoveAskPlan allows to remove rules
	// for creating Ask orders on Marketplace
	RemoveAskPlan(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error)
}

type workerManagementClient struct {
	cc *grpc.ClientConn
}

func NewWorkerManagementClient(cc *grpc.ClientConn) WorkerManagementClient {
	return &workerManagementClient{cc}
}

func (c *workerManagementClient) Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := grpc.Invoke(ctx, "/sonm.WorkerManagement/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerManagementClient) Devices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DevicesReply, error) {
	out := new(DevicesReply)
	err := grpc.Invoke(ctx, "/sonm.WorkerManagement/Devices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerManagementClient) FreeDevices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DevicesReply, error) {
	out := new(DevicesReply)
	err := grpc.Invoke(ctx, "/sonm.WorkerManagement/FreeDevices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerManagementClient) Tasks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TaskListReply, error) {
	out := new(TaskListReply)
	err := grpc.Invoke(ctx, "/sonm.WorkerManagement/Tasks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerManagementClient) AskPlans(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AskPlansReply, error) {
	out := new(AskPlansReply)
	err := grpc.Invoke(ctx, "/sonm.WorkerManagement/AskPlans", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerManagementClient) CreateAskPlan(ctx context.Context, in *AskPlan, opts ...grpc.CallOption) (*ID, error) {
	out := new(ID)
	err := grpc.Invoke(ctx, "/sonm.WorkerManagement/CreateAskPlan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerManagementClient) RemoveAskPlan(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.WorkerManagement/RemoveAskPlan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WorkerManagement service

type WorkerManagementServer interface {
	// Status produse a detailed info about worker
	Status(context.Context, *Empty) (*StatusReply, error)
	// Devices provides detailed information about device
	// and show benchmark results.
	Devices(context.Context, *Empty) (*DevicesReply, error)
	// FreeDevices provides information about unallocated resources
	// that can be turned into ask-plans.
	FreeDevices(context.Context, *Empty) (*DevicesReply, error)
	// Tasks produces a list of all running tasks on the worker
	Tasks(context.Context, *Empty) (*TaskListReply, error)
	// AskPlans allows to obtain previously assigned Ask Plans from for a given worker.
	AskPlans(context.Context, *Empty) (*AskPlansReply, error)
	// CreateAskPlan allows to create rules
	// for creating Ask orders on Marketplace
	CreateAskPlan(context.Context, *AskPlan) (*ID, error)
	// RemoveAskPlan allows to remove rules
	// for creating Ask orders on Marketplace
	RemoveAskPlan(context.Context, *ID) (*Empty, error)
}

func RegisterWorkerManagementServer(s *grpc.Server, srv WorkerManagementServer) {
	s.RegisterService(&_WorkerManagement_serviceDesc, srv)
}

func _WorkerManagement_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerManagementServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.WorkerManagement/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerManagementServer).Status(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerManagement_Devices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerManagementServer).Devices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.WorkerManagement/Devices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerManagementServer).Devices(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerManagement_FreeDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerManagementServer).FreeDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.WorkerManagement/FreeDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerManagementServer).FreeDevices(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerManagement_Tasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerManagementServer).Tasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.WorkerManagement/Tasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerManagementServer).Tasks(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerManagement_AskPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerManagementServer).AskPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.WorkerManagement/AskPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerManagementServer).AskPlans(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerManagement_CreateAskPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AskPlan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerManagementServer).CreateAskPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.WorkerManagement/CreateAskPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerManagementServer).CreateAskPlan(ctx, req.(*AskPlan))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerManagement_RemoveAskPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerManagementServer).RemoveAskPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.WorkerManagement/RemoveAskPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerManagementServer).RemoveAskPlan(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

var _WorkerManagement_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sonm.WorkerManagement",
	HandlerType: (*WorkerManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _WorkerManagement_Status_Handler,
		},
		{
			MethodName: "Devices",
			Handler:    _WorkerManagement_Devices_Handler,
		},
		{
			MethodName: "FreeDevices",
			Handler:    _WorkerManagement_FreeDevices_Handler,
		},
		{
			MethodName: "Tasks",
			Handler:    _WorkerManagement_Tasks_Handler,
		},
		{
			MethodName: "AskPlans",
			Handler:    _WorkerManagement_AskPlans_Handler,
		},
		{
			MethodName: "CreateAskPlan",
			Handler:    _WorkerManagement_CreateAskPlan_Handler,
		},
		{
			MethodName: "RemoveAskPlan",
			Handler:    _WorkerManagement_RemoveAskPlan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "worker.proto",
}

// Client API for Worker service

type WorkerClient interface {
	PushTask(ctx context.Context, opts ...grpc.CallOption) (Worker_PushTaskClient, error)
	PullTask(ctx context.Context, in *PullTaskRequest, opts ...grpc.CallOption) (Worker_PullTaskClient, error)
	// StartTask schedules the task associcated with a deal.
	StartTask(ctx context.Context, in *StartTaskRequest, opts ...grpc.CallOption) (*StartTaskReply, error)
	StopTask(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error)
	TaskStatus(ctx context.Context, in *ID, opts ...grpc.CallOption) (*TaskStatusReply, error)
	JoinNetwork(ctx context.Context, in *WorkerJoinNetworkRequest, opts ...grpc.CallOption) (*NetworkSpec, error)
	TaskLogs(ctx context.Context, in *TaskLogsRequest, opts ...grpc.CallOption) (Worker_TaskLogsClient, error)
	// Note: currently used for testing pusposes.
	GetDealInfo(ctx context.Context, in *ID, opts ...grpc.CallOption) (*DealInfoReply, error)
}

type workerClient struct {
	cc *grpc.ClientConn
}

func NewWorkerClient(cc *grpc.ClientConn) WorkerClient {
	return &workerClient{cc}
}

func (c *workerClient) PushTask(ctx context.Context, opts ...grpc.CallOption) (Worker_PushTaskClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Worker_serviceDesc.Streams[0], c.cc, "/sonm.Worker/PushTask", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerPushTaskClient{stream}
	return x, nil
}

type Worker_PushTaskClient interface {
	Send(*Chunk) error
	Recv() (*Progress, error)
	grpc.ClientStream
}

type workerPushTaskClient struct {
	grpc.ClientStream
}

func (x *workerPushTaskClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *workerPushTaskClient) Recv() (*Progress, error) {
	m := new(Progress)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workerClient) PullTask(ctx context.Context, in *PullTaskRequest, opts ...grpc.CallOption) (Worker_PullTaskClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Worker_serviceDesc.Streams[1], c.cc, "/sonm.Worker/PullTask", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerPullTaskClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Worker_PullTaskClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type workerPullTaskClient struct {
	grpc.ClientStream
}

func (x *workerPullTaskClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workerClient) StartTask(ctx context.Context, in *StartTaskRequest, opts ...grpc.CallOption) (*StartTaskReply, error) {
	out := new(StartTaskReply)
	err := grpc.Invoke(ctx, "/sonm.Worker/StartTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) StopTask(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.Worker/StopTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) TaskStatus(ctx context.Context, in *ID, opts ...grpc.CallOption) (*TaskStatusReply, error) {
	out := new(TaskStatusReply)
	err := grpc.Invoke(ctx, "/sonm.Worker/TaskStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) JoinNetwork(ctx context.Context, in *WorkerJoinNetworkRequest, opts ...grpc.CallOption) (*NetworkSpec, error) {
	out := new(NetworkSpec)
	err := grpc.Invoke(ctx, "/sonm.Worker/JoinNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) TaskLogs(ctx context.Context, in *TaskLogsRequest, opts ...grpc.CallOption) (Worker_TaskLogsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Worker_serviceDesc.Streams[2], c.cc, "/sonm.Worker/TaskLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerTaskLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Worker_TaskLogsClient interface {
	Recv() (*TaskLogsChunk, error)
	grpc.ClientStream
}

type workerTaskLogsClient struct {
	grpc.ClientStream
}

func (x *workerTaskLogsClient) Recv() (*TaskLogsChunk, error) {
	m := new(TaskLogsChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workerClient) GetDealInfo(ctx context.Context, in *ID, opts ...grpc.CallOption) (*DealInfoReply, error) {
	out := new(DealInfoReply)
	err := grpc.Invoke(ctx, "/sonm.Worker/GetDealInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Worker service

type WorkerServer interface {
	PushTask(Worker_PushTaskServer) error
	PullTask(*PullTaskRequest, Worker_PullTaskServer) error
	// StartTask schedules the task associcated with a deal.
	StartTask(context.Context, *StartTaskRequest) (*StartTaskReply, error)
	StopTask(context.Context, *ID) (*Empty, error)
	TaskStatus(context.Context, *ID) (*TaskStatusReply, error)
	JoinNetwork(context.Context, *WorkerJoinNetworkRequest) (*NetworkSpec, error)
	TaskLogs(*TaskLogsRequest, Worker_TaskLogsServer) error
	// Note: currently used for testing pusposes.
	GetDealInfo(context.Context, *ID) (*DealInfoReply, error)
}

func RegisterWorkerServer(s *grpc.Server, srv WorkerServer) {
	s.RegisterService(&_Worker_serviceDesc, srv)
}

func _Worker_PushTask_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WorkerServer).PushTask(&workerPushTaskServer{stream})
}

type Worker_PushTaskServer interface {
	Send(*Progress) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type workerPushTaskServer struct {
	grpc.ServerStream
}

func (x *workerPushTaskServer) Send(m *Progress) error {
	return x.ServerStream.SendMsg(m)
}

func (x *workerPushTaskServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Worker_PullTask_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullTaskRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkerServer).PullTask(m, &workerPullTaskServer{stream})
}

type Worker_PullTaskServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type workerPullTaskServer struct {
	grpc.ServerStream
}

func (x *workerPullTaskServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func _Worker_StartTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).StartTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Worker/StartTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).StartTask(ctx, req.(*StartTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_StopTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).StopTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Worker/StopTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).StopTask(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_TaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).TaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Worker/TaskStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).TaskStatus(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_JoinNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerJoinNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).JoinNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Worker/JoinNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).JoinNetwork(ctx, req.(*WorkerJoinNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_TaskLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TaskLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkerServer).TaskLogs(m, &workerTaskLogsServer{stream})
}

type Worker_TaskLogsServer interface {
	Send(*TaskLogsChunk) error
	grpc.ServerStream
}

type workerTaskLogsServer struct {
	grpc.ServerStream
}

func (x *workerTaskLogsServer) Send(m *TaskLogsChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _Worker_GetDealInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).GetDealInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Worker/GetDealInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).GetDealInfo(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

var _Worker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sonm.Worker",
	HandlerType: (*WorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartTask",
			Handler:    _Worker_StartTask_Handler,
		},
		{
			MethodName: "StopTask",
			Handler:    _Worker_StopTask_Handler,
		},
		{
			MethodName: "TaskStatus",
			Handler:    _Worker_TaskStatus_Handler,
		},
		{
			MethodName: "JoinNetwork",
			Handler:    _Worker_JoinNetwork_Handler,
		},
		{
			MethodName: "GetDealInfo",
			Handler:    _Worker_GetDealInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PushTask",
			Handler:       _Worker_PushTask_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PullTask",
			Handler:       _Worker_PullTask_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TaskLogs",
			Handler:       _Worker_TaskLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "worker.proto",
}

// Begin grpccmd
var _ = grpccmd.RunE

// WorkerManagement
var _WorkerManagementCmd = &cobra.Command{
	Use:   "workerManagement [method]",
	Short: "Subcommand for the WorkerManagement service.",
}

var _WorkerManagement_StatusCmd = &cobra.Command{
	Use:   "status",
	Short: "Make the Status method call, input-type: sonm.Empty output-type: sonm.StatusReply",
	RunE: grpccmd.RunE(
		"Status",
		"sonm.Empty",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewWorkerManagementClient(cc)
		},
	),
}

var _WorkerManagement_StatusCmd_gen = &cobra.Command{
	Use:   "status-gen",
	Short: "Generate JSON for method call of Status (input-type: sonm.Empty)",
	RunE:  grpccmd.TypeToJson("sonm.Empty"),
}

var _WorkerManagement_DevicesCmd = &cobra.Command{
	Use:   "devices",
	Short: "Make the Devices method call, input-type: sonm.Empty output-type: sonm.DevicesReply",
	RunE: grpccmd.RunE(
		"Devices",
		"sonm.Empty",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewWorkerManagementClient(cc)
		},
	),
}

var _WorkerManagement_DevicesCmd_gen = &cobra.Command{
	Use:   "devices-gen",
	Short: "Generate JSON for method call of Devices (input-type: sonm.Empty)",
	RunE:  grpccmd.TypeToJson("sonm.Empty"),
}

var _WorkerManagement_FreeDevicesCmd = &cobra.Command{
	Use:   "freeDevices",
	Short: "Make the FreeDevices method call, input-type: sonm.Empty output-type: sonm.DevicesReply",
	RunE: grpccmd.RunE(
		"FreeDevices",
		"sonm.Empty",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewWorkerManagementClient(cc)
		},
	),
}

var _WorkerManagement_FreeDevicesCmd_gen = &cobra.Command{
	Use:   "freeDevices-gen",
	Short: "Generate JSON for method call of FreeDevices (input-type: sonm.Empty)",
	RunE:  grpccmd.TypeToJson("sonm.Empty"),
}

var _WorkerManagement_TasksCmd = &cobra.Command{
	Use:   "tasks",
	Short: "Make the Tasks method call, input-type: sonm.Empty output-type: sonm.TaskListReply",
	RunE: grpccmd.RunE(
		"Tasks",
		"sonm.Empty",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewWorkerManagementClient(cc)
		},
	),
}

var _WorkerManagement_TasksCmd_gen = &cobra.Command{
	Use:   "tasks-gen",
	Short: "Generate JSON for method call of Tasks (input-type: sonm.Empty)",
	RunE:  grpccmd.TypeToJson("sonm.Empty"),
}

var _WorkerManagement_AskPlansCmd = &cobra.Command{
	Use:   "askPlans",
	Short: "Make the AskPlans method call, input-type: sonm.Empty output-type: sonm.AskPlansReply",
	RunE: grpccmd.RunE(
		"AskPlans",
		"sonm.Empty",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewWorkerManagementClient(cc)
		},
	),
}

var _WorkerManagement_AskPlansCmd_gen = &cobra.Command{
	Use:   "askPlans-gen",
	Short: "Generate JSON for method call of AskPlans (input-type: sonm.Empty)",
	RunE:  grpccmd.TypeToJson("sonm.Empty"),
}

var _WorkerManagement_CreateAskPlanCmd = &cobra.Command{
	Use:   "createAskPlan",
	Short: "Make the CreateAskPlan method call, input-type: sonm.AskPlan output-type: sonm.ID",
	RunE: grpccmd.RunE(
		"CreateAskPlan",
		"sonm.AskPlan",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewWorkerManagementClient(cc)
		},
	),
}

var _WorkerManagement_CreateAskPlanCmd_gen = &cobra.Command{
	Use:   "createAskPlan-gen",
	Short: "Generate JSON for method call of CreateAskPlan (input-type: sonm.AskPlan)",
	RunE:  grpccmd.TypeToJson("sonm.AskPlan"),
}

var _WorkerManagement_RemoveAskPlanCmd = &cobra.Command{
	Use:   "removeAskPlan",
	Short: "Make the RemoveAskPlan method call, input-type: sonm.ID output-type: sonm.Empty",
	RunE: grpccmd.RunE(
		"RemoveAskPlan",
		"sonm.ID",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewWorkerManagementClient(cc)
		},
	),
}

var _WorkerManagement_RemoveAskPlanCmd_gen = &cobra.Command{
	Use:   "removeAskPlan-gen",
	Short: "Generate JSON for method call of RemoveAskPlan (input-type: sonm.ID)",
	RunE:  grpccmd.TypeToJson("sonm.ID"),
}

// Register commands with the root command and service command
func init() {
	grpccmd.RegisterServiceCmd(_WorkerManagementCmd)
	_WorkerManagementCmd.AddCommand(
		_WorkerManagement_StatusCmd,
		_WorkerManagement_StatusCmd_gen,
		_WorkerManagement_DevicesCmd,
		_WorkerManagement_DevicesCmd_gen,
		_WorkerManagement_FreeDevicesCmd,
		_WorkerManagement_FreeDevicesCmd_gen,
		_WorkerManagement_TasksCmd,
		_WorkerManagement_TasksCmd_gen,
		_WorkerManagement_AskPlansCmd,
		_WorkerManagement_AskPlansCmd_gen,
		_WorkerManagement_CreateAskPlanCmd,
		_WorkerManagement_CreateAskPlanCmd_gen,
		_WorkerManagement_RemoveAskPlanCmd,
		_WorkerManagement_RemoveAskPlanCmd_gen,
	)
}

// Worker
var _WorkerCmd = &cobra.Command{
	Use:   "worker [method]",
	Short: "Subcommand for the Worker service.",
}

var _Worker_PushTaskCmd = &cobra.Command{
	Use:   "pushTask",
	Short: "Make the PushTask method call, input-type: sonm.Chunk output-type: sonm.Progress",
	RunE: grpccmd.RunE(
		"PushTask",
		"sonm.Chunk",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewWorkerClient(cc)
		},
	),
}

var _Worker_PushTaskCmd_gen = &cobra.Command{
	Use:   "pushTask-gen",
	Short: "Generate JSON for method call of PushTask (input-type: sonm.Chunk)",
	RunE:  grpccmd.TypeToJson("sonm.Chunk"),
}

var _Worker_PullTaskCmd = &cobra.Command{
	Use:   "pullTask",
	Short: "Make the PullTask method call, input-type: sonm.PullTaskRequest output-type: sonm.Chunk",
	RunE: grpccmd.RunE(
		"PullTask",
		"sonm.PullTaskRequest",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewWorkerClient(cc)
		},
	),
}

var _Worker_PullTaskCmd_gen = &cobra.Command{
	Use:   "pullTask-gen",
	Short: "Generate JSON for method call of PullTask (input-type: sonm.PullTaskRequest)",
	RunE:  grpccmd.TypeToJson("sonm.PullTaskRequest"),
}

var _Worker_StartTaskCmd = &cobra.Command{
	Use:   "startTask",
	Short: "Make the StartTask method call, input-type: sonm.StartTaskRequest output-type: sonm.StartTaskReply",
	RunE: grpccmd.RunE(
		"StartTask",
		"sonm.StartTaskRequest",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewWorkerClient(cc)
		},
	),
}

var _Worker_StartTaskCmd_gen = &cobra.Command{
	Use:   "startTask-gen",
	Short: "Generate JSON for method call of StartTask (input-type: sonm.StartTaskRequest)",
	RunE:  grpccmd.TypeToJson("sonm.StartTaskRequest"),
}

var _Worker_StopTaskCmd = &cobra.Command{
	Use:   "stopTask",
	Short: "Make the StopTask method call, input-type: sonm.ID output-type: sonm.Empty",
	RunE: grpccmd.RunE(
		"StopTask",
		"sonm.ID",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewWorkerClient(cc)
		},
	),
}

var _Worker_StopTaskCmd_gen = &cobra.Command{
	Use:   "stopTask-gen",
	Short: "Generate JSON for method call of StopTask (input-type: sonm.ID)",
	RunE:  grpccmd.TypeToJson("sonm.ID"),
}

var _Worker_TaskStatusCmd = &cobra.Command{
	Use:   "taskStatus",
	Short: "Make the TaskStatus method call, input-type: sonm.ID output-type: sonm.TaskStatusReply",
	RunE: grpccmd.RunE(
		"TaskStatus",
		"sonm.ID",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewWorkerClient(cc)
		},
	),
}

var _Worker_TaskStatusCmd_gen = &cobra.Command{
	Use:   "taskStatus-gen",
	Short: "Generate JSON for method call of TaskStatus (input-type: sonm.ID)",
	RunE:  grpccmd.TypeToJson("sonm.ID"),
}

var _Worker_JoinNetworkCmd = &cobra.Command{
	Use:   "joinNetwork",
	Short: "Make the JoinNetwork method call, input-type: sonm.WorkerJoinNetworkRequest output-type: sonm.NetworkSpec",
	RunE: grpccmd.RunE(
		"JoinNetwork",
		"sonm.WorkerJoinNetworkRequest",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewWorkerClient(cc)
		},
	),
}

var _Worker_JoinNetworkCmd_gen = &cobra.Command{
	Use:   "joinNetwork-gen",
	Short: "Generate JSON for method call of JoinNetwork (input-type: sonm.WorkerJoinNetworkRequest)",
	RunE:  grpccmd.TypeToJson("sonm.WorkerJoinNetworkRequest"),
}

var _Worker_TaskLogsCmd = &cobra.Command{
	Use:   "taskLogs",
	Short: "Make the TaskLogs method call, input-type: sonm.TaskLogsRequest output-type: sonm.TaskLogsChunk",
	RunE: grpccmd.RunE(
		"TaskLogs",
		"sonm.TaskLogsRequest",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewWorkerClient(cc)
		},
	),
}

var _Worker_TaskLogsCmd_gen = &cobra.Command{
	Use:   "taskLogs-gen",
	Short: "Generate JSON for method call of TaskLogs (input-type: sonm.TaskLogsRequest)",
	RunE:  grpccmd.TypeToJson("sonm.TaskLogsRequest"),
}

var _Worker_GetDealInfoCmd = &cobra.Command{
	Use:   "getDealInfo",
	Short: "Make the GetDealInfo method call, input-type: sonm.ID output-type: sonm.DealInfoReply",
	RunE: grpccmd.RunE(
		"GetDealInfo",
		"sonm.ID",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewWorkerClient(cc)
		},
	),
}

var _Worker_GetDealInfoCmd_gen = &cobra.Command{
	Use:   "getDealInfo-gen",
	Short: "Generate JSON for method call of GetDealInfo (input-type: sonm.ID)",
	RunE:  grpccmd.TypeToJson("sonm.ID"),
}

// Register commands with the root command and service command
func init() {
	grpccmd.RegisterServiceCmd(_WorkerCmd)
	_WorkerCmd.AddCommand(
		_Worker_PushTaskCmd,
		_Worker_PushTaskCmd_gen,
		_Worker_PullTaskCmd,
		_Worker_PullTaskCmd_gen,
		_Worker_StartTaskCmd,
		_Worker_StartTaskCmd_gen,
		_Worker_StopTaskCmd,
		_Worker_StopTaskCmd_gen,
		_Worker_TaskStatusCmd,
		_Worker_TaskStatusCmd_gen,
		_Worker_JoinNetworkCmd,
		_Worker_JoinNetworkCmd_gen,
		_Worker_TaskLogsCmd,
		_Worker_TaskLogsCmd_gen,
		_Worker_GetDealInfoCmd,
		_Worker_GetDealInfoCmd_gen,
	)
}

// End grpccmd

func init() { proto.RegisterFile("worker.proto", fileDescriptor14) }

var fileDescriptor14 = []byte{
	// 1187 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcf, 0x6f, 0x1b, 0xc5,
	0x17, 0xdf, 0xb5, 0x1d, 0xff, 0x78, 0x8e, 0x13, 0x77, 0xd2, 0x6f, 0x64, 0xed, 0xb7, 0xad, 0xca,
	0x56, 0x08, 0x93, 0x52, 0x13, 0x4c, 0x0f, 0xa8, 0x05, 0x24, 0x37, 0x4e, 0x52, 0x37, 0x8d, 0x63,
	0x8d, 0xb1, 0xc2, 0x0d, 0x4d, 0xed, 0x89, 0xb3, 0xf2, 0x7a, 0x76, 0xd9, 0x99, 0x0d, 0x0a, 0x7f,
	0x06, 0x17, 0x24, 0xce, 0x9c, 0xb9, 0xf3, 0x27, 0xc0, 0x8d, 0x03, 0x47, 0xfe, 0x17, 0x34, 0x3b,
	0xb3, 0xbf, 0xd2, 0x8d, 0x00, 0xa9, 0xb7, 0x7d, 0xef, 0x7d, 0xde, 0xec, 0x9b, 0xcf, 0xbc, 0xf7,
	0x99, 0x81, 0xcd, 0xef, 0xbc, 0x60, 0x45, 0x83, 0x9e, 0x1f, 0x78, 0xc2, 0x43, 0x15, 0xee, 0xb1,
	0xb5, 0xb5, 0x45, 0xf8, 0xea, 0x1b, 0xdf, 0x25, 0x4c, 0x79, 0x2d, 0x34, 0x27, 0x3e, 0x79, 0xe3,
	0xb8, 0x8e, 0x70, 0x28, 0xd7, 0xbe, 0xed, 0xb9, 0xc7, 0x04, 0x71, 0x58, 0x9c, 0x6a, 0x6d, 0x3b,
	0x4c, 0x26, 0x33, 0x87, 0x68, 0xc7, 0x9d, 0x35, 0x09, 0x56, 0x54, 0xf8, 0x2e, 0x99, 0x53, 0xed,
	0x6a, 0x30, 0x2a, 0xd4, 0xa7, 0xfd, 0xa3, 0x09, 0xed, 0xa9, 0x20, 0x81, 0xf8, 0x8a, 0xf0, 0x15,
	0xa6, 0xdf, 0x86, 0x94, 0x0b, 0xf4, 0x00, 0x2a, 0x0b, 0x4a, 0xdc, 0x8e, 0xf9, 0xd0, 0xec, 0x36,
	0xfb, 0xd0, 0x93, 0x0b, 0xf6, 0x86, 0x94, 0xb8, 0x38, 0xf2, 0xa3, 0x27, 0xd0, 0x48, 0x7e, 0xdb,
	0x29, 0x45, 0xa0, 0x6d, 0x05, 0x3a, 0x88, 0xdd, 0x38, 0x45, 0xa0, 0xa7, 0xd0, 0x08, 0x28, 0xf7,
	0xc2, 0x60, 0x4e, 0x79, 0xa7, 0x1c, 0xc1, 0x77, 0x15, 0x7c, 0xc0, 0x57, 0x13, 0x97, 0x30, 0x1c,
	0x47, 0x71, 0x0a, 0xb4, 0x27, 0xd0, 0x39, 0x8f, 0x38, 0x79, 0xe5, 0x39, 0x6c, 0x4c, 0x85, 0x24,
	0x28, 0x2e, 0x70, 0x17, 0xaa, 0x82, 0xf0, 0xd5, 0x68, 0x18, 0x95, 0xd8, 0xc0, 0xda, 0x42, 0xf7,
	0x40, 0x6e, 0x4d, 0x22, 0x47, 0xc3, 0xa8, 0xb0, 0x06, 0x4e, 0x1d, 0xf6, 0xef, 0x26, 0x6c, 0x65,
	0xf6, 0xea, 0xbb, 0xd7, 0x68, 0x0b, 0x4a, 0xce, 0x42, 0x2f, 0x52, 0x72, 0x16, 0xe8, 0x39, 0xd4,
	0x7c, 0x2f, 0x10, 0xa7, 0xc4, 0xef, 0x94, 0x1e, 0x96, 0xbb, 0xcd, 0xfe, 0x7b, 0xaa, 0xd0, 0x7c,
	0x5a, 0x6f, 0xa2, 0x30, 0x87, 0x4c, 0x04, 0xd7, 0x38, 0xce, 0x40, 0x0f, 0x00, 0x92, 0x9f, 0xc9,
	0x8d, 0x96, 0xbb, 0x0d, 0x9c, 0xf1, 0x58, 0x27, 0xb0, 0x99, 0x4d, 0x44, 0x6d, 0x28, 0xaf, 0xe8,
	0xb5, 0xfe, 0xbb, 0xfc, 0x44, 0xef, 0xc3, 0xc6, 0x15, 0x71, 0x43, 0x9a, 0x27, 0xf5, 0x90, 0x2d,
	0x7c, 0xcf, 0x61, 0x82, 0x63, 0x15, 0x7d, 0x56, 0xfa, 0xcc, 0xb4, 0xff, 0x32, 0xa1, 0x39, 0x15,
	0x44, 0x84, 0x5c, 0xed, 0x64, 0x17, 0xaa, 0xa1, 0x2f, 0x9c, 0x35, 0x8d, 0xd6, 0xab, 0x60, 0x6d,
	0xa1, 0x0e, 0xd4, 0xae, 0x68, 0xc0, 0x1d, 0x8f, 0x69, 0x42, 0x62, 0x13, 0x59, 0x50, 0xf7, 0x5d,
	0x22, 0x2e, 0xbc, 0x60, 0x1d, 0x9d, 0x4a, 0x03, 0x27, 0xb6, 0xcc, 0xa2, 0xe2, 0x72, 0xb0, 0x58,
	0x04, 0x9d, 0x8a, 0xca, 0xd2, 0xa6, 0xa4, 0x58, 0x92, 0x7d, 0xe0, 0x85, 0x4c, 0x74, 0x36, 0x1e,
	0x9a, 0xdd, 0x16, 0x4e, 0x1d, 0x32, 0x3a, 0x3c, 0x7f, 0xa9, 0xea, 0xea, 0x54, 0xd5, 0x01, 0x24,
	0x0e, 0xb4, 0x07, 0xed, 0x80, 0xb2, 0x05, 0xfd, 0xfe, 0xca, 0x0b, 0xb9, 0x06, 0xd5, 0x22, 0xd0,
	0x5b, 0x7e, 0xfb, 0x27, 0x13, 0x5a, 0xba, 0x3d, 0xf4, 0x0e, 0xbf, 0x80, 0x3a, 0xd1, 0x8e, 0x8e,
	0x99, 0x3d, 0x9c, 0x1c, 0x2c, 0xb1, 0xd4, 0xe1, 0x24, 0x29, 0xd6, 0xab, 0x74, 0xbd, 0xdb, 0xe8,
	0x7f, 0x94, 0xa7, 0xbf, 0x95, 0x6f, 0xd2, 0x0c, 0xf9, 0x3f, 0x98, 0xd0, 0x92, 0xdd, 0xf0, 0xda,
	0xe1, 0x42, 0x15, 0xf7, 0x09, 0x54, 0x1c, 0x76, 0xe1, 0xe9, 0xc2, 0xee, 0xab, 0xcc, 0x1c, 0xa4,
	0x37, 0x62, 0x17, 0x9e, 0x2a, 0x2a, 0x82, 0x5a, 0x63, 0x68, 0x24, 0xae, 0x82, 0x62, 0x1e, 0xe7,
	0x8b, 0xf9, 0x5f, 0xba, 0x64, 0xe6, 0xd8, 0xb3, 0x45, 0xfd, 0x6a, 0xc2, 0xe6, 0x90, 0x5e, 0x39,
	0x72, 0x8e, 0xa2, 0x9a, 0xfe, 0x0f, 0xe5, 0x83, 0xc9, 0x4c, 0x4f, 0x71, 0x43, 0x0f, 0xe8, 0x64,
	0x86, 0xa5, 0x17, 0xdd, 0x87, 0xca, 0xf1, 0x64, 0xc6, 0x75, 0x9b, 0xeb, 0xe8, 0xf1, 0x64, 0x86,
	0x23, 0xb7, 0xcc, 0xc5, 0x83, 0x53, 0x3d, 0xad, 0x3a, 0x8a, 0x07, 0xa7, 0x58, 0x7a, 0xd1, 0x07,
	0x50, 0xd3, 0x6d, 0x1d, 0x75, 0x47, 0xc2, 0x54, 0x3c, 0xa5, 0x71, 0x54, 0x02, 0xb9, 0xf0, 0x02,
	0xb2, 0xa4, 0x51, 0xab, 0x24, 0xc0, 0xa9, 0x72, 0xe2, 0x38, 0x6a, 0x0f, 0x60, 0x7b, 0x12, 0xba,
	0x6e, 0x56, 0x84, 0x76, 0xa1, 0x2a, 0xc5, 0x66, 0x14, 0x8f, 0xa7, 0xb6, 0x92, 0xd9, 0x5f, 0xe8,
	0x7e, 0xd6, 0x96, 0xfd, 0x9b, 0x09, 0x2d, 0xa9, 0x51, 0x92, 0x53, 0xb5, 0xff, 0x7f, 0x92, 0xb1,
	0x1e, 0xd4, 0x82, 0x90, 0x31, 0x87, 0x2d, 0x35, 0xc7, 0x77, 0x93, 0x61, 0x17, 0x21, 0x3f, 0x25,
	0xbe, 0xa2, 0x38, 0x06, 0xa1, 0xbe, 0x94, 0xbd, 0xb5, 0xef, 0x52, 0x41, 0x17, 0x9a, 0x99, 0xe2,
	0x8c, 0x14, 0x96, 0xd7, 0xbe, 0xca, 0xbf, 0xd5, 0xbe, 0x3f, 0xcb, 0xb0, 0x7d, 0xe3, 0xa4, 0xd1,
	0x53, 0xa8, 0x72, 0x35, 0x32, 0x72, 0x3f, 0x5b, 0xfd, 0x7b, 0x85, 0x0d, 0xa1, 0x4b, 0xc1, 0x1a,
	0x2b, 0x07, 0xd2, 0x59, 0x93, 0x25, 0x1d, 0x93, 0x35, 0x8d, 0x15, 0x31, 0x71, 0xa0, 0xcf, 0x53,
	0xb9, 0x2b, 0x47, 0x7d, 0x60, 0x17, 0x2f, 0x5a, 0xac, 0x77, 0xa9, 0xe4, 0x54, 0x72, 0x92, 0xf3,
	0x21, 0x6c, 0x84, 0x3c, 0x3d, 0xf3, 0x1d, 0xdd, 0x3d, 0x7a, 0x77, 0x33, 0x19, 0xc2, 0x0a, 0x81,
	0x8e, 0x00, 0x11, 0xd7, 0xf5, 0xe6, 0x44, 0xd0, 0x45, 0xc2, 0x44, 0x24, 0x1c, 0xb7, 0xf3, 0x54,
	0x90, 0xf1, 0x6e, 0xa5, 0xf5, 0x6b, 0xa8, 0x6a, 0xc1, 0x6a, 0x42, 0x6d, 0x36, 0x3e, 0x19, 0x9f,
	0x9d, 0x8f, 0xdb, 0x06, 0xda, 0x84, 0xfa, 0x74, 0x72, 0x76, 0xf6, 0x7a, 0x34, 0x3e, 0x6e, 0x9b,
	0xca, 0x1a, 0x9c, 0x8f, 0xa5, 0x55, 0x92, 0x40, 0x3c, 0x1b, 0x47, 0x46, 0x59, 0x86, 0x8e, 0x46,
	0xe3, 0xd1, 0xf4, 0xe5, 0xe1, 0xb0, 0x5d, 0x41, 0x00, 0xd5, 0x17, 0xf8, 0xec, 0xe4, 0x70, 0xdc,
	0xde, 0xb0, 0x7f, 0x56, 0x37, 0x50, 0xa6, 0x57, 0xd0, 0x97, 0x50, 0x57, 0x47, 0x45, 0x63, 0x55,
	0xb3, 0x8b, 0x7a, 0x4a, 0x9b, 0x34, 0x96, 0xb5, 0x38, 0xc7, 0xc2, 0xd0, 0xca, 0x85, 0xde, 0x81,
	0x92, 0xf4, 0xff, 0x28, 0x41, 0x5b, 0xdd, 0xbd, 0xa7, 0x84, 0x91, 0x25, 0x5d, 0x53, 0x26, 0xd0,
	0x5e, 0xca, 0x8a, 0xe6, 0x6e, 0xed, 0x8b, 0x6b, 0xeb, 0x4e, 0xb6, 0xda, 0x68, 0x25, 0xdb, 0x40,
	0x1f, 0x41, 0x4d, 0x2b, 0x51, 0x1e, 0x8c, 0xe2, 0x19, 0x4c, 0x55, 0xca, 0x36, 0xd0, 0x3e, 0x34,
	0x8f, 0x02, 0x4a, 0xff, 0x43, 0xc6, 0x63, 0xd8, 0x90, 0xe5, 0xdf, 0xc0, 0xee, 0x14, 0xa8, 0xae,
	0x6d, 0xa0, 0x1e, 0xd4, 0x63, 0xe1, 0x2f, 0xc4, 0xe7, 0xae, 0x0f, 0xdb, 0x40, 0x7b, 0xd0, 0x3a,
	0x08, 0x28, 0x11, 0x54, 0x07, 0x50, 0xfe, 0x1e, 0xb0, 0xea, 0xca, 0x1c, 0x0d, 0x6d, 0x03, 0x75,
	0xa1, 0x85, 0xe9, 0xda, 0xbb, 0x4a, 0xb0, 0x49, 0xd0, 0xca, 0xfe, 0xca, 0x36, 0xfa, 0xbf, 0x94,
	0xa1, 0xaa, 0x38, 0x45, 0x4f, 0xa0, 0x3e, 0x09, 0xf9, 0xa5, 0xac, 0x33, 0x2e, 0xe8, 0xe0, 0x32,
	0x64, 0x2b, 0x6b, 0x4b, 0x19, 0x93, 0xc0, 0x5b, 0x06, 0x94, 0x73, 0xdb, 0xe8, 0x9a, 0xfb, 0x26,
	0xea, 0x4b, 0xb8, 0xd2, 0x46, 0xa4, 0xcf, 0xee, 0x86, 0x56, 0x5a, 0xd9, 0x55, 0x6c, 0x63, 0xdf,
	0x44, 0xcf, 0xa1, 0x91, 0x3c, 0x59, 0xd0, 0xee, 0x5b, 0x6f, 0x18, 0x95, 0x75, 0xb7, 0xe8, 0x6d,
	0x63, 0x1b, 0xe8, 0x11, 0xd4, 0xa7, 0xc2, 0xf3, 0xa3, 0xdc, 0xdb, 0xf6, 0x83, 0x3e, 0x06, 0x48,
	0x3b, 0x28, 0x03, 0x2b, 0xee, 0x2e, 0xdb, 0x40, 0x2f, 0xa0, 0x99, 0x79, 0xc9, 0xa1, 0x07, 0x0a,
	0x77, 0xdb, 0x13, 0x2f, 0xee, 0x2b, 0xed, 0x9d, 0xfa, 0x74, 0x6e, 0x1b, 0xe8, 0x19, 0xd4, 0xa3,
	0xd3, 0xf5, 0x96, 0x1c, 0x65, 0x7e, 0x24, 0xed, 0x38, 0x6f, 0x27, 0xef, 0x4e, 0x29, 0xe9, 0x41,
	0xf3, 0x98, 0x8a, 0xf8, 0x86, 0xc8, 0x54, 0xbc, 0x93, 0x5e, 0x0c, 0xc9, 0xdd, 0x61, 0x1b, 0x6f,
	0xaa, 0xd1, 0x03, 0xf9, 0xd3, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x4a, 0x06, 0xad, 0x55, 0x9a,
	0x0b, 0x00, 0x00,
}
