syntax = "proto3";

import "bid.proto";
import "bigint.proto";
import "insonmnia.proto";
import "timestamp.proto";

package sonm;

service Market {
    // GetOrders returns orders by given filter parameters.
    // Note that set of filters may be changed in the closest future.
    rpc GetOrders(GetOrdersRequest) returns (GetOrdersReply) {}
    // CreateOrder places new order on the Marketplace.
    // Note that current impl of Node API prevents you from
    // creating ASKs orders.
    rpc CreateOrder(Order) returns (Order) {}
    // GetOrderByID returns order by given ID.
    // If order save an `inactive` status returns error instead.
    rpc GetOrderByID(ID) returns (Order) {}
    // CancelOrder removes active order from the Marketplace.
    // todo(sshaman1101): use `ID` as parameter instead of whole `Order` struct.
    rpc CancelOrder(Order) returns (Empty) {}
    // GetProcessing returns currently processing orders.
    // todo: rethink and improve.
    rpc GetProcessing(Empty) returns (GetProcessingReply) {}

    // todo: remove
    rpc TouchOrders(TouchOrdersRequest) returns (Empty) {}
}

message GetOrdersRequest {
    // Order keeps slot and type for searching
    Order order = 1;
    // Count describe how namy results must be returned (order by price)
    uint64 count = 2;
}

message GetOrdersReply {
    repeated Order orders = 1;
}

enum MarketOrderType {
    MARKET_ANY = 0;
    MARKET_BID = 1;
    MARKET_ASK = 2;
}

enum MarketOrderStatus {
    MARKET_ORDER_INACTIVE = 0;
    MARKET_ORDER_ACTIVE = 1;
}

enum MarketIdentityLevel {
    MARKET_ANONIMOUS = 0;
    MARKET_PSEUDONYMOUS = 1;
    MARKET_IDENTIFIED = 2;
}

enum MarketDealStatus {
    MARKET_STATUS_UNKNOWN = 0;
    MARKET_STATUS_ACCEPTED = 1;
    MARKET_STATUS_CLOSED = 2;
}

// GetProcessingReply represent Node's local
// orders processing status
message GetProcessingReply {
    message ProcessedOrder {
        string id = 1;
        uint32 status = 2;
        Timestamp timestamp = 3;
        string extra = 4;
    }

    map <string, ProcessedOrder> orders = 2;
}

message TouchOrdersRequest {
    repeated string IDs = 1;
}

message MarketOrder {
    string id = 1;
    MarketOrderType orderType = 2;
    MarketOrderStatus orderStatus = 3;
    string author = 4;
    string counterparty = 5;
    BigInt price = 6;
    uint64 duration = 7;
    repeated bool netflags = 8;
    MarketIdentityLevel identityLevel = 9;
    string blacklist = 10;
    bytes tag = 11;
    repeated uint64 benchmarks = 12;
    BigInt frozenSum = 13;
}

message MarketDeal {
    string id = 1;
    repeated uint64 benchmarks = 2;
    string supplierID = 3;
    string consumerID = 4;
    string masterID = 5;
    string askID = 6;
    string bidID = 7;
    uint64 duration = 8;
    BigInt price = 9;
    Timestamp startTime = 10;
    Timestamp endTime = 11;
    MarketDealStatus status = 12;
    BigInt blockedBalance = 13;
    BigInt totalPayout = 14;
    Timestamp lastBillTS = 15;
}
