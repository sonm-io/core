syntax = "proto3";

import "bigint.proto";
import "dwh.proto";
import "insonmnia.proto";
import "timestamp.proto";

package sonm;

service Market {
    // GetOrders returns orders by given filter parameters.
    // Note that set of filters may be changed in the closest future.
    rpc GetOrders(GetOrdersRequest) returns (OrdersReply) {}
    // CreateOrder places new order on the Marketplace.
    // Note that current impl of Node API prevents you from
    // creating ASKs orders.
    rpc CreateOrder(Order) returns (Order) {}
    // GetOrderByID returns order by given ID.
    // If order save an `inactive` status returns error instead.
    rpc GetOrderByID(ID) returns (Order) {}
    // CancelOrder removes active order from the Marketplace.
    rpc CancelOrder(ID) returns (Empty) {}
}

// todo: as we decided to make Node's search method simpliest as possible
// this request is meaningless.
//
// Deprecated: Node's `GetOrders` method must return only orders
// for current eth address.
message GetOrdersRequest {
    MarketOrderType type = 1;
    BigInt Price = 2;
    EthAddress Counterparty  = 3;
    uint64 count = 4;
}

// GetProcessingReply represent Node's local
// orders processing status
message GetProcessingReply {
    message ProcessedOrder {
        string id = 1;
        uint32 status = 2;
        Timestamp timestamp = 3;
        string extra = 4;
    }

    map <string, ProcessedOrder> orders = 2;
}

message TouchOrdersRequest {
    repeated string IDs = 1;
}
