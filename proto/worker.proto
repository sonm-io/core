syntax = "proto3";

option go_package = "github.com/sonm-io/core/proto;sonm";

import "ask_plan.proto";
import "bigint.proto";
import "capabilities.proto";
import "container.proto";
import "geoip.proto";
import "insonmnia.proto";
import "marketplace.proto";
import "net.proto";
import "timestamp.proto";

package sonm;

// WorkerManagement describe a bunch of methods to manage Worker instance.
// Must be called by Worker's owner.
service WorkerManagement {
    // Status produse a detailed info about worker
    rpc Status (Empty) returns (StatusReply) {}
    // Devices provides detailed information about device
    // and show benchmark results.
    rpc Devices (Empty) returns (DevicesReply) {}
    // FreeDevices provides information about unallocated resources
    // that can be turned into ask-plans.
    // Deprecated: no longer usable.
    rpc FreeDevices (Empty) returns (DevicesReply) {}
    // Tasks produces a list of all running tasks on the worker
    rpc Tasks (Empty) returns (TaskListReply) {}
    // AskPlans allows to obtain previously assigned Ask Plans from for a given worker.
    rpc AskPlans(Empty) returns (AskPlansReply) {}
    // CreateAskPlan allows to create rules
    // for creating Ask orders on Marketplace
    rpc CreateAskPlan(AskPlan) returns (ID) {}
    // RemoveAskPlan allows to remove rules
    // for creating Ask orders on Marketplace
    rpc RemoveAskPlan(ID) returns (Empty) {}
    // PurgeAskPlans removes all ask-plans
    // Deprecated: use PurgeAsksPlansDetailed instead
    rpc PurgeAskPlans(Empty) returns (Empty) {}
    // PurgeAsksPlansDetailed removes all ask-plans in sync manner and returns error for each ask-plan (if it's present)
    rpc PurgeAskPlansDetailed(Empty) returns (ErrorByStringID) {}
    // Schedule maintenance for worker: it will attempt to close all deals till that time point
    rpc ScheduleMaintenance(Timestamp) returns (Empty) {}
    // Get next planned maintenance
    rpc NextMaintenance(Empty) returns (Timestamp) {}
    // Get useful debugging info - scheduler state and salesman state
    rpc DebugState(Empty) returns (DebugStateReply) {}
    // Remove benchmark cached value by specified benchmark ID
    rpc RemoveBenchmark(NumericID) returns (Empty) {}
    // Schedule full rebenchmarking on next restart
    rpc PurgeBenchmarks(Empty) returns (Empty) {}
    // Metrics returns hardware metrics for this worker.
    rpc Metrics(WorkerMetricsRequest) returns (WorkerMetricsResponse) {}
    // AddCapability allows to temporary provide admin capabilities to another subject.
    rpc AddCapability(WorkerAddCapabilityRequest) returns (WorkerAddCapabilityResponse) {}
    // RemoveCapability allows to revoke provided admin capabilities from another subject.
    rpc RemoveCapability(WorkerRemoveCapabilityRequest) returns (WorkerRemoveCapabilityResponse) {}
}

service Worker {
    /// Task Management section

    rpc PushTask(stream Chunk) returns (stream Progress) {}
    rpc PullTask(PullTaskRequest) returns (stream Chunk) {}
    // StartTask schedules the task associcated with a deal.
    rpc StartTask(StartTaskRequest) returns (StartTaskReply) {}
    rpc StopTask(ID) returns (Empty) {}
    // PurgeTasks stops all tasks by given deal
    rpc PurgeTasks(PurgeTasksRequest) returns (ErrorByStringID) {}
    rpc TaskStatus(ID) returns (TaskStatusReply) {}
    rpc JoinNetwork(WorkerJoinNetworkRequest) returns (NetworkSpec) {}

    rpc TaskLogs(TaskLogsRequest) returns (stream TaskLogsChunk) {}

    // Note: currently used for testing pusposes.
    rpc GetDealInfo(ID) returns (DealInfoReply) {}
}

message TaskTag {
    bytes data = 1;
}

message TaskSpec {
    // Container describes container settings.
    Container container = 1;
    Registry registry = 2;
    AskPlanResources resources = 3;
    TaskTag tag = 4;
}

message StartTaskRequest {
    // Deal points to the deal associated with workers where the task should be
    // started.
    BigInt dealID = 1;
    TaskSpec spec = 2;
}

message WorkerJoinNetworkRequest {
    string taskID = 1;
    string networkID = 2;
}

message StartTaskReply {
    string id = 1;
    map<string, Endpoints> portMap = 2;
    repeated string networkIDs = 3;
}

message StatusReply {
    uint64 uptime = 1;
    string version = 2;
    string platform = 3;
    string ethAddr = 4;
    uint32 taskCount = 5;
    string DWHStatus = 6;
    string rendezvousStatus = 7;
    EthAddress master = 8;
    EthAddress admin = 9;
    bool isMasterConfirmed = 10;
    bool isBenchmarkFinished = 11;
    GeoIP geo = 12;
}

message AskPlansReply {
    map <string, AskPlan> askPlans = 1;
}

message TaskListReply {
    map<string, TaskStatusReply> info = 1;
}

message DevicesReply {
    CPU CPU = 1;
    repeated GPU GPUs = 2;
    RAM RAM = 3;
    Network network = 4;
    Storage storage = 5;
}

message PullTaskRequest {
    string dealId = 1;
    string taskId = 2;
}

message DealInfoReply {
    Deal deal = 1;
    // List of currently running tasks.
    map<string, TaskStatusReply> running = 2;
    // List of completed tasks.
    map<string, TaskStatusReply> completed = 3;
    // Resources is a real resources (cores, ram bytes, GPU devices, etc)
    // allocated on a worker for this deal.
    AskPlanResources resources =  4;
    repeated string publicIPs = 5;
}

message TaskStatusReply {
    enum Status {
        UNKNOWN = 0;
        SPOOLING = 1;
        SPAWNING = 2;
        RUNNING = 3;
        FINISHED = 4;
        BROKEN = 5;
        KILLED_OOM = 6;
    }
    Status status = 1;
    string imageName = 2;
    map<string, Endpoints> portMap = 3;
    uint64 uptime = 4;
    ResourceUsage usage = 5;
    //TODO: looks like we need to use TaskSpec here
    AskPlanResources allocatedResources = 6;
    TaskTag tag = 7;
}

message TaskPool {
    AskPlanResources all = 1;
    map<string, AskPlanResources> used = 2;
}

message AskPlanPool {
    AskPlanResources all = 1;
    map<string, AskPlan> usedSpot = 2;
    map<string, AskPlan> usedFw = 3;
    map<string, AskPlan> commitedSpot = 4;
    map<string, AskPlan> commitedFw = 5;
    map<string, AskPlan> ejectedPlans = 6;
}

message SchedulerData {
    map<string, string> taskToAskPlan = 1;
    reserved 2;
    map<string, TaskPool> askPlanPools = 3;
    AskPlanPool planPool = 4;
}

message SalesmanData {
    map<string, string> askPlanCGroups = 2;
    map<string, Deal> deals = 3;
    map<string, Order> orders = 4;
}

message DebugStateReply {
    SchedulerData schedulerData = 1;
    SalesmanData salesmanData = 2;
}

message PurgeTasksRequest {
    BigInt dealID = 1;
}

message WorkerMetricsRequest {}

message WorkerMetricsResponse {
    map<string, double> metrics = 1;
}

enum CapabilityScope {
    CAPABILITY_NONE = 0x0;
    CAPABILITY_SSH = 0x01;
    CAPABILITY_INSPECTION = 0x02;
}

message WorkerAddCapabilityRequest {
    // Subject is the ETH address of a subject whose capabilities are extended.
    EthAddress subject = 1;
    // Scope shows the capability scope.
    CapabilityScope scope = 2;
    // TTL represents the capability TTL in seconds.
    uint32 ttl = 3;
}

message WorkerAddCapabilityResponse {}

message WorkerRemoveCapabilityRequest {
    // Subject is the ETH address of a subject whose capabilities are removed.
    EthAddress subject = 1;
    // Scope shows the capability scope.
    CapabilityScope scope = 2;
}

message WorkerRemoveCapabilityResponse {}
