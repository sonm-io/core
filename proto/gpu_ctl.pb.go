// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gpu_ctl.proto

package sonm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RemoteGPUDeviceRequest struct {
}

func (m *RemoteGPUDeviceRequest) Reset()                    { *m = RemoteGPUDeviceRequest{} }
func (m *RemoteGPUDeviceRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoteGPUDeviceRequest) ProtoMessage()               {}
func (*RemoteGPUDeviceRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

type RemoteGPUDeviceReply struct {
	Devices []*GPUDevice `protobuf:"bytes,1,rep,name=devices" json:"devices,omitempty"`
}

func (m *RemoteGPUDeviceReply) Reset()                    { *m = RemoteGPUDeviceReply{} }
func (m *RemoteGPUDeviceReply) String() string            { return proto.CompactTextString(m) }
func (*RemoteGPUDeviceReply) ProtoMessage()               {}
func (*RemoteGPUDeviceReply) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{1} }

func (m *RemoteGPUDeviceReply) GetDevices() []*GPUDevice {
	if m != nil {
		return m.Devices
	}
	return nil
}

func init() {
	proto.RegisterType((*RemoteGPUDeviceRequest)(nil), "sonm.RemoteGPUDeviceRequest")
	proto.RegisterType((*RemoteGPUDeviceReply)(nil), "sonm.RemoteGPUDeviceReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RemoteGPUTuner service

type RemoteGPUTunerClient interface {
	Devices(ctx context.Context, in *RemoteGPUDeviceRequest, opts ...grpc.CallOption) (*RemoteGPUDeviceReply, error)
}

type remoteGPUTunerClient struct {
	cc *grpc.ClientConn
}

func NewRemoteGPUTunerClient(cc *grpc.ClientConn) RemoteGPUTunerClient {
	return &remoteGPUTunerClient{cc}
}

func (c *remoteGPUTunerClient) Devices(ctx context.Context, in *RemoteGPUDeviceRequest, opts ...grpc.CallOption) (*RemoteGPUDeviceReply, error) {
	out := new(RemoteGPUDeviceReply)
	err := grpc.Invoke(ctx, "/sonm.RemoteGPUTuner/Devices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RemoteGPUTuner service

type RemoteGPUTunerServer interface {
	Devices(context.Context, *RemoteGPUDeviceRequest) (*RemoteGPUDeviceReply, error)
}

func RegisterRemoteGPUTunerServer(s *grpc.Server, srv RemoteGPUTunerServer) {
	s.RegisterService(&_RemoteGPUTuner_serviceDesc, srv)
}

func _RemoteGPUTuner_Devices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteGPUDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteGPUTunerServer).Devices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.RemoteGPUTuner/Devices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteGPUTunerServer).Devices(ctx, req.(*RemoteGPUDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RemoteGPUTuner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sonm.RemoteGPUTuner",
	HandlerType: (*RemoteGPUTunerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Devices",
			Handler:    _RemoteGPUTuner_Devices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gpu_ctl.proto",
}

func init() { proto.RegisterFile("gpu_ctl.proto", fileDescriptor7) }

var fileDescriptor7 = []byte{
	// 159 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0x2f, 0x28, 0x8d,
	0x4f, 0x2e, 0xc9, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x29, 0xce, 0xcf, 0xcb, 0x95,
	0x12, 0x4a, 0x4e, 0x2c, 0x48, 0x4c, 0xca, 0xcc, 0xc9, 0x2c, 0xc9, 0x4c, 0x2d, 0x86, 0xc8, 0x28,
	0x49, 0x70, 0x89, 0x05, 0xa5, 0xe6, 0xe6, 0x97, 0xa4, 0xba, 0x07, 0x84, 0xba, 0xa4, 0x96, 0x65,
	0x26, 0xa7, 0x06, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x28, 0x39, 0x72, 0x89, 0x60, 0xc8, 0x14,
	0xe4, 0x54, 0x0a, 0x69, 0x72, 0xb1, 0xa7, 0x80, 0xb9, 0xc5, 0x12, 0x8c, 0x0a, 0xcc, 0x1a, 0xdc,
	0x46, 0xfc, 0x7a, 0x20, 0xd3, 0xf5, 0x10, 0xca, 0x60, 0xf2, 0x46, 0xe1, 0x5c, 0x7c, 0x70, 0x23,
	0x42, 0x4a, 0xf3, 0x52, 0x8b, 0x84, 0x5c, 0xb9, 0xd8, 0x21, 0x8a, 0x8a, 0x85, 0x64, 0x20, 0xda,
	0xb0, 0xdb, 0x2e, 0x25, 0x85, 0x43, 0xb6, 0x20, 0xa7, 0x52, 0x89, 0x21, 0x89, 0x0d, 0xec, 0x78,
	0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x44, 0x78, 0x32, 0x17, 0xe7, 0x00, 0x00, 0x00,
}
