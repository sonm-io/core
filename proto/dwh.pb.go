// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dwh.proto

package sonm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// grpccmd imports
import (
	"io"

	"github.com/spf13/cobra"
	"github.com/sshaman1101/grpccmd"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CmpOp int32

const (
	CmpOp_EQ  CmpOp = 0
	CmpOp_GTE CmpOp = 1
	CmpOp_LTE CmpOp = 2
)

var CmpOp_name = map[int32]string{
	0: "EQ",
	1: "GTE",
	2: "LTE",
}
var CmpOp_value = map[string]int32{
	"EQ":  0,
	"GTE": 1,
	"LTE": 2,
}

func (x CmpOp) String() string {
	return proto.EnumName(CmpOp_name, int32(x))
}
func (CmpOp) EnumDescriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

type SortingOrder int32

const (
	SortingOrder_Asc  SortingOrder = 0
	SortingOrder_Desc SortingOrder = 1
)

var SortingOrder_name = map[int32]string{
	0: "Asc",
	1: "Desc",
}
var SortingOrder_value = map[string]int32{
	"Asc":  0,
	"Desc": 1,
}

func (x SortingOrder) String() string {
	return proto.EnumName(SortingOrder_name, int32(x))
}
func (SortingOrder) EnumDescriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

type ProfileRole int32

const (
	ProfileRole_AnyRole  ProfileRole = 0
	ProfileRole_Supplier ProfileRole = 1
	ProfileRole_Consumer ProfileRole = 2
)

var ProfileRole_name = map[int32]string{
	0: "AnyRole",
	1: "Supplier",
	2: "Consumer",
}
var ProfileRole_value = map[string]int32{
	"AnyRole":  0,
	"Supplier": 1,
	"Consumer": 2,
}

func (x ProfileRole) String() string {
	return proto.EnumName(ProfileRole_name, int32(x))
}
func (ProfileRole) EnumDescriptor() ([]byte, []int) { return fileDescriptor6, []int{2} }

type BlacklistOption int32

const (
	BlacklistOption_WithoutMatching BlacklistOption = 0
	BlacklistOption_IncludeAndMark  BlacklistOption = 1
	BlacklistOption_OnlyMatching    BlacklistOption = 2
)

var BlacklistOption_name = map[int32]string{
	0: "WithoutMatching",
	1: "IncludeAndMark",
	2: "OnlyMatching",
}
var BlacklistOption_value = map[string]int32{
	"WithoutMatching": 0,
	"IncludeAndMark":  1,
	"OnlyMatching":    2,
}

func (x BlacklistOption) String() string {
	return proto.EnumName(BlacklistOption_name, int32(x))
}
func (BlacklistOption) EnumDescriptor() ([]byte, []int) { return fileDescriptor6, []int{3} }

type SortingOption struct {
	Field string       `protobuf:"bytes,1,opt,name=field" json:"field,omitempty"`
	Order SortingOrder `protobuf:"varint,2,opt,name=order,enum=sonm.SortingOrder" json:"order,omitempty"`
}

func (m *SortingOption) Reset()                    { *m = SortingOption{} }
func (m *SortingOption) String() string            { return proto.CompactTextString(m) }
func (*SortingOption) ProtoMessage()               {}
func (*SortingOption) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *SortingOption) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *SortingOption) GetOrder() SortingOrder {
	if m != nil {
		return m.Order
	}
	return SortingOrder_Asc
}

type DealsRequest struct {
	Status           DealStatus              `protobuf:"varint,1,opt,name=status,enum=sonm.DealStatus" json:"status,omitempty"`
	SupplierID       *EthAddress             `protobuf:"bytes,2,opt,name=supplierID" json:"supplierID,omitempty"`
	ConsumerID       *EthAddress             `protobuf:"bytes,3,opt,name=consumerID" json:"consumerID,omitempty"`
	MasterID         *EthAddress             `protobuf:"bytes,4,opt,name=masterID" json:"masterID,omitempty"`
	AskID            *BigInt                 `protobuf:"bytes,5,opt,name=askID" json:"askID,omitempty"`
	BidID            *BigInt                 `protobuf:"bytes,6,opt,name=bidID" json:"bidID,omitempty"`
	Duration         *MaxMinUint64           `protobuf:"bytes,7,opt,name=duration" json:"duration,omitempty"`
	Price            *MaxMinBig              `protobuf:"bytes,8,opt,name=price" json:"price,omitempty"`
	Netflags         *CmpUint64              `protobuf:"bytes,9,opt,name=netflags" json:"netflags,omitempty"`
	AskIdentityLevel IdentityLevel           `protobuf:"varint,10,opt,name=askIdentityLevel,enum=sonm.IdentityLevel" json:"askIdentityLevel,omitempty"`
	BidIdentityLevel IdentityLevel           `protobuf:"varint,11,opt,name=bidIdentityLevel,enum=sonm.IdentityLevel" json:"bidIdentityLevel,omitempty"`
	Benchmarks       *DWHBenchmarkConditions `protobuf:"bytes,12,opt,name=benchmarks" json:"benchmarks,omitempty"`
	Limit            uint64                  `protobuf:"varint,13,opt,name=limit" json:"limit,omitempty"`
	Offset           uint64                  `protobuf:"varint,14,opt,name=offset" json:"offset,omitempty"`
	Sortings         []*SortingOption        `protobuf:"bytes,15,rep,name=sortings" json:"sortings,omitempty"`
}

func (m *DealsRequest) Reset()                    { *m = DealsRequest{} }
func (m *DealsRequest) String() string            { return proto.CompactTextString(m) }
func (*DealsRequest) ProtoMessage()               {}
func (*DealsRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

func (m *DealsRequest) GetStatus() DealStatus {
	if m != nil {
		return m.Status
	}
	return DealStatus_DEAL_UNKNOWN
}

func (m *DealsRequest) GetSupplierID() *EthAddress {
	if m != nil {
		return m.SupplierID
	}
	return nil
}

func (m *DealsRequest) GetConsumerID() *EthAddress {
	if m != nil {
		return m.ConsumerID
	}
	return nil
}

func (m *DealsRequest) GetMasterID() *EthAddress {
	if m != nil {
		return m.MasterID
	}
	return nil
}

func (m *DealsRequest) GetAskID() *BigInt {
	if m != nil {
		return m.AskID
	}
	return nil
}

func (m *DealsRequest) GetBidID() *BigInt {
	if m != nil {
		return m.BidID
	}
	return nil
}

func (m *DealsRequest) GetDuration() *MaxMinUint64 {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (m *DealsRequest) GetPrice() *MaxMinBig {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *DealsRequest) GetNetflags() *CmpUint64 {
	if m != nil {
		return m.Netflags
	}
	return nil
}

func (m *DealsRequest) GetAskIdentityLevel() IdentityLevel {
	if m != nil {
		return m.AskIdentityLevel
	}
	return IdentityLevel_ANONYMOUS
}

func (m *DealsRequest) GetBidIdentityLevel() IdentityLevel {
	if m != nil {
		return m.BidIdentityLevel
	}
	return IdentityLevel_ANONYMOUS
}

func (m *DealsRequest) GetBenchmarks() *DWHBenchmarkConditions {
	if m != nil {
		return m.Benchmarks
	}
	return nil
}

func (m *DealsRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *DealsRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *DealsRequest) GetSortings() []*SortingOption {
	if m != nil {
		return m.Sortings
	}
	return nil
}

type DWHDealsReply struct {
	Deals []*DWHDeal `protobuf:"bytes,1,rep,name=deals" json:"deals,omitempty"`
}

func (m *DWHDealsReply) Reset()                    { *m = DWHDealsReply{} }
func (m *DWHDealsReply) String() string            { return proto.CompactTextString(m) }
func (*DWHDealsReply) ProtoMessage()               {}
func (*DWHDealsReply) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{2} }

func (m *DWHDealsReply) GetDeals() []*DWHDeal {
	if m != nil {
		return m.Deals
	}
	return nil
}

type DWHDeal struct {
	Deal                 *Deal  `protobuf:"bytes,1,opt,name=deal" json:"deal,omitempty"`
	Netflags             uint64 `protobuf:"varint,2,opt,name=netflags" json:"netflags,omitempty"`
	AskIdentityLevel     uint64 `protobuf:"varint,3,opt,name=askIdentityLevel" json:"askIdentityLevel,omitempty"`
	BidIdentityLevel     uint64 `protobuf:"varint,4,opt,name=bidIdentityLevel" json:"bidIdentityLevel,omitempty"`
	SupplierCertificates []byte `protobuf:"bytes,5,opt,name=supplierCertificates,proto3" json:"supplierCertificates,omitempty"`
	ConsumerCertificates []byte `protobuf:"bytes,6,opt,name=consumerCertificates,proto3" json:"consumerCertificates,omitempty"`
	ActiveChangeRequest  bool   `protobuf:"varint,7,opt,name=activeChangeRequest" json:"activeChangeRequest,omitempty"`
}

func (m *DWHDeal) Reset()                    { *m = DWHDeal{} }
func (m *DWHDeal) String() string            { return proto.CompactTextString(m) }
func (*DWHDeal) ProtoMessage()               {}
func (*DWHDeal) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{3} }

func (m *DWHDeal) GetDeal() *Deal {
	if m != nil {
		return m.Deal
	}
	return nil
}

func (m *DWHDeal) GetNetflags() uint64 {
	if m != nil {
		return m.Netflags
	}
	return 0
}

func (m *DWHDeal) GetAskIdentityLevel() uint64 {
	if m != nil {
		return m.AskIdentityLevel
	}
	return 0
}

func (m *DWHDeal) GetBidIdentityLevel() uint64 {
	if m != nil {
		return m.BidIdentityLevel
	}
	return 0
}

func (m *DWHDeal) GetSupplierCertificates() []byte {
	if m != nil {
		return m.SupplierCertificates
	}
	return nil
}

func (m *DWHDeal) GetConsumerCertificates() []byte {
	if m != nil {
		return m.ConsumerCertificates
	}
	return nil
}

func (m *DWHDeal) GetActiveChangeRequest() bool {
	if m != nil {
		return m.ActiveChangeRequest
	}
	return false
}

type DealConditionsRequest struct {
	DealID   *BigInt          `protobuf:"bytes,1,opt,name=dealID" json:"dealID,omitempty"`
	Limit    uint64           `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
	Offset   uint64           `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
	Sortings []*SortingOption `protobuf:"bytes,4,rep,name=sortings" json:"sortings,omitempty"`
}

func (m *DealConditionsRequest) Reset()                    { *m = DealConditionsRequest{} }
func (m *DealConditionsRequest) String() string            { return proto.CompactTextString(m) }
func (*DealConditionsRequest) ProtoMessage()               {}
func (*DealConditionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{4} }

func (m *DealConditionsRequest) GetDealID() *BigInt {
	if m != nil {
		return m.DealID
	}
	return nil
}

func (m *DealConditionsRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *DealConditionsRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *DealConditionsRequest) GetSortings() []*SortingOption {
	if m != nil {
		return m.Sortings
	}
	return nil
}

type DealConditionsReply struct {
	Conditions []*DealCondition `protobuf:"bytes,1,rep,name=conditions" json:"conditions,omitempty"`
}

func (m *DealConditionsReply) Reset()                    { *m = DealConditionsReply{} }
func (m *DealConditionsReply) String() string            { return proto.CompactTextString(m) }
func (*DealConditionsReply) ProtoMessage()               {}
func (*DealConditionsReply) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{5} }

func (m *DealConditionsReply) GetConditions() []*DealCondition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

type OrdersRequest struct {
	DealID               *BigInt                 `protobuf:"bytes,1,opt,name=dealID" json:"dealID,omitempty"`
	Type                 OrderType               `protobuf:"varint,2,opt,name=type,enum=sonm.OrderType" json:"type,omitempty"`
	Status               OrderStatus             `protobuf:"varint,3,opt,name=status,enum=sonm.OrderStatus" json:"status,omitempty"`
	AuthorID             *EthAddress             `protobuf:"bytes,4,opt,name=authorID" json:"authorID,omitempty"`
	CounterpartyID       *EthAddress             `protobuf:"bytes,5,opt,name=counterpartyID" json:"counterpartyID,omitempty"`
	Duration             *MaxMinUint64           `protobuf:"bytes,6,opt,name=duration" json:"duration,omitempty"`
	Price                *MaxMinBig              `protobuf:"bytes,9,opt,name=price" json:"price,omitempty"`
	Netflags             *CmpUint64              `protobuf:"bytes,11,opt,name=netflags" json:"netflags,omitempty"`
	CreatorIdentityLevel IdentityLevel           `protobuf:"varint,12,opt,name=creatorIdentityLevel,enum=sonm.IdentityLevel" json:"creatorIdentityLevel,omitempty"`
	Benchmarks           *DWHBenchmarkConditions `protobuf:"bytes,13,opt,name=benchmarks" json:"benchmarks,omitempty"`
	CreatedTS            *MaxMinTimestamp        `protobuf:"bytes,14,opt,name=createdTS" json:"createdTS,omitempty"`
	Limit                uint64                  `protobuf:"varint,15,opt,name=limit" json:"limit,omitempty"`
	Offset               uint64                  `protobuf:"varint,16,opt,name=offset" json:"offset,omitempty"`
	Sortings             []*SortingOption        `protobuf:"bytes,17,rep,name=sortings" json:"sortings,omitempty"`
}

func (m *OrdersRequest) Reset()                    { *m = OrdersRequest{} }
func (m *OrdersRequest) String() string            { return proto.CompactTextString(m) }
func (*OrdersRequest) ProtoMessage()               {}
func (*OrdersRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{6} }

func (m *OrdersRequest) GetDealID() *BigInt {
	if m != nil {
		return m.DealID
	}
	return nil
}

func (m *OrdersRequest) GetType() OrderType {
	if m != nil {
		return m.Type
	}
	return OrderType_ANY
}

func (m *OrdersRequest) GetStatus() OrderStatus {
	if m != nil {
		return m.Status
	}
	return OrderStatus_ORDER_UNKNOWN
}

func (m *OrdersRequest) GetAuthorID() *EthAddress {
	if m != nil {
		return m.AuthorID
	}
	return nil
}

func (m *OrdersRequest) GetCounterpartyID() *EthAddress {
	if m != nil {
		return m.CounterpartyID
	}
	return nil
}

func (m *OrdersRequest) GetDuration() *MaxMinUint64 {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (m *OrdersRequest) GetPrice() *MaxMinBig {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *OrdersRequest) GetNetflags() *CmpUint64 {
	if m != nil {
		return m.Netflags
	}
	return nil
}

func (m *OrdersRequest) GetCreatorIdentityLevel() IdentityLevel {
	if m != nil {
		return m.CreatorIdentityLevel
	}
	return IdentityLevel_ANONYMOUS
}

func (m *OrdersRequest) GetBenchmarks() *DWHBenchmarkConditions {
	if m != nil {
		return m.Benchmarks
	}
	return nil
}

func (m *OrdersRequest) GetCreatedTS() *MaxMinTimestamp {
	if m != nil {
		return m.CreatedTS
	}
	return nil
}

func (m *OrdersRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *OrdersRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *OrdersRequest) GetSortings() []*SortingOption {
	if m != nil {
		return m.Sortings
	}
	return nil
}

type MatchingOrdersRequest struct {
	Id     *BigInt `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Limit  uint64  `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
	Offset uint64  `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
}

func (m *MatchingOrdersRequest) Reset()                    { *m = MatchingOrdersRequest{} }
func (m *MatchingOrdersRequest) String() string            { return proto.CompactTextString(m) }
func (*MatchingOrdersRequest) ProtoMessage()               {}
func (*MatchingOrdersRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{7} }

func (m *MatchingOrdersRequest) GetId() *BigInt {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *MatchingOrdersRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *MatchingOrdersRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type DWHOrdersReply struct {
	Orders []*DWHOrder `protobuf:"bytes,1,rep,name=orders" json:"orders,omitempty"`
}

func (m *DWHOrdersReply) Reset()                    { *m = DWHOrdersReply{} }
func (m *DWHOrdersReply) String() string            { return proto.CompactTextString(m) }
func (*DWHOrdersReply) ProtoMessage()               {}
func (*DWHOrdersReply) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{8} }

func (m *DWHOrdersReply) GetOrders() []*DWHOrder {
	if m != nil {
		return m.Orders
	}
	return nil
}

type DWHOrder struct {
	Order                *Order     `protobuf:"bytes,1,opt,name=order" json:"order,omitempty"`
	CreatorIdentityLevel uint64     `protobuf:"varint,2,opt,name=creatorIdentityLevel" json:"creatorIdentityLevel,omitempty"`
	CreatorName          string     `protobuf:"bytes,3,opt,name=creatorName" json:"creatorName,omitempty"`
	CreatorCountry       string     `protobuf:"bytes,4,opt,name=creatorCountry" json:"creatorCountry,omitempty"`
	CreatorCertificates  []byte     `protobuf:"bytes,5,opt,name=creatorCertificates,proto3" json:"creatorCertificates,omitempty"`
	CreatedTS            *Timestamp `protobuf:"bytes,6,opt,name=CreatedTS" json:"CreatedTS,omitempty"`
}

func (m *DWHOrder) Reset()                    { *m = DWHOrder{} }
func (m *DWHOrder) String() string            { return proto.CompactTextString(m) }
func (*DWHOrder) ProtoMessage()               {}
func (*DWHOrder) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{9} }

func (m *DWHOrder) GetOrder() *Order {
	if m != nil {
		return m.Order
	}
	return nil
}

func (m *DWHOrder) GetCreatorIdentityLevel() uint64 {
	if m != nil {
		return m.CreatorIdentityLevel
	}
	return 0
}

func (m *DWHOrder) GetCreatorName() string {
	if m != nil {
		return m.CreatorName
	}
	return ""
}

func (m *DWHOrder) GetCreatorCountry() string {
	if m != nil {
		return m.CreatorCountry
	}
	return ""
}

func (m *DWHOrder) GetCreatorCertificates() []byte {
	if m != nil {
		return m.CreatorCertificates
	}
	return nil
}

func (m *DWHOrder) GetCreatedTS() *Timestamp {
	if m != nil {
		return m.CreatedTS
	}
	return nil
}

type DealCondition struct {
	Id          uint64      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	SupplierID  *EthAddress `protobuf:"bytes,2,opt,name=supplierID" json:"supplierID,omitempty"`
	ConsumerID  *EthAddress `protobuf:"bytes,3,opt,name=consumerID" json:"consumerID,omitempty"`
	MasterID    *EthAddress `protobuf:"bytes,4,opt,name=masterID" json:"masterID,omitempty"`
	Duration    uint64      `protobuf:"varint,5,opt,name=duration" json:"duration,omitempty"`
	Price       *BigInt     `protobuf:"bytes,6,opt,name=price" json:"price,omitempty"`
	StartTime   *Timestamp  `protobuf:"bytes,7,opt,name=startTime" json:"startTime,omitempty"`
	EndTime     *Timestamp  `protobuf:"bytes,8,opt,name=endTime" json:"endTime,omitempty"`
	TotalPayout *BigInt     `protobuf:"bytes,9,opt,name=totalPayout" json:"totalPayout,omitempty"`
	DealID      *BigInt     `protobuf:"bytes,10,opt,name=dealID" json:"dealID,omitempty"`
}

func (m *DealCondition) Reset()                    { *m = DealCondition{} }
func (m *DealCondition) String() string            { return proto.CompactTextString(m) }
func (*DealCondition) ProtoMessage()               {}
func (*DealCondition) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{10} }

func (m *DealCondition) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DealCondition) GetSupplierID() *EthAddress {
	if m != nil {
		return m.SupplierID
	}
	return nil
}

func (m *DealCondition) GetConsumerID() *EthAddress {
	if m != nil {
		return m.ConsumerID
	}
	return nil
}

func (m *DealCondition) GetMasterID() *EthAddress {
	if m != nil {
		return m.MasterID
	}
	return nil
}

func (m *DealCondition) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *DealCondition) GetPrice() *BigInt {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *DealCondition) GetStartTime() *Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *DealCondition) GetEndTime() *Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *DealCondition) GetTotalPayout() *BigInt {
	if m != nil {
		return m.TotalPayout
	}
	return nil
}

func (m *DealCondition) GetDealID() *BigInt {
	if m != nil {
		return m.DealID
	}
	return nil
}

type DWHWorker struct {
	MasterID  *EthAddress `protobuf:"bytes,1,opt,name=masterID" json:"masterID,omitempty"`
	SlaveID   *EthAddress `protobuf:"bytes,2,opt,name=slaveID" json:"slaveID,omitempty"`
	Confirmed bool        `protobuf:"varint,3,opt,name=confirmed" json:"confirmed,omitempty"`
}

func (m *DWHWorker) Reset()                    { *m = DWHWorker{} }
func (m *DWHWorker) String() string            { return proto.CompactTextString(m) }
func (*DWHWorker) ProtoMessage()               {}
func (*DWHWorker) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{11} }

func (m *DWHWorker) GetMasterID() *EthAddress {
	if m != nil {
		return m.MasterID
	}
	return nil
}

func (m *DWHWorker) GetSlaveID() *EthAddress {
	if m != nil {
		return m.SlaveID
	}
	return nil
}

func (m *DWHWorker) GetConfirmed() bool {
	if m != nil {
		return m.Confirmed
	}
	return false
}

type ProfilesRequest struct {
	Role           ProfileRole      `protobuf:"varint,1,opt,name=role,enum=sonm.ProfileRole" json:"role,omitempty"`
	IdentityLevel  IdentityLevel    `protobuf:"varint,2,opt,name=identityLevel,enum=sonm.IdentityLevel" json:"identityLevel,omitempty"`
	Country        string           `protobuf:"bytes,3,opt,name=country" json:"country,omitempty"`
	Name           string           `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	BlacklistQuery *BlacklistQuery  `protobuf:"bytes,5,opt,name=blacklistQuery" json:"blacklistQuery,omitempty"`
	Limit          uint64           `protobuf:"varint,6,opt,name=limit" json:"limit,omitempty"`
	Offset         uint64           `protobuf:"varint,7,opt,name=offset" json:"offset,omitempty"`
	Sortings       []*SortingOption `protobuf:"bytes,8,rep,name=sortings" json:"sortings,omitempty"`
}

func (m *ProfilesRequest) Reset()                    { *m = ProfilesRequest{} }
func (m *ProfilesRequest) String() string            { return proto.CompactTextString(m) }
func (*ProfilesRequest) ProtoMessage()               {}
func (*ProfilesRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{12} }

func (m *ProfilesRequest) GetRole() ProfileRole {
	if m != nil {
		return m.Role
	}
	return ProfileRole_AnyRole
}

func (m *ProfilesRequest) GetIdentityLevel() IdentityLevel {
	if m != nil {
		return m.IdentityLevel
	}
	return IdentityLevel_ANONYMOUS
}

func (m *ProfilesRequest) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *ProfilesRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProfilesRequest) GetBlacklistQuery() *BlacklistQuery {
	if m != nil {
		return m.BlacklistQuery
	}
	return nil
}

func (m *ProfilesRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ProfilesRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ProfilesRequest) GetSortings() []*SortingOption {
	if m != nil {
		return m.Sortings
	}
	return nil
}

type ProfilesReply struct {
	Profiles []*Profile `protobuf:"bytes,1,rep,name=profiles" json:"profiles,omitempty"`
}

func (m *ProfilesReply) Reset()                    { *m = ProfilesReply{} }
func (m *ProfilesReply) String() string            { return proto.CompactTextString(m) }
func (*ProfilesReply) ProtoMessage()               {}
func (*ProfilesReply) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{13} }

func (m *ProfilesReply) GetProfiles() []*Profile {
	if m != nil {
		return m.Profiles
	}
	return nil
}

type Profile struct {
	UserID         *EthAddress `protobuf:"bytes,1,opt,name=UserID" json:"UserID,omitempty"`
	IdentityLevel  uint64      `protobuf:"varint,2,opt,name=IdentityLevel" json:"IdentityLevel,omitempty"`
	Name           string      `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
	Country        string      `protobuf:"bytes,4,opt,name=Country" json:"Country,omitempty"`
	IsCorporation  bool        `protobuf:"varint,5,opt,name=IsCorporation" json:"IsCorporation,omitempty"`
	IsProfessional bool        `protobuf:"varint,6,opt,name=IsProfessional" json:"IsProfessional,omitempty"`
	Certificates   string      `protobuf:"bytes,7,opt,name=Certificates" json:"Certificates,omitempty"`
	ActiveAsks     uint64      `protobuf:"varint,8,opt,name=activeAsks" json:"activeAsks,omitempty"`
	ActiveBids     uint64      `protobuf:"varint,9,opt,name=activeBids" json:"activeBids,omitempty"`
	IsBlacklisted  bool        `protobuf:"varint,10,opt,name=isBlacklisted" json:"isBlacklisted,omitempty"`
}

func (m *Profile) Reset()                    { *m = Profile{} }
func (m *Profile) String() string            { return proto.CompactTextString(m) }
func (*Profile) ProtoMessage()               {}
func (*Profile) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{14} }

func (m *Profile) GetUserID() *EthAddress {
	if m != nil {
		return m.UserID
	}
	return nil
}

func (m *Profile) GetIdentityLevel() uint64 {
	if m != nil {
		return m.IdentityLevel
	}
	return 0
}

func (m *Profile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Profile) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Profile) GetIsCorporation() bool {
	if m != nil {
		return m.IsCorporation
	}
	return false
}

func (m *Profile) GetIsProfessional() bool {
	if m != nil {
		return m.IsProfessional
	}
	return false
}

func (m *Profile) GetCertificates() string {
	if m != nil {
		return m.Certificates
	}
	return ""
}

func (m *Profile) GetActiveAsks() uint64 {
	if m != nil {
		return m.ActiveAsks
	}
	return 0
}

func (m *Profile) GetActiveBids() uint64 {
	if m != nil {
		return m.ActiveBids
	}
	return 0
}

func (m *Profile) GetIsBlacklisted() bool {
	if m != nil {
		return m.IsBlacklisted
	}
	return false
}

type BlacklistRequest struct {
	OwnerID *EthAddress `protobuf:"bytes,1,opt,name=ownerID" json:"ownerID,omitempty"`
	Limit   uint64      `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
	Offset  uint64      `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
}

func (m *BlacklistRequest) Reset()                    { *m = BlacklistRequest{} }
func (m *BlacklistRequest) String() string            { return proto.CompactTextString(m) }
func (*BlacklistRequest) ProtoMessage()               {}
func (*BlacklistRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{15} }

func (m *BlacklistRequest) GetOwnerID() *EthAddress {
	if m != nil {
		return m.OwnerID
	}
	return nil
}

func (m *BlacklistRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *BlacklistRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type BlacklistReply struct {
	OwnerID   *EthAddress `protobuf:"bytes,1,opt,name=ownerID" json:"ownerID,omitempty"`
	Addresses []string    `protobuf:"bytes,2,rep,name=addresses" json:"addresses,omitempty"`
}

func (m *BlacklistReply) Reset()                    { *m = BlacklistReply{} }
func (m *BlacklistReply) String() string            { return proto.CompactTextString(m) }
func (*BlacklistReply) ProtoMessage()               {}
func (*BlacklistReply) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{16} }

func (m *BlacklistReply) GetOwnerID() *EthAddress {
	if m != nil {
		return m.OwnerID
	}
	return nil
}

func (m *BlacklistReply) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type ValidatorsRequest struct {
	ValidatorLevel *CmpUint64       `protobuf:"bytes,1,opt,name=validatorLevel" json:"validatorLevel,omitempty"`
	Limit          uint64           `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
	Offset         uint64           `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
	Sortings       []*SortingOption `protobuf:"bytes,4,rep,name=sortings" json:"sortings,omitempty"`
}

func (m *ValidatorsRequest) Reset()                    { *m = ValidatorsRequest{} }
func (m *ValidatorsRequest) String() string            { return proto.CompactTextString(m) }
func (*ValidatorsRequest) ProtoMessage()               {}
func (*ValidatorsRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{17} }

func (m *ValidatorsRequest) GetValidatorLevel() *CmpUint64 {
	if m != nil {
		return m.ValidatorLevel
	}
	return nil
}

func (m *ValidatorsRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ValidatorsRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ValidatorsRequest) GetSortings() []*SortingOption {
	if m != nil {
		return m.Sortings
	}
	return nil
}

type ValidatorsReply struct {
	Validators []*Validator `protobuf:"bytes,1,rep,name=validators" json:"validators,omitempty"`
}

func (m *ValidatorsReply) Reset()                    { *m = ValidatorsReply{} }
func (m *ValidatorsReply) String() string            { return proto.CompactTextString(m) }
func (*ValidatorsReply) ProtoMessage()               {}
func (*ValidatorsReply) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{18} }

func (m *ValidatorsReply) GetValidators() []*Validator {
	if m != nil {
		return m.Validators
	}
	return nil
}

type Validator struct {
	Id    *EthAddress `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Level uint64      `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`
}

func (m *Validator) Reset()                    { *m = Validator{} }
func (m *Validator) String() string            { return proto.CompactTextString(m) }
func (*Validator) ProtoMessage()               {}
func (*Validator) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{19} }

func (m *Validator) GetId() *EthAddress {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Validator) GetLevel() uint64 {
	if m != nil {
		return m.Level
	}
	return 0
}

type DealChangeRequestsReply struct {
	Requests []*DealChangeRequest `protobuf:"bytes,1,rep,name=requests" json:"requests,omitempty"`
}

func (m *DealChangeRequestsReply) Reset()                    { *m = DealChangeRequestsReply{} }
func (m *DealChangeRequestsReply) String() string            { return proto.CompactTextString(m) }
func (*DealChangeRequestsReply) ProtoMessage()               {}
func (*DealChangeRequestsReply) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{20} }

func (m *DealChangeRequestsReply) GetRequests() []*DealChangeRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

type DealChangeRequest struct {
	Id          *BigInt             `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	DealID      *BigInt             `protobuf:"bytes,2,opt,name=dealID" json:"dealID,omitempty"`
	RequestType OrderType           `protobuf:"varint,3,opt,name=requestType,enum=sonm.OrderType" json:"requestType,omitempty"`
	Duration    uint64              `protobuf:"varint,4,opt,name=duration" json:"duration,omitempty"`
	Price       *BigInt             `protobuf:"bytes,5,opt,name=price" json:"price,omitempty"`
	Status      ChangeRequestStatus `protobuf:"varint,6,opt,name=status,enum=sonm.ChangeRequestStatus" json:"status,omitempty"`
}

func (m *DealChangeRequest) Reset()                    { *m = DealChangeRequest{} }
func (m *DealChangeRequest) String() string            { return proto.CompactTextString(m) }
func (*DealChangeRequest) ProtoMessage()               {}
func (*DealChangeRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{21} }

func (m *DealChangeRequest) GetId() *BigInt {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *DealChangeRequest) GetDealID() *BigInt {
	if m != nil {
		return m.DealID
	}
	return nil
}

func (m *DealChangeRequest) GetRequestType() OrderType {
	if m != nil {
		return m.RequestType
	}
	return OrderType_ANY
}

func (m *DealChangeRequest) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *DealChangeRequest) GetPrice() *BigInt {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *DealChangeRequest) GetStatus() ChangeRequestStatus {
	if m != nil {
		return m.Status
	}
	return ChangeRequestStatus_REQUEST_UNKNOWN
}

type WorkersRequest struct {
	MasterID *EthAddress `protobuf:"bytes,1,opt,name=MasterID" json:"MasterID,omitempty"`
	Limit    uint64      `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
	Offset   uint64      `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
}

func (m *WorkersRequest) Reset()                    { *m = WorkersRequest{} }
func (m *WorkersRequest) String() string            { return proto.CompactTextString(m) }
func (*WorkersRequest) ProtoMessage()               {}
func (*WorkersRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{22} }

func (m *WorkersRequest) GetMasterID() *EthAddress {
	if m != nil {
		return m.MasterID
	}
	return nil
}

func (m *WorkersRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *WorkersRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type WorkersReply struct {
	Workers []*DWHWorker `protobuf:"bytes,1,rep,name=workers" json:"workers,omitempty"`
}

func (m *WorkersReply) Reset()                    { *m = WorkersReply{} }
func (m *WorkersReply) String() string            { return proto.CompactTextString(m) }
func (*WorkersReply) ProtoMessage()               {}
func (*WorkersReply) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{23} }

func (m *WorkersReply) GetWorkers() []*DWHWorker {
	if m != nil {
		return m.Workers
	}
	return nil
}

type Certificate struct {
	OwnerID       *EthAddress `protobuf:"bytes,1,opt,name=ownerID" json:"ownerID,omitempty"`
	ValidatorID   *EthAddress `protobuf:"bytes,2,opt,name=validatorID" json:"validatorID,omitempty"`
	Attribute     uint64      `protobuf:"varint,3,opt,name=attribute" json:"attribute,omitempty"`
	IdentityLevel uint64      `protobuf:"varint,4,opt,name=identityLevel" json:"identityLevel,omitempty"`
	Value         []byte      `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Certificate) Reset()                    { *m = Certificate{} }
func (m *Certificate) String() string            { return proto.CompactTextString(m) }
func (*Certificate) ProtoMessage()               {}
func (*Certificate) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{24} }

func (m *Certificate) GetOwnerID() *EthAddress {
	if m != nil {
		return m.OwnerID
	}
	return nil
}

func (m *Certificate) GetValidatorID() *EthAddress {
	if m != nil {
		return m.ValidatorID
	}
	return nil
}

func (m *Certificate) GetAttribute() uint64 {
	if m != nil {
		return m.Attribute
	}
	return 0
}

func (m *Certificate) GetIdentityLevel() uint64 {
	if m != nil {
		return m.IdentityLevel
	}
	return 0
}

func (m *Certificate) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type DWHBenchmarkConditions struct {
	CPUSysbenchMulti *MaxMinUint64 `protobuf:"bytes,1,opt,name=CPUSysbenchMulti" json:"CPUSysbenchMulti,omitempty"`
	CPUSysbenchOne   *MaxMinUint64 `protobuf:"bytes,2,opt,name=CPUSysbenchOne" json:"CPUSysbenchOne,omitempty"`
	CPUCores         *MaxMinUint64 `protobuf:"bytes,3,opt,name=CPUCores" json:"CPUCores,omitempty"`
	RAMSize          *MaxMinUint64 `protobuf:"bytes,4,opt,name=RAMSize" json:"RAMSize,omitempty"`
	StorageSize      *MaxMinUint64 `protobuf:"bytes,5,opt,name=StorageSize" json:"StorageSize,omitempty"`
	NetTrafficIn     *MaxMinUint64 `protobuf:"bytes,6,opt,name=NetTrafficIn" json:"NetTrafficIn,omitempty"`
	NetTrafficOut    *MaxMinUint64 `protobuf:"bytes,7,opt,name=NetTrafficOut" json:"NetTrafficOut,omitempty"`
	GPUCount         *MaxMinUint64 `protobuf:"bytes,8,opt,name=GPUCount" json:"GPUCount,omitempty"`
	GPUMem           *MaxMinUint64 `protobuf:"bytes,9,opt,name=GPUMem" json:"GPUMem,omitempty"`
	GPUEthHashrate   *MaxMinUint64 `protobuf:"bytes,10,opt,name=GPUEthHashrate" json:"GPUEthHashrate,omitempty"`
	GPUCashHashrate  *MaxMinUint64 `protobuf:"bytes,11,opt,name=GPUCashHashrate" json:"GPUCashHashrate,omitempty"`
	GPURedshift      *MaxMinUint64 `protobuf:"bytes,12,opt,name=GPURedshift" json:"GPURedshift,omitempty"`
}

func (m *DWHBenchmarkConditions) Reset()                    { *m = DWHBenchmarkConditions{} }
func (m *DWHBenchmarkConditions) String() string            { return proto.CompactTextString(m) }
func (*DWHBenchmarkConditions) ProtoMessage()               {}
func (*DWHBenchmarkConditions) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{25} }

func (m *DWHBenchmarkConditions) GetCPUSysbenchMulti() *MaxMinUint64 {
	if m != nil {
		return m.CPUSysbenchMulti
	}
	return nil
}

func (m *DWHBenchmarkConditions) GetCPUSysbenchOne() *MaxMinUint64 {
	if m != nil {
		return m.CPUSysbenchOne
	}
	return nil
}

func (m *DWHBenchmarkConditions) GetCPUCores() *MaxMinUint64 {
	if m != nil {
		return m.CPUCores
	}
	return nil
}

func (m *DWHBenchmarkConditions) GetRAMSize() *MaxMinUint64 {
	if m != nil {
		return m.RAMSize
	}
	return nil
}

func (m *DWHBenchmarkConditions) GetStorageSize() *MaxMinUint64 {
	if m != nil {
		return m.StorageSize
	}
	return nil
}

func (m *DWHBenchmarkConditions) GetNetTrafficIn() *MaxMinUint64 {
	if m != nil {
		return m.NetTrafficIn
	}
	return nil
}

func (m *DWHBenchmarkConditions) GetNetTrafficOut() *MaxMinUint64 {
	if m != nil {
		return m.NetTrafficOut
	}
	return nil
}

func (m *DWHBenchmarkConditions) GetGPUCount() *MaxMinUint64 {
	if m != nil {
		return m.GPUCount
	}
	return nil
}

func (m *DWHBenchmarkConditions) GetGPUMem() *MaxMinUint64 {
	if m != nil {
		return m.GPUMem
	}
	return nil
}

func (m *DWHBenchmarkConditions) GetGPUEthHashrate() *MaxMinUint64 {
	if m != nil {
		return m.GPUEthHashrate
	}
	return nil
}

func (m *DWHBenchmarkConditions) GetGPUCashHashrate() *MaxMinUint64 {
	if m != nil {
		return m.GPUCashHashrate
	}
	return nil
}

func (m *DWHBenchmarkConditions) GetGPURedshift() *MaxMinUint64 {
	if m != nil {
		return m.GPURedshift
	}
	return nil
}

type MaxMinUint64 struct {
	Max uint64 `protobuf:"varint,1,opt,name=max" json:"max,omitempty"`
	Min uint64 `protobuf:"varint,2,opt,name=min" json:"min,omitempty"`
}

func (m *MaxMinUint64) Reset()                    { *m = MaxMinUint64{} }
func (m *MaxMinUint64) String() string            { return proto.CompactTextString(m) }
func (*MaxMinUint64) ProtoMessage()               {}
func (*MaxMinUint64) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{26} }

func (m *MaxMinUint64) GetMax() uint64 {
	if m != nil {
		return m.Max
	}
	return 0
}

func (m *MaxMinUint64) GetMin() uint64 {
	if m != nil {
		return m.Min
	}
	return 0
}

type MaxMinBig struct {
	Max *BigInt `protobuf:"bytes,1,opt,name=max" json:"max,omitempty"`
	Min *BigInt `protobuf:"bytes,2,opt,name=min" json:"min,omitempty"`
}

func (m *MaxMinBig) Reset()                    { *m = MaxMinBig{} }
func (m *MaxMinBig) String() string            { return proto.CompactTextString(m) }
func (*MaxMinBig) ProtoMessage()               {}
func (*MaxMinBig) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{27} }

func (m *MaxMinBig) GetMax() *BigInt {
	if m != nil {
		return m.Max
	}
	return nil
}

func (m *MaxMinBig) GetMin() *BigInt {
	if m != nil {
		return m.Min
	}
	return nil
}

type MaxMinTimestamp struct {
	Max *Timestamp `protobuf:"bytes,1,opt,name=max" json:"max,omitempty"`
	Min *Timestamp `protobuf:"bytes,2,opt,name=min" json:"min,omitempty"`
}

func (m *MaxMinTimestamp) Reset()                    { *m = MaxMinTimestamp{} }
func (m *MaxMinTimestamp) String() string            { return proto.CompactTextString(m) }
func (*MaxMinTimestamp) ProtoMessage()               {}
func (*MaxMinTimestamp) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{28} }

func (m *MaxMinTimestamp) GetMax() *Timestamp {
	if m != nil {
		return m.Max
	}
	return nil
}

func (m *MaxMinTimestamp) GetMin() *Timestamp {
	if m != nil {
		return m.Min
	}
	return nil
}

type CmpUint64 struct {
	Value    uint64 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
	Operator CmpOp  `protobuf:"varint,2,opt,name=operator,enum=sonm.CmpOp" json:"operator,omitempty"`
}

func (m *CmpUint64) Reset()                    { *m = CmpUint64{} }
func (m *CmpUint64) String() string            { return proto.CompactTextString(m) }
func (*CmpUint64) ProtoMessage()               {}
func (*CmpUint64) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{29} }

func (m *CmpUint64) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *CmpUint64) GetOperator() CmpOp {
	if m != nil {
		return m.Operator
	}
	return CmpOp_EQ
}

type BlacklistQuery struct {
	OwnerID *EthAddress     `protobuf:"bytes,1,opt,name=ownerID" json:"ownerID,omitempty"`
	Option  BlacklistOption `protobuf:"varint,2,opt,name=option,enum=sonm.BlacklistOption" json:"option,omitempty"`
}

func (m *BlacklistQuery) Reset()                    { *m = BlacklistQuery{} }
func (m *BlacklistQuery) String() string            { return proto.CompactTextString(m) }
func (*BlacklistQuery) ProtoMessage()               {}
func (*BlacklistQuery) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{30} }

func (m *BlacklistQuery) GetOwnerID() *EthAddress {
	if m != nil {
		return m.OwnerID
	}
	return nil
}

func (m *BlacklistQuery) GetOption() BlacklistOption {
	if m != nil {
		return m.Option
	}
	return BlacklistOption_WithoutMatching
}

func init() {
	proto.RegisterType((*SortingOption)(nil), "sonm.SortingOption")
	proto.RegisterType((*DealsRequest)(nil), "sonm.DealsRequest")
	proto.RegisterType((*DWHDealsReply)(nil), "sonm.DWHDealsReply")
	proto.RegisterType((*DWHDeal)(nil), "sonm.DWHDeal")
	proto.RegisterType((*DealConditionsRequest)(nil), "sonm.DealConditionsRequest")
	proto.RegisterType((*DealConditionsReply)(nil), "sonm.DealConditionsReply")
	proto.RegisterType((*OrdersRequest)(nil), "sonm.OrdersRequest")
	proto.RegisterType((*MatchingOrdersRequest)(nil), "sonm.MatchingOrdersRequest")
	proto.RegisterType((*DWHOrdersReply)(nil), "sonm.DWHOrdersReply")
	proto.RegisterType((*DWHOrder)(nil), "sonm.DWHOrder")
	proto.RegisterType((*DealCondition)(nil), "sonm.DealCondition")
	proto.RegisterType((*DWHWorker)(nil), "sonm.DWHWorker")
	proto.RegisterType((*ProfilesRequest)(nil), "sonm.ProfilesRequest")
	proto.RegisterType((*ProfilesReply)(nil), "sonm.ProfilesReply")
	proto.RegisterType((*Profile)(nil), "sonm.Profile")
	proto.RegisterType((*BlacklistRequest)(nil), "sonm.BlacklistRequest")
	proto.RegisterType((*BlacklistReply)(nil), "sonm.BlacklistReply")
	proto.RegisterType((*ValidatorsRequest)(nil), "sonm.ValidatorsRequest")
	proto.RegisterType((*ValidatorsReply)(nil), "sonm.ValidatorsReply")
	proto.RegisterType((*Validator)(nil), "sonm.Validator")
	proto.RegisterType((*DealChangeRequestsReply)(nil), "sonm.DealChangeRequestsReply")
	proto.RegisterType((*DealChangeRequest)(nil), "sonm.DealChangeRequest")
	proto.RegisterType((*WorkersRequest)(nil), "sonm.WorkersRequest")
	proto.RegisterType((*WorkersReply)(nil), "sonm.WorkersReply")
	proto.RegisterType((*Certificate)(nil), "sonm.Certificate")
	proto.RegisterType((*DWHBenchmarkConditions)(nil), "sonm.DWHBenchmarkConditions")
	proto.RegisterType((*MaxMinUint64)(nil), "sonm.MaxMinUint64")
	proto.RegisterType((*MaxMinBig)(nil), "sonm.MaxMinBig")
	proto.RegisterType((*MaxMinTimestamp)(nil), "sonm.MaxMinTimestamp")
	proto.RegisterType((*CmpUint64)(nil), "sonm.CmpUint64")
	proto.RegisterType((*BlacklistQuery)(nil), "sonm.BlacklistQuery")
	proto.RegisterEnum("sonm.CmpOp", CmpOp_name, CmpOp_value)
	proto.RegisterEnum("sonm.SortingOrder", SortingOrder_name, SortingOrder_value)
	proto.RegisterEnum("sonm.ProfileRole", ProfileRole_name, ProfileRole_value)
	proto.RegisterEnum("sonm.BlacklistOption", BlacklistOption_name, BlacklistOption_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DWH service

type DWHClient interface {
	GetDeals(ctx context.Context, in *DealsRequest, opts ...grpc.CallOption) (*DWHDealsReply, error)
	GetDealDetails(ctx context.Context, in *BigInt, opts ...grpc.CallOption) (*DWHDeal, error)
	GetDealConditions(ctx context.Context, in *DealConditionsRequest, opts ...grpc.CallOption) (*DealConditionsReply, error)
	GetOrders(ctx context.Context, in *OrdersRequest, opts ...grpc.CallOption) (*DWHOrdersReply, error)
	GetMatchingOrders(ctx context.Context, in *MatchingOrdersRequest, opts ...grpc.CallOption) (*DWHOrdersReply, error)
	GetOrderDetails(ctx context.Context, in *BigInt, opts ...grpc.CallOption) (*DWHOrder, error)
	GetProfiles(ctx context.Context, in *ProfilesRequest, opts ...grpc.CallOption) (*ProfilesReply, error)
	GetProfileInfo(ctx context.Context, in *EthID, opts ...grpc.CallOption) (*Profile, error)
	GetBlacklist(ctx context.Context, in *BlacklistRequest, opts ...grpc.CallOption) (*BlacklistReply, error)
	GetValidators(ctx context.Context, in *ValidatorsRequest, opts ...grpc.CallOption) (*ValidatorsReply, error)
	GetDealChangeRequests(ctx context.Context, in *BigInt, opts ...grpc.CallOption) (*DealChangeRequestsReply, error)
	GetWorkers(ctx context.Context, in *WorkersRequest, opts ...grpc.CallOption) (*WorkersReply, error)
}

type dWHClient struct {
	cc *grpc.ClientConn
}

func NewDWHClient(cc *grpc.ClientConn) DWHClient {
	return &dWHClient{cc}
}

func (c *dWHClient) GetDeals(ctx context.Context, in *DealsRequest, opts ...grpc.CallOption) (*DWHDealsReply, error) {
	out := new(DWHDealsReply)
	err := grpc.Invoke(ctx, "/sonm.DWH/GetDeals", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dWHClient) GetDealDetails(ctx context.Context, in *BigInt, opts ...grpc.CallOption) (*DWHDeal, error) {
	out := new(DWHDeal)
	err := grpc.Invoke(ctx, "/sonm.DWH/GetDealDetails", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dWHClient) GetDealConditions(ctx context.Context, in *DealConditionsRequest, opts ...grpc.CallOption) (*DealConditionsReply, error) {
	out := new(DealConditionsReply)
	err := grpc.Invoke(ctx, "/sonm.DWH/GetDealConditions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dWHClient) GetOrders(ctx context.Context, in *OrdersRequest, opts ...grpc.CallOption) (*DWHOrdersReply, error) {
	out := new(DWHOrdersReply)
	err := grpc.Invoke(ctx, "/sonm.DWH/GetOrders", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dWHClient) GetMatchingOrders(ctx context.Context, in *MatchingOrdersRequest, opts ...grpc.CallOption) (*DWHOrdersReply, error) {
	out := new(DWHOrdersReply)
	err := grpc.Invoke(ctx, "/sonm.DWH/GetMatchingOrders", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dWHClient) GetOrderDetails(ctx context.Context, in *BigInt, opts ...grpc.CallOption) (*DWHOrder, error) {
	out := new(DWHOrder)
	err := grpc.Invoke(ctx, "/sonm.DWH/GetOrderDetails", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dWHClient) GetProfiles(ctx context.Context, in *ProfilesRequest, opts ...grpc.CallOption) (*ProfilesReply, error) {
	out := new(ProfilesReply)
	err := grpc.Invoke(ctx, "/sonm.DWH/GetProfiles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dWHClient) GetProfileInfo(ctx context.Context, in *EthID, opts ...grpc.CallOption) (*Profile, error) {
	out := new(Profile)
	err := grpc.Invoke(ctx, "/sonm.DWH/GetProfileInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dWHClient) GetBlacklist(ctx context.Context, in *BlacklistRequest, opts ...grpc.CallOption) (*BlacklistReply, error) {
	out := new(BlacklistReply)
	err := grpc.Invoke(ctx, "/sonm.DWH/GetBlacklist", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dWHClient) GetValidators(ctx context.Context, in *ValidatorsRequest, opts ...grpc.CallOption) (*ValidatorsReply, error) {
	out := new(ValidatorsReply)
	err := grpc.Invoke(ctx, "/sonm.DWH/GetValidators", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dWHClient) GetDealChangeRequests(ctx context.Context, in *BigInt, opts ...grpc.CallOption) (*DealChangeRequestsReply, error) {
	out := new(DealChangeRequestsReply)
	err := grpc.Invoke(ctx, "/sonm.DWH/GetDealChangeRequests", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dWHClient) GetWorkers(ctx context.Context, in *WorkersRequest, opts ...grpc.CallOption) (*WorkersReply, error) {
	out := new(WorkersReply)
	err := grpc.Invoke(ctx, "/sonm.DWH/GetWorkers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DWH service

type DWHServer interface {
	GetDeals(context.Context, *DealsRequest) (*DWHDealsReply, error)
	GetDealDetails(context.Context, *BigInt) (*DWHDeal, error)
	GetDealConditions(context.Context, *DealConditionsRequest) (*DealConditionsReply, error)
	GetOrders(context.Context, *OrdersRequest) (*DWHOrdersReply, error)
	GetMatchingOrders(context.Context, *MatchingOrdersRequest) (*DWHOrdersReply, error)
	GetOrderDetails(context.Context, *BigInt) (*DWHOrder, error)
	GetProfiles(context.Context, *ProfilesRequest) (*ProfilesReply, error)
	GetProfileInfo(context.Context, *EthID) (*Profile, error)
	GetBlacklist(context.Context, *BlacklistRequest) (*BlacklistReply, error)
	GetValidators(context.Context, *ValidatorsRequest) (*ValidatorsReply, error)
	GetDealChangeRequests(context.Context, *BigInt) (*DealChangeRequestsReply, error)
	GetWorkers(context.Context, *WorkersRequest) (*WorkersReply, error)
}

func RegisterDWHServer(s *grpc.Server, srv DWHServer) {
	s.RegisterService(&_DWH_serviceDesc, srv)
}

func _DWH_GetDeals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DealsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DWHServer).GetDeals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.DWH/GetDeals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DWHServer).GetDeals(ctx, req.(*DealsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DWH_GetDealDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BigInt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DWHServer).GetDealDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.DWH/GetDealDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DWHServer).GetDealDetails(ctx, req.(*BigInt))
	}
	return interceptor(ctx, in, info, handler)
}

func _DWH_GetDealConditions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DealConditionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DWHServer).GetDealConditions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.DWH/GetDealConditions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DWHServer).GetDealConditions(ctx, req.(*DealConditionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DWH_GetOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DWHServer).GetOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.DWH/GetOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DWHServer).GetOrders(ctx, req.(*OrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DWH_GetMatchingOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchingOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DWHServer).GetMatchingOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.DWH/GetMatchingOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DWHServer).GetMatchingOrders(ctx, req.(*MatchingOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DWH_GetOrderDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BigInt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DWHServer).GetOrderDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.DWH/GetOrderDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DWHServer).GetOrderDetails(ctx, req.(*BigInt))
	}
	return interceptor(ctx, in, info, handler)
}

func _DWH_GetProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DWHServer).GetProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.DWH/GetProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DWHServer).GetProfiles(ctx, req.(*ProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DWH_GetProfileInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EthID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DWHServer).GetProfileInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.DWH/GetProfileInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DWHServer).GetProfileInfo(ctx, req.(*EthID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DWH_GetBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlacklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DWHServer).GetBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.DWH/GetBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DWHServer).GetBlacklist(ctx, req.(*BlacklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DWH_GetValidators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DWHServer).GetValidators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.DWH/GetValidators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DWHServer).GetValidators(ctx, req.(*ValidatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DWH_GetDealChangeRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BigInt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DWHServer).GetDealChangeRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.DWH/GetDealChangeRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DWHServer).GetDealChangeRequests(ctx, req.(*BigInt))
	}
	return interceptor(ctx, in, info, handler)
}

func _DWH_GetWorkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DWHServer).GetWorkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.DWH/GetWorkers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DWHServer).GetWorkers(ctx, req.(*WorkersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DWH_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sonm.DWH",
	HandlerType: (*DWHServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDeals",
			Handler:    _DWH_GetDeals_Handler,
		},
		{
			MethodName: "GetDealDetails",
			Handler:    _DWH_GetDealDetails_Handler,
		},
		{
			MethodName: "GetDealConditions",
			Handler:    _DWH_GetDealConditions_Handler,
		},
		{
			MethodName: "GetOrders",
			Handler:    _DWH_GetOrders_Handler,
		},
		{
			MethodName: "GetMatchingOrders",
			Handler:    _DWH_GetMatchingOrders_Handler,
		},
		{
			MethodName: "GetOrderDetails",
			Handler:    _DWH_GetOrderDetails_Handler,
		},
		{
			MethodName: "GetProfiles",
			Handler:    _DWH_GetProfiles_Handler,
		},
		{
			MethodName: "GetProfileInfo",
			Handler:    _DWH_GetProfileInfo_Handler,
		},
		{
			MethodName: "GetBlacklist",
			Handler:    _DWH_GetBlacklist_Handler,
		},
		{
			MethodName: "GetValidators",
			Handler:    _DWH_GetValidators_Handler,
		},
		{
			MethodName: "GetDealChangeRequests",
			Handler:    _DWH_GetDealChangeRequests_Handler,
		},
		{
			MethodName: "GetWorkers",
			Handler:    _DWH_GetWorkers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dwh.proto",
}

// Begin grpccmd
var _ = grpccmd.RunE

// DWH
var _DWHCmd = &cobra.Command{
	Use:   "dWH [method]",
	Short: "Subcommand for the DWH service.",
}

var _DWH_GetDealsCmd = &cobra.Command{
	Use:   "getDeals",
	Short: "Make the GetDeals method call, input-type: sonm.DealsRequest output-type: sonm.DWHDealsReply",
	RunE: grpccmd.RunE(
		"GetDeals",
		"sonm.DealsRequest",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewDWHClient(cc)
		},
	),
}

var _DWH_GetDealsCmd_gen = &cobra.Command{
	Use:   "getDeals-gen",
	Short: "Generate JSON for method call of GetDeals (input-type: sonm.DealsRequest)",
	RunE:  grpccmd.TypeToJson("sonm.DealsRequest"),
}

var _DWH_GetDealDetailsCmd = &cobra.Command{
	Use:   "getDealDetails",
	Short: "Make the GetDealDetails method call, input-type: sonm.BigInt output-type: sonm.DWHDeal",
	RunE: grpccmd.RunE(
		"GetDealDetails",
		"sonm.BigInt",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewDWHClient(cc)
		},
	),
}

var _DWH_GetDealDetailsCmd_gen = &cobra.Command{
	Use:   "getDealDetails-gen",
	Short: "Generate JSON for method call of GetDealDetails (input-type: sonm.BigInt)",
	RunE:  grpccmd.TypeToJson("sonm.BigInt"),
}

var _DWH_GetDealConditionsCmd = &cobra.Command{
	Use:   "getDealConditions",
	Short: "Make the GetDealConditions method call, input-type: sonm.DealConditionsRequest output-type: sonm.DealConditionsReply",
	RunE: grpccmd.RunE(
		"GetDealConditions",
		"sonm.DealConditionsRequest",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewDWHClient(cc)
		},
	),
}

var _DWH_GetDealConditionsCmd_gen = &cobra.Command{
	Use:   "getDealConditions-gen",
	Short: "Generate JSON for method call of GetDealConditions (input-type: sonm.DealConditionsRequest)",
	RunE:  grpccmd.TypeToJson("sonm.DealConditionsRequest"),
}

var _DWH_GetOrdersCmd = &cobra.Command{
	Use:   "getOrders",
	Short: "Make the GetOrders method call, input-type: sonm.OrdersRequest output-type: sonm.DWHOrdersReply",
	RunE: grpccmd.RunE(
		"GetOrders",
		"sonm.OrdersRequest",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewDWHClient(cc)
		},
	),
}

var _DWH_GetOrdersCmd_gen = &cobra.Command{
	Use:   "getOrders-gen",
	Short: "Generate JSON for method call of GetOrders (input-type: sonm.OrdersRequest)",
	RunE:  grpccmd.TypeToJson("sonm.OrdersRequest"),
}

var _DWH_GetMatchingOrdersCmd = &cobra.Command{
	Use:   "getMatchingOrders",
	Short: "Make the GetMatchingOrders method call, input-type: sonm.MatchingOrdersRequest output-type: sonm.DWHOrdersReply",
	RunE: grpccmd.RunE(
		"GetMatchingOrders",
		"sonm.MatchingOrdersRequest",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewDWHClient(cc)
		},
	),
}

var _DWH_GetMatchingOrdersCmd_gen = &cobra.Command{
	Use:   "getMatchingOrders-gen",
	Short: "Generate JSON for method call of GetMatchingOrders (input-type: sonm.MatchingOrdersRequest)",
	RunE:  grpccmd.TypeToJson("sonm.MatchingOrdersRequest"),
}

var _DWH_GetOrderDetailsCmd = &cobra.Command{
	Use:   "getOrderDetails",
	Short: "Make the GetOrderDetails method call, input-type: sonm.BigInt output-type: sonm.DWHOrder",
	RunE: grpccmd.RunE(
		"GetOrderDetails",
		"sonm.BigInt",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewDWHClient(cc)
		},
	),
}

var _DWH_GetOrderDetailsCmd_gen = &cobra.Command{
	Use:   "getOrderDetails-gen",
	Short: "Generate JSON for method call of GetOrderDetails (input-type: sonm.BigInt)",
	RunE:  grpccmd.TypeToJson("sonm.BigInt"),
}

var _DWH_GetProfilesCmd = &cobra.Command{
	Use:   "getProfiles",
	Short: "Make the GetProfiles method call, input-type: sonm.ProfilesRequest output-type: sonm.ProfilesReply",
	RunE: grpccmd.RunE(
		"GetProfiles",
		"sonm.ProfilesRequest",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewDWHClient(cc)
		},
	),
}

var _DWH_GetProfilesCmd_gen = &cobra.Command{
	Use:   "getProfiles-gen",
	Short: "Generate JSON for method call of GetProfiles (input-type: sonm.ProfilesRequest)",
	RunE:  grpccmd.TypeToJson("sonm.ProfilesRequest"),
}

var _DWH_GetProfileInfoCmd = &cobra.Command{
	Use:   "getProfileInfo",
	Short: "Make the GetProfileInfo method call, input-type: sonm.EthID output-type: sonm.Profile",
	RunE: grpccmd.RunE(
		"GetProfileInfo",
		"sonm.EthID",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewDWHClient(cc)
		},
	),
}

var _DWH_GetProfileInfoCmd_gen = &cobra.Command{
	Use:   "getProfileInfo-gen",
	Short: "Generate JSON for method call of GetProfileInfo (input-type: sonm.EthID)",
	RunE:  grpccmd.TypeToJson("sonm.EthID"),
}

var _DWH_GetBlacklistCmd = &cobra.Command{
	Use:   "getBlacklist",
	Short: "Make the GetBlacklist method call, input-type: sonm.BlacklistRequest output-type: sonm.BlacklistReply",
	RunE: grpccmd.RunE(
		"GetBlacklist",
		"sonm.BlacklistRequest",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewDWHClient(cc)
		},
	),
}

var _DWH_GetBlacklistCmd_gen = &cobra.Command{
	Use:   "getBlacklist-gen",
	Short: "Generate JSON for method call of GetBlacklist (input-type: sonm.BlacklistRequest)",
	RunE:  grpccmd.TypeToJson("sonm.BlacklistRequest"),
}

var _DWH_GetValidatorsCmd = &cobra.Command{
	Use:   "getValidators",
	Short: "Make the GetValidators method call, input-type: sonm.ValidatorsRequest output-type: sonm.ValidatorsReply",
	RunE: grpccmd.RunE(
		"GetValidators",
		"sonm.ValidatorsRequest",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewDWHClient(cc)
		},
	),
}

var _DWH_GetValidatorsCmd_gen = &cobra.Command{
	Use:   "getValidators-gen",
	Short: "Generate JSON for method call of GetValidators (input-type: sonm.ValidatorsRequest)",
	RunE:  grpccmd.TypeToJson("sonm.ValidatorsRequest"),
}

var _DWH_GetDealChangeRequestsCmd = &cobra.Command{
	Use:   "getDealChangeRequests",
	Short: "Make the GetDealChangeRequests method call, input-type: sonm.BigInt output-type: sonm.DealChangeRequestsReply",
	RunE: grpccmd.RunE(
		"GetDealChangeRequests",
		"sonm.BigInt",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewDWHClient(cc)
		},
	),
}

var _DWH_GetDealChangeRequestsCmd_gen = &cobra.Command{
	Use:   "getDealChangeRequests-gen",
	Short: "Generate JSON for method call of GetDealChangeRequests (input-type: sonm.BigInt)",
	RunE:  grpccmd.TypeToJson("sonm.BigInt"),
}

var _DWH_GetWorkersCmd = &cobra.Command{
	Use:   "getWorkers",
	Short: "Make the GetWorkers method call, input-type: sonm.WorkersRequest output-type: sonm.WorkersReply",
	RunE: grpccmd.RunE(
		"GetWorkers",
		"sonm.WorkersRequest",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewDWHClient(cc)
		},
	),
}

var _DWH_GetWorkersCmd_gen = &cobra.Command{
	Use:   "getWorkers-gen",
	Short: "Generate JSON for method call of GetWorkers (input-type: sonm.WorkersRequest)",
	RunE:  grpccmd.TypeToJson("sonm.WorkersRequest"),
}

// Register commands with the root command and service command
func init() {
	grpccmd.RegisterServiceCmd(_DWHCmd)
	_DWHCmd.AddCommand(
		_DWH_GetDealsCmd,
		_DWH_GetDealsCmd_gen,
		_DWH_GetDealDetailsCmd,
		_DWH_GetDealDetailsCmd_gen,
		_DWH_GetDealConditionsCmd,
		_DWH_GetDealConditionsCmd_gen,
		_DWH_GetOrdersCmd,
		_DWH_GetOrdersCmd_gen,
		_DWH_GetMatchingOrdersCmd,
		_DWH_GetMatchingOrdersCmd_gen,
		_DWH_GetOrderDetailsCmd,
		_DWH_GetOrderDetailsCmd_gen,
		_DWH_GetProfilesCmd,
		_DWH_GetProfilesCmd_gen,
		_DWH_GetProfileInfoCmd,
		_DWH_GetProfileInfoCmd_gen,
		_DWH_GetBlacklistCmd,
		_DWH_GetBlacklistCmd_gen,
		_DWH_GetValidatorsCmd,
		_DWH_GetValidatorsCmd_gen,
		_DWH_GetDealChangeRequestsCmd,
		_DWH_GetDealChangeRequestsCmd_gen,
		_DWH_GetWorkersCmd,
		_DWH_GetWorkersCmd_gen,
	)
}

// End grpccmd

func init() { proto.RegisterFile("dwh.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 2208 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x59, 0xcd, 0x73, 0xdb, 0xb8,
	0x15, 0xb7, 0xbe, 0xa9, 0xa7, 0x4f, 0xc3, 0x76, 0xa2, 0x75, 0xd3, 0x8c, 0xc3, 0xfd, 0xa8, 0xe3,
	0x26, 0xce, 0xc6, 0x49, 0xd3, 0xec, 0x36, 0xb3, 0x1d, 0x47, 0x4a, 0x65, 0x6d, 0xe3, 0xd8, 0x4b,
	0xdb, 0xf5, 0x4c, 0x6f, 0xb4, 0x08, 0x59, 0x18, 0x53, 0xa4, 0x4a, 0x42, 0xce, 0xaa, 0xd7, 0x5e,
	0xf7, 0x4f, 0xe8, 0xa5, 0x97, 0x5e, 0x7a, 0xee, 0xf4, 0xd6, 0x6b, 0xff, 0x8c, 0x9e, 0xfa, 0x67,
	0x74, 0xa6, 0x03, 0x10, 0x00, 0x41, 0x8a, 0x72, 0xe2, 0x43, 0x67, 0xf6, 0x26, 0xbc, 0xf7, 0x7b,
	0xc0, 0xe3, 0xc3, 0xfb, 0x84, 0xa0, 0xea, 0xbc, 0x1f, 0xef, 0x4e, 0x03, 0x9f, 0xfa, 0xa8, 0x18,
	0xfa, 0xde, 0x64, 0xb3, 0x7e, 0x41, 0x2e, 0x89, 0x47, 0x23, 0xda, 0xe6, 0xea, 0xc4, 0x0e, 0xae,
	0x30, 0x9d, 0xba, 0xf6, 0x10, 0x0b, 0x52, 0x8b, 0x78, 0x0c, 0xe8, 0x11, 0x5b, 0x12, 0x28, 0x99,
	0xe0, 0x90, 0xda, 0x93, 0x69, 0x44, 0x30, 0x8f, 0xa0, 0x71, 0xe2, 0x07, 0x94, 0x78, 0x97, 0x47,
	0x53, 0x4a, 0x7c, 0x0f, 0xad, 0x43, 0x69, 0x44, 0xb0, 0xeb, 0x74, 0x72, 0x5b, 0xb9, 0xed, 0xaa,
	0x15, 0x2d, 0xd0, 0x36, 0x94, 0xfc, 0xc0, 0xc1, 0x41, 0x27, 0xbf, 0x95, 0xdb, 0x6e, 0xee, 0xa1,
	0x5d, 0xb6, 0xed, 0xae, 0x94, 0x64, 0x1c, 0x2b, 0x02, 0x98, 0x7f, 0x2f, 0x41, 0xbd, 0x87, 0x6d,
	0x37, 0xb4, 0xf0, 0x1f, 0x66, 0x38, 0xa4, 0x68, 0x1b, 0xca, 0x21, 0xb5, 0xe9, 0x2c, 0xe4, 0x3b,
	0x36, 0xf7, 0xda, 0x91, 0x2c, 0xc3, 0x9c, 0x70, 0xba, 0x25, 0xf8, 0xe8, 0x4b, 0x80, 0x70, 0x36,
	0x9d, 0xba, 0x04, 0x07, 0x83, 0x1e, 0x3f, 0xa9, 0x26, 0xd1, 0x6f, 0xe8, 0x78, 0xdf, 0x71, 0x02,
	0x1c, 0x86, 0x96, 0x86, 0x61, 0x12, 0x43, 0xdf, 0x0b, 0x67, 0x13, 0x2e, 0x51, 0x58, 0x26, 0x11,
	0x63, 0xd0, 0x23, 0x30, 0x26, 0x76, 0x48, 0x39, 0xbe, 0xb8, 0x04, 0xaf, 0x10, 0xc8, 0x84, 0x92,
	0x1d, 0x5e, 0x0d, 0x7a, 0x9d, 0x12, 0x87, 0xd6, 0x23, 0xe8, 0x6b, 0x72, 0x39, 0xf0, 0xa8, 0x15,
	0xb1, 0x18, 0xe6, 0x82, 0x38, 0x83, 0x5e, 0xa7, 0x9c, 0x85, 0xe1, 0x2c, 0xb4, 0x0b, 0x86, 0x33,
	0x0b, 0x6c, 0x66, 0xe0, 0x4e, 0x85, 0xc3, 0x84, 0x05, 0x0f, 0xed, 0xef, 0x0f, 0x89, 0x77, 0x46,
	0x3c, 0xfa, 0xe2, 0xb9, 0xa5, 0x30, 0xe8, 0x73, 0x28, 0x4d, 0x03, 0x32, 0xc4, 0x1d, 0x83, 0x83,
	0x5b, 0x3a, 0xf8, 0x35, 0xb9, 0xb4, 0x22, 0x2e, 0xfa, 0x39, 0x18, 0x1e, 0xa6, 0x23, 0xd7, 0xbe,
	0x0c, 0x3b, 0x55, 0x1d, 0xd9, 0x9d, 0x4c, 0xe5, 0x9e, 0x12, 0x80, 0x7e, 0x0d, 0x6d, 0xa6, 0xb0,
	0x83, 0x3d, 0x4a, 0xe8, 0xfc, 0x2d, 0xbe, 0xc6, 0x6e, 0x07, 0xf8, 0x8d, 0xac, 0x45, 0x42, 0x09,
	0x96, 0xb5, 0x00, 0x66, 0x1b, 0xb0, 0xaf, 0x49, 0x6c, 0x50, 0xbb, 0x61, 0x83, 0x34, 0x18, 0xbd,
	0x02, 0xb8, 0xc0, 0xde, 0x70, 0xcc, 0xfc, 0x34, 0xec, 0xd4, 0xb9, 0xc2, 0xf7, 0x84, 0x37, 0x9c,
	0x1f, 0xbc, 0x96, 0xac, 0xae, 0xef, 0x39, 0x84, 0x99, 0x21, 0xb4, 0x34, 0x3c, 0x73, 0x4c, 0x97,
	0x4c, 0x08, 0xed, 0x34, 0xb6, 0x72, 0xdb, 0x45, 0x2b, 0x5a, 0xa0, 0x3b, 0x50, 0xf6, 0x47, 0xa3,
	0x10, 0xd3, 0x4e, 0x93, 0x93, 0xc5, 0x0a, 0x3d, 0x01, 0x23, 0x8c, 0xbc, 0x33, 0xec, 0xb4, 0xb6,
	0x0a, 0xdb, 0x35, 0xa9, 0x64, 0xc2, 0xdb, 0x2d, 0x05, 0x32, 0x9f, 0x43, 0xa3, 0x77, 0x7e, 0x20,
	0x3c, 0x77, 0xea, 0xce, 0xd1, 0xa7, 0x50, 0x72, 0xd8, 0xaa, 0x93, 0xe3, 0xe2, 0x0d, 0xa5, 0x28,
	0xc3, 0x58, 0x11, 0xcf, 0xfc, 0x47, 0x1e, 0x2a, 0x82, 0x84, 0xee, 0x43, 0x91, 0x11, 0xb9, 0x9b,
	0xd7, 0xf6, 0x20, 0x76, 0x73, 0x8b, 0xd3, 0xd1, 0xa6, 0x76, 0x5b, 0x79, 0xae, 0x6c, 0x7c, 0x39,
	0x3b, 0x19, 0x97, 0x53, 0xe0, 0x98, 0xc5, 0x7b, 0xd8, 0xc9, 0xb8, 0x87, 0x62, 0x84, 0x5d, 0x30,
	0xf9, 0x1e, 0xac, 0xcb, 0x70, 0xe9, 0xe2, 0x80, 0x92, 0x11, 0x19, 0xda, 0x14, 0x87, 0xdc, 0x9f,
	0xeb, 0x56, 0x26, 0x8f, 0xc9, 0xc8, 0x80, 0x49, 0xc8, 0x94, 0x23, 0x99, 0x2c, 0x1e, 0xfa, 0x12,
	0xd6, 0xec, 0x21, 0x25, 0xd7, 0xb8, 0x3b, 0xb6, 0xbd, 0x4b, 0x2c, 0x62, 0x9f, 0xfb, 0xba, 0x61,
	0x65, 0xb1, 0xcc, 0x3f, 0xe7, 0x60, 0x83, 0x19, 0x47, 0xbb, 0x6d, 0x91, 0x30, 0x3e, 0x83, 0x32,
	0xb3, 0xd7, 0xa0, 0x27, 0x2c, 0x99, 0x8c, 0x28, 0xc1, 0x8b, 0xdd, 0x21, 0x9f, 0xed, 0x0e, 0x85,
	0xa5, 0xee, 0x50, 0xfc, 0x18, 0x77, 0xf8, 0x16, 0xd6, 0xd2, 0xda, 0x31, 0xa7, 0x78, 0xc6, 0x13,
	0x8e, 0x20, 0x09, 0xcf, 0x58, 0x8b, 0x6f, 0x5a, 0xc1, 0x2d, 0x0d, 0x66, 0xfe, 0x50, 0x82, 0x06,
	0xcf, 0x91, 0xb7, 0xfc, 0xc4, 0x4f, 0xa1, 0x48, 0xe7, 0x53, 0x2c, 0x72, 0xae, 0x08, 0x6d, 0xbe,
	0xd1, 0xe9, 0x7c, 0x8a, 0x2d, 0xce, 0x44, 0x0f, 0x55, 0x7a, 0x2d, 0x70, 0xd8, 0xaa, 0x06, 0x4b,
	0xe5, 0xd7, 0x47, 0x60, 0xd8, 0x33, 0x3a, 0xf6, 0x6f, 0xcc, 0x7d, 0x12, 0x81, 0x5e, 0x42, 0x73,
	0xe8, 0xcf, 0x3c, 0x8a, 0x83, 0xa9, 0x1d, 0xd0, 0xb9, 0x4a, 0x82, 0x8b, 0x32, 0x29, 0x5c, 0x22,
	0xdb, 0x95, 0x6f, 0x93, 0xed, 0xaa, 0x1f, 0x9d, 0xed, 0x6a, 0x1f, 0xca, 0x76, 0x7d, 0x58, 0x1f,
	0x06, 0xd8, 0xa6, 0x7e, 0x90, 0x0c, 0x94, 0xfa, 0xf2, 0x84, 0x95, 0x29, 0x90, 0x4a, 0x5a, 0x8d,
	0x5b, 0x26, 0xad, 0x67, 0x50, 0xe5, 0xbb, 0x62, 0xe7, 0xf4, 0x84, 0x67, 0xa8, 0xda, 0xde, 0x86,
	0xfe, 0x79, 0xa7, 0xb2, 0x1c, 0x5b, 0x31, 0x2e, 0x76, 0xed, 0x56, 0xb6, 0x6b, 0xb7, 0x97, 0xba,
	0xf6, 0xea, 0xc7, 0xb8, 0xf6, 0x10, 0x36, 0x0e, 0x6d, 0x3a, 0x1c, 0xcb, 0xca, 0xad, 0xbc, 0xf2,
	0x1e, 0xe4, 0x89, 0x93, 0xe9, 0x91, 0x79, 0xe2, 0xdc, 0x2e, 0xe0, 0xcc, 0x97, 0xd0, 0xec, 0x9d,
	0x1f, 0xc8, 0xfd, 0x59, 0xe8, 0x7c, 0x01, 0x65, 0xde, 0x21, 0xc8, 0xb0, 0x69, 0x2a, 0x23, 0x46,
	0xfd, 0x83, 0xe0, 0x9a, 0x3f, 0xe4, 0xc1, 0x90, 0x44, 0xf4, 0x40, 0xf6, 0x1d, 0x91, 0x56, 0x35,
	0xcd, 0xb9, 0x45, 0xc3, 0xc1, 0xd3, 0x55, 0xd6, 0x4d, 0x47, 0x6a, 0x66, 0x5f, 0xea, 0x16, 0xd4,
	0x04, 0xfd, 0x9d, 0x3d, 0xc1, 0x5c, 0xf5, 0xaa, 0xa5, 0x93, 0xd0, 0x17, 0xd0, 0x14, 0xcb, 0x2e,
	0x73, 0xee, 0x60, 0xce, 0x23, 0xa6, 0x6a, 0xa5, 0xa8, 0x2c, 0xf1, 0x49, 0xca, 0x62, 0x7e, 0xcd,
	0x62, 0xa1, 0xc7, 0x50, 0xed, 0x2a, 0x97, 0x28, 0xeb, 0x7e, 0xac, 0x39, 0x83, 0x42, 0x98, 0x7f,
	0x29, 0x40, 0x23, 0x91, 0x5a, 0x50, 0x53, 0x5d, 0x53, 0x91, 0x5f, 0xcc, 0x8f, 0xaf, 0x6d, 0xda,
	0xd4, 0x12, 0x40, 0x29, 0xaa, 0x74, 0x2a, 0xd8, 0x4d, 0x19, 0xec, 0x99, 0xed, 0x52, 0x14, 0xe9,
	0x8f, 0xa1, 0x1a, 0x52, 0x3b, 0xa0, 0xcc, 0x20, 0xa2, 0x5f, 0x5a, 0x34, 0x91, 0x42, 0xa0, 0x87,
	0x50, 0xc1, 0x9e, 0xc3, 0xc1, 0x46, 0x36, 0x58, 0xf2, 0xd1, 0x2e, 0xd4, 0xa8, 0x4f, 0x6d, 0xf7,
	0xd8, 0x9e, 0xfb, 0x33, 0x2a, 0x12, 0x4e, 0x52, 0x07, 0x1d, 0xa0, 0x25, 0x6a, 0x58, 0x9e, 0xa8,
	0xcd, 0x3f, 0xe5, 0xa0, 0xda, 0x3b, 0x3f, 0x38, 0xf7, 0x83, 0x2b, 0x1c, 0x24, 0x6c, 0x95, 0xfb,
	0xa0, 0xad, 0x76, 0xa0, 0x12, 0xba, 0xf6, 0x35, 0xbe, 0xe1, 0xea, 0x24, 0x00, 0xdd, 0x83, 0xea,
	0xd0, 0xf7, 0x46, 0x24, 0x98, 0x60, 0x87, 0x5f, 0x9b, 0x61, 0xc5, 0x04, 0xf3, 0x9f, 0x79, 0x68,
	0x1d, 0x07, 0xfe, 0x88, 0xb8, 0x58, 0x85, 0xf4, 0xe7, 0x50, 0x0c, 0x7c, 0x17, 0x8b, 0xd6, 0x5b,
	0xd4, 0x06, 0x01, 0xb2, 0x7c, 0x17, 0x5b, 0x9c, 0x8d, 0xbe, 0x82, 0x06, 0x59, 0x08, 0x9e, 0x25,
	0x69, 0x32, 0x89, 0x44, 0x1d, 0xa8, 0x0c, 0x45, 0x84, 0x44, 0x61, 0x24, 0x97, 0x08, 0x41, 0xd1,
	0x63, 0xd1, 0x15, 0x05, 0x0e, 0xff, 0x8d, 0x5e, 0x41, 0xf3, 0xc2, 0xb5, 0x87, 0x57, 0x2e, 0x09,
	0xe9, 0x77, 0x33, 0x1c, 0xcc, 0x45, 0x51, 0x59, 0x17, 0x76, 0x4d, 0xf0, 0xac, 0x14, 0x36, 0x4e,
	0x41, 0xe5, 0xec, 0x14, 0x54, 0x59, 0x9a, 0x18, 0x8d, 0x8f, 0x49, 0x8c, 0x5f, 0x43, 0x23, 0xb6,
	0x1f, 0x4b, 0x59, 0x0f, 0xc1, 0x98, 0x0a, 0x42, 0xb2, 0x0b, 0x94, 0x16, 0x54, 0x6c, 0xf3, 0xdf,
	0x79, 0xa8, 0x08, 0x2a, 0x9b, 0x78, 0xce, 0xc2, 0x1b, 0xaf, 0x5f, 0xf0, 0xd1, 0x67, 0xd0, 0xc8,
	0x4a, 0x5a, 0x49, 0x22, 0x33, 0xa4, 0x96, 0xa6, 0xf8, 0x6f, 0x66, 0xf6, 0x64, 0x62, 0x92, 0x4b,
	0xbe, 0x67, 0xd8, 0xf5, 0x83, 0xa9, 0xaf, 0x45, 0xa0, 0x61, 0x25, 0x89, 0x2c, 0xbf, 0x0d, 0x42,
	0xa6, 0x30, 0x0e, 0x43, 0xe2, 0x7b, 0xb6, 0xcb, 0x6d, 0x6a, 0x58, 0x29, 0x2a, 0x32, 0xa1, 0x9e,
	0x48, 0x6c, 0x15, 0x7e, 0x58, 0x82, 0x86, 0xee, 0x03, 0x44, 0x1d, 0xde, 0x7e, 0x78, 0x15, 0xf2,
	0x10, 0x2c, 0x5a, 0x1a, 0x25, 0xe6, 0xbf, 0x26, 0x4e, 0x34, 0xa8, 0x28, 0x3e, 0xa3, 0x30, 0x8d,
	0x49, 0xa8, 0xae, 0x1e, 0x3b, 0x3c, 0xd6, 0x0c, 0x2b, 0x49, 0x34, 0x5d, 0x68, 0xab, 0xa5, 0x74,
	0xef, 0x1d, 0xa8, 0xf8, 0xef, 0xbd, 0x1b, 0x4d, 0x2d, 0x01, 0xb7, 0xac, 0x5f, 0xbf, 0x87, 0xa6,
	0x76, 0x1a, 0x73, 0x86, 0xdb, 0x9c, 0x75, 0x0f, 0xaa, 0x76, 0x44, 0xc3, 0xac, 0xd7, 0x2f, 0x6c,
	0x57, 0xad, 0x98, 0x60, 0xfe, 0x2d, 0x07, 0xab, 0xbf, 0xb3, 0x5d, 0xe2, 0xb0, 0xda, 0xa0, 0x42,
	0xf5, 0x97, 0xd0, 0xbc, 0x96, 0xc4, 0xc8, 0x19, 0x72, 0xd9, 0x4d, 0x4e, 0x0a, 0xf6, 0xff, 0xee,
	0x84, 0x5f, 0x43, 0x4b, 0x57, 0x96, 0x99, 0xe2, 0x09, 0x80, 0xd2, 0x41, 0x46, 0x86, 0x50, 0x53,
	0x41, 0x2d, 0x0d, 0x62, 0x76, 0xa1, 0xaa, 0x18, 0x68, 0x4b, 0x6b, 0x33, 0x16, 0x6d, 0x28, 0x5b,
	0x0d, 0x2d, 0x1c, 0xa2, 0x85, 0xf9, 0x0e, 0xee, 0xf2, 0x42, 0xa8, 0x8f, 0x11, 0xaa, 0x2d, 0x37,
	0x02, 0x41, 0x10, 0xea, 0xdc, 0xd5, 0x9a, 0x72, 0x5d, 0xc0, 0x52, 0x40, 0xf3, 0xbf, 0x39, 0x58,
	0x5d, 0xe0, 0x7f, 0xa0, 0x09, 0x8a, 0xeb, 0x41, 0xfe, 0x86, 0xc6, 0xfd, 0x29, 0xd4, 0xc4, 0x29,
	0xac, 0x51, 0x17, 0x8d, 0xf9, 0x42, 0xff, 0xae, 0x63, 0x12, 0x25, 0xb3, 0xb8, 0xac, 0x64, 0x96,
	0x96, 0x97, 0xcc, 0xa7, 0x6a, 0x0c, 0x28, 0xf3, 0xd3, 0x3e, 0x11, 0x5e, 0xa3, 0x7f, 0x5b, 0x72,
	0x1c, 0x30, 0x5d, 0x68, 0x46, 0x15, 0x4b, 0xb9, 0xe0, 0x23, 0x30, 0x0e, 0x3f, 0x58, 0xb9, 0x24,
	0xe2, 0x96, 0x01, 0xf5, 0x15, 0xd4, 0xd5, 0x69, 0x51, 0x6e, 0xad, 0xbc, 0x8f, 0xd6, 0x49, 0x07,
	0x52, 0x75, 0xd4, 0x92, 0x7c, 0xf3, 0x5f, 0x39, 0xa8, 0x69, 0x09, 0xe7, 0x56, 0x91, 0xb8, 0x07,
	0x35, 0xe5, 0x87, 0x37, 0x94, 0x58, 0x1d, 0xc4, 0xa3, 0x97, 0xd2, 0x80, 0x5c, 0xcc, 0x28, 0x16,
	0x5f, 0x11, 0x13, 0x78, 0xb6, 0xca, 0x98, 0xbd, 0x53, 0x65, 0x71, 0x1d, 0x4a, 0xd7, 0xb6, 0x3b,
	0xc3, 0xa2, 0x13, 0x8c, 0x16, 0xe6, 0x5f, 0x4b, 0x70, 0x27, 0x7b, 0x6a, 0x40, 0xdf, 0x40, 0xbb,
	0x7b, 0x7c, 0x76, 0x32, 0x0f, 0xf9, 0xf4, 0x70, 0x38, 0x73, 0x29, 0x11, 0x5f, 0x97, 0x35, 0x3c,
	0x2d, 0x60, 0xd1, 0xd7, 0xd0, 0xd4, 0x68, 0x47, 0x1e, 0x16, 0xdf, 0x9a, 0x25, 0x9d, 0x42, 0xb2,
	0x81, 0xad, 0x7b, 0x7c, 0xd6, 0xf5, 0x03, 0x1c, 0x8a, 0x6e, 0x30, 0x73, 0x60, 0x93, 0x18, 0xf4,
	0x08, 0x2a, 0xd6, 0xfe, 0xe1, 0x09, 0xf9, 0x23, 0x16, 0xcd, 0x60, 0x16, 0x5c, 0x42, 0xd0, 0x73,
	0xa8, 0x9d, 0x50, 0x3f, 0xb0, 0x2f, 0x31, 0x97, 0x28, 0x2d, 0x95, 0xd0, 0x61, 0xe8, 0x05, 0xd4,
	0xdf, 0x61, 0x7a, 0x1a, 0xd8, 0xa3, 0x11, 0x19, 0x0e, 0x6e, 0x1a, 0x24, 0x13, 0x38, 0xf4, 0x12,
	0x1a, 0xf1, 0xfa, 0x68, 0x46, 0x6f, 0x78, 0x6f, 0x4b, 0x02, 0x99, 0x15, 0xfa, 0xec, 0x0b, 0x67,
	0x1e, 0x15, 0x7d, 0x64, 0xa6, 0x15, 0x24, 0x06, 0xed, 0x40, 0xb9, 0x7f, 0x7c, 0x76, 0x88, 0x27,
	0xa2, 0x8d, 0xcc, 0x42, 0x0b, 0x04, 0xbb, 0x9d, 0xfe, 0xf1, 0xd9, 0x1b, 0x3a, 0x3e, 0xb0, 0xc3,
	0x71, 0x60, 0x53, 0x2c, 0xfa, 0xc9, 0xcc, 0xdb, 0x49, 0x22, 0xd1, 0x2b, 0x68, 0xb1, 0x33, 0xed,
	0x30, 0x16, 0xae, 0x2d, 0x15, 0x4e, 0x43, 0x99, 0xf5, 0xfb, 0xc7, 0x67, 0x16, 0x76, 0xc2, 0x31,
	0x19, 0x51, 0xf1, 0xea, 0x96, 0x69, 0x7d, 0x0d, 0x66, 0xee, 0x41, 0x5d, 0x67, 0xa2, 0x36, 0x14,
	0x26, 0xf6, 0xf7, 0x62, 0xe8, 0x60, 0x3f, 0x39, 0x85, 0x78, 0x22, 0xf6, 0xd9, 0x4f, 0xf3, 0xb7,
	0x50, 0x55, 0x33, 0x3b, 0xba, 0x1f, 0x0b, 0xa4, 0x33, 0x16, 0x17, 0xbf, 0x1f, 0x8b, 0x2f, 0xf2,
	0x89, 0x67, 0x9e, 0x43, 0x2b, 0x35, 0x21, 0xa3, 0x07, 0xfa, 0x96, 0x0b, 0x2d, 0x3e, 0xdf, 0xf5,
	0x81, 0xbe, 0x6b, 0x06, 0x84, 0x78, 0xe6, 0xb7, 0x50, 0x55, 0xa5, 0x34, 0x8e, 0xd2, 0xe8, 0xc3,
	0xa2, 0x05, 0xfa, 0x19, 0x18, 0xfe, 0x14, 0x07, 0x2c, 0x1b, 0x88, 0x46, 0xb8, 0xa6, 0x6a, 0xf0,
	0xd1, 0xd4, 0x52, 0x4c, 0xf3, 0x4a, 0x6b, 0x12, 0xa2, 0x0e, 0xf5, 0x36, 0xa9, 0xe9, 0x31, 0x94,
	0x7d, 0x5e, 0x6c, 0xc5, 0x21, 0x1b, 0xa9, 0x1e, 0x58, 0x54, 0x62, 0x01, 0xda, 0x79, 0x00, 0x25,
	0x7e, 0x3e, 0x2a, 0x43, 0xfe, 0xcd, 0x77, 0xed, 0x15, 0x54, 0x81, 0x42, 0xff, 0xf4, 0x4d, 0x3b,
	0xc7, 0x7e, 0xbc, 0x3d, 0x7d, 0xd3, 0xce, 0xef, 0x3c, 0x80, 0xba, 0xfe, 0x24, 0xcf, 0x18, 0xfb,
	0xe1, 0xb0, 0xbd, 0x82, 0x0c, 0x28, 0xf6, 0x70, 0x38, 0x6c, 0xe7, 0x76, 0x5e, 0x40, 0x4d, 0x6b,
	0xff, 0x51, 0x0d, 0x2a, 0xfb, 0xde, 0x9c, 0xfd, 0x6c, 0xaf, 0xa0, 0x3a, 0x18, 0x27, 0x62, 0x48,
	0x6c, 0xe7, 0xd8, 0xaa, 0x2b, 0x06, 0xc0, 0x76, 0x7e, 0xe7, 0x2d, 0xb4, 0x52, 0x8a, 0xa1, 0x35,
	0x68, 0x9d, 0x13, 0x3a, 0xf6, 0x67, 0x54, 0x3e, 0x27, 0xb4, 0x57, 0x10, 0x82, 0xe6, 0xc0, 0x1b,
	0xba, 0x33, 0x07, 0xef, 0x7b, 0xce, 0xa1, 0x1d, 0x5c, 0xb5, 0x73, 0xa8, 0x0d, 0xf5, 0x23, 0xcf,
	0x9d, 0x2b, 0x54, 0x7e, 0xef, 0x3f, 0x25, 0x28, 0xf4, 0xce, 0x0f, 0xd0, 0x2f, 0xc0, 0xe8, 0x63,
	0xca, 0x1f, 0x5d, 0x11, 0x8a, 0x2b, 0xb6, 0x2c, 0x48, 0x9b, 0x6b, 0x89, 0x47, 0xd7, 0xa8, 0x72,
	0x98, 0x2b, 0xe8, 0x09, 0x34, 0x85, 0x58, 0x0f, 0x53, 0x9b, 0xb8, 0x21, 0x4a, 0x78, 0xd0, 0x66,
	0xf2, 0xad, 0xd6, 0x5c, 0x41, 0x87, 0xb0, 0x2a, 0x04, 0xb4, 0x8c, 0xfb, 0x93, 0x8c, 0x77, 0x3b,
	0x75, 0xf2, 0x27, 0xd9, 0xcc, 0xe8, 0xfc, 0x97, 0x50, 0xed, 0x63, 0x1a, 0x3d, 0x6e, 0xa0, 0x35,
	0xad, 0xae, 0x2b, 0xf1, 0xf5, 0xe4, 0xe3, 0x86, 0x92, 0x3c, 0xe0, 0x8a, 0x24, 0x9f, 0x5f, 0xa4,
	0x22, 0x99, 0x8f, 0x32, 0x4b, 0x77, 0x7a, 0x0a, 0x2d, 0xa9, 0x43, 0xb6, 0x11, 0x52, 0xef, 0x2b,
	0xe6, 0x0a, 0xfa, 0x15, 0xd4, 0xfa, 0x98, 0xca, 0x11, 0x07, 0x6d, 0x24, 0x66, 0x99, 0xb4, 0xcd,
	0x13, 0x93, 0x90, 0xb9, 0x82, 0x76, 0xb9, 0xcd, 0x05, 0x75, 0xe0, 0x8d, 0x7c, 0x54, 0x53, 0xae,
	0x3d, 0xe8, 0x6d, 0x26, 0x07, 0x23, 0x73, 0x05, 0x7d, 0x03, 0xf5, 0x3e, 0xa6, 0xca, 0x67, 0xd0,
	0x9d, 0x94, 0x77, 0xa7, 0xbe, 0x2f, 0xd9, 0x6c, 0x9b, 0x2b, 0x68, 0x1f, 0x1a, 0x7d, 0x4c, 0xe3,
	0xce, 0x13, 0xdd, 0x4d, 0x35, 0x98, 0x4a, 0xe1, 0x8d, 0x45, 0x46, 0xb4, 0xc5, 0x6f, 0x60, 0x43,
	0xde, 0x7a, 0xa2, 0x67, 0x4c, 0x19, 0xea, 0xa7, 0x4b, 0x5a, 0x45, 0xed, 0xba, 0xa1, 0x8f, 0xa9,
	0xe8, 0x5e, 0x90, 0x50, 0x38, 0xd9, 0x3a, 0x6d, 0xa2, 0x14, 0x95, 0x4b, 0x5e, 0x94, 0xf9, 0x9f,
	0x6c, 0xcf, 0xfe, 0x17, 0x00, 0x00, 0xff, 0xff, 0xe9, 0xe7, 0x0a, 0xb5, 0xba, 0x1b, 0x00, 0x00,
}
