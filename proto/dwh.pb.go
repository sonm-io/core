// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dwh.proto

package sonm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CmpOp int32

const (
	CmpOp_EQ  CmpOp = 0
	CmpOp_GTE CmpOp = 1
	CmpOp_LTE CmpOp = 2
)

var CmpOp_name = map[int32]string{
	0: "EQ",
	1: "GTE",
	2: "LTE",
}
var CmpOp_value = map[string]int32{
	"EQ":  0,
	"GTE": 1,
	"LTE": 2,
}

func (x CmpOp) String() string {
	return proto.EnumName(CmpOp_name, int32(x))
}
func (CmpOp) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

type SortingOrder int32

const (
	SortingOrder_Asc  SortingOrder = 0
	SortingOrder_Desc SortingOrder = 1
)

var SortingOrder_name = map[int32]string{
	0: "Asc",
	1: "Desc",
}
var SortingOrder_value = map[string]int32{
	"Asc":  0,
	"Desc": 1,
}

func (x SortingOrder) String() string {
	return proto.EnumName(SortingOrder_name, int32(x))
}
func (SortingOrder) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

type ProfileRole int32

const (
	ProfileRole_AnyRole  ProfileRole = 0
	ProfileRole_Supplier ProfileRole = 1
	ProfileRole_Consumer ProfileRole = 2
)

var ProfileRole_name = map[int32]string{
	0: "AnyRole",
	1: "Supplier",
	2: "Consumer",
}
var ProfileRole_value = map[string]int32{
	"AnyRole":  0,
	"Supplier": 1,
	"Consumer": 2,
}

func (x ProfileRole) String() string {
	return proto.EnumName(ProfileRole_name, int32(x))
}
func (ProfileRole) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

type BlacklistOption int32

const (
	BlacklistOption_WithoutMatching BlacklistOption = 0
	BlacklistOption_IncludeAndMark  BlacklistOption = 1
	BlacklistOption_OnlyMatching    BlacklistOption = 2
)

var BlacklistOption_name = map[int32]string{
	0: "WithoutMatching",
	1: "IncludeAndMark",
	2: "OnlyMatching",
}
var BlacklistOption_value = map[string]int32{
	"WithoutMatching": 0,
	"IncludeAndMark":  1,
	"OnlyMatching":    2,
}

func (x BlacklistOption) String() string {
	return proto.EnumName(BlacklistOption_name, int32(x))
}
func (BlacklistOption) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

type SortingOption struct {
	Field string       `protobuf:"bytes,1,opt,name=field" json:"field,omitempty"`
	Order SortingOrder `protobuf:"varint,2,opt,name=order,enum=sonm.SortingOrder" json:"order,omitempty"`
}

func (m *SortingOption) Reset()                    { *m = SortingOption{} }
func (m *SortingOption) String() string            { return proto.CompactTextString(m) }
func (*SortingOption) ProtoMessage()               {}
func (*SortingOption) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *SortingOption) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *SortingOption) GetOrder() SortingOrder {
	if m != nil {
		return m.Order
	}
	return SortingOrder_Asc
}

type DealsRequest struct {
	Status           DealStatus               `protobuf:"varint,1,opt,name=status,enum=sonm.DealStatus" json:"status,omitempty"`
	SupplierID       *EthAddress              `protobuf:"bytes,2,opt,name=supplierID" json:"supplierID,omitempty"`
	ConsumerID       *EthAddress              `protobuf:"bytes,3,opt,name=consumerID" json:"consumerID,omitempty"`
	MasterID         *EthAddress              `protobuf:"bytes,4,opt,name=masterID" json:"masterID,omitempty"`
	AskID            *BigInt                  `protobuf:"bytes,5,opt,name=askID" json:"askID,omitempty"`
	BidID            *BigInt                  `protobuf:"bytes,6,opt,name=bidID" json:"bidID,omitempty"`
	Duration         *MaxMinUint64            `protobuf:"bytes,7,opt,name=duration" json:"duration,omitempty"`
	Price            *MaxMinBig               `protobuf:"bytes,8,opt,name=price" json:"price,omitempty"`
	Netflags         *CmpUint64               `protobuf:"bytes,9,opt,name=netflags" json:"netflags,omitempty"`
	AskIdentityLevel IdentityLevel            `protobuf:"varint,10,opt,name=askIdentityLevel,enum=sonm.IdentityLevel" json:"askIdentityLevel,omitempty"`
	BidIdentityLevel IdentityLevel            `protobuf:"varint,11,opt,name=bidIdentityLevel,enum=sonm.IdentityLevel" json:"bidIdentityLevel,omitempty"`
	Benchmarks       map[uint64]*MaxMinUint64 `protobuf:"bytes,12,rep,name=benchmarks" json:"benchmarks,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Limit            uint64                   `protobuf:"varint,13,opt,name=limit" json:"limit,omitempty"`
	Offset           uint64                   `protobuf:"varint,14,opt,name=offset" json:"offset,omitempty"`
	Sortings         []*SortingOption         `protobuf:"bytes,15,rep,name=sortings" json:"sortings,omitempty"`
	WithCount        bool                     `protobuf:"varint,16,opt,name=withCount" json:"withCount,omitempty"`
	// If provided, supplierID, consumerID, and masterID fields are ignored.
	// Any of the above IDs must match the provided value.
	AnyUserID *EthAddress `protobuf:"bytes,17,opt,name=anyUserID" json:"anyUserID,omitempty"`
}

func (m *DealsRequest) Reset()                    { *m = DealsRequest{} }
func (m *DealsRequest) String() string            { return proto.CompactTextString(m) }
func (*DealsRequest) ProtoMessage()               {}
func (*DealsRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *DealsRequest) GetStatus() DealStatus {
	if m != nil {
		return m.Status
	}
	return DealStatus_DEAL_UNKNOWN
}

func (m *DealsRequest) GetSupplierID() *EthAddress {
	if m != nil {
		return m.SupplierID
	}
	return nil
}

func (m *DealsRequest) GetConsumerID() *EthAddress {
	if m != nil {
		return m.ConsumerID
	}
	return nil
}

func (m *DealsRequest) GetMasterID() *EthAddress {
	if m != nil {
		return m.MasterID
	}
	return nil
}

func (m *DealsRequest) GetAskID() *BigInt {
	if m != nil {
		return m.AskID
	}
	return nil
}

func (m *DealsRequest) GetBidID() *BigInt {
	if m != nil {
		return m.BidID
	}
	return nil
}

func (m *DealsRequest) GetDuration() *MaxMinUint64 {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (m *DealsRequest) GetPrice() *MaxMinBig {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *DealsRequest) GetNetflags() *CmpUint64 {
	if m != nil {
		return m.Netflags
	}
	return nil
}

func (m *DealsRequest) GetAskIdentityLevel() IdentityLevel {
	if m != nil {
		return m.AskIdentityLevel
	}
	return IdentityLevel_UNKNOWN
}

func (m *DealsRequest) GetBidIdentityLevel() IdentityLevel {
	if m != nil {
		return m.BidIdentityLevel
	}
	return IdentityLevel_UNKNOWN
}

func (m *DealsRequest) GetBenchmarks() map[uint64]*MaxMinUint64 {
	if m != nil {
		return m.Benchmarks
	}
	return nil
}

func (m *DealsRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *DealsRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *DealsRequest) GetSortings() []*SortingOption {
	if m != nil {
		return m.Sortings
	}
	return nil
}

func (m *DealsRequest) GetWithCount() bool {
	if m != nil {
		return m.WithCount
	}
	return false
}

func (m *DealsRequest) GetAnyUserID() *EthAddress {
	if m != nil {
		return m.AnyUserID
	}
	return nil
}

type DWHDealsReply struct {
	Deals []*DWHDeal `protobuf:"bytes,1,rep,name=deals" json:"deals,omitempty"`
	Count uint64     `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *DWHDealsReply) Reset()                    { *m = DWHDealsReply{} }
func (m *DWHDealsReply) String() string            { return proto.CompactTextString(m) }
func (*DWHDealsReply) ProtoMessage()               {}
func (*DWHDealsReply) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *DWHDealsReply) GetDeals() []*DWHDeal {
	if m != nil {
		return m.Deals
	}
	return nil
}

func (m *DWHDealsReply) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type DWHDeal struct {
	Deal                 *Deal  `protobuf:"bytes,1,opt,name=deal" json:"deal,omitempty"`
	Netflags             uint64 `protobuf:"varint,2,opt,name=netflags" json:"netflags,omitempty"`
	AskIdentityLevel     uint64 `protobuf:"varint,3,opt,name=askIdentityLevel" json:"askIdentityLevel,omitempty"`
	BidIdentityLevel     uint64 `protobuf:"varint,4,opt,name=bidIdentityLevel" json:"bidIdentityLevel,omitempty"`
	SupplierCertificates []byte `protobuf:"bytes,5,opt,name=supplierCertificates,proto3" json:"supplierCertificates,omitempty"`
	ConsumerCertificates []byte `protobuf:"bytes,6,opt,name=consumerCertificates,proto3" json:"consumerCertificates,omitempty"`
	ActiveChangeRequest  bool   `protobuf:"varint,7,opt,name=activeChangeRequest" json:"activeChangeRequest,omitempty"`
	AskTag               []byte `protobuf:"bytes,8,opt,name=askTag,proto3" json:"askTag,omitempty"`
	BidTag               []byte `protobuf:"bytes,9,opt,name=bidTag,proto3" json:"bidTag,omitempty"`
}

func (m *DWHDeal) Reset()                    { *m = DWHDeal{} }
func (m *DWHDeal) String() string            { return proto.CompactTextString(m) }
func (*DWHDeal) ProtoMessage()               {}
func (*DWHDeal) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *DWHDeal) GetDeal() *Deal {
	if m != nil {
		return m.Deal
	}
	return nil
}

func (m *DWHDeal) GetNetflags() uint64 {
	if m != nil {
		return m.Netflags
	}
	return 0
}

func (m *DWHDeal) GetAskIdentityLevel() uint64 {
	if m != nil {
		return m.AskIdentityLevel
	}
	return 0
}

func (m *DWHDeal) GetBidIdentityLevel() uint64 {
	if m != nil {
		return m.BidIdentityLevel
	}
	return 0
}

func (m *DWHDeal) GetSupplierCertificates() []byte {
	if m != nil {
		return m.SupplierCertificates
	}
	return nil
}

func (m *DWHDeal) GetConsumerCertificates() []byte {
	if m != nil {
		return m.ConsumerCertificates
	}
	return nil
}

func (m *DWHDeal) GetActiveChangeRequest() bool {
	if m != nil {
		return m.ActiveChangeRequest
	}
	return false
}

func (m *DWHDeal) GetAskTag() []byte {
	if m != nil {
		return m.AskTag
	}
	return nil
}

func (m *DWHDeal) GetBidTag() []byte {
	if m != nil {
		return m.BidTag
	}
	return nil
}

type DealConditionsRequest struct {
	DealID    *BigInt          `protobuf:"bytes,1,opt,name=dealID" json:"dealID,omitempty"`
	Limit     uint64           `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
	Offset    uint64           `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
	Sortings  []*SortingOption `protobuf:"bytes,4,rep,name=sortings" json:"sortings,omitempty"`
	WithCount bool             `protobuf:"varint,5,opt,name=withCount" json:"withCount,omitempty"`
}

func (m *DealConditionsRequest) Reset()                    { *m = DealConditionsRequest{} }
func (m *DealConditionsRequest) String() string            { return proto.CompactTextString(m) }
func (*DealConditionsRequest) ProtoMessage()               {}
func (*DealConditionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{4} }

func (m *DealConditionsRequest) GetDealID() *BigInt {
	if m != nil {
		return m.DealID
	}
	return nil
}

func (m *DealConditionsRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *DealConditionsRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *DealConditionsRequest) GetSortings() []*SortingOption {
	if m != nil {
		return m.Sortings
	}
	return nil
}

func (m *DealConditionsRequest) GetWithCount() bool {
	if m != nil {
		return m.WithCount
	}
	return false
}

type DealConditionsReply struct {
	Conditions []*DealCondition `protobuf:"bytes,1,rep,name=conditions" json:"conditions,omitempty"`
	Count      uint64           `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *DealConditionsReply) Reset()                    { *m = DealConditionsReply{} }
func (m *DealConditionsReply) String() string            { return proto.CompactTextString(m) }
func (*DealConditionsReply) ProtoMessage()               {}
func (*DealConditionsReply) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{5} }

func (m *DealConditionsReply) GetConditions() []*DealCondition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *DealConditionsReply) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type OrdersRequest struct {
	DealID   *BigInt     `protobuf:"bytes,1,opt,name=dealID" json:"dealID,omitempty"`
	Type     OrderType   `protobuf:"varint,2,opt,name=type,enum=sonm.OrderType" json:"type,omitempty"`
	Status   OrderStatus `protobuf:"varint,3,opt,name=status,enum=sonm.OrderStatus" json:"status,omitempty"`
	AuthorID *EthAddress `protobuf:"bytes,4,opt,name=authorID" json:"authorID,omitempty"`
	// No values passed returns all orders, empty address (common.Address{}.Hex()) returns orders
	// with CounterpartyID not set. To get a list of all orders that suit you, pass an empty address
	// and your own address.
	CounterpartyID       []*EthAddress            `protobuf:"bytes,5,rep,name=counterpartyID" json:"counterpartyID,omitempty"`
	Duration             *MaxMinUint64            `protobuf:"bytes,6,opt,name=duration" json:"duration,omitempty"`
	Price                *MaxMinBig               `protobuf:"bytes,9,opt,name=price" json:"price,omitempty"`
	Netflags             *CmpUint64               `protobuf:"bytes,11,opt,name=netflags" json:"netflags,omitempty"`
	CreatorIdentityLevel []IdentityLevel          `protobuf:"varint,12,rep,packed,name=creatorIdentityLevel,enum=sonm.IdentityLevel" json:"creatorIdentityLevel,omitempty"`
	Benchmarks           map[uint64]*MaxMinUint64 `protobuf:"bytes,13,rep,name=benchmarks" json:"benchmarks,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	CreatedTS            *MaxMinTimestamp         `protobuf:"bytes,14,opt,name=createdTS" json:"createdTS,omitempty"`
	Limit                uint64                   `protobuf:"varint,15,opt,name=limit" json:"limit,omitempty"`
	Offset               uint64                   `protobuf:"varint,16,opt,name=offset" json:"offset,omitempty"`
	Sortings             []*SortingOption         `protobuf:"bytes,17,rep,name=sortings" json:"sortings,omitempty"`
	WithCount            bool                     `protobuf:"varint,18,opt,name=withCount" json:"withCount,omitempty"`
	MasterID             *EthAddress              `protobuf:"bytes,19,opt,name=masterID" json:"masterID,omitempty"`
	// IDs associated with sender.
	SenderIDs []*EthAddress `protobuf:"bytes,20,rep,name=senderIDs" json:"senderIDs,omitempty"`
}

func (m *OrdersRequest) Reset()                    { *m = OrdersRequest{} }
func (m *OrdersRequest) String() string            { return proto.CompactTextString(m) }
func (*OrdersRequest) ProtoMessage()               {}
func (*OrdersRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{6} }

func (m *OrdersRequest) GetDealID() *BigInt {
	if m != nil {
		return m.DealID
	}
	return nil
}

func (m *OrdersRequest) GetType() OrderType {
	if m != nil {
		return m.Type
	}
	return OrderType_ANY
}

func (m *OrdersRequest) GetStatus() OrderStatus {
	if m != nil {
		return m.Status
	}
	return OrderStatus_ORDER_UNKNOWN
}

func (m *OrdersRequest) GetAuthorID() *EthAddress {
	if m != nil {
		return m.AuthorID
	}
	return nil
}

func (m *OrdersRequest) GetCounterpartyID() []*EthAddress {
	if m != nil {
		return m.CounterpartyID
	}
	return nil
}

func (m *OrdersRequest) GetDuration() *MaxMinUint64 {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (m *OrdersRequest) GetPrice() *MaxMinBig {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *OrdersRequest) GetNetflags() *CmpUint64 {
	if m != nil {
		return m.Netflags
	}
	return nil
}

func (m *OrdersRequest) GetCreatorIdentityLevel() []IdentityLevel {
	if m != nil {
		return m.CreatorIdentityLevel
	}
	return nil
}

func (m *OrdersRequest) GetBenchmarks() map[uint64]*MaxMinUint64 {
	if m != nil {
		return m.Benchmarks
	}
	return nil
}

func (m *OrdersRequest) GetCreatedTS() *MaxMinTimestamp {
	if m != nil {
		return m.CreatedTS
	}
	return nil
}

func (m *OrdersRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *OrdersRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *OrdersRequest) GetSortings() []*SortingOption {
	if m != nil {
		return m.Sortings
	}
	return nil
}

func (m *OrdersRequest) GetWithCount() bool {
	if m != nil {
		return m.WithCount
	}
	return false
}

func (m *OrdersRequest) GetMasterID() *EthAddress {
	if m != nil {
		return m.MasterID
	}
	return nil
}

func (m *OrdersRequest) GetSenderIDs() []*EthAddress {
	if m != nil {
		return m.SenderIDs
	}
	return nil
}

type MatchingOrdersRequest struct {
	Id        *BigInt `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Limit     uint64  `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
	Offset    uint64  `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
	WithCount bool    `protobuf:"varint,4,opt,name=withCount" json:"withCount,omitempty"`
}

func (m *MatchingOrdersRequest) Reset()                    { *m = MatchingOrdersRequest{} }
func (m *MatchingOrdersRequest) String() string            { return proto.CompactTextString(m) }
func (*MatchingOrdersRequest) ProtoMessage()               {}
func (*MatchingOrdersRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{7} }

func (m *MatchingOrdersRequest) GetId() *BigInt {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *MatchingOrdersRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *MatchingOrdersRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *MatchingOrdersRequest) GetWithCount() bool {
	if m != nil {
		return m.WithCount
	}
	return false
}

type DWHOrdersReply struct {
	Orders []*DWHOrder `protobuf:"bytes,1,rep,name=orders" json:"orders,omitempty"`
	Count  uint64      `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *DWHOrdersReply) Reset()                    { *m = DWHOrdersReply{} }
func (m *DWHOrdersReply) String() string            { return proto.CompactTextString(m) }
func (*DWHOrdersReply) ProtoMessage()               {}
func (*DWHOrdersReply) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{8} }

func (m *DWHOrdersReply) GetOrders() []*DWHOrder {
	if m != nil {
		return m.Orders
	}
	return nil
}

func (m *DWHOrdersReply) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type DWHOrder struct {
	Order                *Order      `protobuf:"bytes,1,opt,name=order" json:"order,omitempty"`
	CreatorIdentityLevel uint64      `protobuf:"varint,2,opt,name=creatorIdentityLevel" json:"creatorIdentityLevel,omitempty"`
	CreatorName          string      `protobuf:"bytes,3,opt,name=creatorName" json:"creatorName,omitempty"`
	CreatorCountry       string      `protobuf:"bytes,4,opt,name=creatorCountry" json:"creatorCountry,omitempty"`
	CreatorCertificates  []byte      `protobuf:"bytes,5,opt,name=creatorCertificates,proto3" json:"creatorCertificates,omitempty"`
	CreatedTS            *Timestamp  `protobuf:"bytes,6,opt,name=CreatedTS" json:"CreatedTS,omitempty"`
	MasterID             *EthAddress `protobuf:"bytes,7,opt,name=masterID" json:"masterID,omitempty"`
}

func (m *DWHOrder) Reset()                    { *m = DWHOrder{} }
func (m *DWHOrder) String() string            { return proto.CompactTextString(m) }
func (*DWHOrder) ProtoMessage()               {}
func (*DWHOrder) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{9} }

func (m *DWHOrder) GetOrder() *Order {
	if m != nil {
		return m.Order
	}
	return nil
}

func (m *DWHOrder) GetCreatorIdentityLevel() uint64 {
	if m != nil {
		return m.CreatorIdentityLevel
	}
	return 0
}

func (m *DWHOrder) GetCreatorName() string {
	if m != nil {
		return m.CreatorName
	}
	return ""
}

func (m *DWHOrder) GetCreatorCountry() string {
	if m != nil {
		return m.CreatorCountry
	}
	return ""
}

func (m *DWHOrder) GetCreatorCertificates() []byte {
	if m != nil {
		return m.CreatorCertificates
	}
	return nil
}

func (m *DWHOrder) GetCreatedTS() *Timestamp {
	if m != nil {
		return m.CreatedTS
	}
	return nil
}

func (m *DWHOrder) GetMasterID() *EthAddress {
	if m != nil {
		return m.MasterID
	}
	return nil
}

type DealCondition struct {
	Id          uint64      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	SupplierID  *EthAddress `protobuf:"bytes,2,opt,name=supplierID" json:"supplierID,omitempty"`
	ConsumerID  *EthAddress `protobuf:"bytes,3,opt,name=consumerID" json:"consumerID,omitempty"`
	MasterID    *EthAddress `protobuf:"bytes,4,opt,name=masterID" json:"masterID,omitempty"`
	Duration    uint64      `protobuf:"varint,5,opt,name=duration" json:"duration,omitempty"`
	Price       *BigInt     `protobuf:"bytes,6,opt,name=price" json:"price,omitempty"`
	StartTime   *Timestamp  `protobuf:"bytes,7,opt,name=startTime" json:"startTime,omitempty"`
	EndTime     *Timestamp  `protobuf:"bytes,8,opt,name=endTime" json:"endTime,omitempty"`
	TotalPayout *BigInt     `protobuf:"bytes,9,opt,name=totalPayout" json:"totalPayout,omitempty"`
	DealID      *BigInt     `protobuf:"bytes,10,opt,name=dealID" json:"dealID,omitempty"`
}

func (m *DealCondition) Reset()                    { *m = DealCondition{} }
func (m *DealCondition) String() string            { return proto.CompactTextString(m) }
func (*DealCondition) ProtoMessage()               {}
func (*DealCondition) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{10} }

func (m *DealCondition) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DealCondition) GetSupplierID() *EthAddress {
	if m != nil {
		return m.SupplierID
	}
	return nil
}

func (m *DealCondition) GetConsumerID() *EthAddress {
	if m != nil {
		return m.ConsumerID
	}
	return nil
}

func (m *DealCondition) GetMasterID() *EthAddress {
	if m != nil {
		return m.MasterID
	}
	return nil
}

func (m *DealCondition) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *DealCondition) GetPrice() *BigInt {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *DealCondition) GetStartTime() *Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *DealCondition) GetEndTime() *Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *DealCondition) GetTotalPayout() *BigInt {
	if m != nil {
		return m.TotalPayout
	}
	return nil
}

func (m *DealCondition) GetDealID() *BigInt {
	if m != nil {
		return m.DealID
	}
	return nil
}

type DWHWorker struct {
	MasterID  *EthAddress `protobuf:"bytes,1,opt,name=masterID" json:"masterID,omitempty"`
	SlaveID   *EthAddress `protobuf:"bytes,2,opt,name=slaveID" json:"slaveID,omitempty"`
	Confirmed bool        `protobuf:"varint,3,opt,name=confirmed" json:"confirmed,omitempty"`
}

func (m *DWHWorker) Reset()                    { *m = DWHWorker{} }
func (m *DWHWorker) String() string            { return proto.CompactTextString(m) }
func (*DWHWorker) ProtoMessage()               {}
func (*DWHWorker) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{11} }

func (m *DWHWorker) GetMasterID() *EthAddress {
	if m != nil {
		return m.MasterID
	}
	return nil
}

func (m *DWHWorker) GetSlaveID() *EthAddress {
	if m != nil {
		return m.SlaveID
	}
	return nil
}

func (m *DWHWorker) GetConfirmed() bool {
	if m != nil {
		return m.Confirmed
	}
	return false
}

type ProfilesRequest struct {
	Role          ProfileRole   `protobuf:"varint,1,opt,name=role,enum=sonm.ProfileRole" json:"role,omitempty"`
	IdentityLevel IdentityLevel `protobuf:"varint,2,opt,name=identityLevel,enum=sonm.IdentityLevel" json:"identityLevel,omitempty"`
	Country       []string      `protobuf:"bytes,3,rep,name=country" json:"country,omitempty"`
	// This value is LIKE-matched against both profile Name and UserID (case insensitive).
	Identifier     string           `protobuf:"bytes,4,opt,name=identifier" json:"identifier,omitempty"`
	BlacklistQuery *BlacklistQuery  `protobuf:"bytes,5,opt,name=blacklistQuery" json:"blacklistQuery,omitempty"`
	Limit          uint64           `protobuf:"varint,6,opt,name=limit" json:"limit,omitempty"`
	Offset         uint64           `protobuf:"varint,7,opt,name=offset" json:"offset,omitempty"`
	Sortings       []*SortingOption `protobuf:"bytes,8,rep,name=sortings" json:"sortings,omitempty"`
	WithCount      bool             `protobuf:"varint,9,opt,name=withCount" json:"withCount,omitempty"`
}

func (m *ProfilesRequest) Reset()                    { *m = ProfilesRequest{} }
func (m *ProfilesRequest) String() string            { return proto.CompactTextString(m) }
func (*ProfilesRequest) ProtoMessage()               {}
func (*ProfilesRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{12} }

func (m *ProfilesRequest) GetRole() ProfileRole {
	if m != nil {
		return m.Role
	}
	return ProfileRole_AnyRole
}

func (m *ProfilesRequest) GetIdentityLevel() IdentityLevel {
	if m != nil {
		return m.IdentityLevel
	}
	return IdentityLevel_UNKNOWN
}

func (m *ProfilesRequest) GetCountry() []string {
	if m != nil {
		return m.Country
	}
	return nil
}

func (m *ProfilesRequest) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *ProfilesRequest) GetBlacklistQuery() *BlacklistQuery {
	if m != nil {
		return m.BlacklistQuery
	}
	return nil
}

func (m *ProfilesRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ProfilesRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ProfilesRequest) GetSortings() []*SortingOption {
	if m != nil {
		return m.Sortings
	}
	return nil
}

func (m *ProfilesRequest) GetWithCount() bool {
	if m != nil {
		return m.WithCount
	}
	return false
}

type ProfilesReply struct {
	Profiles []*Profile `protobuf:"bytes,1,rep,name=profiles" json:"profiles,omitempty"`
	Count    uint64     `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *ProfilesReply) Reset()                    { *m = ProfilesReply{} }
func (m *ProfilesReply) String() string            { return proto.CompactTextString(m) }
func (*ProfilesReply) ProtoMessage()               {}
func (*ProfilesReply) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{13} }

func (m *ProfilesReply) GetProfiles() []*Profile {
	if m != nil {
		return m.Profiles
	}
	return nil
}

func (m *ProfilesReply) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type Profile struct {
	UserID         *EthAddress `protobuf:"bytes,1,opt,name=UserID" json:"UserID,omitempty"`
	IdentityLevel  uint64      `protobuf:"varint,2,opt,name=IdentityLevel" json:"IdentityLevel,omitempty"`
	Name           string      `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
	Country        string      `protobuf:"bytes,4,opt,name=Country" json:"Country,omitempty"`
	IsCorporation  bool        `protobuf:"varint,5,opt,name=IsCorporation" json:"IsCorporation,omitempty"`
	IsProfessional bool        `protobuf:"varint,6,opt,name=IsProfessional" json:"IsProfessional,omitempty"`
	Certificates   string      `protobuf:"bytes,7,opt,name=Certificates" json:"Certificates,omitempty"`
	ActiveAsks     uint64      `protobuf:"varint,8,opt,name=activeAsks" json:"activeAsks,omitempty"`
	ActiveBids     uint64      `protobuf:"varint,9,opt,name=activeBids" json:"activeBids,omitempty"`
	IsBlacklisted  bool        `protobuf:"varint,10,opt,name=isBlacklisted" json:"isBlacklisted,omitempty"`
}

func (m *Profile) Reset()                    { *m = Profile{} }
func (m *Profile) String() string            { return proto.CompactTextString(m) }
func (*Profile) ProtoMessage()               {}
func (*Profile) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{14} }

func (m *Profile) GetUserID() *EthAddress {
	if m != nil {
		return m.UserID
	}
	return nil
}

func (m *Profile) GetIdentityLevel() uint64 {
	if m != nil {
		return m.IdentityLevel
	}
	return 0
}

func (m *Profile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Profile) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Profile) GetIsCorporation() bool {
	if m != nil {
		return m.IsCorporation
	}
	return false
}

func (m *Profile) GetIsProfessional() bool {
	if m != nil {
		return m.IsProfessional
	}
	return false
}

func (m *Profile) GetCertificates() string {
	if m != nil {
		return m.Certificates
	}
	return ""
}

func (m *Profile) GetActiveAsks() uint64 {
	if m != nil {
		return m.ActiveAsks
	}
	return 0
}

func (m *Profile) GetActiveBids() uint64 {
	if m != nil {
		return m.ActiveBids
	}
	return 0
}

func (m *Profile) GetIsBlacklisted() bool {
	if m != nil {
		return m.IsBlacklisted
	}
	return false
}

type BlacklistRequest struct {
	UserID    *EthAddress `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	Limit     uint64      `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
	Offset    uint64      `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
	WithCount bool        `protobuf:"varint,4,opt,name=withCount" json:"withCount,omitempty"`
}

func (m *BlacklistRequest) Reset()                    { *m = BlacklistRequest{} }
func (m *BlacklistRequest) String() string            { return proto.CompactTextString(m) }
func (*BlacklistRequest) ProtoMessage()               {}
func (*BlacklistRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{15} }

func (m *BlacklistRequest) GetUserID() *EthAddress {
	if m != nil {
		return m.UserID
	}
	return nil
}

func (m *BlacklistRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *BlacklistRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *BlacklistRequest) GetWithCount() bool {
	if m != nil {
		return m.WithCount
	}
	return false
}

type BlacklistReply struct {
	OwnerID   *EthAddress `protobuf:"bytes,1,opt,name=ownerID" json:"ownerID,omitempty"`
	Addresses []string    `protobuf:"bytes,2,rep,name=addresses" json:"addresses,omitempty"`
	Count     uint64      `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
}

func (m *BlacklistReply) Reset()                    { *m = BlacklistReply{} }
func (m *BlacklistReply) String() string            { return proto.CompactTextString(m) }
func (*BlacklistReply) ProtoMessage()               {}
func (*BlacklistReply) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{16} }

func (m *BlacklistReply) GetOwnerID() *EthAddress {
	if m != nil {
		return m.OwnerID
	}
	return nil
}

func (m *BlacklistReply) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *BlacklistReply) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type BlacklistsContainingUserReply struct {
	Blacklists []*EthAddress `protobuf:"bytes,1,rep,name=blacklists" json:"blacklists,omitempty"`
	Count      uint64        `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *BlacklistsContainingUserReply) Reset()                    { *m = BlacklistsContainingUserReply{} }
func (m *BlacklistsContainingUserReply) String() string            { return proto.CompactTextString(m) }
func (*BlacklistsContainingUserReply) ProtoMessage()               {}
func (*BlacklistsContainingUserReply) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{17} }

func (m *BlacklistsContainingUserReply) GetBlacklists() []*EthAddress {
	if m != nil {
		return m.Blacklists
	}
	return nil
}

func (m *BlacklistsContainingUserReply) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ValidatorsRequest struct {
	ValidatorLevel *CmpUint64       `protobuf:"bytes,1,opt,name=validatorLevel" json:"validatorLevel,omitempty"`
	Limit          uint64           `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
	Offset         uint64           `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
	Sortings       []*SortingOption `protobuf:"bytes,4,rep,name=sortings" json:"sortings,omitempty"`
	WithCount      bool             `protobuf:"varint,5,opt,name=withCount" json:"withCount,omitempty"`
}

func (m *ValidatorsRequest) Reset()                    { *m = ValidatorsRequest{} }
func (m *ValidatorsRequest) String() string            { return proto.CompactTextString(m) }
func (*ValidatorsRequest) ProtoMessage()               {}
func (*ValidatorsRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{18} }

func (m *ValidatorsRequest) GetValidatorLevel() *CmpUint64 {
	if m != nil {
		return m.ValidatorLevel
	}
	return nil
}

func (m *ValidatorsRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ValidatorsRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ValidatorsRequest) GetSortings() []*SortingOption {
	if m != nil {
		return m.Sortings
	}
	return nil
}

func (m *ValidatorsRequest) GetWithCount() bool {
	if m != nil {
		return m.WithCount
	}
	return false
}

type ValidatorsReply struct {
	Validators []*DWHValidator `protobuf:"bytes,1,rep,name=validators" json:"validators,omitempty"`
	Count      uint64          `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *ValidatorsReply) Reset()                    { *m = ValidatorsReply{} }
func (m *ValidatorsReply) String() string            { return proto.CompactTextString(m) }
func (*ValidatorsReply) ProtoMessage()               {}
func (*ValidatorsReply) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{19} }

func (m *ValidatorsReply) GetValidators() []*DWHValidator {
	if m != nil {
		return m.Validators
	}
	return nil
}

func (m *ValidatorsReply) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type DWHValidator struct {
	Validator   *Validator `protobuf:"bytes,1,opt,name=validator" json:"validator,omitempty"`
	Name        string     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Icon        string     `protobuf:"bytes,3,opt,name=icon" json:"icon,omitempty"`
	Url         string     `protobuf:"bytes,4,opt,name=url" json:"url,omitempty"`
	Description string     `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	Price       *BigInt    `protobuf:"bytes,6,opt,name=price" json:"price,omitempty"`
}

func (m *DWHValidator) Reset()                    { *m = DWHValidator{} }
func (m *DWHValidator) String() string            { return proto.CompactTextString(m) }
func (*DWHValidator) ProtoMessage()               {}
func (*DWHValidator) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{20} }

func (m *DWHValidator) GetValidator() *Validator {
	if m != nil {
		return m.Validator
	}
	return nil
}

func (m *DWHValidator) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DWHValidator) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *DWHValidator) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *DWHValidator) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *DWHValidator) GetPrice() *BigInt {
	if m != nil {
		return m.Price
	}
	return nil
}

type Validator struct {
	Id    *EthAddress `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Level uint64      `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`
}

func (m *Validator) Reset()                    { *m = Validator{} }
func (m *Validator) String() string            { return proto.CompactTextString(m) }
func (*Validator) ProtoMessage()               {}
func (*Validator) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{21} }

func (m *Validator) GetId() *EthAddress {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Validator) GetLevel() uint64 {
	if m != nil {
		return m.Level
	}
	return 0
}

type DealChangeRequestsReply struct {
	Requests []*DealChangeRequest `protobuf:"bytes,1,rep,name=requests" json:"requests,omitempty"`
}

func (m *DealChangeRequestsReply) Reset()                    { *m = DealChangeRequestsReply{} }
func (m *DealChangeRequestsReply) String() string            { return proto.CompactTextString(m) }
func (*DealChangeRequestsReply) ProtoMessage()               {}
func (*DealChangeRequestsReply) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{22} }

func (m *DealChangeRequestsReply) GetRequests() []*DealChangeRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

type DealChangeRequest struct {
	Id          *BigInt             `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	DealID      *BigInt             `protobuf:"bytes,2,opt,name=dealID" json:"dealID,omitempty"`
	RequestType OrderType           `protobuf:"varint,3,opt,name=requestType,enum=sonm.OrderType" json:"requestType,omitempty"`
	Duration    uint64              `protobuf:"varint,4,opt,name=duration" json:"duration,omitempty"`
	Price       *BigInt             `protobuf:"bytes,5,opt,name=price" json:"price,omitempty"`
	Status      ChangeRequestStatus `protobuf:"varint,6,opt,name=status,enum=sonm.ChangeRequestStatus" json:"status,omitempty"`
	CreatedTS   *Timestamp          `protobuf:"bytes,7,opt,name=createdTS" json:"createdTS,omitempty"`
}

func (m *DealChangeRequest) Reset()                    { *m = DealChangeRequest{} }
func (m *DealChangeRequest) String() string            { return proto.CompactTextString(m) }
func (*DealChangeRequest) ProtoMessage()               {}
func (*DealChangeRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{23} }

func (m *DealChangeRequest) GetId() *BigInt {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *DealChangeRequest) GetDealID() *BigInt {
	if m != nil {
		return m.DealID
	}
	return nil
}

func (m *DealChangeRequest) GetRequestType() OrderType {
	if m != nil {
		return m.RequestType
	}
	return OrderType_ANY
}

func (m *DealChangeRequest) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *DealChangeRequest) GetPrice() *BigInt {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *DealChangeRequest) GetStatus() ChangeRequestStatus {
	if m != nil {
		return m.Status
	}
	return ChangeRequestStatus_REQUEST_UNKNOWN
}

func (m *DealChangeRequest) GetCreatedTS() *Timestamp {
	if m != nil {
		return m.CreatedTS
	}
	return nil
}

type DealPayment struct {
	DealID      *BigInt    `protobuf:"bytes,1,opt,name=dealID" json:"dealID,omitempty"`
	PayedAmount *BigInt    `protobuf:"bytes,2,opt,name=payedAmount" json:"payedAmount,omitempty"`
	PaymentTS   *Timestamp `protobuf:"bytes,3,opt,name=paymentTS" json:"paymentTS,omitempty"`
}

func (m *DealPayment) Reset()                    { *m = DealPayment{} }
func (m *DealPayment) String() string            { return proto.CompactTextString(m) }
func (*DealPayment) ProtoMessage()               {}
func (*DealPayment) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{24} }

func (m *DealPayment) GetDealID() *BigInt {
	if m != nil {
		return m.DealID
	}
	return nil
}

func (m *DealPayment) GetPayedAmount() *BigInt {
	if m != nil {
		return m.PayedAmount
	}
	return nil
}

func (m *DealPayment) GetPaymentTS() *Timestamp {
	if m != nil {
		return m.PaymentTS
	}
	return nil
}

type ChangeRequestsRequest struct {
	DealID     *BigInt `protobuf:"bytes,1,opt,name=dealID" json:"dealID,omitempty"`
	OnlyActive bool    `protobuf:"varint,2,opt,name=onlyActive" json:"onlyActive,omitempty"`
}

func (m *ChangeRequestsRequest) Reset()                    { *m = ChangeRequestsRequest{} }
func (m *ChangeRequestsRequest) String() string            { return proto.CompactTextString(m) }
func (*ChangeRequestsRequest) ProtoMessage()               {}
func (*ChangeRequestsRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{25} }

func (m *ChangeRequestsRequest) GetDealID() *BigInt {
	if m != nil {
		return m.DealID
	}
	return nil
}

func (m *ChangeRequestsRequest) GetOnlyActive() bool {
	if m != nil {
		return m.OnlyActive
	}
	return false
}

type WorkersRequest struct {
	MasterID  *EthAddress `protobuf:"bytes,1,opt,name=MasterID" json:"MasterID,omitempty"`
	Limit     uint64      `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
	Offset    uint64      `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
	WithCount bool        `protobuf:"varint,4,opt,name=withCount" json:"withCount,omitempty"`
}

func (m *WorkersRequest) Reset()                    { *m = WorkersRequest{} }
func (m *WorkersRequest) String() string            { return proto.CompactTextString(m) }
func (*WorkersRequest) ProtoMessage()               {}
func (*WorkersRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{26} }

func (m *WorkersRequest) GetMasterID() *EthAddress {
	if m != nil {
		return m.MasterID
	}
	return nil
}

func (m *WorkersRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *WorkersRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *WorkersRequest) GetWithCount() bool {
	if m != nil {
		return m.WithCount
	}
	return false
}

type WorkersReply struct {
	Workers []*DWHWorker `protobuf:"bytes,1,rep,name=workers" json:"workers,omitempty"`
	Count   uint64       `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *WorkersReply) Reset()                    { *m = WorkersReply{} }
func (m *WorkersReply) String() string            { return proto.CompactTextString(m) }
func (*WorkersReply) ProtoMessage()               {}
func (*WorkersReply) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{27} }

func (m *WorkersReply) GetWorkers() []*DWHWorker {
	if m != nil {
		return m.Workers
	}
	return nil
}

func (m *WorkersReply) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type Certificate struct {
	OwnerID       *EthAddress `protobuf:"bytes,1,opt,name=ownerID" json:"ownerID,omitempty"`
	ValidatorID   *EthAddress `protobuf:"bytes,2,opt,name=validatorID" json:"validatorID,omitempty"`
	Attribute     uint64      `protobuf:"varint,3,opt,name=attribute" json:"attribute,omitempty"`
	IdentityLevel uint64      `protobuf:"varint,4,opt,name=identityLevel" json:"identityLevel,omitempty"`
	Value         []byte      `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	Id            *BigInt     `protobuf:"bytes,6,opt,name=id" json:"id,omitempty"`
}

func (m *Certificate) Reset()                    { *m = Certificate{} }
func (m *Certificate) String() string            { return proto.CompactTextString(m) }
func (*Certificate) ProtoMessage()               {}
func (*Certificate) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{28} }

func (m *Certificate) GetOwnerID() *EthAddress {
	if m != nil {
		return m.OwnerID
	}
	return nil
}

func (m *Certificate) GetValidatorID() *EthAddress {
	if m != nil {
		return m.ValidatorID
	}
	return nil
}

func (m *Certificate) GetAttribute() uint64 {
	if m != nil {
		return m.Attribute
	}
	return 0
}

func (m *Certificate) GetIdentityLevel() uint64 {
	if m != nil {
		return m.IdentityLevel
	}
	return 0
}

func (m *Certificate) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Certificate) GetId() *BigInt {
	if m != nil {
		return m.Id
	}
	return nil
}

type MaxMinUint64 struct {
	Max uint64 `protobuf:"varint,1,opt,name=max" json:"max,omitempty"`
	Min uint64 `protobuf:"varint,2,opt,name=min" json:"min,omitempty"`
}

func (m *MaxMinUint64) Reset()                    { *m = MaxMinUint64{} }
func (m *MaxMinUint64) String() string            { return proto.CompactTextString(m) }
func (*MaxMinUint64) ProtoMessage()               {}
func (*MaxMinUint64) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{29} }

func (m *MaxMinUint64) GetMax() uint64 {
	if m != nil {
		return m.Max
	}
	return 0
}

func (m *MaxMinUint64) GetMin() uint64 {
	if m != nil {
		return m.Min
	}
	return 0
}

type MaxMinBig struct {
	Max *BigInt `protobuf:"bytes,1,opt,name=max" json:"max,omitempty"`
	Min *BigInt `protobuf:"bytes,2,opt,name=min" json:"min,omitempty"`
}

func (m *MaxMinBig) Reset()                    { *m = MaxMinBig{} }
func (m *MaxMinBig) String() string            { return proto.CompactTextString(m) }
func (*MaxMinBig) ProtoMessage()               {}
func (*MaxMinBig) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{30} }

func (m *MaxMinBig) GetMax() *BigInt {
	if m != nil {
		return m.Max
	}
	return nil
}

func (m *MaxMinBig) GetMin() *BigInt {
	if m != nil {
		return m.Min
	}
	return nil
}

type MaxMinTimestamp struct {
	Max *Timestamp `protobuf:"bytes,1,opt,name=max" json:"max,omitempty"`
	Min *Timestamp `protobuf:"bytes,2,opt,name=min" json:"min,omitempty"`
}

func (m *MaxMinTimestamp) Reset()                    { *m = MaxMinTimestamp{} }
func (m *MaxMinTimestamp) String() string            { return proto.CompactTextString(m) }
func (*MaxMinTimestamp) ProtoMessage()               {}
func (*MaxMinTimestamp) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{31} }

func (m *MaxMinTimestamp) GetMax() *Timestamp {
	if m != nil {
		return m.Max
	}
	return nil
}

func (m *MaxMinTimestamp) GetMin() *Timestamp {
	if m != nil {
		return m.Min
	}
	return nil
}

type CmpUint64 struct {
	Value    uint64 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
	Operator CmpOp  `protobuf:"varint,2,opt,name=operator,enum=sonm.CmpOp" json:"operator,omitempty"`
}

func (m *CmpUint64) Reset()                    { *m = CmpUint64{} }
func (m *CmpUint64) String() string            { return proto.CompactTextString(m) }
func (*CmpUint64) ProtoMessage()               {}
func (*CmpUint64) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{32} }

func (m *CmpUint64) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *CmpUint64) GetOperator() CmpOp {
	if m != nil {
		return m.Operator
	}
	return CmpOp_EQ
}

type BlacklistQuery struct {
	OwnerID *EthAddress     `protobuf:"bytes,1,opt,name=ownerID" json:"ownerID,omitempty"`
	Option  BlacklistOption `protobuf:"varint,2,opt,name=option,enum=sonm.BlacklistOption" json:"option,omitempty"`
}

func (m *BlacklistQuery) Reset()                    { *m = BlacklistQuery{} }
func (m *BlacklistQuery) String() string            { return proto.CompactTextString(m) }
func (*BlacklistQuery) ProtoMessage()               {}
func (*BlacklistQuery) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{33} }

func (m *BlacklistQuery) GetOwnerID() *EthAddress {
	if m != nil {
		return m.OwnerID
	}
	return nil
}

func (m *BlacklistQuery) GetOption() BlacklistOption {
	if m != nil {
		return m.Option
	}
	return BlacklistOption_WithoutMatching
}

type DWHStatsReply struct {
	CurrentDeals        uint64 `protobuf:"varint,1,opt,name=currentDeals" json:"currentDeals,omitempty"`
	TotalDeals          uint64 `protobuf:"varint,2,opt,name=totalDeals" json:"totalDeals,omitempty"`
	TotalDealsDuration  uint64 `protobuf:"varint,3,opt,name=totalDealsDuration" json:"totalDealsDuration,omitempty"`
	AverageDealDuration uint64 `protobuf:"varint,4,opt,name=averageDealDuration" json:"averageDealDuration,omitempty"`
	Workers             uint64 `protobuf:"varint,5,opt,name=workers" json:"workers,omitempty"`
	Masters             uint64 `protobuf:"varint,6,opt,name=masters" json:"masters,omitempty"`
	Customers           uint64 `protobuf:"varint,7,opt,name=customers" json:"customers,omitempty"`
}

func (m *DWHStatsReply) Reset()                    { *m = DWHStatsReply{} }
func (m *DWHStatsReply) String() string            { return proto.CompactTextString(m) }
func (*DWHStatsReply) ProtoMessage()               {}
func (*DWHStatsReply) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{34} }

func (m *DWHStatsReply) GetCurrentDeals() uint64 {
	if m != nil {
		return m.CurrentDeals
	}
	return 0
}

func (m *DWHStatsReply) GetTotalDeals() uint64 {
	if m != nil {
		return m.TotalDeals
	}
	return 0
}

func (m *DWHStatsReply) GetTotalDealsDuration() uint64 {
	if m != nil {
		return m.TotalDealsDuration
	}
	return 0
}

func (m *DWHStatsReply) GetAverageDealDuration() uint64 {
	if m != nil {
		return m.AverageDealDuration
	}
	return 0
}

func (m *DWHStatsReply) GetWorkers() uint64 {
	if m != nil {
		return m.Workers
	}
	return 0
}

func (m *DWHStatsReply) GetMasters() uint64 {
	if m != nil {
		return m.Masters
	}
	return 0
}

func (m *DWHStatsReply) GetCustomers() uint64 {
	if m != nil {
		return m.Customers
	}
	return 0
}

type OrdersByIDsRequest struct {
	Ids []*BigInt `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
}

func (m *OrdersByIDsRequest) Reset()                    { *m = OrdersByIDsRequest{} }
func (m *OrdersByIDsRequest) String() string            { return proto.CompactTextString(m) }
func (*OrdersByIDsRequest) ProtoMessage()               {}
func (*OrdersByIDsRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{35} }

func (m *OrdersByIDsRequest) GetIds() []*BigInt {
	if m != nil {
		return m.Ids
	}
	return nil
}

func init() {
	proto.RegisterType((*SortingOption)(nil), "sonm.SortingOption")
	proto.RegisterType((*DealsRequest)(nil), "sonm.DealsRequest")
	proto.RegisterType((*DWHDealsReply)(nil), "sonm.DWHDealsReply")
	proto.RegisterType((*DWHDeal)(nil), "sonm.DWHDeal")
	proto.RegisterType((*DealConditionsRequest)(nil), "sonm.DealConditionsRequest")
	proto.RegisterType((*DealConditionsReply)(nil), "sonm.DealConditionsReply")
	proto.RegisterType((*OrdersRequest)(nil), "sonm.OrdersRequest")
	proto.RegisterType((*MatchingOrdersRequest)(nil), "sonm.MatchingOrdersRequest")
	proto.RegisterType((*DWHOrdersReply)(nil), "sonm.DWHOrdersReply")
	proto.RegisterType((*DWHOrder)(nil), "sonm.DWHOrder")
	proto.RegisterType((*DealCondition)(nil), "sonm.DealCondition")
	proto.RegisterType((*DWHWorker)(nil), "sonm.DWHWorker")
	proto.RegisterType((*ProfilesRequest)(nil), "sonm.ProfilesRequest")
	proto.RegisterType((*ProfilesReply)(nil), "sonm.ProfilesReply")
	proto.RegisterType((*Profile)(nil), "sonm.Profile")
	proto.RegisterType((*BlacklistRequest)(nil), "sonm.BlacklistRequest")
	proto.RegisterType((*BlacklistReply)(nil), "sonm.BlacklistReply")
	proto.RegisterType((*BlacklistsContainingUserReply)(nil), "sonm.BlacklistsContainingUserReply")
	proto.RegisterType((*ValidatorsRequest)(nil), "sonm.ValidatorsRequest")
	proto.RegisterType((*ValidatorsReply)(nil), "sonm.ValidatorsReply")
	proto.RegisterType((*DWHValidator)(nil), "sonm.DWHValidator")
	proto.RegisterType((*Validator)(nil), "sonm.Validator")
	proto.RegisterType((*DealChangeRequestsReply)(nil), "sonm.DealChangeRequestsReply")
	proto.RegisterType((*DealChangeRequest)(nil), "sonm.DealChangeRequest")
	proto.RegisterType((*DealPayment)(nil), "sonm.DealPayment")
	proto.RegisterType((*ChangeRequestsRequest)(nil), "sonm.ChangeRequestsRequest")
	proto.RegisterType((*WorkersRequest)(nil), "sonm.WorkersRequest")
	proto.RegisterType((*WorkersReply)(nil), "sonm.WorkersReply")
	proto.RegisterType((*Certificate)(nil), "sonm.Certificate")
	proto.RegisterType((*MaxMinUint64)(nil), "sonm.MaxMinUint64")
	proto.RegisterType((*MaxMinBig)(nil), "sonm.MaxMinBig")
	proto.RegisterType((*MaxMinTimestamp)(nil), "sonm.MaxMinTimestamp")
	proto.RegisterType((*CmpUint64)(nil), "sonm.CmpUint64")
	proto.RegisterType((*BlacklistQuery)(nil), "sonm.BlacklistQuery")
	proto.RegisterType((*DWHStatsReply)(nil), "sonm.DWHStatsReply")
	proto.RegisterType((*OrdersByIDsRequest)(nil), "sonm.OrdersByIDsRequest")
	proto.RegisterEnum("sonm.CmpOp", CmpOp_name, CmpOp_value)
	proto.RegisterEnum("sonm.SortingOrder", SortingOrder_name, SortingOrder_value)
	proto.RegisterEnum("sonm.ProfileRole", ProfileRole_name, ProfileRole_value)
	proto.RegisterEnum("sonm.BlacklistOption", BlacklistOption_name, BlacklistOption_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DWH service

type DWHClient interface {
	GetDeals(ctx context.Context, in *DealsRequest, opts ...grpc.CallOption) (*DWHDealsReply, error)
	GetDealDetails(ctx context.Context, in *BigInt, opts ...grpc.CallOption) (*DWHDeal, error)
	GetDealConditions(ctx context.Context, in *DealConditionsRequest, opts ...grpc.CallOption) (*DealConditionsReply, error)
	GetOrders(ctx context.Context, in *OrdersRequest, opts ...grpc.CallOption) (*DWHOrdersReply, error)
	GetMatchingOrders(ctx context.Context, in *MatchingOrdersRequest, opts ...grpc.CallOption) (*DWHOrdersReply, error)
	GetOrderDetails(ctx context.Context, in *BigInt, opts ...grpc.CallOption) (*DWHOrder, error)
	GetProfiles(ctx context.Context, in *ProfilesRequest, opts ...grpc.CallOption) (*ProfilesReply, error)
	GetProfileInfo(ctx context.Context, in *EthID, opts ...grpc.CallOption) (*Profile, error)
	GetBlacklist(ctx context.Context, in *BlacklistRequest, opts ...grpc.CallOption) (*BlacklistReply, error)
	GetBlacklistsContainingUser(ctx context.Context, in *BlacklistRequest, opts ...grpc.CallOption) (*BlacklistsContainingUserReply, error)
	GetValidators(ctx context.Context, in *ValidatorsRequest, opts ...grpc.CallOption) (*ValidatorsReply, error)
	// Deprecated: use GetChangeRequests.
	GetDealChangeRequests(ctx context.Context, in *BigInt, opts ...grpc.CallOption) (*DealChangeRequestsReply, error)
	GetChangeRequests(ctx context.Context, in *ChangeRequestsRequest, opts ...grpc.CallOption) (*DealChangeRequestsReply, error)
	GetWorkers(ctx context.Context, in *WorkersRequest, opts ...grpc.CallOption) (*WorkersReply, error)
	GetStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DWHStatsReply, error)
	GetOrdersByIDs(ctx context.Context, in *OrdersByIDsRequest, opts ...grpc.CallOption) (*DWHOrdersReply, error)
}

type dWHClient struct {
	cc *grpc.ClientConn
}

func NewDWHClient(cc *grpc.ClientConn) DWHClient {
	return &dWHClient{cc}
}

func (c *dWHClient) GetDeals(ctx context.Context, in *DealsRequest, opts ...grpc.CallOption) (*DWHDealsReply, error) {
	out := new(DWHDealsReply)
	err := grpc.Invoke(ctx, "/sonm.DWH/GetDeals", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dWHClient) GetDealDetails(ctx context.Context, in *BigInt, opts ...grpc.CallOption) (*DWHDeal, error) {
	out := new(DWHDeal)
	err := grpc.Invoke(ctx, "/sonm.DWH/GetDealDetails", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dWHClient) GetDealConditions(ctx context.Context, in *DealConditionsRequest, opts ...grpc.CallOption) (*DealConditionsReply, error) {
	out := new(DealConditionsReply)
	err := grpc.Invoke(ctx, "/sonm.DWH/GetDealConditions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dWHClient) GetOrders(ctx context.Context, in *OrdersRequest, opts ...grpc.CallOption) (*DWHOrdersReply, error) {
	out := new(DWHOrdersReply)
	err := grpc.Invoke(ctx, "/sonm.DWH/GetOrders", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dWHClient) GetMatchingOrders(ctx context.Context, in *MatchingOrdersRequest, opts ...grpc.CallOption) (*DWHOrdersReply, error) {
	out := new(DWHOrdersReply)
	err := grpc.Invoke(ctx, "/sonm.DWH/GetMatchingOrders", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dWHClient) GetOrderDetails(ctx context.Context, in *BigInt, opts ...grpc.CallOption) (*DWHOrder, error) {
	out := new(DWHOrder)
	err := grpc.Invoke(ctx, "/sonm.DWH/GetOrderDetails", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dWHClient) GetProfiles(ctx context.Context, in *ProfilesRequest, opts ...grpc.CallOption) (*ProfilesReply, error) {
	out := new(ProfilesReply)
	err := grpc.Invoke(ctx, "/sonm.DWH/GetProfiles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dWHClient) GetProfileInfo(ctx context.Context, in *EthID, opts ...grpc.CallOption) (*Profile, error) {
	out := new(Profile)
	err := grpc.Invoke(ctx, "/sonm.DWH/GetProfileInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dWHClient) GetBlacklist(ctx context.Context, in *BlacklistRequest, opts ...grpc.CallOption) (*BlacklistReply, error) {
	out := new(BlacklistReply)
	err := grpc.Invoke(ctx, "/sonm.DWH/GetBlacklist", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dWHClient) GetBlacklistsContainingUser(ctx context.Context, in *BlacklistRequest, opts ...grpc.CallOption) (*BlacklistsContainingUserReply, error) {
	out := new(BlacklistsContainingUserReply)
	err := grpc.Invoke(ctx, "/sonm.DWH/GetBlacklistsContainingUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dWHClient) GetValidators(ctx context.Context, in *ValidatorsRequest, opts ...grpc.CallOption) (*ValidatorsReply, error) {
	out := new(ValidatorsReply)
	err := grpc.Invoke(ctx, "/sonm.DWH/GetValidators", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dWHClient) GetDealChangeRequests(ctx context.Context, in *BigInt, opts ...grpc.CallOption) (*DealChangeRequestsReply, error) {
	out := new(DealChangeRequestsReply)
	err := grpc.Invoke(ctx, "/sonm.DWH/GetDealChangeRequests", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dWHClient) GetChangeRequests(ctx context.Context, in *ChangeRequestsRequest, opts ...grpc.CallOption) (*DealChangeRequestsReply, error) {
	out := new(DealChangeRequestsReply)
	err := grpc.Invoke(ctx, "/sonm.DWH/GetChangeRequests", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dWHClient) GetWorkers(ctx context.Context, in *WorkersRequest, opts ...grpc.CallOption) (*WorkersReply, error) {
	out := new(WorkersReply)
	err := grpc.Invoke(ctx, "/sonm.DWH/GetWorkers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dWHClient) GetStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DWHStatsReply, error) {
	out := new(DWHStatsReply)
	err := grpc.Invoke(ctx, "/sonm.DWH/GetStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dWHClient) GetOrdersByIDs(ctx context.Context, in *OrdersByIDsRequest, opts ...grpc.CallOption) (*DWHOrdersReply, error) {
	out := new(DWHOrdersReply)
	err := grpc.Invoke(ctx, "/sonm.DWH/GetOrdersByIDs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DWH service

type DWHServer interface {
	GetDeals(context.Context, *DealsRequest) (*DWHDealsReply, error)
	GetDealDetails(context.Context, *BigInt) (*DWHDeal, error)
	GetDealConditions(context.Context, *DealConditionsRequest) (*DealConditionsReply, error)
	GetOrders(context.Context, *OrdersRequest) (*DWHOrdersReply, error)
	GetMatchingOrders(context.Context, *MatchingOrdersRequest) (*DWHOrdersReply, error)
	GetOrderDetails(context.Context, *BigInt) (*DWHOrder, error)
	GetProfiles(context.Context, *ProfilesRequest) (*ProfilesReply, error)
	GetProfileInfo(context.Context, *EthID) (*Profile, error)
	GetBlacklist(context.Context, *BlacklistRequest) (*BlacklistReply, error)
	GetBlacklistsContainingUser(context.Context, *BlacklistRequest) (*BlacklistsContainingUserReply, error)
	GetValidators(context.Context, *ValidatorsRequest) (*ValidatorsReply, error)
	// Deprecated: use GetChangeRequests.
	GetDealChangeRequests(context.Context, *BigInt) (*DealChangeRequestsReply, error)
	GetChangeRequests(context.Context, *ChangeRequestsRequest) (*DealChangeRequestsReply, error)
	GetWorkers(context.Context, *WorkersRequest) (*WorkersReply, error)
	GetStats(context.Context, *Empty) (*DWHStatsReply, error)
	GetOrdersByIDs(context.Context, *OrdersByIDsRequest) (*DWHOrdersReply, error)
}

func RegisterDWHServer(s *grpc.Server, srv DWHServer) {
	s.RegisterService(&_DWH_serviceDesc, srv)
}

func _DWH_GetDeals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DealsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DWHServer).GetDeals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.DWH/GetDeals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DWHServer).GetDeals(ctx, req.(*DealsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DWH_GetDealDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BigInt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DWHServer).GetDealDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.DWH/GetDealDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DWHServer).GetDealDetails(ctx, req.(*BigInt))
	}
	return interceptor(ctx, in, info, handler)
}

func _DWH_GetDealConditions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DealConditionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DWHServer).GetDealConditions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.DWH/GetDealConditions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DWHServer).GetDealConditions(ctx, req.(*DealConditionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DWH_GetOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DWHServer).GetOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.DWH/GetOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DWHServer).GetOrders(ctx, req.(*OrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DWH_GetMatchingOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchingOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DWHServer).GetMatchingOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.DWH/GetMatchingOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DWHServer).GetMatchingOrders(ctx, req.(*MatchingOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DWH_GetOrderDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BigInt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DWHServer).GetOrderDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.DWH/GetOrderDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DWHServer).GetOrderDetails(ctx, req.(*BigInt))
	}
	return interceptor(ctx, in, info, handler)
}

func _DWH_GetProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DWHServer).GetProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.DWH/GetProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DWHServer).GetProfiles(ctx, req.(*ProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DWH_GetProfileInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EthID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DWHServer).GetProfileInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.DWH/GetProfileInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DWHServer).GetProfileInfo(ctx, req.(*EthID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DWH_GetBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlacklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DWHServer).GetBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.DWH/GetBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DWHServer).GetBlacklist(ctx, req.(*BlacklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DWH_GetBlacklistsContainingUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlacklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DWHServer).GetBlacklistsContainingUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.DWH/GetBlacklistsContainingUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DWHServer).GetBlacklistsContainingUser(ctx, req.(*BlacklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DWH_GetValidators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DWHServer).GetValidators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.DWH/GetValidators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DWHServer).GetValidators(ctx, req.(*ValidatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DWH_GetDealChangeRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BigInt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DWHServer).GetDealChangeRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.DWH/GetDealChangeRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DWHServer).GetDealChangeRequests(ctx, req.(*BigInt))
	}
	return interceptor(ctx, in, info, handler)
}

func _DWH_GetChangeRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DWHServer).GetChangeRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.DWH/GetChangeRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DWHServer).GetChangeRequests(ctx, req.(*ChangeRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DWH_GetWorkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DWHServer).GetWorkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.DWH/GetWorkers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DWHServer).GetWorkers(ctx, req.(*WorkersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DWH_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DWHServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.DWH/GetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DWHServer).GetStats(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DWH_GetOrdersByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrdersByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DWHServer).GetOrdersByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.DWH/GetOrdersByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DWHServer).GetOrdersByIDs(ctx, req.(*OrdersByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DWH_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sonm.DWH",
	HandlerType: (*DWHServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDeals",
			Handler:    _DWH_GetDeals_Handler,
		},
		{
			MethodName: "GetDealDetails",
			Handler:    _DWH_GetDealDetails_Handler,
		},
		{
			MethodName: "GetDealConditions",
			Handler:    _DWH_GetDealConditions_Handler,
		},
		{
			MethodName: "GetOrders",
			Handler:    _DWH_GetOrders_Handler,
		},
		{
			MethodName: "GetMatchingOrders",
			Handler:    _DWH_GetMatchingOrders_Handler,
		},
		{
			MethodName: "GetOrderDetails",
			Handler:    _DWH_GetOrderDetails_Handler,
		},
		{
			MethodName: "GetProfiles",
			Handler:    _DWH_GetProfiles_Handler,
		},
		{
			MethodName: "GetProfileInfo",
			Handler:    _DWH_GetProfileInfo_Handler,
		},
		{
			MethodName: "GetBlacklist",
			Handler:    _DWH_GetBlacklist_Handler,
		},
		{
			MethodName: "GetBlacklistsContainingUser",
			Handler:    _DWH_GetBlacklistsContainingUser_Handler,
		},
		{
			MethodName: "GetValidators",
			Handler:    _DWH_GetValidators_Handler,
		},
		{
			MethodName: "GetDealChangeRequests",
			Handler:    _DWH_GetDealChangeRequests_Handler,
		},
		{
			MethodName: "GetChangeRequests",
			Handler:    _DWH_GetChangeRequests_Handler,
		},
		{
			MethodName: "GetWorkers",
			Handler:    _DWH_GetWorkers_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _DWH_GetStats_Handler,
		},
		{
			MethodName: "GetOrdersByIDs",
			Handler:    _DWH_GetOrdersByIDs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dwh.proto",
}

func init() { proto.RegisterFile("dwh.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 2542 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5a, 0xdb, 0x6e, 0xdb, 0xc8,
	0xf9, 0x17, 0x25, 0x59, 0xa2, 0x3e, 0x1d, 0x3d, 0xb6, 0x77, 0xb5, 0xce, 0xae, 0xe1, 0x30, 0xbb,
	0xfb, 0x77, 0xfc, 0x4f, 0xb4, 0x89, 0xb3, 0xdd, 0xa6, 0x07, 0xb4, 0xb0, 0xa5, 0xd4, 0xf1, 0x36,
	0xce, 0x81, 0xf1, 0xd6, 0x17, 0x6d, 0x81, 0xd2, 0xe2, 0xd8, 0x1e, 0x98, 0x22, 0x55, 0x72, 0xe4,
	0x44, 0x97, 0x45, 0x2f, 0x5a, 0xec, 0x65, 0xdf, 0xa0, 0xf7, 0x7d, 0x82, 0x05, 0xfa, 0x00, 0x7d,
	0x87, 0x02, 0x05, 0x0a, 0x14, 0xed, 0x63, 0x14, 0x73, 0xe0, 0x70, 0x48, 0x91, 0x76, 0x0c, 0x6c,
	0xd1, 0xde, 0x69, 0xbe, 0xef, 0x37, 0xc3, 0x99, 0x6f, 0x7e, 0xdf, 0x69, 0x6c, 0x68, 0xb8, 0x6f,
	0xce, 0x07, 0xd3, 0x30, 0xa0, 0x01, 0xaa, 0x46, 0x81, 0x3f, 0x59, 0x6f, 0x9d, 0x90, 0x33, 0xe2,
	0x53, 0x21, 0x5b, 0x5f, 0x9e, 0x38, 0xe1, 0x05, 0xa6, 0x53, 0xcf, 0x19, 0x63, 0x29, 0xea, 0x12,
	0x9f, 0x01, 0x7d, 0xe2, 0xc4, 0x02, 0x4a, 0x26, 0x38, 0xa2, 0xce, 0x64, 0x2a, 0x04, 0xd6, 0x0b,
	0x68, 0xbf, 0x0e, 0x42, 0x4a, 0xfc, 0xb3, 0x17, 0x53, 0x4a, 0x02, 0x1f, 0xad, 0xc2, 0xd2, 0x29,
	0xc1, 0x9e, 0xdb, 0x37, 0x36, 0x8d, 0xad, 0x86, 0x2d, 0x06, 0x68, 0x0b, 0x96, 0x82, 0xd0, 0xc5,
	0x61, 0xbf, 0xbc, 0x69, 0x6c, 0x75, 0x76, 0xd0, 0x80, 0x2d, 0x3b, 0x88, 0x67, 0x32, 0x8d, 0x2d,
	0x00, 0xd6, 0x5f, 0x6b, 0xd0, 0x1a, 0x61, 0xc7, 0x8b, 0x6c, 0xfc, 0xeb, 0x19, 0x8e, 0x28, 0xda,
	0x82, 0x5a, 0x44, 0x1d, 0x3a, 0x8b, 0xf8, 0x8a, 0x9d, 0x9d, 0x9e, 0x98, 0xcb, 0x30, 0xaf, 0xb9,
	0xdc, 0x96, 0x7a, 0xf4, 0x00, 0x20, 0x9a, 0x4d, 0xa7, 0x1e, 0xc1, 0xe1, 0xc1, 0x88, 0x7f, 0xa9,
	0x19, 0xa3, 0x9f, 0xd0, 0xf3, 0x5d, 0xd7, 0x0d, 0x71, 0x14, 0xd9, 0x1a, 0x86, 0xcd, 0x18, 0x07,
	0x7e, 0x34, 0x9b, 0xf0, 0x19, 0x95, 0xa2, 0x19, 0x09, 0x06, 0xdd, 0x03, 0x73, 0xe2, 0x44, 0x94,
	0xe3, 0xab, 0x05, 0x78, 0x85, 0x40, 0x16, 0x2c, 0x39, 0xd1, 0xc5, 0xc1, 0xa8, 0xbf, 0xc4, 0xa1,
	0x2d, 0x01, 0xdd, 0x23, 0x67, 0x07, 0x3e, 0xb5, 0x85, 0x8a, 0x61, 0x4e, 0x88, 0x7b, 0x30, 0xea,
	0xd7, 0xf2, 0x30, 0x5c, 0x85, 0x06, 0x60, 0xba, 0xb3, 0xd0, 0x61, 0x06, 0xee, 0xd7, 0x39, 0x4c,
	0x5a, 0xf0, 0xd0, 0x79, 0x7b, 0x48, 0xfc, 0xaf, 0x88, 0x4f, 0xbf, 0xf8, 0xdc, 0x56, 0x18, 0xf4,
	0x09, 0x2c, 0x4d, 0x43, 0x32, 0xc6, 0x7d, 0x93, 0x83, 0xbb, 0x3a, 0x78, 0x8f, 0x9c, 0xd9, 0x42,
	0x8b, 0xfe, 0x1f, 0x4c, 0x1f, 0xd3, 0x53, 0xcf, 0x39, 0x8b, 0xfa, 0x0d, 0x1d, 0x39, 0x9c, 0x4c,
	0xe3, 0x35, 0x63, 0x00, 0xfa, 0x31, 0xf4, 0xd8, 0x86, 0x5d, 0xec, 0x53, 0x42, 0xe7, 0xcf, 0xf0,
	0x25, 0xf6, 0xfa, 0xc0, 0x6f, 0x64, 0x45, 0x4c, 0x4a, 0xa9, 0xec, 0x05, 0x30, 0x5b, 0x80, 0x9d,
	0x26, 0xb5, 0x40, 0xf3, 0x8a, 0x05, 0xb2, 0x60, 0xb4, 0x07, 0x70, 0x82, 0xfd, 0xf1, 0x39, 0xe3,
	0x69, 0xd4, 0x6f, 0x6d, 0x56, 0xb6, 0x9a, 0x3b, 0x56, 0xc2, 0x86, 0x98, 0x31, 0x83, 0x3d, 0x05,
	0x7a, 0xe2, 0xd3, 0x70, 0x6e, 0x6b, 0xb3, 0x18, 0x3d, 0x3d, 0x32, 0x21, 0xb4, 0xdf, 0xde, 0x34,
	0xb6, 0xaa, 0xb6, 0x18, 0xa0, 0xf7, 0xa0, 0x16, 0x9c, 0x9e, 0x46, 0x98, 0xf6, 0x3b, 0x5c, 0x2c,
	0x47, 0xe8, 0x33, 0x30, 0x23, 0xc1, 0xd1, 0xa8, 0xdf, 0xe5, 0xdf, 0x5b, 0x49, 0x33, 0x97, 0x73,
	0xde, 0x56, 0x20, 0xf4, 0x21, 0x34, 0xde, 0x10, 0x7a, 0x3e, 0x0c, 0x66, 0x3e, 0xed, 0xf7, 0x36,
	0x8d, 0x2d, 0xd3, 0x4e, 0x04, 0x68, 0x00, 0x0d, 0xc7, 0x9f, 0x7f, 0x15, 0x71, 0xf6, 0x2c, 0x17,
	0xb0, 0x27, 0x81, 0xac, 0xbf, 0x82, 0x6e, 0xe6, 0x2c, 0xa8, 0x07, 0x95, 0x0b, 0x3c, 0xe7, 0xae,
	0x50, 0xb5, 0xd9, 0x4f, 0xe6, 0x5a, 0x97, 0x8e, 0x37, 0xc3, 0x92, 0xf0, 0x79, 0xc4, 0x10, 0x80,
	0xef, 0x97, 0x1f, 0x1b, 0xd6, 0x97, 0xd0, 0x1e, 0x1d, 0x3f, 0x95, 0xe6, 0x9a, 0x7a, 0x73, 0x74,
	0x07, 0x96, 0x5c, 0x36, 0xea, 0x1b, 0xfc, 0x7c, 0x6d, 0x69, 0x4f, 0x81, 0xb1, 0x85, 0x8e, 0x59,
	0x6d, 0xcc, 0x8f, 0x54, 0x16, 0x56, 0xe3, 0x03, 0xeb, 0x9f, 0x65, 0xa8, 0x4b, 0x20, 0xda, 0x80,
	0x2a, 0x83, 0xf2, 0x8d, 0x35, 0x77, 0x20, 0xb9, 0x15, 0x9b, 0xcb, 0xd1, 0xba, 0x46, 0x35, 0xb1,
	0x48, 0xc2, 0xac, 0xed, 0x1c, 0x66, 0x55, 0x38, 0x66, 0x91, 0x44, 0xdb, 0x39, 0x24, 0xaa, 0x0a,
	0xec, 0x02, 0x5f, 0x76, 0x60, 0x35, 0xf6, 0xf5, 0x21, 0x0e, 0x29, 0x39, 0x25, 0x63, 0x87, 0xe2,
	0x88, 0x3b, 0x63, 0xcb, 0xce, 0xd5, 0xb1, 0x39, 0xb1, 0xb7, 0xa7, 0xe6, 0xd4, 0xc4, 0x9c, 0x3c,
	0x1d, 0x7a, 0x00, 0x2b, 0xce, 0x98, 0x92, 0x4b, 0x3c, 0x3c, 0x77, 0xfc, 0x33, 0x2c, 0x69, 0xc8,
	0x1d, 0xd5, 0xb4, 0xf3, 0x54, 0x8c, 0x6f, 0x4e, 0x74, 0x71, 0xe4, 0x9c, 0x71, 0x07, 0x6d, 0xd9,
	0x72, 0xc4, 0xe4, 0x27, 0xc4, 0x65, 0xf2, 0x86, 0x90, 0x8b, 0x91, 0xf5, 0x8d, 0x01, 0x6b, 0xcc,
	0x98, 0xc3, 0xc0, 0x77, 0x09, 0xa3, 0x9c, 0x8a, 0x8e, 0x1f, 0x43, 0x8d, 0xd9, 0xf7, 0x60, 0x24,
	0x2d, 0x9f, 0x0e, 0x1f, 0x52, 0x97, 0xb0, 0xbe, 0x9c, 0xcf, 0xfa, 0x4a, 0x21, 0xeb, 0xab, 0x37,
	0x66, 0xfd, 0x52, 0x86, 0xf5, 0xd6, 0xaf, 0x60, 0x25, 0xbb, 0x77, 0x46, 0xbc, 0x47, 0x3c, 0xf6,
	0x4a, 0x91, 0x64, 0xdf, 0x4a, 0xc2, 0x1b, 0x05, 0xb7, 0x35, 0x58, 0x01, 0x11, 0xff, 0x5e, 0x83,
	0x36, 0x4f, 0x22, 0x37, 0x34, 0xcb, 0x1d, 0xa8, 0xd2, 0xf9, 0x14, 0xcb, 0xa4, 0x24, 0x63, 0x1f,
	0x5f, 0xe8, 0x68, 0x3e, 0xc5, 0x36, 0x57, 0xa2, 0xbb, 0x2a, 0xff, 0x54, 0x38, 0x6c, 0x59, 0x83,
	0x65, 0x12, 0xd0, 0x3d, 0x30, 0x9d, 0x19, 0x3d, 0x0f, 0xae, 0x4c, 0x0e, 0x31, 0x02, 0x3d, 0x86,
	0x0e, 0xdf, 0x3e, 0x0e, 0xa7, 0x4e, 0x48, 0xe7, 0x3c, 0x4b, 0x54, 0x72, 0xe7, 0x64, 0x70, 0xa9,
	0x74, 0x50, 0xbb, 0x49, 0x3a, 0x68, 0xbc, 0x73, 0x3a, 0x68, 0x5e, 0x97, 0x0e, 0xf6, 0x61, 0x75,
	0x1c, 0x62, 0x87, 0x06, 0x61, 0xda, 0x19, 0x59, 0x58, 0x2e, 0x88, 0xe8, 0xb9, 0x13, 0xd0, 0x30,
	0x15, 0xd5, 0xdb, 0xdc, 0x04, 0x77, 0x34, 0x1b, 0xbf, 0x53, 0x58, 0x7f, 0x04, 0x0d, 0xbe, 0x38,
	0x76, 0x8f, 0x5e, 0xf3, 0x18, 0xde, 0xdc, 0x59, 0xd3, 0x4f, 0x79, 0x14, 0x97, 0x2d, 0x76, 0x82,
	0x4b, 0xbc, 0xa2, 0x9b, 0xef, 0x15, 0xbd, 0x42, 0xaf, 0x58, 0xbe, 0xb1, 0x57, 0xa0, 0x6c, 0x2e,
	0xd0, 0x0b, 0x89, 0x95, 0x6b, 0x0b, 0x89, 0x01, 0x34, 0x22, 0xec, 0xbb, 0xec, 0x77, 0xd4, 0x5f,
	0x2d, 0xa0, 0x49, 0x02, 0xf9, 0x4f, 0x64, 0x8e, 0xdf, 0x18, 0xb0, 0x76, 0xe8, 0xd0, 0xf1, 0x79,
	0x5c, 0xb1, 0x29, 0x67, 0xfb, 0x10, 0xca, 0xc4, 0xcd, 0x75, 0xb4, 0x32, 0x71, 0x6f, 0x18, 0x7b,
	0x52, 0x46, 0xab, 0x66, 0x43, 0xc9, 0x73, 0xe8, 0x8c, 0x8e, 0x9f, 0xc6, 0x5f, 0x67, 0x51, 0xe4,
	0x53, 0xa8, 0xf1, 0xba, 0x31, 0x8e, 0x20, 0x1d, 0x95, 0xbf, 0x44, 0x55, 0x29, 0xb5, 0x05, 0x81,
	0xe3, 0x9b, 0x32, 0x98, 0x31, 0x14, 0xdd, 0x8e, 0x6b, 0x54, 0x71, 0x92, 0xa6, 0xc6, 0x41, 0x59,
	0x9c, 0xf2, 0xec, 0x90, 0x47, 0x7a, 0xb1, 0x68, 0x3e, 0xbf, 0x37, 0xa1, 0x29, 0xe5, 0xcf, 0x9d,
	0x09, 0xe6, 0xc7, 0x6d, 0xd8, 0xba, 0x08, 0x7d, 0x0a, 0x1d, 0x39, 0xe4, 0xa7, 0x0c, 0xe7, 0xfc,
	0xe0, 0x0d, 0x3b, 0x23, 0x65, 0x79, 0x26, 0x96, 0x2c, 0xa6, 0xb3, 0x3c, 0x15, 0xba, 0x0f, 0x8d,
	0xa1, 0x72, 0x8b, 0x9a, 0xee, 0xd2, 0x9a, 0x43, 0x28, 0x44, 0x8a, 0x93, 0xf5, 0xeb, 0x38, 0x69,
	0xfd, 0xb1, 0x02, 0xed, 0x54, 0xa4, 0x46, 0x1d, 0x45, 0x84, 0x2a, 0xbf, 0xfa, 0xff, 0xbd, 0x82,
	0x7c, 0x5d, 0x8b, 0x9c, 0x4b, 0xa2, 0x0c, 0x51, 0x51, 0xd2, 0x8a, 0xa3, 0x64, 0x6e, 0x21, 0x2e,
	0x42, 0xe4, 0x7d, 0x68, 0x44, 0xd4, 0x09, 0x29, 0x33, 0x9f, 0x34, 0xd1, 0xa2, 0x41, 0x15, 0x02,
	0xdd, 0x85, 0x3a, 0xf6, 0x5d, 0x0e, 0x36, 0xf3, 0xc1, 0xb1, 0x1e, 0x0d, 0xa0, 0x49, 0x03, 0xea,
	0x78, 0x2f, 0x9d, 0x79, 0x30, 0xa3, 0x32, 0x52, 0xa7, 0xf7, 0xa0, 0x03, 0xb4, 0x0c, 0x07, 0xc5,
	0x19, 0xce, 0xfa, 0xad, 0x01, 0x8d, 0xd1, 0xf1, 0xd3, 0xe3, 0x20, 0xbc, 0xc0, 0x61, 0xca, 0x56,
	0xc6, 0xb5, 0xb6, 0xda, 0x86, 0x7a, 0xe4, 0x39, 0x97, 0xf8, 0x8a, 0xab, 0x8b, 0x01, 0xcc, 0x6d,
	0xc7, 0x81, 0x7f, 0x4a, 0xc2, 0x09, 0x76, 0xf9, 0xb5, 0x99, 0x76, 0x22, 0xb0, 0xfe, 0x55, 0x86,
	0xee, 0xcb, 0x30, 0x38, 0x25, 0x1e, 0x56, 0x41, 0xe3, 0x13, 0xa8, 0x86, 0x81, 0x87, 0x65, 0x53,
	0x27, 0x93, 0xaa, 0x04, 0xd9, 0x81, 0x87, 0x6d, 0xae, 0x46, 0xdf, 0x83, 0x36, 0x59, 0x70, 0xb5,
	0x82, 0xfc, 0x92, 0x46, 0xa2, 0x3e, 0xd4, 0xc7, 0xd2, 0x9f, 0x2a, 0x9b, 0x95, 0xad, 0x86, 0x1d,
	0x0f, 0xd1, 0x06, 0x80, 0x80, 0x9e, 0x12, 0x1c, 0x4a, 0x67, 0xd3, 0x24, 0xe8, 0x87, 0xd0, 0x39,
	0xf1, 0x9c, 0xf1, 0x85, 0x47, 0x22, 0xfa, 0x6a, 0x86, 0xc3, 0xb9, 0xec, 0xdf, 0x56, 0xa5, 0x8d,
	0x53, 0x3a, 0x3b, 0x83, 0x4d, 0x02, 0x5e, 0x2d, 0x3f, 0xe0, 0xd5, 0x0b, 0xd3, 0x8a, 0x79, 0xe3,
	0xb4, 0xd2, 0xc8, 0x46, 0xc8, 0x97, 0xd0, 0x4e, 0x2c, 0xcd, 0x02, 0xe4, 0x5d, 0x30, 0xa7, 0x52,
	0x90, 0x2e, 0xf1, 0x63, 0x5b, 0x2b, 0x75, 0x41, 0x8c, 0xfc, 0x5b, 0x19, 0xea, 0x12, 0xcb, 0x7a,
	0x71, 0xd9, 0xbd, 0x14, 0xd1, 0x47, 0xea, 0xd1, 0xc7, 0xd0, 0xce, 0x0b, 0x91, 0x69, 0x21, 0x42,
	0x50, 0xd5, 0x82, 0x22, 0xff, 0xcd, 0xae, 0x2d, 0x1d, 0x06, 0xe3, 0x21, 0x5f, 0x33, 0x1a, 0x06,
	0xe1, 0x34, 0xd0, 0x3c, 0xd8, 0xb4, 0xd3, 0x42, 0x16, 0x4d, 0x0f, 0x22, 0xb6, 0x61, 0x1c, 0x45,
	0x24, 0xf0, 0x1d, 0x8f, 0xdf, 0x83, 0x69, 0x67, 0xa4, 0xc8, 0x82, 0x56, 0x2a, 0x8c, 0xd6, 0xf9,
	0xc7, 0x52, 0x32, 0x46, 0x14, 0x51, 0xbe, 0xef, 0x46, 0x17, 0x11, 0x77, 0xe1, 0xaa, 0xad, 0x49,
	0x12, 0xfd, 0x1e, 0x71, 0x45, 0x0b, 0xad, 0xf4, 0x4c, 0xc2, 0x76, 0x4c, 0x22, 0x45, 0x17, 0xec,
	0x72, 0x5f, 0x35, 0xed, 0xb4, 0xd0, 0xfa, 0xbd, 0x01, 0x3d, 0x35, 0xd6, 0x9e, 0x3d, 0x66, 0xd7,
	0x98, 0x5a, 0xe8, 0xbf, 0xd5, 0x04, 0x3b, 0x85, 0x8e, 0xb6, 0x13, 0xc6, 0x9f, 0x6d, 0xa8, 0x07,
	0x6f, 0xfc, 0x2b, 0x37, 0x12, 0x03, 0xd8, 0xda, 0x8e, 0x90, 0x61, 0xd6, 0xe5, 0x31, 0x9f, 0x4b,
	0x04, 0x09, 0xbd, 0x2a, 0x3a, 0xbd, 0xce, 0xe0, 0x23, 0xf5, 0xc5, 0x68, 0x18, 0xf8, 0xd4, 0x21,
	0x3e, 0xf1, 0xcf, 0x18, 0x8d, 0xc4, 0x06, 0x1e, 0x00, 0x28, 0x07, 0x8b, 0x29, 0x9c, 0x93, 0x12,
	0x12, 0x4c, 0x01, 0x8f, 0xff, 0x62, 0xc0, 0xf2, 0xcf, 0x1c, 0x8f, 0xb8, 0x2c, 0x4b, 0xaa, 0x30,
	0xf4, 0x5d, 0xe8, 0x5c, 0xc6, 0x42, 0x41, 0x54, 0x23, 0xbf, 0xf2, 0xcd, 0xc0, 0xfe, 0xbb, 0x2d,
	0xd5, 0xcf, 0xa1, 0xab, 0x1f, 0x85, 0x99, 0x69, 0x07, 0x40, 0xed, 0x30, 0x36, 0x13, 0x52, 0xc5,
	0x90, 0x42, 0xdb, 0x1a, 0xaa, 0xc0, 0x50, 0x7f, 0x36, 0xa0, 0xa5, 0x4f, 0x61, 0x49, 0x4f, 0x4d,
	0x4a, 0x9b, 0x27, 0x59, 0x36, 0x41, 0x30, 0xa7, 0xf6, 0x99, 0x53, 0x97, 0x85, 0x53, 0xb3, 0xdf,
	0x4c, 0x46, 0xc6, 0x81, 0x1f, 0x3b, 0x3a, 0xfb, 0xcd, 0x0a, 0xd2, 0x59, 0xe8, 0x49, 0x27, 0x67,
	0x3f, 0x59, 0xa9, 0xe4, 0xe2, 0x68, 0x1c, 0x92, 0xa9, 0x72, 0xef, 0x86, 0xad, 0x8b, 0xde, 0x25,
	0x47, 0x5b, 0x43, 0x68, 0x24, 0x7b, 0xdf, 0xd4, 0x6a, 0xd3, 0x45, 0xd6, 0xc4, 0xf5, 0xa9, 0x16,
	0xa1, 0xc4, 0xc0, 0x7a, 0x0e, 0xef, 0xf3, 0xda, 0x46, 0x6f, 0xdb, 0x55, 0xe3, 0x6a, 0x86, 0x52,
	0x20, 0xed, 0xfc, 0xbe, 0xd6, 0xb6, 0xea, 0x13, 0x6c, 0x05, 0xb4, 0xfe, 0x54, 0x86, 0xe5, 0x05,
	0xfd, 0x35, 0x95, 0x73, 0x92, 0xe2, 0xcb, 0x57, 0x34, 0xb1, 0x0f, 0xa1, 0x29, 0xbf, 0xc2, 0x9a,
	0x56, 0xd9, 0xa4, 0x2e, 0xf4, 0xb2, 0x3a, 0x26, 0x55, 0x05, 0x55, 0x8b, 0xaa, 0xa0, 0xa5, 0xe2,
	0x2a, 0xe8, 0xa1, 0x6a, 0x89, 0x6b, 0xfc, 0x6b, 0x1f, 0x48, 0x67, 0xd1, 0xcf, 0x96, 0x69, 0x8d,
	0xef, 0xeb, 0x0d, 0x5a, 0x51, 0xe1, 0xa4, 0x10, 0xd6, 0x1f, 0x0c, 0x68, 0x32, 0x73, 0xbd, 0x74,
	0xe6, 0x13, 0xec, 0xbf, 0x6b, 0x3f, 0x3f, 0x80, 0xe6, 0xd4, 0x99, 0x63, 0x77, 0x77, 0xa2, 0x58,
	0xbd, 0x50, 0x43, 0x69, 0x00, 0xb6, 0xa9, 0xa9, 0xf8, 0xc0, 0xd1, 0x6b, 0x59, 0x6c, 0x2e, 0x6e,
	0x4a, 0x21, 0xac, 0x5f, 0xc2, 0x5a, 0x96, 0x0f, 0x37, 0x79, 0x6d, 0xd8, 0x00, 0x08, 0x7c, 0x6f,
	0xbe, 0xcb, 0xd3, 0x03, 0xdf, 0x9c, 0x69, 0x6b, 0x12, 0xeb, 0x6b, 0x03, 0x3a, 0xa2, 0x50, 0x53,
	0x0b, 0xdf, 0x03, 0xf3, 0xf0, 0xda, 0x82, 0x2d, 0x46, 0x7c, 0xab, 0x89, 0xe0, 0x05, 0xb4, 0xd4,
	0x5e, 0x44, 0x19, 0x51, 0x7f, 0x23, 0xc6, 0x92, 0xf3, 0x5d, 0x15, 0x5b, 0x04, 0xce, 0x8e, 0xf5,
	0x05, 0x51, 0xe5, 0x1f, 0x06, 0x34, 0xb5, 0xdc, 0x7a, 0xa3, 0xbc, 0xb2, 0x03, 0x4d, 0x15, 0x5e,
	0xae, 0xa8, 0x46, 0x75, 0x10, 0xcf, 0x45, 0x94, 0x86, 0xe4, 0x64, 0x46, 0xb1, 0x3c, 0x79, 0x22,
	0xe0, 0x89, 0x39, 0xe7, 0x0d, 0x31, 0x53, 0x41, 0xae, 0xc6, 0x0d, 0xb2, 0x68, 0xb1, 0xc4, 0x40,
	0x3a, 0x6d, 0x2d, 0xdf, 0x69, 0xad, 0x1d, 0x68, 0xe9, 0x1d, 0x34, 0x8b, 0x72, 0x13, 0xe7, 0x6d,
	0xdc, 0x76, 0x4f, 0x9c, 0xb7, 0x5c, 0x42, 0x7c, 0x69, 0x1d, 0xf6, 0xd3, 0xfa, 0x29, 0x34, 0xd4,
	0x63, 0x0c, 0xda, 0x48, 0x26, 0x64, 0xd7, 0xe7, 0xd3, 0x37, 0x92, 0xe9, 0x8b, 0x7a, 0xe2, 0x5b,
	0xc7, 0xd0, 0xcd, 0xbc, 0x79, 0xa0, 0xdb, 0xfa, 0x92, 0x0b, 0x0c, 0xe7, 0xab, 0xde, 0xd6, 0x57,
	0xcd, 0x81, 0x10, 0xdf, 0xfa, 0x12, 0x1a, 0x2a, 0x1d, 0x26, 0xa6, 0x11, 0x07, 0x93, 0xa6, 0xf9,
	0x3f, 0x30, 0x83, 0x29, 0x0e, 0x79, 0xa2, 0x10, 0x85, 0x7a, 0x53, 0xe5, 0xd1, 0x17, 0x53, 0x5b,
	0x29, 0xad, 0x0b, 0xad, 0xce, 0x10, 0x55, 0xf3, 0x4d, 0xf8, 0x70, 0x1f, 0x6a, 0x81, 0x48, 0x11,
	0xe2, 0x23, 0x6b, 0x99, 0xba, 0x5c, 0x66, 0x53, 0x09, 0xb2, 0x7e, 0x57, 0xe6, 0x8f, 0xde, 0x2c,
	0x22, 0x49, 0x36, 0x5b, 0xd0, 0x1a, 0xcf, 0xc2, 0x10, 0xfb, 0x74, 0x24, 0xdf, 0xbe, 0xd9, 0x21,
	0x52, 0x32, 0xe6, 0xae, 0xbc, 0xdf, 0x12, 0x08, 0x71, 0x5b, 0x9a, 0x04, 0x0d, 0x00, 0x25, 0xa3,
	0x51, 0x1c, 0x4e, 0x05, 0xd3, 0x72, 0x34, 0xfc, 0x95, 0xf8, 0x12, 0x87, 0xce, 0x19, 0x66, 0xf2,
	0x51, 0x3a, 0xfe, 0xe6, 0xa9, 0x58, 0x25, 0x1c, 0xfb, 0x9c, 0xe8, 0x55, 0x95, 0x8b, 0xf5, 0xa1,
	0x2e, 0xda, 0xb4, 0x48, 0x36, 0x19, 0xf1, 0x90, 0x37, 0x62, 0xb3, 0x88, 0x06, 0x13, 0xa6, 0x13,
	0x9d, 0x46, 0x22, 0xb0, 0x3e, 0x07, 0x24, 0x1e, 0x4f, 0xf6, 0xe6, 0x07, 0x23, 0x15, 0x65, 0x36,
	0xa0, 0xc2, 0xca, 0x57, 0xe1, 0xd7, 0x19, 0x46, 0x11, 0x37, 0xda, 0xbe, 0x0d, 0x4b, 0xfc, 0xfe,
	0x50, 0x0d, 0xca, 0x4f, 0x5e, 0xf5, 0x4a, 0xa8, 0x0e, 0x95, 0xfd, 0xa3, 0x27, 0x3d, 0x83, 0xfd,
	0x78, 0x76, 0xf4, 0xa4, 0x57, 0xde, 0xbe, 0x0d, 0x2d, 0xfd, 0x8f, 0x79, 0x4c, 0xb1, 0x1b, 0x8d,
	0x7b, 0x25, 0x64, 0x42, 0x75, 0x84, 0xa3, 0x71, 0xcf, 0xd8, 0xfe, 0x02, 0x9a, 0x5a, 0x7b, 0x87,
	0x9a, 0x50, 0xdf, 0xf5, 0xe7, 0xec, 0x67, 0xaf, 0x84, 0x5a, 0x60, 0xbe, 0x96, 0x8f, 0x00, 0x3d,
	0x83, 0x8d, 0x86, 0xb2, 0xc1, 0xef, 0x95, 0xb7, 0x9f, 0x41, 0x37, 0x73, 0xb1, 0x68, 0x05, 0xba,
	0xc7, 0x84, 0x9e, 0x07, 0x33, 0x1a, 0x3f, 0x48, 0xf5, 0x4a, 0x08, 0x41, 0xe7, 0xc0, 0x1f, 0x7b,
	0x33, 0x17, 0xef, 0xfa, 0xee, 0xa1, 0x13, 0x5e, 0xf4, 0x0c, 0xd4, 0x83, 0xd6, 0x0b, 0xdf, 0x9b,
	0x2b, 0x54, 0x79, 0xe7, 0x6b, 0x13, 0x2a, 0xa3, 0xe3, 0xa7, 0xe8, 0x3b, 0x60, 0xee, 0x63, 0x79,
	0xd3, 0x68, 0xf1, 0x6f, 0x48, 0xeb, 0x2b, 0xa9, 0xbf, 0x83, 0x08, 0xda, 0x58, 0x25, 0xf4, 0x19,
	0x74, 0xe4, 0xb4, 0x11, 0xa6, 0x0e, 0xf1, 0x22, 0x94, 0xb2, 0xd7, 0x7a, 0xfa, 0xcf, 0x27, 0x56,
	0x09, 0x1d, 0xc2, 0xb2, 0x9c, 0x90, 0xbc, 0x7f, 0xa3, 0x5b, 0x39, 0xcf, 0xdc, 0xea, 0xcb, 0x1f,
	0xe4, 0x2b, 0xc5, 0xf7, 0x1f, 0x43, 0x63, 0x1f, 0x53, 0x71, 0x87, 0x68, 0x25, 0xe7, 0x95, 0x74,
	0x7d, 0x35, 0xfd, 0x00, 0xa6, 0x66, 0x3e, 0xe5, 0x1b, 0x49, 0x3f, 0xe0, 0xc5, 0x1b, 0xc9, 0x7d,
	0xd6, 0x2b, 0x5c, 0xe9, 0x21, 0x74, 0xe3, 0x3d, 0xe4, 0x1b, 0x21, 0xf3, 0x06, 0x67, 0x95, 0xd0,
	0x0f, 0xa0, 0xb9, 0x8f, 0x69, 0xdc, 0x98, 0xa2, 0xb5, 0x54, 0x07, 0x9a, 0xb5, 0x79, 0xaa, 0x7f,
	0xb5, 0x4a, 0x68, 0xc0, 0x6d, 0x2e, 0xa5, 0x07, 0xfe, 0x69, 0x80, 0x9a, 0x2a, 0x34, 0x1c, 0x8c,
	0xd6, 0xd3, 0xed, 0xac, 0x55, 0x42, 0x3f, 0x82, 0xd6, 0x3e, 0xa6, 0x8a, 0x33, 0xe8, 0xbd, 0x4c,
	0x74, 0xc8, 0x9c, 0x2f, 0xdd, 0xef, 0x58, 0x25, 0xf4, 0x0b, 0xb8, 0xa5, 0xcf, 0xcf, 0x34, 0x25,
	0x85, 0xcb, 0xdd, 0xc9, 0xc8, 0xf3, 0x9a, 0x19, 0xab, 0x84, 0x76, 0xa1, 0xbd, 0x8f, 0x69, 0x52,
	0xbd, 0xa3, 0xf7, 0x33, 0xa5, 0xb4, 0x32, 0xc7, 0xda, 0xa2, 0x42, 0x2c, 0xf1, 0x13, 0x58, 0x8b,
	0x39, 0x95, 0x2a, 0x47, 0x32, 0xd7, 0xf0, 0x51, 0x41, 0x55, 0xaa, 0xd6, 0x79, 0xc5, 0x29, 0x91,
	0x59, 0xe3, 0x56, 0x4e, 0x2d, 0xa7, 0xb6, 0x74, 0xed, 0x92, 0x8f, 0x01, 0xf6, 0x31, 0x3d, 0x8e,
	0x2b, 0x01, 0x01, 0x4f, 0x17, 0x35, 0xeb, 0x28, 0x23, 0x8d, 0x6f, 0x99, 0x39, 0x24, 0x8f, 0xd1,
	0xea, 0x7e, 0x27, 0x53, 0x3a, 0xd7, 0x3c, 0x31, 0x09, 0xe0, 0x56, 0x09, 0xed, 0x71, 0x56, 0x68,
	0xd1, 0x0c, 0xf5, 0x75, 0x77, 0xd0, 0x03, 0x5c, 0x11, 0x93, 0x4f, 0x6a, 0xfc, 0x7f, 0x18, 0x1e,
	0xfd, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xa9, 0x68, 0x12, 0xee, 0x19, 0x21, 0x00, 0x00,
}
