// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dwh.proto

package sonm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// grpccmd imports
import (
	"io"

	"github.com/spf13/cobra"
	"github.com/sshaman1101/grpccmd"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CmpOp int32

const (
	CmpOp_EQ  CmpOp = 0
	CmpOp_GTE CmpOp = 1
	CmpOp_LTE CmpOp = 2
)

var CmpOp_name = map[int32]string{
	0: "EQ",
	1: "GTE",
	2: "LTE",
}
var CmpOp_value = map[string]int32{
	"EQ":  0,
	"GTE": 1,
	"LTE": 2,
}

func (x CmpOp) String() string {
	return proto.EnumName(CmpOp_name, int32(x))
}
func (CmpOp) EnumDescriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

type ProfileRole int32

const (
	ProfileRole_AnyRole  ProfileRole = 0
	ProfileRole_Supplier ProfileRole = 1
	ProfileRole_Consumer ProfileRole = 2
)

var ProfileRole_name = map[int32]string{
	0: "AnyRole",
	1: "Supplier",
	2: "Consumer",
}
var ProfileRole_value = map[string]int32{
	"AnyRole":  0,
	"Supplier": 1,
	"Consumer": 2,
}

func (x ProfileRole) String() string {
	return proto.EnumName(ProfileRole_name, int32(x))
}
func (ProfileRole) EnumDescriptor() ([]byte, []int) { return fileDescriptor7, []int{1} }

type BlacklistOptions int32

const (
	BlacklistOptions_WithoutMatching BlacklistOptions = 0
	BlacklistOptions_IncludeAndMark  BlacklistOptions = 1
	BlacklistOptions_OnlyMatching    BlacklistOptions = 2
)

var BlacklistOptions_name = map[int32]string{
	0: "WithoutMatching",
	1: "IncludeAndMark",
	2: "OnlyMatching",
}
var BlacklistOptions_value = map[string]int32{
	"WithoutMatching": 0,
	"IncludeAndMark":  1,
	"OnlyMatching":    2,
}

func (x BlacklistOptions) String() string {
	return proto.EnumName(BlacklistOptions_name, int32(x))
}
func (BlacklistOptions) EnumDescriptor() ([]byte, []int) { return fileDescriptor7, []int{2} }

type DealsRequest struct {
	Status           MarketDealStatus        `protobuf:"varint,1,opt,name=status,enum=sonm.MarketDealStatus" json:"status,omitempty"`
	SupplierID       string                  `protobuf:"bytes,2,opt,name=supplierID" json:"supplierID,omitempty"`
	ConsumerID       string                  `protobuf:"bytes,3,opt,name=consumerID" json:"consumerID,omitempty"`
	MasterID         string                  `protobuf:"bytes,4,opt,name=masterID" json:"masterID,omitempty"`
	AskID            string                  `protobuf:"bytes,5,opt,name=askID" json:"askID,omitempty"`
	BidID            string                  `protobuf:"bytes,6,opt,name=bidID" json:"bidID,omitempty"`
	Duration         *MaxMinUint64           `protobuf:"bytes,7,opt,name=duration" json:"duration,omitempty"`
	Price            *MaxMinBig              `protobuf:"bytes,8,opt,name=price" json:"price,omitempty"`
	Netflags         *CmpUint64              `protobuf:"bytes,9,opt,name=netflags" json:"netflags,omitempty"`
	AskIdentityLevel MarketIdentityLevel     `protobuf:"varint,10,opt,name=askIdentityLevel,enum=sonm.MarketIdentityLevel" json:"askIdentityLevel,omitempty"`
	BidIdentityLevel MarketIdentityLevel     `protobuf:"varint,11,opt,name=bidIdentityLevel,enum=sonm.MarketIdentityLevel" json:"bidIdentityLevel,omitempty"`
	Benchmarks       *DWHBenchmarkConditions `protobuf:"bytes,12,opt,name=benchmarks" json:"benchmarks,omitempty"`
	Limit            uint64                  `protobuf:"varint,13,opt,name=limit" json:"limit,omitempty"`
	Offset           uint64                  `protobuf:"varint,14,opt,name=offset" json:"offset,omitempty"`
}

func (m *DealsRequest) Reset()                    { *m = DealsRequest{} }
func (m *DealsRequest) String() string            { return proto.CompactTextString(m) }
func (*DealsRequest) ProtoMessage()               {}
func (*DealsRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

func (m *DealsRequest) GetStatus() MarketDealStatus {
	if m != nil {
		return m.Status
	}
	return MarketDealStatus_MARKET_STATUS_UNKNOWN
}

func (m *DealsRequest) GetSupplierID() string {
	if m != nil {
		return m.SupplierID
	}
	return ""
}

func (m *DealsRequest) GetConsumerID() string {
	if m != nil {
		return m.ConsumerID
	}
	return ""
}

func (m *DealsRequest) GetMasterID() string {
	if m != nil {
		return m.MasterID
	}
	return ""
}

func (m *DealsRequest) GetAskID() string {
	if m != nil {
		return m.AskID
	}
	return ""
}

func (m *DealsRequest) GetBidID() string {
	if m != nil {
		return m.BidID
	}
	return ""
}

func (m *DealsRequest) GetDuration() *MaxMinUint64 {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (m *DealsRequest) GetPrice() *MaxMinBig {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *DealsRequest) GetNetflags() *CmpUint64 {
	if m != nil {
		return m.Netflags
	}
	return nil
}

func (m *DealsRequest) GetAskIdentityLevel() MarketIdentityLevel {
	if m != nil {
		return m.AskIdentityLevel
	}
	return MarketIdentityLevel_MARKET_ANONIMOUS
}

func (m *DealsRequest) GetBidIdentityLevel() MarketIdentityLevel {
	if m != nil {
		return m.BidIdentityLevel
	}
	return MarketIdentityLevel_MARKET_ANONIMOUS
}

func (m *DealsRequest) GetBenchmarks() *DWHBenchmarkConditions {
	if m != nil {
		return m.Benchmarks
	}
	return nil
}

func (m *DealsRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *DealsRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type DealsReply struct {
	Deals []*DWHDeal `protobuf:"bytes,1,rep,name=deals" json:"deals,omitempty"`
}

func (m *DealsReply) Reset()                    { *m = DealsReply{} }
func (m *DealsReply) String() string            { return proto.CompactTextString(m) }
func (*DealsReply) ProtoMessage()               {}
func (*DealsReply) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{1} }

func (m *DealsReply) GetDeals() []*DWHDeal {
	if m != nil {
		return m.Deals
	}
	return nil
}

type DWHDeal struct {
	Id                   string           `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	SupplierID           string           `protobuf:"bytes,2,opt,name=supplierID" json:"supplierID,omitempty"`
	ConsumerID           string           `protobuf:"bytes,3,opt,name=consumerID" json:"consumerID,omitempty"`
	MasterID             string           `protobuf:"bytes,4,opt,name=masterID" json:"masterID,omitempty"`
	AskID                string           `protobuf:"bytes,5,opt,name=askID" json:"askID,omitempty"`
	BidID                string           `protobuf:"bytes,6,opt,name=bidID" json:"bidID,omitempty"`
	Duration             uint64           `protobuf:"varint,7,opt,name=duration" json:"duration,omitempty"`
	Price                *BigInt          `protobuf:"bytes,8,opt,name=price" json:"price,omitempty"`
	StartTime            *Timestamp       `protobuf:"bytes,9,opt,name=startTime" json:"startTime,omitempty"`
	EndTime              *Timestamp       `protobuf:"bytes,10,opt,name=endTime" json:"endTime,omitempty"`
	Status               MarketDealStatus `protobuf:"varint,11,opt,name=status,enum=sonm.MarketDealStatus" json:"status,omitempty"`
	BlockedBalance       *BigInt          `protobuf:"bytes,12,opt,name=blockedBalance" json:"blockedBalance,omitempty"`
	TotalPayout          *BigInt          `protobuf:"bytes,13,opt,name=totalPayout" json:"totalPayout,omitempty"`
	LastBillTS           *Timestamp       `protobuf:"bytes,14,opt,name=lastBillTS" json:"lastBillTS,omitempty"`
	Netflags             uint64           `protobuf:"varint,15,opt,name=netflags" json:"netflags,omitempty"`
	AskIdentityLevel     uint64           `protobuf:"varint,16,opt,name=askIdentityLevel" json:"askIdentityLevel,omitempty"`
	BidIdentityLevel     uint64           `protobuf:"varint,17,opt,name=bidIdentityLevel" json:"bidIdentityLevel,omitempty"`
	SupplierCertificates []byte           `protobuf:"bytes,18,opt,name=supplierCertificates,proto3" json:"supplierCertificates,omitempty"`
	ConsumerCertificates []byte           `protobuf:"bytes,19,opt,name=consumerCertificates,proto3" json:"consumerCertificates,omitempty"`
	ActiveChangeRequest  bool             `protobuf:"varint,20,opt,name=activeChangeRequest" json:"activeChangeRequest,omitempty"`
	Benchmarks           *DWHBenchmarks   `protobuf:"bytes,21,opt,name=benchmarks" json:"benchmarks,omitempty"`
}

func (m *DWHDeal) Reset()                    { *m = DWHDeal{} }
func (m *DWHDeal) String() string            { return proto.CompactTextString(m) }
func (*DWHDeal) ProtoMessage()               {}
func (*DWHDeal) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{2} }

func (m *DWHDeal) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DWHDeal) GetSupplierID() string {
	if m != nil {
		return m.SupplierID
	}
	return ""
}

func (m *DWHDeal) GetConsumerID() string {
	if m != nil {
		return m.ConsumerID
	}
	return ""
}

func (m *DWHDeal) GetMasterID() string {
	if m != nil {
		return m.MasterID
	}
	return ""
}

func (m *DWHDeal) GetAskID() string {
	if m != nil {
		return m.AskID
	}
	return ""
}

func (m *DWHDeal) GetBidID() string {
	if m != nil {
		return m.BidID
	}
	return ""
}

func (m *DWHDeal) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *DWHDeal) GetPrice() *BigInt {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *DWHDeal) GetStartTime() *Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *DWHDeal) GetEndTime() *Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *DWHDeal) GetStatus() MarketDealStatus {
	if m != nil {
		return m.Status
	}
	return MarketDealStatus_MARKET_STATUS_UNKNOWN
}

func (m *DWHDeal) GetBlockedBalance() *BigInt {
	if m != nil {
		return m.BlockedBalance
	}
	return nil
}

func (m *DWHDeal) GetTotalPayout() *BigInt {
	if m != nil {
		return m.TotalPayout
	}
	return nil
}

func (m *DWHDeal) GetLastBillTS() *Timestamp {
	if m != nil {
		return m.LastBillTS
	}
	return nil
}

func (m *DWHDeal) GetNetflags() uint64 {
	if m != nil {
		return m.Netflags
	}
	return 0
}

func (m *DWHDeal) GetAskIdentityLevel() uint64 {
	if m != nil {
		return m.AskIdentityLevel
	}
	return 0
}

func (m *DWHDeal) GetBidIdentityLevel() uint64 {
	if m != nil {
		return m.BidIdentityLevel
	}
	return 0
}

func (m *DWHDeal) GetSupplierCertificates() []byte {
	if m != nil {
		return m.SupplierCertificates
	}
	return nil
}

func (m *DWHDeal) GetConsumerCertificates() []byte {
	if m != nil {
		return m.ConsumerCertificates
	}
	return nil
}

func (m *DWHDeal) GetActiveChangeRequest() bool {
	if m != nil {
		return m.ActiveChangeRequest
	}
	return false
}

func (m *DWHDeal) GetBenchmarks() *DWHBenchmarks {
	if m != nil {
		return m.Benchmarks
	}
	return nil
}

type DealConditionsRequest struct {
	Limit  uint64 `protobuf:"varint,1,opt,name=limit" json:"limit,omitempty"`
	Offset uint64 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
}

func (m *DealConditionsRequest) Reset()                    { *m = DealConditionsRequest{} }
func (m *DealConditionsRequest) String() string            { return proto.CompactTextString(m) }
func (*DealConditionsRequest) ProtoMessage()               {}
func (*DealConditionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{3} }

func (m *DealConditionsRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *DealConditionsRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type DealConditionsReply struct {
	Conditions []*DealCondition `protobuf:"bytes,1,rep,name=conditions" json:"conditions,omitempty"`
}

func (m *DealConditionsReply) Reset()                    { *m = DealConditionsReply{} }
func (m *DealConditionsReply) String() string            { return proto.CompactTextString(m) }
func (*DealConditionsReply) ProtoMessage()               {}
func (*DealConditionsReply) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{4} }

func (m *DealConditionsReply) GetConditions() []*DealCondition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

type OrdersRequest struct {
	DealID               string                  `protobuf:"bytes,1,opt,name=dealID" json:"dealID,omitempty"`
	Type                 MarketOrderType         `protobuf:"varint,2,opt,name=type,enum=sonm.MarketOrderType" json:"type,omitempty"`
	Status               MarketOrderStatus       `protobuf:"varint,3,opt,name=status,enum=sonm.MarketOrderStatus" json:"status,omitempty"`
	AuthorID             string                  `protobuf:"bytes,4,opt,name=authorID" json:"authorID,omitempty"`
	CounterpartyID       string                  `protobuf:"bytes,5,opt,name=counterpartyID" json:"counterpartyID,omitempty"`
	Duration             *MaxMinUint64           `protobuf:"bytes,6,opt,name=duration" json:"duration,omitempty"`
	Price                *MaxMinBig              `protobuf:"bytes,9,opt,name=price" json:"price,omitempty"`
	Netflags             *CmpUint64              `protobuf:"bytes,11,opt,name=netflags" json:"netflags,omitempty"`
	CreatorIdentityLevel MarketIdentityLevel     `protobuf:"varint,12,opt,name=creatorIdentityLevel,enum=sonm.MarketIdentityLevel" json:"creatorIdentityLevel,omitempty"`
	Benchmarks           *DWHBenchmarkConditions `protobuf:"bytes,13,opt,name=benchmarks" json:"benchmarks,omitempty"`
	Limit                uint64                  `protobuf:"varint,14,opt,name=limit" json:"limit,omitempty"`
	Offset               uint64                  `protobuf:"varint,15,opt,name=offset" json:"offset,omitempty"`
}

func (m *OrdersRequest) Reset()                    { *m = OrdersRequest{} }
func (m *OrdersRequest) String() string            { return proto.CompactTextString(m) }
func (*OrdersRequest) ProtoMessage()               {}
func (*OrdersRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{5} }

func (m *OrdersRequest) GetDealID() string {
	if m != nil {
		return m.DealID
	}
	return ""
}

func (m *OrdersRequest) GetType() MarketOrderType {
	if m != nil {
		return m.Type
	}
	return MarketOrderType_MARKET_ANY
}

func (m *OrdersRequest) GetStatus() MarketOrderStatus {
	if m != nil {
		return m.Status
	}
	return MarketOrderStatus_MARKET_ORDER_INACTIVE
}

func (m *OrdersRequest) GetAuthorID() string {
	if m != nil {
		return m.AuthorID
	}
	return ""
}

func (m *OrdersRequest) GetCounterpartyID() string {
	if m != nil {
		return m.CounterpartyID
	}
	return ""
}

func (m *OrdersRequest) GetDuration() *MaxMinUint64 {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (m *OrdersRequest) GetPrice() *MaxMinBig {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *OrdersRequest) GetNetflags() *CmpUint64 {
	if m != nil {
		return m.Netflags
	}
	return nil
}

func (m *OrdersRequest) GetCreatorIdentityLevel() MarketIdentityLevel {
	if m != nil {
		return m.CreatorIdentityLevel
	}
	return MarketIdentityLevel_MARKET_ANONIMOUS
}

func (m *OrdersRequest) GetBenchmarks() *DWHBenchmarkConditions {
	if m != nil {
		return m.Benchmarks
	}
	return nil
}

func (m *OrdersRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *OrdersRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type MatchingOrdersRequest struct {
	Id     *ID    `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Limit  uint64 `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
	Offset uint64 `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
}

func (m *MatchingOrdersRequest) Reset()                    { *m = MatchingOrdersRequest{} }
func (m *MatchingOrdersRequest) String() string            { return proto.CompactTextString(m) }
func (*MatchingOrdersRequest) ProtoMessage()               {}
func (*MatchingOrdersRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{6} }

func (m *MatchingOrdersRequest) GetId() *ID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *MatchingOrdersRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *MatchingOrdersRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type OrdersReply struct {
	Orders []*DWHOrder `protobuf:"bytes,1,rep,name=orders" json:"orders,omitempty"`
}

func (m *OrdersReply) Reset()                    { *m = OrdersReply{} }
func (m *OrdersReply) String() string            { return proto.CompactTextString(m) }
func (*OrdersReply) ProtoMessage()               {}
func (*OrdersReply) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{7} }

func (m *OrdersReply) GetOrders() []*DWHOrder {
	if m != nil {
		return m.Orders
	}
	return nil
}

type DWHOrder struct {
	Id                   string              `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	DealID               string              `protobuf:"bytes,2,opt,name=dealID" json:"dealID,omitempty"`
	OrderType            MarketOrderType     `protobuf:"varint,3,opt,name=orderType,enum=sonm.MarketOrderType" json:"orderType,omitempty"`
	OrderStatus          MarketOrderStatus   `protobuf:"varint,4,opt,name=orderStatus,enum=sonm.MarketOrderStatus" json:"orderStatus,omitempty"`
	AuthorID             string              `protobuf:"bytes,5,opt,name=authorID" json:"authorID,omitempty"`
	CounterpartyID       string              `protobuf:"bytes,6,opt,name=counterpartyID" json:"counterpartyID,omitempty"`
	Duration             uint64              `protobuf:"varint,7,opt,name=duration" json:"duration,omitempty"`
	Price                *BigInt             `protobuf:"bytes,8,opt,name=price" json:"price,omitempty"`
	Netflags             uint64              `protobuf:"varint,9,opt,name=netflags" json:"netflags,omitempty"`
	IdentityLevel        MarketIdentityLevel `protobuf:"varint,10,opt,name=identityLevel,enum=sonm.MarketIdentityLevel" json:"identityLevel,omitempty"`
	Blacklist            string              `protobuf:"bytes,11,opt,name=blacklist" json:"blacklist,omitempty"`
	Tag                  []byte              `protobuf:"bytes,12,opt,name=tag,proto3" json:"tag,omitempty"`
	FrozenSum            *BigInt             `protobuf:"bytes,13,opt,name=frozenSum" json:"frozenSum,omitempty"`
	CreatorIdentityLevel uint64              `protobuf:"varint,14,opt,name=creatorIdentityLevel" json:"creatorIdentityLevel,omitempty"`
	CreatorName          string              `protobuf:"bytes,15,opt,name=creatorName" json:"creatorName,omitempty"`
	CreatorCountry       string              `protobuf:"bytes,16,opt,name=creatorCountry" json:"creatorCountry,omitempty"`
	CreatorCertificates  []byte              `protobuf:"bytes,17,opt,name=creatorCertificates,proto3" json:"creatorCertificates,omitempty"`
	CreatedTS            uint64              `protobuf:"varint,18,opt,name=CreatedTS" json:"CreatedTS,omitempty"`
	Benchmarks           *DWHBenchmarks      `protobuf:"bytes,19,opt,name=benchmarks" json:"benchmarks,omitempty"`
}

func (m *DWHOrder) Reset()                    { *m = DWHOrder{} }
func (m *DWHOrder) String() string            { return proto.CompactTextString(m) }
func (*DWHOrder) ProtoMessage()               {}
func (*DWHOrder) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{8} }

func (m *DWHOrder) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DWHOrder) GetDealID() string {
	if m != nil {
		return m.DealID
	}
	return ""
}

func (m *DWHOrder) GetOrderType() MarketOrderType {
	if m != nil {
		return m.OrderType
	}
	return MarketOrderType_MARKET_ANY
}

func (m *DWHOrder) GetOrderStatus() MarketOrderStatus {
	if m != nil {
		return m.OrderStatus
	}
	return MarketOrderStatus_MARKET_ORDER_INACTIVE
}

func (m *DWHOrder) GetAuthorID() string {
	if m != nil {
		return m.AuthorID
	}
	return ""
}

func (m *DWHOrder) GetCounterpartyID() string {
	if m != nil {
		return m.CounterpartyID
	}
	return ""
}

func (m *DWHOrder) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *DWHOrder) GetPrice() *BigInt {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *DWHOrder) GetNetflags() uint64 {
	if m != nil {
		return m.Netflags
	}
	return 0
}

func (m *DWHOrder) GetIdentityLevel() MarketIdentityLevel {
	if m != nil {
		return m.IdentityLevel
	}
	return MarketIdentityLevel_MARKET_ANONIMOUS
}

func (m *DWHOrder) GetBlacklist() string {
	if m != nil {
		return m.Blacklist
	}
	return ""
}

func (m *DWHOrder) GetTag() []byte {
	if m != nil {
		return m.Tag
	}
	return nil
}

func (m *DWHOrder) GetFrozenSum() *BigInt {
	if m != nil {
		return m.FrozenSum
	}
	return nil
}

func (m *DWHOrder) GetCreatorIdentityLevel() uint64 {
	if m != nil {
		return m.CreatorIdentityLevel
	}
	return 0
}

func (m *DWHOrder) GetCreatorName() string {
	if m != nil {
		return m.CreatorName
	}
	return ""
}

func (m *DWHOrder) GetCreatorCountry() string {
	if m != nil {
		return m.CreatorCountry
	}
	return ""
}

func (m *DWHOrder) GetCreatorCertificates() []byte {
	if m != nil {
		return m.CreatorCertificates
	}
	return nil
}

func (m *DWHOrder) GetCreatedTS() uint64 {
	if m != nil {
		return m.CreatedTS
	}
	return 0
}

func (m *DWHOrder) GetBenchmarks() *DWHBenchmarks {
	if m != nil {
		return m.Benchmarks
	}
	return nil
}

type DealCondition struct {
	Id          uint64     `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	SupplierID  string     `protobuf:"bytes,2,opt,name=supplierID" json:"supplierID,omitempty"`
	ConsumerID  string     `protobuf:"bytes,3,opt,name=consumerID" json:"consumerID,omitempty"`
	MasterID    string     `protobuf:"bytes,4,opt,name=masterID" json:"masterID,omitempty"`
	Duration    uint64     `protobuf:"varint,5,opt,name=duration" json:"duration,omitempty"`
	Price       *BigInt    `protobuf:"bytes,6,opt,name=price" json:"price,omitempty"`
	StartTime   *Timestamp `protobuf:"bytes,7,opt,name=startTime" json:"startTime,omitempty"`
	EndTime     *Timestamp `protobuf:"bytes,8,opt,name=endTime" json:"endTime,omitempty"`
	TotalPayout *BigInt    `protobuf:"bytes,9,opt,name=totalPayout" json:"totalPayout,omitempty"`
	DealID      string     `protobuf:"bytes,10,opt,name=dealID" json:"dealID,omitempty"`
}

func (m *DealCondition) Reset()                    { *m = DealCondition{} }
func (m *DealCondition) String() string            { return proto.CompactTextString(m) }
func (*DealCondition) ProtoMessage()               {}
func (*DealCondition) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{9} }

func (m *DealCondition) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DealCondition) GetSupplierID() string {
	if m != nil {
		return m.SupplierID
	}
	return ""
}

func (m *DealCondition) GetConsumerID() string {
	if m != nil {
		return m.ConsumerID
	}
	return ""
}

func (m *DealCondition) GetMasterID() string {
	if m != nil {
		return m.MasterID
	}
	return ""
}

func (m *DealCondition) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *DealCondition) GetPrice() *BigInt {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *DealCondition) GetStartTime() *Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *DealCondition) GetEndTime() *Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *DealCondition) GetTotalPayout() *BigInt {
	if m != nil {
		return m.TotalPayout
	}
	return nil
}

func (m *DealCondition) GetDealID() string {
	if m != nil {
		return m.DealID
	}
	return ""
}

type DWHWorker struct {
	MasterID  string `protobuf:"bytes,1,opt,name=masterID" json:"masterID,omitempty"`
	SlaveID   string `protobuf:"bytes,2,opt,name=slaveID" json:"slaveID,omitempty"`
	Confirmed bool   `protobuf:"varint,3,opt,name=confirmed" json:"confirmed,omitempty"`
}

func (m *DWHWorker) Reset()                    { *m = DWHWorker{} }
func (m *DWHWorker) String() string            { return proto.CompactTextString(m) }
func (*DWHWorker) ProtoMessage()               {}
func (*DWHWorker) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{10} }

func (m *DWHWorker) GetMasterID() string {
	if m != nil {
		return m.MasterID
	}
	return ""
}

func (m *DWHWorker) GetSlaveID() string {
	if m != nil {
		return m.SlaveID
	}
	return ""
}

func (m *DWHWorker) GetConfirmed() bool {
	if m != nil {
		return m.Confirmed
	}
	return false
}

type ProfilesRequest struct {
	Role             ProfileRole         `protobuf:"varint,1,opt,name=role,enum=sonm.ProfileRole" json:"role,omitempty"`
	IdentityLevel    MarketIdentityLevel `protobuf:"varint,2,opt,name=identityLevel,enum=sonm.MarketIdentityLevel" json:"identityLevel,omitempty"`
	Country          string              `protobuf:"bytes,3,opt,name=country" json:"country,omitempty"`
	Name             string              `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	BlacklistOwnerID string              `protobuf:"bytes,5,opt,name=blacklistOwnerID" json:"blacklistOwnerID,omitempty"`
	BlacklistOption  BlacklistOptions    `protobuf:"varint,6,opt,name=blacklistOption,enum=sonm.BlacklistOptions" json:"blacklistOption,omitempty"`
	Limit            uint64              `protobuf:"varint,7,opt,name=limit" json:"limit,omitempty"`
	Offset           uint64              `protobuf:"varint,8,opt,name=offset" json:"offset,omitempty"`
}

func (m *ProfilesRequest) Reset()                    { *m = ProfilesRequest{} }
func (m *ProfilesRequest) String() string            { return proto.CompactTextString(m) }
func (*ProfilesRequest) ProtoMessage()               {}
func (*ProfilesRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{11} }

func (m *ProfilesRequest) GetRole() ProfileRole {
	if m != nil {
		return m.Role
	}
	return ProfileRole_AnyRole
}

func (m *ProfilesRequest) GetIdentityLevel() MarketIdentityLevel {
	if m != nil {
		return m.IdentityLevel
	}
	return MarketIdentityLevel_MARKET_ANONIMOUS
}

func (m *ProfilesRequest) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *ProfilesRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProfilesRequest) GetBlacklistOwnerID() string {
	if m != nil {
		return m.BlacklistOwnerID
	}
	return ""
}

func (m *ProfilesRequest) GetBlacklistOption() BlacklistOptions {
	if m != nil {
		return m.BlacklistOption
	}
	return BlacklistOptions_WithoutMatching
}

func (m *ProfilesRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ProfilesRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type ProfilesReply struct {
	Profiles []*Profile `protobuf:"bytes,1,rep,name=profiles" json:"profiles,omitempty"`
}

func (m *ProfilesReply) Reset()                    { *m = ProfilesReply{} }
func (m *ProfilesReply) String() string            { return proto.CompactTextString(m) }
func (*ProfilesReply) ProtoMessage()               {}
func (*ProfilesReply) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{12} }

func (m *ProfilesReply) GetProfiles() []*Profile {
	if m != nil {
		return m.Profiles
	}
	return nil
}

type Profile struct {
	UserID         string `protobuf:"bytes,1,opt,name=UserID" json:"UserID,omitempty"`
	IdentityLevel  uint64 `protobuf:"varint,2,opt,name=IdentityLevel" json:"IdentityLevel,omitempty"`
	Name           string `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
	Country        string `protobuf:"bytes,4,opt,name=Country" json:"Country,omitempty"`
	IsCorporation  bool   `protobuf:"varint,5,opt,name=IsCorporation" json:"IsCorporation,omitempty"`
	IsProfessional bool   `protobuf:"varint,6,opt,name=IsProfessional" json:"IsProfessional,omitempty"`
	Certificates   []byte `protobuf:"bytes,7,opt,name=Certificates,proto3" json:"Certificates,omitempty"`
}

func (m *Profile) Reset()                    { *m = Profile{} }
func (m *Profile) String() string            { return proto.CompactTextString(m) }
func (*Profile) ProtoMessage()               {}
func (*Profile) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{13} }

func (m *Profile) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *Profile) GetIdentityLevel() uint64 {
	if m != nil {
		return m.IdentityLevel
	}
	return 0
}

func (m *Profile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Profile) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Profile) GetIsCorporation() bool {
	if m != nil {
		return m.IsCorporation
	}
	return false
}

func (m *Profile) GetIsProfessional() bool {
	if m != nil {
		return m.IsProfessional
	}
	return false
}

func (m *Profile) GetCertificates() []byte {
	if m != nil {
		return m.Certificates
	}
	return nil
}

type BlacklistReply struct {
	OwnerID   string   `protobuf:"bytes,1,opt,name=ownerID" json:"ownerID,omitempty"`
	Addresses []string `protobuf:"bytes,2,rep,name=addresses" json:"addresses,omitempty"`
}

func (m *BlacklistReply) Reset()                    { *m = BlacklistReply{} }
func (m *BlacklistReply) String() string            { return proto.CompactTextString(m) }
func (*BlacklistReply) ProtoMessage()               {}
func (*BlacklistReply) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{14} }

func (m *BlacklistReply) GetOwnerID() string {
	if m != nil {
		return m.OwnerID
	}
	return ""
}

func (m *BlacklistReply) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type ValidatorsRequest struct {
	ValidatorLevel *CmpUint64 `protobuf:"bytes,1,opt,name=validatorLevel" json:"validatorLevel,omitempty"`
	Limit          uint64     `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
	Offset         uint64     `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
}

func (m *ValidatorsRequest) Reset()                    { *m = ValidatorsRequest{} }
func (m *ValidatorsRequest) String() string            { return proto.CompactTextString(m) }
func (*ValidatorsRequest) ProtoMessage()               {}
func (*ValidatorsRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{15} }

func (m *ValidatorsRequest) GetValidatorLevel() *CmpUint64 {
	if m != nil {
		return m.ValidatorLevel
	}
	return nil
}

func (m *ValidatorsRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ValidatorsRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type ValidatorsReply struct {
	Validators []*Validator `protobuf:"bytes,1,rep,name=validators" json:"validators,omitempty"`
}

func (m *ValidatorsReply) Reset()                    { *m = ValidatorsReply{} }
func (m *ValidatorsReply) String() string            { return proto.CompactTextString(m) }
func (*ValidatorsReply) ProtoMessage()               {}
func (*ValidatorsReply) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{16} }

func (m *ValidatorsReply) GetValidators() []*Validator {
	if m != nil {
		return m.Validators
	}
	return nil
}

type Validator struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Level uint64 `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`
}

func (m *Validator) Reset()                    { *m = Validator{} }
func (m *Validator) String() string            { return proto.CompactTextString(m) }
func (*Validator) ProtoMessage()               {}
func (*Validator) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{17} }

func (m *Validator) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Validator) GetLevel() uint64 {
	if m != nil {
		return m.Level
	}
	return 0
}

type DealChangeRequestsReply struct {
	Requests []*DealChangeRequest `protobuf:"bytes,1,rep,name=requests" json:"requests,omitempty"`
}

func (m *DealChangeRequestsReply) Reset()                    { *m = DealChangeRequestsReply{} }
func (m *DealChangeRequestsReply) String() string            { return proto.CompactTextString(m) }
func (*DealChangeRequestsReply) ProtoMessage()               {}
func (*DealChangeRequestsReply) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{18} }

func (m *DealChangeRequestsReply) GetRequests() []*DealChangeRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

type WorkersRequest struct {
	MasterID string `protobuf:"bytes,1,opt,name=MasterID" json:"MasterID,omitempty"`
	Limit    uint64 `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
	Offset   uint64 `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
}

func (m *WorkersRequest) Reset()                    { *m = WorkersRequest{} }
func (m *WorkersRequest) String() string            { return proto.CompactTextString(m) }
func (*WorkersRequest) ProtoMessage()               {}
func (*WorkersRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{19} }

func (m *WorkersRequest) GetMasterID() string {
	if m != nil {
		return m.MasterID
	}
	return ""
}

func (m *WorkersRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *WorkersRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type WorkersReply struct {
	Workers []*DWHWorker `protobuf:"bytes,1,rep,name=workers" json:"workers,omitempty"`
}

func (m *WorkersReply) Reset()                    { *m = WorkersReply{} }
func (m *WorkersReply) String() string            { return proto.CompactTextString(m) }
func (*WorkersReply) ProtoMessage()               {}
func (*WorkersReply) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{20} }

func (m *WorkersReply) GetWorkers() []*DWHWorker {
	if m != nil {
		return m.Workers
	}
	return nil
}

type Certificate struct {
	OwnerID       string `protobuf:"bytes,1,opt,name=ownerID" json:"ownerID,omitempty"`
	ValidatorID   string `protobuf:"bytes,2,opt,name=validatorID" json:"validatorID,omitempty"`
	Attribute     uint64 `protobuf:"varint,3,opt,name=attribute" json:"attribute,omitempty"`
	IdentityLevel uint64 `protobuf:"varint,4,opt,name=identityLevel" json:"identityLevel,omitempty"`
	Value         []byte `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Certificate) Reset()                    { *m = Certificate{} }
func (m *Certificate) String() string            { return proto.CompactTextString(m) }
func (*Certificate) ProtoMessage()               {}
func (*Certificate) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{21} }

func (m *Certificate) GetOwnerID() string {
	if m != nil {
		return m.OwnerID
	}
	return ""
}

func (m *Certificate) GetValidatorID() string {
	if m != nil {
		return m.ValidatorID
	}
	return ""
}

func (m *Certificate) GetAttribute() uint64 {
	if m != nil {
		return m.Attribute
	}
	return 0
}

func (m *Certificate) GetIdentityLevel() uint64 {
	if m != nil {
		return m.IdentityLevel
	}
	return 0
}

func (m *Certificate) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type DWHBenchmarks struct {
	CPUSysbenchMulti uint64 `protobuf:"varint,1,opt,name=CPUSysbenchMulti" json:"CPUSysbenchMulti,omitempty"`
	CPUSysbenchOne   uint64 `protobuf:"varint,2,opt,name=CPUSysbenchOne" json:"CPUSysbenchOne,omitempty"`
	CPUCores         uint64 `protobuf:"varint,3,opt,name=CPUCores" json:"CPUCores,omitempty"`
	RAMSize          uint64 `protobuf:"varint,4,opt,name=RAMSize" json:"RAMSize,omitempty"`
	StorageSize      uint64 `protobuf:"varint,5,opt,name=StorageSize" json:"StorageSize,omitempty"`
	NetTrafficIn     uint64 `protobuf:"varint,6,opt,name=NetTrafficIn" json:"NetTrafficIn,omitempty"`
	NetTrafficOut    uint64 `protobuf:"varint,7,opt,name=NetTrafficOut" json:"NetTrafficOut,omitempty"`
	GPUCount         uint64 `protobuf:"varint,8,opt,name=GPUCount" json:"GPUCount,omitempty"`
	GPUMem           uint64 `protobuf:"varint,9,opt,name=GPUMem" json:"GPUMem,omitempty"`
	GPUEthHashrate   uint64 `protobuf:"varint,10,opt,name=GPUEthHashrate" json:"GPUEthHashrate,omitempty"`
	GPUCashHashrate  uint64 `protobuf:"varint,11,opt,name=GPUCashHashrate" json:"GPUCashHashrate,omitempty"`
	GPURedshift      uint64 `protobuf:"varint,12,opt,name=GPURedshift" json:"GPURedshift,omitempty"`
}

func (m *DWHBenchmarks) Reset()                    { *m = DWHBenchmarks{} }
func (m *DWHBenchmarks) String() string            { return proto.CompactTextString(m) }
func (*DWHBenchmarks) ProtoMessage()               {}
func (*DWHBenchmarks) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{22} }

func (m *DWHBenchmarks) GetCPUSysbenchMulti() uint64 {
	if m != nil {
		return m.CPUSysbenchMulti
	}
	return 0
}

func (m *DWHBenchmarks) GetCPUSysbenchOne() uint64 {
	if m != nil {
		return m.CPUSysbenchOne
	}
	return 0
}

func (m *DWHBenchmarks) GetCPUCores() uint64 {
	if m != nil {
		return m.CPUCores
	}
	return 0
}

func (m *DWHBenchmarks) GetRAMSize() uint64 {
	if m != nil {
		return m.RAMSize
	}
	return 0
}

func (m *DWHBenchmarks) GetStorageSize() uint64 {
	if m != nil {
		return m.StorageSize
	}
	return 0
}

func (m *DWHBenchmarks) GetNetTrafficIn() uint64 {
	if m != nil {
		return m.NetTrafficIn
	}
	return 0
}

func (m *DWHBenchmarks) GetNetTrafficOut() uint64 {
	if m != nil {
		return m.NetTrafficOut
	}
	return 0
}

func (m *DWHBenchmarks) GetGPUCount() uint64 {
	if m != nil {
		return m.GPUCount
	}
	return 0
}

func (m *DWHBenchmarks) GetGPUMem() uint64 {
	if m != nil {
		return m.GPUMem
	}
	return 0
}

func (m *DWHBenchmarks) GetGPUEthHashrate() uint64 {
	if m != nil {
		return m.GPUEthHashrate
	}
	return 0
}

func (m *DWHBenchmarks) GetGPUCashHashrate() uint64 {
	if m != nil {
		return m.GPUCashHashrate
	}
	return 0
}

func (m *DWHBenchmarks) GetGPURedshift() uint64 {
	if m != nil {
		return m.GPURedshift
	}
	return 0
}

type DWHBenchmarkConditions struct {
	CPUSysbenchMulti *MaxMinUint64 `protobuf:"bytes,1,opt,name=CPUSysbenchMulti" json:"CPUSysbenchMulti,omitempty"`
	CPUSysbenchOne   *MaxMinUint64 `protobuf:"bytes,2,opt,name=CPUSysbenchOne" json:"CPUSysbenchOne,omitempty"`
	CPUCores         *MaxMinUint64 `protobuf:"bytes,3,opt,name=CPUCores" json:"CPUCores,omitempty"`
	RAMSize          *MaxMinUint64 `protobuf:"bytes,4,opt,name=RAMSize" json:"RAMSize,omitempty"`
	StorageSize      *MaxMinUint64 `protobuf:"bytes,5,opt,name=StorageSize" json:"StorageSize,omitempty"`
	NetTrafficIn     *MaxMinUint64 `protobuf:"bytes,6,opt,name=NetTrafficIn" json:"NetTrafficIn,omitempty"`
	NetTrafficOut    *MaxMinUint64 `protobuf:"bytes,7,opt,name=NetTrafficOut" json:"NetTrafficOut,omitempty"`
	GPUCount         *MaxMinUint64 `protobuf:"bytes,8,opt,name=GPUCount" json:"GPUCount,omitempty"`
	GPUMem           *MaxMinUint64 `protobuf:"bytes,9,opt,name=GPUMem" json:"GPUMem,omitempty"`
	GPUEthHashrate   *MaxMinUint64 `protobuf:"bytes,10,opt,name=GPUEthHashrate" json:"GPUEthHashrate,omitempty"`
	GPUCashHashrate  *MaxMinUint64 `protobuf:"bytes,11,opt,name=GPUCashHashrate" json:"GPUCashHashrate,omitempty"`
	GPURedshift      *MaxMinUint64 `protobuf:"bytes,12,opt,name=GPURedshift" json:"GPURedshift,omitempty"`
}

func (m *DWHBenchmarkConditions) Reset()                    { *m = DWHBenchmarkConditions{} }
func (m *DWHBenchmarkConditions) String() string            { return proto.CompactTextString(m) }
func (*DWHBenchmarkConditions) ProtoMessage()               {}
func (*DWHBenchmarkConditions) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{23} }

func (m *DWHBenchmarkConditions) GetCPUSysbenchMulti() *MaxMinUint64 {
	if m != nil {
		return m.CPUSysbenchMulti
	}
	return nil
}

func (m *DWHBenchmarkConditions) GetCPUSysbenchOne() *MaxMinUint64 {
	if m != nil {
		return m.CPUSysbenchOne
	}
	return nil
}

func (m *DWHBenchmarkConditions) GetCPUCores() *MaxMinUint64 {
	if m != nil {
		return m.CPUCores
	}
	return nil
}

func (m *DWHBenchmarkConditions) GetRAMSize() *MaxMinUint64 {
	if m != nil {
		return m.RAMSize
	}
	return nil
}

func (m *DWHBenchmarkConditions) GetStorageSize() *MaxMinUint64 {
	if m != nil {
		return m.StorageSize
	}
	return nil
}

func (m *DWHBenchmarkConditions) GetNetTrafficIn() *MaxMinUint64 {
	if m != nil {
		return m.NetTrafficIn
	}
	return nil
}

func (m *DWHBenchmarkConditions) GetNetTrafficOut() *MaxMinUint64 {
	if m != nil {
		return m.NetTrafficOut
	}
	return nil
}

func (m *DWHBenchmarkConditions) GetGPUCount() *MaxMinUint64 {
	if m != nil {
		return m.GPUCount
	}
	return nil
}

func (m *DWHBenchmarkConditions) GetGPUMem() *MaxMinUint64 {
	if m != nil {
		return m.GPUMem
	}
	return nil
}

func (m *DWHBenchmarkConditions) GetGPUEthHashrate() *MaxMinUint64 {
	if m != nil {
		return m.GPUEthHashrate
	}
	return nil
}

func (m *DWHBenchmarkConditions) GetGPUCashHashrate() *MaxMinUint64 {
	if m != nil {
		return m.GPUCashHashrate
	}
	return nil
}

func (m *DWHBenchmarkConditions) GetGPURedshift() *MaxMinUint64 {
	if m != nil {
		return m.GPURedshift
	}
	return nil
}

type MaxMinUint64 struct {
	Max uint64 `protobuf:"varint,1,opt,name=max" json:"max,omitempty"`
	Min uint64 `protobuf:"varint,2,opt,name=min" json:"min,omitempty"`
}

func (m *MaxMinUint64) Reset()                    { *m = MaxMinUint64{} }
func (m *MaxMinUint64) String() string            { return proto.CompactTextString(m) }
func (*MaxMinUint64) ProtoMessage()               {}
func (*MaxMinUint64) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{24} }

func (m *MaxMinUint64) GetMax() uint64 {
	if m != nil {
		return m.Max
	}
	return 0
}

func (m *MaxMinUint64) GetMin() uint64 {
	if m != nil {
		return m.Min
	}
	return 0
}

type MaxMinBig struct {
	Max *BigInt `protobuf:"bytes,1,opt,name=max" json:"max,omitempty"`
	Min *BigInt `protobuf:"bytes,2,opt,name=min" json:"min,omitempty"`
}

func (m *MaxMinBig) Reset()                    { *m = MaxMinBig{} }
func (m *MaxMinBig) String() string            { return proto.CompactTextString(m) }
func (*MaxMinBig) ProtoMessage()               {}
func (*MaxMinBig) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{25} }

func (m *MaxMinBig) GetMax() *BigInt {
	if m != nil {
		return m.Max
	}
	return nil
}

func (m *MaxMinBig) GetMin() *BigInt {
	if m != nil {
		return m.Min
	}
	return nil
}

type CmpUint64 struct {
	Value    uint64 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
	Operator CmpOp  `protobuf:"varint,2,opt,name=operator,enum=sonm.CmpOp" json:"operator,omitempty"`
}

func (m *CmpUint64) Reset()                    { *m = CmpUint64{} }
func (m *CmpUint64) String() string            { return proto.CompactTextString(m) }
func (*CmpUint64) ProtoMessage()               {}
func (*CmpUint64) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{26} }

func (m *CmpUint64) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *CmpUint64) GetOperator() CmpOp {
	if m != nil {
		return m.Operator
	}
	return CmpOp_EQ
}

type DealChangeRequest struct {
	Id          string                    `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	DealID      string                    `protobuf:"bytes,2,opt,name=dealID" json:"dealID,omitempty"`
	RequestType MarketOrderType           `protobuf:"varint,3,opt,name=requestType,enum=sonm.MarketOrderType" json:"requestType,omitempty"`
	Duration    uint64                    `protobuf:"varint,4,opt,name=duration" json:"duration,omitempty"`
	Price       *BigInt                   `protobuf:"bytes,5,opt,name=price" json:"price,omitempty"`
	Status      MarketChangeRequestStatus `protobuf:"varint,6,opt,name=status,enum=sonm.MarketChangeRequestStatus" json:"status,omitempty"`
}

func (m *DealChangeRequest) Reset()                    { *m = DealChangeRequest{} }
func (m *DealChangeRequest) String() string            { return proto.CompactTextString(m) }
func (*DealChangeRequest) ProtoMessage()               {}
func (*DealChangeRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{27} }

func (m *DealChangeRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DealChangeRequest) GetDealID() string {
	if m != nil {
		return m.DealID
	}
	return ""
}

func (m *DealChangeRequest) GetRequestType() MarketOrderType {
	if m != nil {
		return m.RequestType
	}
	return MarketOrderType_MARKET_ANY
}

func (m *DealChangeRequest) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *DealChangeRequest) GetPrice() *BigInt {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *DealChangeRequest) GetStatus() MarketChangeRequestStatus {
	if m != nil {
		return m.Status
	}
	return MarketChangeRequestStatus_REQUEST_UNKNOWN
}

func init() {
	proto.RegisterType((*DealsRequest)(nil), "sonm.DealsRequest")
	proto.RegisterType((*DealsReply)(nil), "sonm.DealsReply")
	proto.RegisterType((*DWHDeal)(nil), "sonm.DWHDeal")
	proto.RegisterType((*DealConditionsRequest)(nil), "sonm.DealConditionsRequest")
	proto.RegisterType((*DealConditionsReply)(nil), "sonm.DealConditionsReply")
	proto.RegisterType((*OrdersRequest)(nil), "sonm.OrdersRequest")
	proto.RegisterType((*MatchingOrdersRequest)(nil), "sonm.MatchingOrdersRequest")
	proto.RegisterType((*OrdersReply)(nil), "sonm.OrdersReply")
	proto.RegisterType((*DWHOrder)(nil), "sonm.DWHOrder")
	proto.RegisterType((*DealCondition)(nil), "sonm.DealCondition")
	proto.RegisterType((*DWHWorker)(nil), "sonm.DWHWorker")
	proto.RegisterType((*ProfilesRequest)(nil), "sonm.ProfilesRequest")
	proto.RegisterType((*ProfilesReply)(nil), "sonm.ProfilesReply")
	proto.RegisterType((*Profile)(nil), "sonm.Profile")
	proto.RegisterType((*BlacklistReply)(nil), "sonm.BlacklistReply")
	proto.RegisterType((*ValidatorsRequest)(nil), "sonm.ValidatorsRequest")
	proto.RegisterType((*ValidatorsReply)(nil), "sonm.ValidatorsReply")
	proto.RegisterType((*Validator)(nil), "sonm.Validator")
	proto.RegisterType((*DealChangeRequestsReply)(nil), "sonm.DealChangeRequestsReply")
	proto.RegisterType((*WorkersRequest)(nil), "sonm.WorkersRequest")
	proto.RegisterType((*WorkersReply)(nil), "sonm.WorkersReply")
	proto.RegisterType((*Certificate)(nil), "sonm.Certificate")
	proto.RegisterType((*DWHBenchmarks)(nil), "sonm.DWHBenchmarks")
	proto.RegisterType((*DWHBenchmarkConditions)(nil), "sonm.DWHBenchmarkConditions")
	proto.RegisterType((*MaxMinUint64)(nil), "sonm.MaxMinUint64")
	proto.RegisterType((*MaxMinBig)(nil), "sonm.MaxMinBig")
	proto.RegisterType((*CmpUint64)(nil), "sonm.CmpUint64")
	proto.RegisterType((*DealChangeRequest)(nil), "sonm.DealChangeRequest")
	proto.RegisterEnum("sonm.CmpOp", CmpOp_name, CmpOp_value)
	proto.RegisterEnum("sonm.ProfileRole", ProfileRole_name, ProfileRole_value)
	proto.RegisterEnum("sonm.BlacklistOptions", BlacklistOptions_name, BlacklistOptions_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DWH service

type DWHClient interface {
	GetDeals(ctx context.Context, in *DealsRequest, opts ...grpc.CallOption) (*DealsReply, error)
	GetDealDetails(ctx context.Context, in *ID, opts ...grpc.CallOption) (*DWHDeal, error)
	GetDealConditions(ctx context.Context, in *DealConditionsRequest, opts ...grpc.CallOption) (*DealConditionsReply, error)
	GetOrders(ctx context.Context, in *OrdersRequest, opts ...grpc.CallOption) (*OrdersReply, error)
	GetMatchingOrders(ctx context.Context, in *MatchingOrdersRequest, opts ...grpc.CallOption) (*OrdersReply, error)
	GetOrderDetails(ctx context.Context, in *ID, opts ...grpc.CallOption) (*DWHOrder, error)
	GetProfiles(ctx context.Context, in *ProfilesRequest, opts ...grpc.CallOption) (*ProfilesReply, error)
	GetProfileInfo(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Profile, error)
	GetBlacklist(ctx context.Context, in *ID, opts ...grpc.CallOption) (*BlacklistReply, error)
	GetValidators(ctx context.Context, in *ValidatorsRequest, opts ...grpc.CallOption) (*ValidatorsReply, error)
	GetDealChangeRequests(ctx context.Context, in *ID, opts ...grpc.CallOption) (*DealChangeRequestsReply, error)
	GetWorkers(ctx context.Context, in *WorkersRequest, opts ...grpc.CallOption) (*WorkersReply, error)
}

type dWHClient struct {
	cc *grpc.ClientConn
}

func NewDWHClient(cc *grpc.ClientConn) DWHClient {
	return &dWHClient{cc}
}

func (c *dWHClient) GetDeals(ctx context.Context, in *DealsRequest, opts ...grpc.CallOption) (*DealsReply, error) {
	out := new(DealsReply)
	err := grpc.Invoke(ctx, "/sonm.DWH/GetDeals", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dWHClient) GetDealDetails(ctx context.Context, in *ID, opts ...grpc.CallOption) (*DWHDeal, error) {
	out := new(DWHDeal)
	err := grpc.Invoke(ctx, "/sonm.DWH/GetDealDetails", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dWHClient) GetDealConditions(ctx context.Context, in *DealConditionsRequest, opts ...grpc.CallOption) (*DealConditionsReply, error) {
	out := new(DealConditionsReply)
	err := grpc.Invoke(ctx, "/sonm.DWH/GetDealConditions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dWHClient) GetOrders(ctx context.Context, in *OrdersRequest, opts ...grpc.CallOption) (*OrdersReply, error) {
	out := new(OrdersReply)
	err := grpc.Invoke(ctx, "/sonm.DWH/GetOrders", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dWHClient) GetMatchingOrders(ctx context.Context, in *MatchingOrdersRequest, opts ...grpc.CallOption) (*OrdersReply, error) {
	out := new(OrdersReply)
	err := grpc.Invoke(ctx, "/sonm.DWH/GetMatchingOrders", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dWHClient) GetOrderDetails(ctx context.Context, in *ID, opts ...grpc.CallOption) (*DWHOrder, error) {
	out := new(DWHOrder)
	err := grpc.Invoke(ctx, "/sonm.DWH/GetOrderDetails", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dWHClient) GetProfiles(ctx context.Context, in *ProfilesRequest, opts ...grpc.CallOption) (*ProfilesReply, error) {
	out := new(ProfilesReply)
	err := grpc.Invoke(ctx, "/sonm.DWH/GetProfiles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dWHClient) GetProfileInfo(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Profile, error) {
	out := new(Profile)
	err := grpc.Invoke(ctx, "/sonm.DWH/GetProfileInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dWHClient) GetBlacklist(ctx context.Context, in *ID, opts ...grpc.CallOption) (*BlacklistReply, error) {
	out := new(BlacklistReply)
	err := grpc.Invoke(ctx, "/sonm.DWH/GetBlacklist", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dWHClient) GetValidators(ctx context.Context, in *ValidatorsRequest, opts ...grpc.CallOption) (*ValidatorsReply, error) {
	out := new(ValidatorsReply)
	err := grpc.Invoke(ctx, "/sonm.DWH/GetValidators", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dWHClient) GetDealChangeRequests(ctx context.Context, in *ID, opts ...grpc.CallOption) (*DealChangeRequestsReply, error) {
	out := new(DealChangeRequestsReply)
	err := grpc.Invoke(ctx, "/sonm.DWH/GetDealChangeRequests", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dWHClient) GetWorkers(ctx context.Context, in *WorkersRequest, opts ...grpc.CallOption) (*WorkersReply, error) {
	out := new(WorkersReply)
	err := grpc.Invoke(ctx, "/sonm.DWH/GetWorkers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DWH service

type DWHServer interface {
	GetDeals(context.Context, *DealsRequest) (*DealsReply, error)
	GetDealDetails(context.Context, *ID) (*DWHDeal, error)
	GetDealConditions(context.Context, *DealConditionsRequest) (*DealConditionsReply, error)
	GetOrders(context.Context, *OrdersRequest) (*OrdersReply, error)
	GetMatchingOrders(context.Context, *MatchingOrdersRequest) (*OrdersReply, error)
	GetOrderDetails(context.Context, *ID) (*DWHOrder, error)
	GetProfiles(context.Context, *ProfilesRequest) (*ProfilesReply, error)
	GetProfileInfo(context.Context, *ID) (*Profile, error)
	GetBlacklist(context.Context, *ID) (*BlacklistReply, error)
	GetValidators(context.Context, *ValidatorsRequest) (*ValidatorsReply, error)
	GetDealChangeRequests(context.Context, *ID) (*DealChangeRequestsReply, error)
	GetWorkers(context.Context, *WorkersRequest) (*WorkersReply, error)
}

func RegisterDWHServer(s *grpc.Server, srv DWHServer) {
	s.RegisterService(&_DWH_serviceDesc, srv)
}

func _DWH_GetDeals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DealsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DWHServer).GetDeals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.DWH/GetDeals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DWHServer).GetDeals(ctx, req.(*DealsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DWH_GetDealDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DWHServer).GetDealDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.DWH/GetDealDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DWHServer).GetDealDetails(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DWH_GetDealConditions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DealConditionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DWHServer).GetDealConditions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.DWH/GetDealConditions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DWHServer).GetDealConditions(ctx, req.(*DealConditionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DWH_GetOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DWHServer).GetOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.DWH/GetOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DWHServer).GetOrders(ctx, req.(*OrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DWH_GetMatchingOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchingOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DWHServer).GetMatchingOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.DWH/GetMatchingOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DWHServer).GetMatchingOrders(ctx, req.(*MatchingOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DWH_GetOrderDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DWHServer).GetOrderDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.DWH/GetOrderDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DWHServer).GetOrderDetails(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DWH_GetProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DWHServer).GetProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.DWH/GetProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DWHServer).GetProfiles(ctx, req.(*ProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DWH_GetProfileInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DWHServer).GetProfileInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.DWH/GetProfileInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DWHServer).GetProfileInfo(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DWH_GetBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DWHServer).GetBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.DWH/GetBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DWHServer).GetBlacklist(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DWH_GetValidators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DWHServer).GetValidators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.DWH/GetValidators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DWHServer).GetValidators(ctx, req.(*ValidatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DWH_GetDealChangeRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DWHServer).GetDealChangeRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.DWH/GetDealChangeRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DWHServer).GetDealChangeRequests(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DWH_GetWorkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DWHServer).GetWorkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.DWH/GetWorkers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DWHServer).GetWorkers(ctx, req.(*WorkersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DWH_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sonm.DWH",
	HandlerType: (*DWHServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDeals",
			Handler:    _DWH_GetDeals_Handler,
		},
		{
			MethodName: "GetDealDetails",
			Handler:    _DWH_GetDealDetails_Handler,
		},
		{
			MethodName: "GetDealConditions",
			Handler:    _DWH_GetDealConditions_Handler,
		},
		{
			MethodName: "GetOrders",
			Handler:    _DWH_GetOrders_Handler,
		},
		{
			MethodName: "GetMatchingOrders",
			Handler:    _DWH_GetMatchingOrders_Handler,
		},
		{
			MethodName: "GetOrderDetails",
			Handler:    _DWH_GetOrderDetails_Handler,
		},
		{
			MethodName: "GetProfiles",
			Handler:    _DWH_GetProfiles_Handler,
		},
		{
			MethodName: "GetProfileInfo",
			Handler:    _DWH_GetProfileInfo_Handler,
		},
		{
			MethodName: "GetBlacklist",
			Handler:    _DWH_GetBlacklist_Handler,
		},
		{
			MethodName: "GetValidators",
			Handler:    _DWH_GetValidators_Handler,
		},
		{
			MethodName: "GetDealChangeRequests",
			Handler:    _DWH_GetDealChangeRequests_Handler,
		},
		{
			MethodName: "GetWorkers",
			Handler:    _DWH_GetWorkers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dwh.proto",
}

// Begin grpccmd
var _ = grpccmd.RunE

// DWH
var _DWHCmd = &cobra.Command{
	Use:   "dWH [method]",
	Short: "Subcommand for the DWH service.",
}

var _DWH_GetDealsCmd = &cobra.Command{
	Use:   "getDeals",
	Short: "Make the GetDeals method call, input-type: sonm.DealsRequest output-type: sonm.DealsReply",
	RunE: grpccmd.RunE(
		"GetDeals",
		"sonm.DealsRequest",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewDWHClient(cc)
		},
	),
}

var _DWH_GetDealsCmd_gen = &cobra.Command{
	Use:   "getDeals-gen",
	Short: "Generate JSON for method call of GetDeals (input-type: sonm.DealsRequest)",
	RunE:  grpccmd.TypeToJson("sonm.DealsRequest"),
}

var _DWH_GetDealDetailsCmd = &cobra.Command{
	Use:   "getDealDetails",
	Short: "Make the GetDealDetails method call, input-type: sonm.ID output-type: sonm.DWHDeal",
	RunE: grpccmd.RunE(
		"GetDealDetails",
		"sonm.ID",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewDWHClient(cc)
		},
	),
}

var _DWH_GetDealDetailsCmd_gen = &cobra.Command{
	Use:   "getDealDetails-gen",
	Short: "Generate JSON for method call of GetDealDetails (input-type: sonm.ID)",
	RunE:  grpccmd.TypeToJson("sonm.ID"),
}

var _DWH_GetDealConditionsCmd = &cobra.Command{
	Use:   "getDealConditions",
	Short: "Make the GetDealConditions method call, input-type: sonm.DealConditionsRequest output-type: sonm.DealConditionsReply",
	RunE: grpccmd.RunE(
		"GetDealConditions",
		"sonm.DealConditionsRequest",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewDWHClient(cc)
		},
	),
}

var _DWH_GetDealConditionsCmd_gen = &cobra.Command{
	Use:   "getDealConditions-gen",
	Short: "Generate JSON for method call of GetDealConditions (input-type: sonm.DealConditionsRequest)",
	RunE:  grpccmd.TypeToJson("sonm.DealConditionsRequest"),
}

var _DWH_GetOrdersCmd = &cobra.Command{
	Use:   "getOrders",
	Short: "Make the GetOrders method call, input-type: sonm.OrdersRequest output-type: sonm.OrdersReply",
	RunE: grpccmd.RunE(
		"GetOrders",
		"sonm.OrdersRequest",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewDWHClient(cc)
		},
	),
}

var _DWH_GetOrdersCmd_gen = &cobra.Command{
	Use:   "getOrders-gen",
	Short: "Generate JSON for method call of GetOrders (input-type: sonm.OrdersRequest)",
	RunE:  grpccmd.TypeToJson("sonm.OrdersRequest"),
}

var _DWH_GetMatchingOrdersCmd = &cobra.Command{
	Use:   "getMatchingOrders",
	Short: "Make the GetMatchingOrders method call, input-type: sonm.MatchingOrdersRequest output-type: sonm.OrdersReply",
	RunE: grpccmd.RunE(
		"GetMatchingOrders",
		"sonm.MatchingOrdersRequest",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewDWHClient(cc)
		},
	),
}

var _DWH_GetMatchingOrdersCmd_gen = &cobra.Command{
	Use:   "getMatchingOrders-gen",
	Short: "Generate JSON for method call of GetMatchingOrders (input-type: sonm.MatchingOrdersRequest)",
	RunE:  grpccmd.TypeToJson("sonm.MatchingOrdersRequest"),
}

var _DWH_GetOrderDetailsCmd = &cobra.Command{
	Use:   "getOrderDetails",
	Short: "Make the GetOrderDetails method call, input-type: sonm.ID output-type: sonm.DWHOrder",
	RunE: grpccmd.RunE(
		"GetOrderDetails",
		"sonm.ID",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewDWHClient(cc)
		},
	),
}

var _DWH_GetOrderDetailsCmd_gen = &cobra.Command{
	Use:   "getOrderDetails-gen",
	Short: "Generate JSON for method call of GetOrderDetails (input-type: sonm.ID)",
	RunE:  grpccmd.TypeToJson("sonm.ID"),
}

var _DWH_GetProfilesCmd = &cobra.Command{
	Use:   "getProfiles",
	Short: "Make the GetProfiles method call, input-type: sonm.ProfilesRequest output-type: sonm.ProfilesReply",
	RunE: grpccmd.RunE(
		"GetProfiles",
		"sonm.ProfilesRequest",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewDWHClient(cc)
		},
	),
}

var _DWH_GetProfilesCmd_gen = &cobra.Command{
	Use:   "getProfiles-gen",
	Short: "Generate JSON for method call of GetProfiles (input-type: sonm.ProfilesRequest)",
	RunE:  grpccmd.TypeToJson("sonm.ProfilesRequest"),
}

var _DWH_GetProfileInfoCmd = &cobra.Command{
	Use:   "getProfileInfo",
	Short: "Make the GetProfileInfo method call, input-type: sonm.ID output-type: sonm.Profile",
	RunE: grpccmd.RunE(
		"GetProfileInfo",
		"sonm.ID",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewDWHClient(cc)
		},
	),
}

var _DWH_GetProfileInfoCmd_gen = &cobra.Command{
	Use:   "getProfileInfo-gen",
	Short: "Generate JSON for method call of GetProfileInfo (input-type: sonm.ID)",
	RunE:  grpccmd.TypeToJson("sonm.ID"),
}

var _DWH_GetBlacklistCmd = &cobra.Command{
	Use:   "getBlacklist",
	Short: "Make the GetBlacklist method call, input-type: sonm.ID output-type: sonm.BlacklistReply",
	RunE: grpccmd.RunE(
		"GetBlacklist",
		"sonm.ID",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewDWHClient(cc)
		},
	),
}

var _DWH_GetBlacklistCmd_gen = &cobra.Command{
	Use:   "getBlacklist-gen",
	Short: "Generate JSON for method call of GetBlacklist (input-type: sonm.ID)",
	RunE:  grpccmd.TypeToJson("sonm.ID"),
}

var _DWH_GetValidatorsCmd = &cobra.Command{
	Use:   "getValidators",
	Short: "Make the GetValidators method call, input-type: sonm.ValidatorsRequest output-type: sonm.ValidatorsReply",
	RunE: grpccmd.RunE(
		"GetValidators",
		"sonm.ValidatorsRequest",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewDWHClient(cc)
		},
	),
}

var _DWH_GetValidatorsCmd_gen = &cobra.Command{
	Use:   "getValidators-gen",
	Short: "Generate JSON for method call of GetValidators (input-type: sonm.ValidatorsRequest)",
	RunE:  grpccmd.TypeToJson("sonm.ValidatorsRequest"),
}

var _DWH_GetDealChangeRequestsCmd = &cobra.Command{
	Use:   "getDealChangeRequests",
	Short: "Make the GetDealChangeRequests method call, input-type: sonm.ID output-type: sonm.DealChangeRequestsReply",
	RunE: grpccmd.RunE(
		"GetDealChangeRequests",
		"sonm.ID",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewDWHClient(cc)
		},
	),
}

var _DWH_GetDealChangeRequestsCmd_gen = &cobra.Command{
	Use:   "getDealChangeRequests-gen",
	Short: "Generate JSON for method call of GetDealChangeRequests (input-type: sonm.ID)",
	RunE:  grpccmd.TypeToJson("sonm.ID"),
}

var _DWH_GetWorkersCmd = &cobra.Command{
	Use:   "getWorkers",
	Short: "Make the GetWorkers method call, input-type: sonm.WorkersRequest output-type: sonm.WorkersReply",
	RunE: grpccmd.RunE(
		"GetWorkers",
		"sonm.WorkersRequest",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewDWHClient(cc)
		},
	),
}

var _DWH_GetWorkersCmd_gen = &cobra.Command{
	Use:   "getWorkers-gen",
	Short: "Generate JSON for method call of GetWorkers (input-type: sonm.WorkersRequest)",
	RunE:  grpccmd.TypeToJson("sonm.WorkersRequest"),
}

// Register commands with the root command and service command
func init() {
	grpccmd.RegisterServiceCmd(_DWHCmd)
	_DWHCmd.AddCommand(
		_DWH_GetDealsCmd,
		_DWH_GetDealsCmd_gen,
		_DWH_GetDealDetailsCmd,
		_DWH_GetDealDetailsCmd_gen,
		_DWH_GetDealConditionsCmd,
		_DWH_GetDealConditionsCmd_gen,
		_DWH_GetOrdersCmd,
		_DWH_GetOrdersCmd_gen,
		_DWH_GetMatchingOrdersCmd,
		_DWH_GetMatchingOrdersCmd_gen,
		_DWH_GetOrderDetailsCmd,
		_DWH_GetOrderDetailsCmd_gen,
		_DWH_GetProfilesCmd,
		_DWH_GetProfilesCmd_gen,
		_DWH_GetProfileInfoCmd,
		_DWH_GetProfileInfoCmd_gen,
		_DWH_GetBlacklistCmd,
		_DWH_GetBlacklistCmd_gen,
		_DWH_GetValidatorsCmd,
		_DWH_GetValidatorsCmd_gen,
		_DWH_GetDealChangeRequestsCmd,
		_DWH_GetDealChangeRequestsCmd_gen,
		_DWH_GetWorkersCmd,
		_DWH_GetWorkersCmd_gen,
	)
}

// End grpccmd

func init() { proto.RegisterFile("dwh.proto", fileDescriptor7) }

var fileDescriptor7 = []byte{
	// 2223 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x59, 0xdd, 0x72, 0x1b, 0x49,
	0x15, 0xb6, 0x64, 0xfd, 0x1e, 0xfd, 0xba, 0x6d, 0x27, 0x5a, 0xb1, 0x04, 0x31, 0xb0, 0x8b, 0xe3,
	0x65, 0x9d, 0x5d, 0x27, 0x9b, 0xec, 0x86, 0x2d, 0x20, 0x96, 0x5c, 0x8a, 0x96, 0x55, 0x6c, 0xc6,
	0x36, 0xa9, 0xe2, 0x66, 0x6b, 0x2c, 0xb5, 0xec, 0xae, 0x8c, 0x66, 0xc4, 0x4c, 0x2b, 0x59, 0xe5,
	0x01, 0x78, 0x11, 0xaa, 0xb8, 0xe3, 0x19, 0xb8, 0x00, 0x1e, 0x83, 0x1b, 0x6e, 0xb8, 0xe2, 0x1d,
	0xa8, 0xfe, 0x99, 0x9e, 0xee, 0x99, 0xd1, 0x3a, 0x86, 0xa2, 0x8a, 0x3b, 0x9d, 0xef, 0x9c, 0xfe,
	0x99, 0xd3, 0xdf, 0xf9, 0xe9, 0x16, 0x54, 0xa7, 0x6f, 0xae, 0x0f, 0x16, 0x81, 0x4f, 0x7d, 0x54,
	0x08, 0x7d, 0x6f, 0xde, 0xad, 0x5f, 0x92, 0x2b, 0xe2, 0x51, 0x81, 0x75, 0xb7, 0xe6, 0x4e, 0xf0,
	0x0a, 0xd3, 0x85, 0xeb, 0x4c, 0xb0, 0x84, 0x5a, 0xc4, 0x63, 0x86, 0x1e, 0x71, 0x22, 0x80, 0x92,
	0x39, 0x0e, 0xa9, 0x33, 0x5f, 0x08, 0xc0, 0xfa, 0x6b, 0x01, 0xea, 0x03, 0xec, 0xb8, 0xa1, 0x8d,
	0x7f, 0xb7, 0xc4, 0x21, 0x45, 0x07, 0x50, 0x0a, 0xa9, 0x43, 0x97, 0x61, 0x27, 0xd7, 0xcb, 0xed,
	0x35, 0x0f, 0xef, 0x1c, 0xb0, 0x19, 0x0e, 0xc6, 0x7c, 0x6e, 0x66, 0x79, 0xc6, 0xb5, 0xb6, 0xb4,
	0x42, 0xf7, 0x00, 0xc2, 0xe5, 0x62, 0xe1, 0x12, 0x1c, 0x8c, 0x06, 0x9d, 0x7c, 0x2f, 0xb7, 0x57,
	0xb5, 0x35, 0x84, 0xe9, 0x27, 0xbe, 0x17, 0x2e, 0xe7, 0x5c, 0xbf, 0x29, 0xf4, 0x31, 0x82, 0xba,
	0x50, 0x99, 0x3b, 0x21, 0xe5, 0xda, 0x02, 0xd7, 0x2a, 0x19, 0xed, 0x40, 0xd1, 0x09, 0x5f, 0x8d,
	0x06, 0x9d, 0x22, 0x57, 0x08, 0x81, 0xa1, 0x97, 0x64, 0x3a, 0x1a, 0x74, 0x4a, 0x02, 0xe5, 0x02,
	0x3a, 0x80, 0xca, 0x74, 0x19, 0x38, 0x94, 0xf8, 0x5e, 0xa7, 0xdc, 0xcb, 0xed, 0xd5, 0x0e, 0x51,
	0xb4, 0xf3, 0x6f, 0xc7, 0xc4, 0xbb, 0x20, 0x1e, 0x7d, 0xfc, 0xc8, 0x56, 0x36, 0xe8, 0x03, 0x28,
	0x2e, 0x02, 0x32, 0xc1, 0x9d, 0x0a, 0x37, 0x6e, 0xe9, 0xc6, 0x47, 0xe4, 0xca, 0x16, 0x5a, 0xf4,
	0x11, 0x54, 0x3c, 0x4c, 0x67, 0xae, 0x73, 0x15, 0x76, 0xaa, 0xba, 0x65, 0x7f, 0xbe, 0x88, 0xe6,
	0x8c, 0x0c, 0xd0, 0x31, 0xb4, 0xd9, 0x16, 0xa7, 0xd8, 0xa3, 0x84, 0xae, 0xbe, 0xc6, 0xaf, 0xb1,
	0xdb, 0x01, 0xee, 0xc5, 0xf7, 0x74, 0x2f, 0x1a, 0x06, 0x76, 0x6a, 0x08, 0x9b, 0x86, 0x7d, 0x93,
	0x31, 0x4d, 0xed, 0xc6, 0x69, 0x92, 0x43, 0xd0, 0x97, 0x00, 0x97, 0xd8, 0x9b, 0x5c, 0x33, 0x5a,
	0x84, 0x9d, 0x3a, 0xdf, 0xfc, 0xfb, 0x62, 0x82, 0xc1, 0xcb, 0xe7, 0x47, 0x91, 0xaa, 0xef, 0x7b,
	0x53, 0xc2, 0x5c, 0x12, 0xda, 0x9a, 0x3d, 0xf3, 0xb2, 0x4b, 0xe6, 0x84, 0x76, 0x1a, 0xbd, 0xdc,
	0x5e, 0xc1, 0x16, 0x02, 0xba, 0x03, 0x25, 0x7f, 0x36, 0x0b, 0x31, 0xed, 0x34, 0x39, 0x2c, 0x25,
	0xeb, 0x53, 0x00, 0xc9, 0xa2, 0x85, 0xbb, 0x42, 0x3f, 0x82, 0xe2, 0x94, 0x49, 0x9d, 0x5c, 0x6f,
	0x73, 0xaf, 0x76, 0xd8, 0x50, 0x8b, 0x32, 0x1b, 0x5b, 0xe8, 0xac, 0xbf, 0x95, 0xa0, 0x2c, 0x21,
	0xd4, 0x84, 0x3c, 0x99, 0x72, 0xc2, 0x55, 0xed, 0x3c, 0x99, 0xfe, 0xdf, 0x90, 0xaa, 0x9b, 0x20,
	0x55, 0x41, 0x23, 0x90, 0x65, 0x12, 0xa8, 0x2e, 0x3e, 0xf2, 0x88, 0x5c, 0x8d, 0x3c, 0x1a, 0xb1,
	0xe7, 0x63, 0xa8, 0x86, 0xd4, 0x09, 0xe8, 0x39, 0x99, 0x63, 0x93, 0x3e, 0xe7, 0x51, 0x1c, 0xda,
	0xb1, 0x05, 0xba, 0x0f, 0x65, 0xec, 0x4d, 0xb9, 0x31, 0x64, 0x1b, 0x47, 0x7a, 0x2d, 0x4c, 0x6b,
	0xef, 0x14, 0xa6, 0x8f, 0xa0, 0x79, 0xe9, 0xfa, 0x93, 0x57, 0x78, 0x7a, 0xe4, 0xb8, 0x8e, 0x37,
	0xc1, 0x92, 0x10, 0xe6, 0xb6, 0x13, 0x36, 0xe8, 0x00, 0x6a, 0xd4, 0xa7, 0x8e, 0x7b, 0xea, 0xac,
	0xfc, 0xa5, 0xa0, 0x42, 0x72, 0x88, 0x6e, 0x80, 0x1e, 0x00, 0xb8, 0x4e, 0x48, 0x8f, 0x88, 0xeb,
	0x9e, 0x9f, 0x71, 0x8a, 0x64, 0x7c, 0x83, 0x66, 0xc2, 0x1c, 0xac, 0xc2, 0xab, 0x25, 0x1c, 0xac,
	0xa2, 0x69, 0x3f, 0x23, 0x9a, 0xda, 0xdc, 0x26, 0x1d, 0x32, 0xfb, 0x19, 0x21, 0xb3, 0x25, 0x6c,
	0x53, 0x71, 0x71, 0x08, 0x3b, 0x11, 0x95, 0xfa, 0x38, 0xa0, 0x64, 0x46, 0x26, 0x0e, 0xc5, 0x61,
	0x07, 0xf5, 0x72, 0x7b, 0x75, 0x3b, 0x53, 0xc7, 0xc6, 0x44, 0xf4, 0x32, 0xc6, 0x6c, 0x8b, 0x31,
	0x59, 0x3a, 0xf4, 0x09, 0x6c, 0x3b, 0x13, 0x4a, 0x5e, 0xe3, 0xfe, 0xb5, 0xe3, 0x5d, 0x61, 0x99,
	0x60, 0x3b, 0x3b, 0xbd, 0xdc, 0x5e, 0xc5, 0xce, 0x52, 0xa1, 0x87, 0x46, 0xc4, 0xee, 0x72, 0xf7,
	0x6d, 0xa7, 0x23, 0xd6, 0x08, 0x54, 0xeb, 0x18, 0x76, 0xd9, 0x79, 0x6b, 0x61, 0x2c, 0x67, 0x53,
	0x11, 0x9c, 0xcb, 0x8e, 0xe0, 0xbc, 0x11, 0xc1, 0x5f, 0xc1, 0x76, 0x72, 0x1a, 0x16, 0xca, 0x0f,
	0x79, 0xa4, 0x49, 0x48, 0xc6, 0x73, 0xb4, 0x25, 0xdd, 0xdc, 0xd6, 0xcc, 0xac, 0xdf, 0x17, 0xa0,
	0x71, 0x12, 0x4c, 0x71, 0xa0, 0xf6, 0x72, 0x07, 0x4a, 0x2c, 0xea, 0x47, 0x03, 0x19, 0xe4, 0x52,
	0x42, 0xf7, 0xa1, 0x40, 0x57, 0x0b, 0xcc, 0xf7, 0xd2, 0x3c, 0xdc, 0xd5, 0x49, 0xcc, 0x27, 0x38,
	0x5f, 0x2d, 0xb0, 0xcd, 0x4d, 0xd0, 0x03, 0xc5, 0xf8, 0x4d, 0x6e, 0x7c, 0x37, 0x65, 0x9c, 0xa0,
	0x7c, 0x17, 0x2a, 0xce, 0x92, 0x5e, 0xfb, 0x5a, 0x12, 0x88, 0x64, 0xf4, 0x21, 0x34, 0x27, 0xfe,
	0xd2, 0xa3, 0x38, 0x58, 0x38, 0x01, 0x5d, 0xa9, 0x6c, 0x90, 0x40, 0x8d, 0xaa, 0x52, 0xba, 0x4d,
	0x55, 0xa9, 0xbe, 0x73, 0x55, 0xa9, 0xdd, 0x54, 0x55, 0xc6, 0xb0, 0x33, 0x09, 0xb0, 0x43, 0xfd,
	0xc0, 0xe4, 0x77, 0xfd, 0xa6, 0x92, 0x90, 0x39, 0x2c, 0x51, 0x16, 0x1a, 0xff, 0x69, 0x59, 0x68,
	0x66, 0x93, 0xaa, 0x65, 0x90, 0xea, 0x1b, 0xd8, 0x1d, 0x3b, 0x74, 0x72, 0x4d, 0xbc, 0x2b, 0x93,
	0x0f, 0x1d, 0x95, 0xf0, 0x6b, 0x87, 0x15, 0xb1, 0xf8, 0x68, 0xc0, 0x53, 0xbf, 0x5a, 0x20, 0x9f,
	0xbd, 0xc0, 0xa6, 0xb1, 0xc0, 0x67, 0x50, 0x8b, 0x26, 0x66, 0x6c, 0xfd, 0x10, 0x4a, 0x3e, 0x17,
	0x25, 0x53, 0x9b, 0xea, 0xbb, 0xb8, 0x95, 0x2d, 0xb5, 0xd6, 0x3f, 0x8a, 0x50, 0x89, 0xc0, 0x54,
	0xf1, 0x89, 0xb9, 0x9a, 0x37, 0xb8, 0xfa, 0x10, 0xaa, 0x7e, 0xc4, 0x49, 0xc9, 0xc1, 0x35, 0x84,
	0x8d, 0xed, 0xd0, 0x17, 0x50, 0xf3, 0x63, 0x6e, 0x72, 0x1e, 0x7e, 0x07, 0x75, 0x75, 0x5b, 0x83,
	0xbf, 0xc5, 0x1b, 0xf9, 0x5b, 0xca, 0xe4, 0xef, 0x7f, 0x5b, 0xc0, 0xba, 0x89, 0xf6, 0x47, 0xcf,
	0xcf, 0xbf, 0x80, 0x06, 0xb9, 0x5d, 0xab, 0x63, 0xda, 0xa3, 0xf7, 0xa1, 0x7a, 0xe9, 0x3a, 0x93,
	0x57, 0x2e, 0x09, 0x29, 0x0f, 0x83, 0xaa, 0x1d, 0x03, 0xa8, 0x0d, 0x9b, 0xd4, 0xb9, 0xe2, 0x2c,
	0xaf, 0xdb, 0xec, 0x27, 0xda, 0x87, 0xea, 0x2c, 0xf0, 0xdf, 0x62, 0xef, 0x6c, 0x39, 0xcf, 0xac,
	0x45, 0xb1, 0x9a, 0x27, 0xec, 0xac, 0xa0, 0x11, 0xb4, 0xcd, 0x8e, 0x8c, 0x1e, 0xd4, 0x24, 0xfe,
	0xc2, 0x99, 0x63, 0x4e, 0xe5, 0xaa, 0xad, 0x43, 0xdc, 0xed, 0x42, 0xec, 0x33, 0x3f, 0x07, 0x2b,
	0x5e, 0x90, 0x98, 0xdb, 0x0d, 0x94, 0xa5, 0xfe, 0x08, 0xd1, 0xab, 0xc5, 0x16, 0xff, 0x96, 0x2c,
	0x15, 0xf3, 0x45, 0x9f, 0xc1, 0x78, 0x7a, 0x7e, 0xc6, 0x2b, 0x51, 0xc1, 0x8e, 0x81, 0x44, 0x61,
	0xd8, 0x7e, 0xb7, 0xc2, 0xf0, 0xf7, 0x3c, 0x34, 0x8c, 0x1c, 0xad, 0x31, 0xbd, 0xf0, 0x3f, 0x6f,
	0xb3, 0x74, 0xe6, 0x15, 0xd7, 0x31, 0xaf, 0xf4, 0x8e, 0xad, 0x53, 0xf9, 0x36, 0xad, 0x53, 0xe5,
	0xc6, 0xd6, 0xc9, 0x68, 0x6a, 0xaa, 0x37, 0x35, 0x35, 0x71, 0x3e, 0x00, 0x3d, 0x1f, 0x58, 0xdf,
	0x40, 0x75, 0xf0, 0xf2, 0xf9, 0x4b, 0x3f, 0x78, 0x85, 0x03, 0xc3, 0x15, 0xb9, 0x84, 0x2b, 0x3a,
	0x50, 0x0e, 0x5d, 0xe7, 0x35, 0x56, 0x3e, 0x8e, 0x44, 0x76, 0xea, 0x13, 0xdf, 0x9b, 0x91, 0x60,
	0x8e, 0xa7, 0xdc, 0xbf, 0x15, 0x3b, 0x06, 0xac, 0xbf, 0xe4, 0xa1, 0x75, 0x1a, 0xf8, 0x33, 0xe2,
	0x62, 0x95, 0x38, 0x3f, 0x80, 0x42, 0xe0, 0xbb, 0x58, 0x5e, 0xce, 0xb6, 0xc4, 0xae, 0xa5, 0x91,
	0xed, 0xbb, 0xd8, 0xe6, 0xea, 0x74, 0x6c, 0xe6, 0x6f, 0x19, 0x9b, 0x1d, 0x28, 0x4f, 0x24, 0xc5,
	0xc5, 0xb9, 0x47, 0x22, 0x42, 0x50, 0xf0, 0x58, 0x78, 0x88, 0x03, 0xe7, 0xbf, 0x79, 0xfb, 0x15,
	0x05, 0xee, 0xc9, 0x1b, 0x0f, 0xc7, 0x29, 0x2b, 0x85, 0xa3, 0x5f, 0x42, 0x2b, 0xc6, 0x16, 0xaa,
	0xb2, 0xaa, 0x16, 0xf6, 0xc8, 0x54, 0x86, 0x76, 0xd2, 0x3c, 0x2e, 0x11, 0xe5, 0xec, 0x12, 0x51,
	0x31, 0x4a, 0xc4, 0x53, 0x68, 0xc4, 0x4e, 0x64, 0x45, 0xe2, 0x3e, 0x54, 0x16, 0x12, 0x30, 0x2f,
	0x28, 0x91, 0x1b, 0x95, 0xda, 0xfa, 0x67, 0x0e, 0xca, 0x12, 0x65, 0xf3, 0x5f, 0x84, 0xda, 0xf9,
	0x4a, 0x09, 0xfd, 0x18, 0x1a, 0xa3, 0x94, 0xab, 0x0b, 0xb6, 0x09, 0x32, 0xaf, 0xf1, 0xa4, 0x22,
	0x9c, 0xc9, 0x7f, 0x33, 0x1f, 0x47, 0x69, 0x44, 0x38, 0x33, 0x12, 0xf9, 0x9c, 0x61, 0xdf, 0x0f,
	0x16, 0xbe, 0x16, 0x41, 0x15, 0xdb, 0x04, 0x59, 0x36, 0x1a, 0x85, 0x6c, 0x7b, 0x38, 0x0c, 0x89,
	0xef, 0x39, 0x2e, 0x77, 0x64, 0xc5, 0x4e, 0xa0, 0xc8, 0x82, 0xba, 0x91, 0x86, 0xca, 0x3c, 0x0d,
	0x19, 0x98, 0xf5, 0x1c, 0x9a, 0xca, 0xf1, 0xc2, 0x4d, 0x1d, 0x28, 0xfb, 0xf2, 0x28, 0xc5, 0x07,
	0x47, 0x22, 0x63, 0xad, 0x33, 0x9d, 0x06, 0x38, 0x0c, 0x71, 0xd8, 0xc9, 0xf7, 0x36, 0x59, 0xde,
	0x56, 0x80, 0xf5, 0x16, 0xb6, 0x7e, 0xe3, 0xb8, 0x64, 0xca, 0x52, 0x9c, 0xa2, 0xed, 0x13, 0x68,
	0xbe, 0x8e, 0x40, 0xe1, 0xa5, 0x5c, 0x76, 0xdb, 0x93, 0x30, 0xbb, 0x65, 0x3b, 0x70, 0x04, 0x2d,
	0x7d, 0x6d, 0xf6, 0x19, 0x0f, 0x00, 0xd4, 0x94, 0xd1, 0x79, 0xcb, 0x55, 0x95, 0xa9, 0xad, 0x99,
	0x58, 0x9f, 0x42, 0x55, 0x29, 0x52, 0xbd, 0x01, 0xdb, 0x8e, 0x76, 0xc8, 0x42, 0xb0, 0x5e, 0xc0,
	0x5d, 0x9e, 0x68, 0xf5, 0x66, 0x5e, 0xf5, 0xcf, 0x95, 0x40, 0x02, 0x72, 0xf1, 0xbb, 0x5a, 0xf7,
	0xac, 0x0f, 0xb0, 0x95, 0xa1, 0xf5, 0x5b, 0x68, 0x8a, 0xb4, 0xa2, 0xfc, 0xd7, 0x85, 0xca, 0x38,
	0x91, 0x5e, 0xc6, 0xda, 0x85, 0xf6, 0x16, 0x2e, 0xfa, 0x02, 0xea, 0x6a, 0x6e, 0x11, 0x0d, 0xe5,
	0x37, 0x42, 0x36, 0x9d, 0xa3, 0x52, 0x9b, 0x1d, 0xe9, 0xad, 0x3f, 0xe4, 0xa0, 0xa6, 0x91, 0xe6,
	0x3b, 0x18, 0xd2, 0x83, 0x9a, 0xf2, 0xa8, 0xca, 0x7a, 0x3a, 0xc4, 0x39, 0x44, 0x69, 0x40, 0x2e,
	0x97, 0x14, 0xcb, 0x1d, 0xc6, 0x00, 0xe3, 0xbf, 0x99, 0xbe, 0x0a, 0x22, 0xa6, 0xcc, 0x1c, 0xb5,
	0x03, 0xc5, 0xd7, 0x8e, 0xbb, 0xc4, 0x3c, 0x3a, 0xea, 0xb6, 0x10, 0xac, 0x3f, 0x6d, 0x42, 0xc3,
	0x28, 0x8a, 0x2c, 0x3b, 0xf5, 0x4f, 0x2f, 0xce, 0x56, 0x21, 0x2f, 0x8e, 0xe3, 0xa5, 0x4b, 0x89,
	0x2c, 0x82, 0x29, 0x9c, 0xc5, 0x94, 0x86, 0x9d, 0x78, 0x58, 0x7a, 0x35, 0x81, 0xb2, 0x03, 0xe9,
	0x9f, 0x5e, 0xf4, 0xfd, 0x00, 0x87, 0x72, 0xfb, 0x4a, 0x66, 0x7e, 0xb1, 0x9f, 0x8d, 0xcf, 0xc8,
	0x5b, 0x2c, 0xf7, 0x1d, 0x89, 0xcc, 0x2f, 0x67, 0xd4, 0x0f, 0x9c, 0x2b, 0xcc, 0xb5, 0xa2, 0x2e,
	0xea, 0x10, 0x8b, 0xd5, 0x17, 0x98, 0x9e, 0x07, 0xce, 0x6c, 0x46, 0x26, 0x23, 0x91, 0x1a, 0x0b,
	0xb6, 0x81, 0x31, 0xef, 0xc4, 0xf2, 0xc9, 0x32, 0xca, 0x83, 0x26, 0xc8, 0x76, 0x38, 0x64, 0x3b,
	0x5a, 0x7a, 0x51, 0x46, 0x54, 0x32, 0x23, 0xc7, 0xf0, 0xf4, 0x62, 0x8c, 0xe7, 0xb2, 0xa9, 0x93,
	0x12, 0xfb, 0xfa, 0xe1, 0xe9, 0xc5, 0x31, 0xbd, 0x7e, 0xee, 0x84, 0xd7, 0x81, 0x43, 0xc5, 0x3b,
	0x44, 0xc1, 0x4e, 0xa0, 0x68, 0x0f, 0x5a, 0x6c, 0x2e, 0x27, 0x8c, 0x0d, 0x6b, 0xdc, 0x30, 0x09,
	0xb3, 0x2f, 0x1e, 0x9e, 0x5e, 0xd8, 0x78, 0x1a, 0x5e, 0x93, 0x19, 0xe5, 0xdd, 0x5c, 0xc1, 0xd6,
	0x21, 0xeb, 0x8f, 0x45, 0xb8, 0x93, 0x7d, 0xf1, 0x40, 0x3f, 0x5f, 0x73, 0x70, 0xd9, 0xb7, 0xb0,
	0xf4, 0x61, 0x3e, 0xcd, 0x3c, 0xcc, 0xec, 0xd1, 0xc9, 0x03, 0x3e, 0x48, 0x1c, 0xf0, 0x9a, 0x9b,
	0x9f, 0x3a, 0xf4, 0x9f, 0x9a, 0x87, 0x9e, 0x6d, 0xae, 0x88, 0xf0, 0x28, 0x4d, 0x84, 0xec, 0x11,
	0x06, 0x39, 0x1e, 0x67, 0x90, 0x23, 0x7b, 0x98, 0x49, 0x98, 0xcf, 0xb3, 0x08, 0x93, 0x3d, 0x30,
	0x41, 0xa2, 0x83, 0x04, 0x89, 0xd6, 0x78, 0x41, 0x11, 0x6b, 0xdf, 0x20, 0x56, 0xb6, 0x75, 0x44,
	0xb6, 0xa7, 0x99, 0x64, 0x5b, 0x73, 0x3a, 0x09, 0x02, 0x7e, 0x99, 0x4d, 0xc0, 0xec, 0xc1, 0x29,
	0x52, 0x3e, 0x4a, 0x93, 0x72, 0x8d, 0xf7, 0x75, 0xa2, 0x1e, 0x42, 0x5d, 0x57, 0xb2, 0x0b, 0xca,
	0xdc, 0xf9, 0x56, 0x66, 0x12, 0xf6, 0x93, 0x23, 0xc4, 0x93, 0x19, 0x83, 0xfd, 0xb4, 0x7e, 0x05,
	0x55, 0x75, 0xf9, 0x47, 0xf7, 0xe2, 0x01, 0xc9, 0x86, 0x93, 0x0f, 0xbf, 0x17, 0x0f, 0x4f, 0xeb,
	0x89, 0x67, 0x7d, 0x05, 0x55, 0x55, 0x28, 0xe3, 0xe4, 0x27, 0x5f, 0x77, 0xb8, 0x80, 0x7e, 0x02,
	0x15, 0x7f, 0x81, 0x03, 0x96, 0x64, 0x65, 0xcb, 0x57, 0x53, 0x15, 0xf6, 0x64, 0x61, 0x2b, 0xa5,
	0xf5, 0xaf, 0x1c, 0x6c, 0xa5, 0x4a, 0xd0, 0x3b, 0x5f, 0x85, 0x9f, 0x40, 0x4d, 0x16, 0xab, 0x9b,
	0x2f, 0xc3, 0xba, 0xa5, 0x71, 0x2b, 0x28, 0xac, 0xbb, 0x15, 0x14, 0xd7, 0xdf, 0x0a, 0x9e, 0xa8,
	0x47, 0x20, 0xd1, 0x33, 0xfe, 0x40, 0x5f, 0xd3, 0xf8, 0x16, 0xf3, 0x31, 0x68, 0xff, 0x87, 0x50,
	0xe4, 0x2e, 0x40, 0x25, 0xc8, 0x1f, 0xff, 0xba, 0xbd, 0x81, 0xca, 0xb0, 0x39, 0x3c, 0x3f, 0x6e,
	0xe7, 0xd8, 0x8f, 0xaf, 0xcf, 0x8f, 0xdb, 0xf9, 0xfd, 0xc7, 0x50, 0xd3, 0x1a, 0x69, 0x54, 0x83,
	0xf2, 0x33, 0x6f, 0xc5, 0x7e, 0xb6, 0x37, 0x50, 0x1d, 0x2a, 0x67, 0xf2, 0x5e, 0xd4, 0xce, 0x31,
	0xa9, 0x2f, 0x6f, 0x41, 0xed, 0xfc, 0xfe, 0x18, 0xda, 0xc9, 0x9e, 0x15, 0x6d, 0x43, 0xeb, 0x25,
	0xa1, 0xd7, 0xfe, 0x92, 0x46, 0xef, 0x1f, 0xed, 0x0d, 0x84, 0xa0, 0x39, 0xf2, 0x26, 0xee, 0x72,
	0x8a, 0x9f, 0x79, 0x53, 0xb6, 0xe5, 0x76, 0x0e, 0xb5, 0xa1, 0x7e, 0xe2, 0xb9, 0x2b, 0x65, 0x95,
	0x3f, 0xfc, 0x73, 0x11, 0x36, 0x07, 0x2f, 0x9f, 0xa3, 0x43, 0xa8, 0x0c, 0xc5, 0x53, 0x6e, 0x88,
	0x50, 0xdc, 0x33, 0x44, 0x2d, 0x41, 0xb7, 0x6d, 0x60, 0x0b, 0x77, 0x65, 0x6d, 0xa0, 0x8f, 0xa0,
	0x29, 0xc7, 0x0c, 0x30, 0x75, 0x88, 0x1b, 0x22, 0xf5, 0xb8, 0xd2, 0x35, 0x5f, 0xe1, 0xad, 0x0d,
	0x34, 0x86, 0x2d, 0x69, 0xac, 0xa5, 0xdc, 0xef, 0x65, 0xbc, 0xed, 0xa9, 0x25, 0xdf, 0xcb, 0x56,
	0x8a, 0xb5, 0x3f, 0x83, 0xea, 0x50, 0x9e, 0x7b, 0x88, 0xe4, 0xe5, 0xd4, 0x78, 0xf4, 0xe9, 0x6e,
	0x99, 0xa0, 0x18, 0x76, 0xcc, 0x77, 0x61, 0xbe, 0x12, 0x45, 0xbb, 0xc8, 0x7c, 0x3b, 0xca, 0x9e,
	0xe6, 0x63, 0x68, 0x45, 0xab, 0xa7, 0x3f, 0x3d, 0xf1, 0x0c, 0x64, 0x6d, 0xa0, 0x9f, 0x41, 0x6d,
	0x88, 0x69, 0x74, 0x2f, 0x40, 0xbb, 0xc6, 0x05, 0x40, 0xad, 0xb4, 0x9d, 0x84, 0x75, 0x2f, 0x4b,
	0x74, 0xe4, 0xcd, 0xfc, 0xb4, 0x97, 0xa5, 0xd2, 0xda, 0x40, 0x9f, 0x40, 0x7d, 0x88, 0xa9, 0x22,
	0x88, 0x66, 0xba, 0x93, 0xb8, 0xef, 0x44, 0xd3, 0x3f, 0x83, 0xc6, 0x10, 0xd3, 0xb8, 0x8f, 0x45,
	0x77, 0x13, 0xed, 0xaa, 0xda, 0xdf, 0x6e, 0x5a, 0x21, 0xa6, 0x38, 0x82, 0xdd, 0xe8, 0x68, 0x8d,
	0x9e, 0x54, 0x5b, 0xfd, 0xfb, 0x6b, 0xda, 0x50, 0x35, 0xc7, 0xe7, 0x00, 0x43, 0x4c, 0x65, 0xaf,
	0x88, 0xe4, 0x66, 0xcd, 0xb6, 0xb4, 0x8b, 0x12, 0x28, 0x1f, 0x79, 0x59, 0xe2, 0x7f, 0x2d, 0x3e,
	0xfc, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb2, 0x7a, 0x60, 0xf3, 0xb0, 0x1c, 0x00, 0x00,
}
