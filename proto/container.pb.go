// Code generated by protoc-gen-go. DO NOT EDIT.
// source: container.proto

package sonm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Registry struct {
	Username      string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password      string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	ServerAddress string `protobuf:"bytes,3,opt,name=serverAddress" json:"serverAddress,omitempty"`
}

func (m *Registry) Reset()                    { *m = Registry{} }
func (m *Registry) String() string            { return proto.CompactTextString(m) }
func (*Registry) ProtoMessage()               {}
func (*Registry) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *Registry) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Registry) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *Registry) GetServerAddress() string {
	if m != nil {
		return m.ServerAddress
	}
	return ""
}

type NetworkSpec struct {
	Type    string            `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Options map[string]string `protobuf:"bytes,2,rep,name=options" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Subnet  string            `protobuf:"bytes,3,opt,name=subnet" json:"subnet,omitempty"`
	Addr    string            `protobuf:"bytes,4,opt,name=addr" json:"addr,omitempty"`
}

func (m *NetworkSpec) Reset()                    { *m = NetworkSpec{} }
func (m *NetworkSpec) String() string            { return proto.CompactTextString(m) }
func (*NetworkSpec) ProtoMessage()               {}
func (*NetworkSpec) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *NetworkSpec) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *NetworkSpec) GetOptions() map[string]string {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *NetworkSpec) GetSubnet() string {
	if m != nil {
		return m.Subnet
	}
	return ""
}

func (m *NetworkSpec) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type Container struct {
	// Image describes a Docker image name. Required.
	Image string `protobuf:"bytes,1,opt,name=image" json:"image,omitempty"`
	// SSH public key used to attach to the container.
	SshKey string `protobuf:"bytes,2,opt,name=sshKey" json:"sshKey,omitempty"`
	// CommitOnStop points whether a container should commit when stopped.
	// Committed containers can be fetched later while there is an active
	// deal.
	CommitOnStop bool `protobuf:"varint,3,opt,name=commitOnStop" json:"commitOnStop,omitempty"`
	// Env describes environment variables forwarded into the container.
	Env map[string]string `protobuf:"bytes,4,rep,name=env" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Volumes describes network volumes that are used to be mounted inside
	// the container.
	// Mapping from the volume type (cifs, nfs, etc.) to its settings.
	Volumes map[string]*Volume `protobuf:"bytes,5,rep,name=volumes" json:"volumes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Mounts describes mount points from the volume name to the container.
	Mounts   []string       `protobuf:"bytes,6,rep,name=mounts" json:"mounts,omitempty"`
	Networks []*NetworkSpec `protobuf:"bytes,7,rep,name=networks" json:"networks,omitempty"`
}

func (m *Container) Reset()                    { *m = Container{} }
func (m *Container) String() string            { return proto.CompactTextString(m) }
func (*Container) ProtoMessage()               {}
func (*Container) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func (m *Container) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *Container) GetSshKey() string {
	if m != nil {
		return m.SshKey
	}
	return ""
}

func (m *Container) GetCommitOnStop() bool {
	if m != nil {
		return m.CommitOnStop
	}
	return false
}

func (m *Container) GetEnv() map[string]string {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *Container) GetVolumes() map[string]*Volume {
	if m != nil {
		return m.Volumes
	}
	return nil
}

func (m *Container) GetMounts() []string {
	if m != nil {
		return m.Mounts
	}
	return nil
}

func (m *Container) GetNetworks() []*NetworkSpec {
	if m != nil {
		return m.Networks
	}
	return nil
}

func init() {
	proto.RegisterType((*Registry)(nil), "sonm.Registry")
	proto.RegisterType((*NetworkSpec)(nil), "sonm.NetworkSpec")
	proto.RegisterType((*Container)(nil), "sonm.Container")
}

func init() { proto.RegisterFile("container.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 392 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x5d, 0x6b, 0xe2, 0x40,
	0x14, 0x25, 0x26, 0x6a, 0xbc, 0x66, 0xd9, 0xdd, 0x61, 0x59, 0x86, 0xb0, 0x2c, 0x12, 0xf6, 0x41,
	0x16, 0x9a, 0x07, 0x0b, 0x22, 0xbe, 0x95, 0x22, 0x14, 0x0a, 0x15, 0x22, 0xf4, 0x3d, 0x9a, 0x41,
	0x83, 0x66, 0x26, 0xcc, 0x4c, 0x22, 0xf9, 0x0b, 0xfd, 0x5b, 0xfd, 0x63, 0x65, 0x3e, 0x22, 0xb1,
	0xed, 0x4b, 0xdf, 0xe6, 0xdc, 0x7b, 0xee, 0xbd, 0xe7, 0x9c, 0x04, 0xbe, 0xef, 0x18, 0x95, 0x69,
	0x4e, 0x09, 0x8f, 0x4b, 0xce, 0x24, 0x43, 0x9e, 0x60, 0xb4, 0x08, 0x83, 0x9a, 0x9d, 0xaa, 0x82,
	0x98, 0x5a, 0x74, 0x00, 0x3f, 0x21, 0xfb, 0x5c, 0x48, 0xde, 0xa0, 0x10, 0xfc, 0x4a, 0x10, 0x4e,
	0xd3, 0x82, 0x60, 0x67, 0xe2, 0x4c, 0x47, 0xc9, 0x05, 0xab, 0x5e, 0x99, 0x0a, 0x71, 0x66, 0x3c,
	0xc3, 0x3d, 0xd3, 0x6b, 0x31, 0xfa, 0x07, 0xdf, 0x04, 0xe1, 0x35, 0xe1, 0x77, 0x59, 0xc6, 0x89,
	0x10, 0xd8, 0xd5, 0x84, 0xeb, 0x62, 0xf4, 0xea, 0xc0, 0xf8, 0x89, 0xc8, 0x33, 0xe3, 0xc7, 0x4d,
	0x49, 0x76, 0x08, 0x81, 0x27, 0x9b, 0xb2, 0xbd, 0xa4, 0xdf, 0x68, 0x01, 0x43, 0x56, 0xca, 0x9c,
	0x51, 0x81, 0x7b, 0x13, 0x77, 0x3a, 0x9e, 0xfd, 0x8d, 0x95, 0xe6, 0xb8, 0x33, 0x17, 0xaf, 0x0d,
	0x61, 0x45, 0x25, 0x6f, 0x92, 0x96, 0x8e, 0x7e, 0xc3, 0x40, 0x54, 0x5b, 0x4a, 0xa4, 0x3d, 0x6e,
	0x91, 0xba, 0x92, 0x66, 0x19, 0xc7, 0x9e, 0xb9, 0xa2, 0xde, 0xe1, 0x12, 0x82, 0xee, 0x12, 0xf4,
	0x03, 0xdc, 0x23, 0x69, 0xac, 0x10, 0xf5, 0x44, 0xbf, 0xa0, 0x5f, 0xa7, 0xa7, 0x8a, 0x58, 0xab,
	0x06, 0x2c, 0x7b, 0x0b, 0x27, 0x7a, 0x71, 0x61, 0x74, 0xdf, 0xe6, 0xaa, 0x78, 0x79, 0x91, 0xee,
	0x5b, 0x13, 0x06, 0x68, 0x2d, 0xe2, 0xf0, 0x48, 0x1a, 0x3b, 0x6e, 0x11, 0x8a, 0x20, 0xd8, 0xb1,
	0xa2, 0xc8, 0xe5, 0x9a, 0x6e, 0x24, 0x2b, 0xb5, 0x52, 0x3f, 0xb9, 0xaa, 0xa1, 0xff, 0xe0, 0x12,
	0x5a, 0x63, 0x4f, 0xbb, 0xc7, 0xc6, 0xfd, 0xe5, 0x5e, 0xbc, 0xa2, 0xb5, 0xf1, 0xad, 0x48, 0x68,
	0x0e, 0x43, 0xf3, 0x2d, 0x05, 0xee, 0x6b, 0xfe, 0x9f, 0xf7, 0xfc, 0x67, 0xd3, 0xb6, 0x59, 0x59,
	0xb2, 0xd2, 0x57, 0xb0, 0x8a, 0x4a, 0x81, 0x07, 0x13, 0x57, 0xe9, 0x33, 0x08, 0xdd, 0x80, 0x4f,
	0x4d, 0xd0, 0x02, 0x0f, 0xf5, 0xc2, 0x9f, 0x1f, 0xe2, 0x4f, 0x2e, 0x94, 0x70, 0x0e, 0x7e, 0xab,
	0xe7, 0x2b, 0x11, 0x86, 0x0f, 0x10, 0x74, 0x75, 0x7d, 0x32, 0x1b, 0x75, 0x67, 0xc7, 0xb3, 0xc0,
	0xa8, 0x30, 0x43, 0x9d, 0x4d, 0xdb, 0x81, 0xfe, 0x87, 0x6f, 0xdf, 0x02, 0x00, 0x00, 0xff, 0xff,
	0xb7, 0x0d, 0x05, 0x92, 0xea, 0x02, 0x00, 0x00,
}
