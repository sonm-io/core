// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pty.proto

package sonm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RemotePTYBannerRequest struct {
}

func (m *RemotePTYBannerRequest) Reset()                    { *m = RemotePTYBannerRequest{} }
func (m *RemotePTYBannerRequest) String() string            { return proto.CompactTextString(m) }
func (*RemotePTYBannerRequest) ProtoMessage()               {}
func (*RemotePTYBannerRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{0} }

type RemotePTYBannerResponse struct {
	Banner string `protobuf:"bytes,1,opt,name=banner" json:"banner,omitempty"`
}

func (m *RemotePTYBannerResponse) Reset()                    { *m = RemotePTYBannerResponse{} }
func (m *RemotePTYBannerResponse) String() string            { return proto.CompactTextString(m) }
func (*RemotePTYBannerResponse) ProtoMessage()               {}
func (*RemotePTYBannerResponse) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{1} }

func (m *RemotePTYBannerResponse) GetBanner() string {
	if m != nil {
		return m.Banner
	}
	return ""
}

type RemotePTYExecRequest struct {
	Args []string `protobuf:"bytes,1,rep,name=args" json:"args,omitempty"`
	Envp []string `protobuf:"bytes,2,rep,name=envp" json:"envp,omitempty"`
}

func (m *RemotePTYExecRequest) Reset()                    { *m = RemotePTYExecRequest{} }
func (m *RemotePTYExecRequest) String() string            { return proto.CompactTextString(m) }
func (*RemotePTYExecRequest) ProtoMessage()               {}
func (*RemotePTYExecRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{2} }

func (m *RemotePTYExecRequest) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *RemotePTYExecRequest) GetEnvp() []string {
	if m != nil {
		return m.Envp
	}
	return nil
}

type RemotePTYExecResponseChunk struct {
	Out  []byte `protobuf:"bytes,1,opt,name=out,proto3" json:"out,omitempty"`
	Done bool   `protobuf:"varint,2,opt,name=done" json:"done,omitempty"`
}

func (m *RemotePTYExecResponseChunk) Reset()                    { *m = RemotePTYExecResponseChunk{} }
func (m *RemotePTYExecResponseChunk) String() string            { return proto.CompactTextString(m) }
func (*RemotePTYExecResponseChunk) ProtoMessage()               {}
func (*RemotePTYExecResponseChunk) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{3} }

func (m *RemotePTYExecResponseChunk) GetOut() []byte {
	if m != nil {
		return m.Out
	}
	return nil
}

func (m *RemotePTYExecResponseChunk) GetDone() bool {
	if m != nil {
		return m.Done
	}
	return false
}

func init() {
	proto.RegisterType((*RemotePTYBannerRequest)(nil), "sonm.RemotePTYBannerRequest")
	proto.RegisterType((*RemotePTYBannerResponse)(nil), "sonm.RemotePTYBannerResponse")
	proto.RegisterType((*RemotePTYExecRequest)(nil), "sonm.RemotePTYExecRequest")
	proto.RegisterType((*RemotePTYExecResponseChunk)(nil), "sonm.RemotePTYExecResponseChunk")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RemotePTY service

type RemotePTYClient interface {
	Banner(ctx context.Context, in *RemotePTYBannerRequest, opts ...grpc.CallOption) (*RemotePTYBannerResponse, error)
	Exec(ctx context.Context, in *RemotePTYExecRequest, opts ...grpc.CallOption) (RemotePTY_ExecClient, error)
}

type remotePTYClient struct {
	cc *grpc.ClientConn
}

func NewRemotePTYClient(cc *grpc.ClientConn) RemotePTYClient {
	return &remotePTYClient{cc}
}

func (c *remotePTYClient) Banner(ctx context.Context, in *RemotePTYBannerRequest, opts ...grpc.CallOption) (*RemotePTYBannerResponse, error) {
	out := new(RemotePTYBannerResponse)
	err := grpc.Invoke(ctx, "/sonm.RemotePTY/Banner", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remotePTYClient) Exec(ctx context.Context, in *RemotePTYExecRequest, opts ...grpc.CallOption) (RemotePTY_ExecClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RemotePTY_serviceDesc.Streams[0], c.cc, "/sonm.RemotePTY/Exec", opts...)
	if err != nil {
		return nil, err
	}
	x := &remotePTYExecClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RemotePTY_ExecClient interface {
	Recv() (*RemotePTYExecResponseChunk, error)
	grpc.ClientStream
}

type remotePTYExecClient struct {
	grpc.ClientStream
}

func (x *remotePTYExecClient) Recv() (*RemotePTYExecResponseChunk, error) {
	m := new(RemotePTYExecResponseChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for RemotePTY service

type RemotePTYServer interface {
	Banner(context.Context, *RemotePTYBannerRequest) (*RemotePTYBannerResponse, error)
	Exec(*RemotePTYExecRequest, RemotePTY_ExecServer) error
}

func RegisterRemotePTYServer(s *grpc.Server, srv RemotePTYServer) {
	s.RegisterService(&_RemotePTY_serviceDesc, srv)
}

func _RemotePTY_Banner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemotePTYBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemotePTYServer).Banner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.RemotePTY/Banner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemotePTYServer).Banner(ctx, req.(*RemotePTYBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemotePTY_Exec_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RemotePTYExecRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RemotePTYServer).Exec(m, &remotePTYExecServer{stream})
}

type RemotePTY_ExecServer interface {
	Send(*RemotePTYExecResponseChunk) error
	grpc.ServerStream
}

type remotePTYExecServer struct {
	grpc.ServerStream
}

func (x *remotePTYExecServer) Send(m *RemotePTYExecResponseChunk) error {
	return x.ServerStream.SendMsg(m)
}

var _RemotePTY_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sonm.RemotePTY",
	HandlerType: (*RemotePTYServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Banner",
			Handler:    _RemotePTY_Banner_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Exec",
			Handler:       _RemotePTY_Exec_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pty.proto",
}

func init() { proto.RegisterFile("pty.proto", fileDescriptor15) }

var fileDescriptor15 = []byte{
	// 262 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x51, 0x4d, 0x4b, 0xc3, 0x40,
	0x14, 0xec, 0xb6, 0x21, 0x98, 0x87, 0x07, 0x79, 0x48, 0x0d, 0x41, 0x21, 0x2c, 0x1e, 0x72, 0x31,
	0xf1, 0xe3, 0x28, 0x78, 0x88, 0x88, 0x1e, 0x65, 0xf1, 0xa2, 0xb7, 0x26, 0x3e, 0xda, 0x22, 0xd9,
	0x17, 0xb3, 0x1b, 0xd1, 0x3f, 0xe3, 0x6f, 0x95, 0xdd, 0x94, 0x52, 0x6a, 0x7b, 0x9b, 0xcc, 0x64,
	0x66, 0xde, 0xb0, 0x10, 0xb5, 0xf6, 0x27, 0x6f, 0x3b, 0xb6, 0x8c, 0x81, 0x61, 0xdd, 0xc8, 0x18,
	0xa6, 0x8a, 0x1a, 0xb6, 0xf4, 0xfc, 0xf2, 0x5a, 0xce, 0xb4, 0xa6, 0x4e, 0xd1, 0x67, 0x4f, 0xc6,
	0xca, 0x2b, 0x38, 0xf9, 0xa7, 0x98, 0x96, 0xb5, 0x21, 0x9c, 0x42, 0x58, 0x79, 0x26, 0x16, 0xa9,
	0xc8, 0x22, 0xb5, 0xfa, 0x92, 0x77, 0x70, 0xbc, 0xb6, 0x3c, 0x7c, 0x53, 0xbd, 0x8a, 0x42, 0x84,
	0x60, 0xd6, 0xcd, 0x4d, 0x2c, 0xd2, 0x49, 0x16, 0x29, 0x8f, 0x1d, 0x47, 0xfa, 0xab, 0x8d, 0xc7,
	0x03, 0xe7, 0xb0, 0x2c, 0x21, 0xd9, 0xf2, 0x0f, 0x85, 0xf7, 0x8b, 0x5e, 0x7f, 0xe0, 0x11, 0x4c,
	0xb8, 0xb7, 0xbe, 0xf2, 0x50, 0x39, 0xe8, 0x32, 0xde, 0x59, 0x53, 0x3c, 0x4e, 0x45, 0x76, 0xa0,
	0x3c, 0xbe, 0xfe, 0x15, 0x10, 0xad, 0x43, 0xf0, 0x11, 0xc2, 0xe1, 0x76, 0x3c, 0xcd, 0xdd, 0xde,
	0x7c, 0xf7, 0xd8, 0xe4, 0x6c, 0x8f, 0x3a, 0xf4, 0xcb, 0x11, 0x3e, 0x41, 0xe0, 0x2e, 0xc2, 0x64,
	0xeb, 0xc7, 0x8d, 0x99, 0x49, 0xba, 0x53, 0xdb, 0x98, 0x20, 0x47, 0x97, 0xa2, 0x3c, 0x7f, 0x93,
	0xf3, 0xa5, 0x5d, 0xf4, 0x55, 0x5e, 0x73, 0x53, 0x38, 0xc7, 0xc5, 0x92, 0x8b, 0x9a, 0x3b, 0x2a,
	0xfc, 0xc3, 0xdc, 0x3a, 0xaa, 0x0a, 0x3d, 0xbe, 0xf9, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xb1, 0x92,
	0x40, 0x0b, 0xb1, 0x01, 0x00, 0x00,
}
