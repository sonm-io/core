// Code generated by protoc-gen-go. DO NOT EDIT.
// source: relay.proto

package sonm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// grpccmd imports
import (
	"io"

	"github.com/spf13/cobra"
	"github.com/sshaman1101/grpccmd"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PeerType int32

const (
	PeerType_SERVER   PeerType = 0
	PeerType_CLIENT   PeerType = 1
	PeerType_DISCOVER PeerType = 2
)

var PeerType_name = map[int32]string{
	0: "SERVER",
	1: "CLIENT",
	2: "DISCOVER",
}
var PeerType_value = map[string]int32{
	"SERVER":   0,
	"CLIENT":   1,
	"DISCOVER": 2,
}

func (x PeerType) String() string {
	return proto.EnumName(PeerType_name, int32(x))
}
func (PeerType) EnumDescriptor() ([]byte, []int) { return fileDescriptor13, []int{0} }

type HandshakeRequest struct {
	// PeerType describes a peer's source.
	PeerType PeerType `protobuf:"varint,1,opt,name=peerType,enum=sonm.PeerType" json:"peerType,omitempty"`
	// Addr represents a common Ethereum address both peers are connecting
	// around.
	// In case of servers it's their own id. Must be signed. In case of
	// clients - it's the target server id.
	//
	// In case of discovery requests this field has special meaning.
	// Both client and server must discover the same relay server to be able to
	// meet each other. At this stage there is no parameter verification.
	// It is done in the Handshake method.
	Addr []byte `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	// Signature for ETH address.
	// Should be empty for clients.
	Sign []byte `protobuf:"bytes,3,opt,name=sign,proto3" json:"sign,omitempty"`
	// Optional connection id.
	// It is used when a client wants to connect to a specific server avoiding
	// random select.
	// Should be empty for servers.
	UUID string `protobuf:"bytes,4,opt,name=UUID" json:"UUID,omitempty"`
}

func (m *HandshakeRequest) Reset()                    { *m = HandshakeRequest{} }
func (m *HandshakeRequest) String() string            { return proto.CompactTextString(m) }
func (*HandshakeRequest) ProtoMessage()               {}
func (*HandshakeRequest) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{0} }

func (m *HandshakeRequest) GetPeerType() PeerType {
	if m != nil {
		return m.PeerType
	}
	return PeerType_SERVER
}

func (m *HandshakeRequest) GetAddr() []byte {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *HandshakeRequest) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

func (m *HandshakeRequest) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

type DiscoverResponse struct {
	// Addr represents network address in form "host:port".
	Addr string `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
}

func (m *DiscoverResponse) Reset()                    { *m = DiscoverResponse{} }
func (m *DiscoverResponse) String() string            { return proto.CompactTextString(m) }
func (*DiscoverResponse) ProtoMessage()               {}
func (*DiscoverResponse) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{1} }

func (m *DiscoverResponse) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type HandshakeResponse struct {
	// Error describes an error number.
	// Zero value means that there is no error.
	Error int32 `protobuf:"varint,1,opt,name=error" json:"error,omitempty"`
	// Description describes an error above.
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
}

func (m *HandshakeResponse) Reset()                    { *m = HandshakeResponse{} }
func (m *HandshakeResponse) String() string            { return proto.CompactTextString(m) }
func (*HandshakeResponse) ProtoMessage()               {}
func (*HandshakeResponse) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{2} }

func (m *HandshakeResponse) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

func (m *HandshakeResponse) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type RelayClusterReply struct {
	Members []string `protobuf:"bytes,1,rep,name=members" json:"members,omitempty"`
}

func (m *RelayClusterReply) Reset()                    { *m = RelayClusterReply{} }
func (m *RelayClusterReply) String() string            { return proto.CompactTextString(m) }
func (*RelayClusterReply) ProtoMessage()               {}
func (*RelayClusterReply) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{3} }

func (m *RelayClusterReply) GetMembers() []string {
	if m != nil {
		return m.Members
	}
	return nil
}

func init() {
	proto.RegisterType((*HandshakeRequest)(nil), "sonm.HandshakeRequest")
	proto.RegisterType((*DiscoverResponse)(nil), "sonm.DiscoverResponse")
	proto.RegisterType((*HandshakeResponse)(nil), "sonm.HandshakeResponse")
	proto.RegisterType((*RelayClusterReply)(nil), "sonm.RelayClusterReply")
	proto.RegisterEnum("sonm.PeerType", PeerType_name, PeerType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Relay service

type RelayClient interface {
	Cluster(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RelayClusterReply, error)
}

type relayClient struct {
	cc *grpc.ClientConn
}

func NewRelayClient(cc *grpc.ClientConn) RelayClient {
	return &relayClient{cc}
}

func (c *relayClient) Cluster(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RelayClusterReply, error) {
	out := new(RelayClusterReply)
	err := grpc.Invoke(ctx, "/sonm.Relay/Cluster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Relay service

type RelayServer interface {
	Cluster(context.Context, *Empty) (*RelayClusterReply, error)
}

func RegisterRelayServer(s *grpc.Server, srv RelayServer) {
	s.RegisterService(&_Relay_serviceDesc, srv)
}

func _Relay_Cluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayServer).Cluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Relay/Cluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayServer).Cluster(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Relay_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sonm.Relay",
	HandlerType: (*RelayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Cluster",
			Handler:    _Relay_Cluster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relay.proto",
}

// Begin grpccmd
var _ = grpccmd.RunE

// Relay
var _RelayCmd = &cobra.Command{
	Use:   "relay [method]",
	Short: "Subcommand for the Relay service.",
}

var _Relay_ClusterCmd = &cobra.Command{
	Use:   "cluster",
	Short: "Make the Cluster method call, input-type: sonm.Empty output-type: sonm.RelayClusterReply",
	RunE: grpccmd.RunE(
		"Cluster",
		"sonm.Empty",
		func(c io.Closer) interface{} {
			cc := c.(*grpc.ClientConn)
			return NewRelayClient(cc)
		},
	),
}

var _Relay_ClusterCmd_gen = &cobra.Command{
	Use:   "cluster-gen",
	Short: "Generate JSON for method call of Cluster (input-type: sonm.Empty)",
	RunE:  grpccmd.TypeToJson("sonm.Empty"),
}

// Register commands with the root command and service command
func init() {
	grpccmd.RegisterServiceCmd(_RelayCmd)
	_RelayCmd.AddCommand(
		_Relay_ClusterCmd,
		_Relay_ClusterCmd_gen,
	)
}

// End grpccmd

func init() { proto.RegisterFile("relay.proto", fileDescriptor13) }

var fileDescriptor13 = []byte{
	// 308 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0x5f, 0x4f, 0xc2, 0x30,
	0x14, 0xc5, 0x29, 0xff, 0xb9, 0x10, 0x1c, 0x8d, 0x89, 0x0b, 0x4f, 0xcb, 0x1e, 0xcc, 0x42, 0x22,
	0x51, 0x7c, 0xf3, 0x15, 0x96, 0x48, 0x34, 0x6a, 0x0a, 0xf8, 0x3e, 0xd8, 0x8d, 0x36, 0xb2, 0xb6,
	0xb6, 0xc3, 0x64, 0x7e, 0x7a, 0xd3, 0x75, 0x28, 0x89, 0x4f, 0x3b, 0xf7, 0x77, 0xef, 0x7a, 0x4e,
	0x6f, 0xa1, 0xaf, 0x71, 0x9f, 0x14, 0x53, 0xa5, 0x65, 0x2e, 0x69, 0xd3, 0x48, 0x91, 0x8d, 0xcf,
	0xb8, 0xb0, 0x5f, 0xc1, 0x13, 0x87, 0xc3, 0x6f, 0xf0, 0xee, 0x13, 0x91, 0x9a, 0xf7, 0xe4, 0x03,
	0x19, 0x7e, 0x1e, 0xd0, 0xe4, 0x74, 0x02, 0x5d, 0x85, 0xa8, 0xd7, 0x85, 0x42, 0x9f, 0x04, 0x24,
	0x1a, 0xce, 0x86, 0x53, 0xfb, 0xd7, 0xf4, 0xa5, 0xa2, 0xec, 0xb7, 0x4f, 0x29, 0x34, 0x93, 0x34,
	0xd5, 0x7e, 0x3d, 0x20, 0xd1, 0x80, 0x95, 0xda, 0x32, 0xc3, 0xdf, 0x84, 0xdf, 0x70, 0xcc, 0x6a,
	0xcb, 0x36, 0x9b, 0xe5, 0xc2, 0x6f, 0x06, 0x24, 0xea, 0xb1, 0x52, 0x87, 0x97, 0xe0, 0x2d, 0xb8,
	0xd9, 0xc9, 0x2f, 0xd4, 0x0c, 0x8d, 0x92, 0xc2, 0xfc, 0x9d, 0x47, 0xdc, 0x9c, 0xd5, 0xe1, 0x03,
	0x8c, 0x4e, 0x32, 0x56, 0x83, 0xe7, 0xd0, 0x42, 0xad, 0xa5, 0x9b, 0x6c, 0x31, 0x57, 0xd0, 0x00,
	0xfa, 0x29, 0x9a, 0x9d, 0xe6, 0x2a, 0xe7, 0x52, 0x94, 0xa9, 0x7a, 0xec, 0x14, 0x85, 0x57, 0x30,
	0x62, 0x76, 0x2d, 0xf3, 0xfd, 0xc1, 0xe4, 0xd6, 0x58, 0xed, 0x0b, 0xea, 0x43, 0x27, 0xc3, 0x6c,
	0x8b, 0xda, 0xf8, 0x24, 0x68, 0x44, 0x3d, 0x76, 0x2c, 0x27, 0xd7, 0xd0, 0x3d, 0xde, 0x9a, 0x02,
	0xb4, 0x57, 0x31, 0x7b, 0x8d, 0x99, 0x57, 0xb3, 0x7a, 0xfe, 0xb8, 0x8c, 0x9f, 0xd6, 0x1e, 0xa1,
	0x03, 0xe8, 0x2e, 0x96, 0xab, 0xf9, 0xb3, 0xed, 0xd4, 0x67, 0x77, 0xd0, 0x2a, 0x0d, 0xe8, 0x0d,
	0x74, 0x2a, 0x13, 0xda, 0x77, 0xfb, 0x8b, 0x33, 0x95, 0x17, 0xe3, 0x0b, 0x57, 0xfc, 0x4b, 0x11,
	0xd6, 0xb6, 0xed, 0xf2, 0x51, 0x6e, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xd0, 0x48, 0x78, 0xfd,
	0xba, 0x01, 0x00, 0x00,
}
