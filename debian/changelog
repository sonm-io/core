sonm-core (0.4.0-rc2) unstable; urgency=low

  * Added: gate with daily limit and freeze (#1062).
  * Added: DWH extended validators (#1063).
  * Added: ask-plan cancellation in Optimus (#1072).
    This change activates ask-plan cancellation mechanism in Optimus.
    It works the following way. Periodically Optimus scans workers it manages
    and determines whether some ask-plans can be replaced in the nearest
    future. If so - it calculates virtual free devices and tries to optimize
    the new orders set (including already existing) to determine which
    ask-plans are required to be replaced.
  * Added: dry-run option in Optimus (#1078).
    When activates Optimus will not create ask plans, but continues doing the
    rest calculations instead. Useful for debugging.
  * Added: uptime in Relay metrics (#1086).
    Now Relay will return its uptime while answering for its metrics handle.
  * Added: worker debug state (#1084).
    This PR adds handle to worker to retrieve useful debugging info, e.g.
    current resource scheduler state and salesman state.
  * Added: gate commission (#1097).
  * Changed: flexible benchmarks (#1066).
    This PR allows worker to perform and cache benchmarks separately for each device
    and enables parallel benchmarking for GPU.
  * Changed: decompose components logic in Optimus (#1071).
    This change allows to create multiple worker clients with different account settings.
  * Changed: simplify weight formula in Optimus (#1077).
    Previously a quite complicated motivation was used to calculate order
    weights. It was hard to understand, and een harder to debug.
    Now we use a simple predictedPrice/price as a criteria of order's
    attractiveness.
  * Changed: more verbose cmd errors in Optimus (#1092).
  * BREAKING Changed: extend NPP identifier with protocol (#1104).
    This allows to specify some protocol you want to publish/resolve as the
    Rendezvous allows. It is required for further NAT traversal extensions.
    What is changed: not relay protocol allows to specify "protocol" field
    in order to match between different protocols for the same peer ID.
    In both Relay and Rendezvous meeting groups are now associated with
    complex string representation a-la URI.
    This is the BREAKING change. Both Rendezvous, Worker and Node must be
    updated. Relay, however, does not need to.
  * Fixed: Relay server tracking (#1047).
    This PR fixes a Relay bug: connecting servers weren't track'ed on Handshake.
  * Fixed: build DRI module on non-unix (#1074).
  * Fixed: properly forward "expose" section in Worker (#1076).
    This fixes forgetting "expose" section while forwarding it from start task request to a container.
    Also a tiny test added to check whether the task config is parsed properly.
  * Fixed: proper reference parsing (#1075).
    After this fix Worker will use proper reference parsing to detect digested images.
  * Fixed: benchmark processing copy paste (#1079).
  * Fixed: treat GPU count in Optimus as min (#1083).
    We have a special business crutch, which forced us to treat GPU count
    benchmark as a maximum allowed number of GPUs to match bid with ask, i.e.
    if a bid requires for example 2 GPUs a worker can sell either 1 or 2 of
    any matching its GPUs.
    This commit inverts this logic to the default marketplace logic. No we
    treat such benchmark as a minimum required number of GPUs.
  * Fixed: properly process price for validators (#1085).
  * Fixed: properly handle zero GPU benchmark (#1088).
    This fixes a bug where Optimus fails to fit GPU benchmarks with some of
    them equal zero.
  * Fixed: deploy list contract (#1080).
  * Fixed: Optimus will now set identity level (#1091).
  * Fixed: enable TCP keep-alive for Relay clients (#1095).
    Setting TCP keepalive is strictly suggested, because in case of mobile
    devices the network can be reconfigured multiple times between connection
    attempts.
    However if the network was silently changed or the connection was lost or
    the other side was kernel-panicked no FIN/RST will be delivered to us,
    which leads to infinite (well, 24-hour) hanging.
  * Fixed: use proper market API in Optimus (#1099).
    Accidentally we used gRPC API to the DWH instead of blockchain API.
  * Fixed: benchmark casting precision issue (#1101).
  * Fixed: skip non-dir files when observing /sys/class/drm (#1106).

 -- Evgeny Safronov <division494@gmail.com>  Thu, 28 Jun 2018 15:14:41 +0300

sonm-core (0.4.0-rc1) unstable; urgency=low

  * Added: Optimus now can filter by counterparty (#977).
  * Added: DWH orders blacklist filters (#978).
  * Added: maintenance for worker (#960).
    This introduces maintenance feature for worker.
    The `./sonmcli maintenance` accepts time point or duration to set maintenance on worker.
    The `./sonmcli next-maintenance` show the time of next planned maintenance.
    All orders durations are being adjusted according to maintenance point.
    After maintenance point all spot deals are closed and all orders are removed.
  * Added: quick buy for cli and node (#990).
    This adds an ability to perform quick buy for given ASK order on market.
  * Added: increase/decrease approval token functions (#1010).
  * Added: multi-sig wallet (#1011).
  * Added: order purge handle for cli and node (#997).
  * Added: optimus price prediction (#1030).
    This allows autosell bot to predict its price based on previous learning
    iteration. It is required for further canceling orders depending on its
    predicted market price.
  * Added: profile management for cli and node (#1002).
  * Added: AnyUserID field for DealsRequest in DWH (#1031).
    This introduces a new search field to DealsRequest: AnyUserID. If provided,
    supplierID, consumerID, and masterID fields are ignored.
    Any of the mentioned IDs must match the provided value.
  * Added: contracts freezing (#1029).
  * Added: add deploy list contract (#1035).
    Smart contract with array of allowed addresses, which may deploy contracts.
  * Added: deposit-withdraw for node and cli (#986).
    This adds able to transfer tokens between masterchain and SONM sidechain.
  * Added: utilize hostname for relay (#1045).
    This change allows to utilize specifying hostnames as a relay address,
    increasing stability.
    Previously such hostname was resolved once at construction time and the
    relay client tried to connect to the resolved TCP addresses even if some
    of them are already down.
    Now each time a client requires new connection hostname resolution occurs.
    All this allows dynamic addition/removal backends under the DNS.
    Of course we try to connect to all returned endpoints.
  * Added: allowance handle for node and cli (#1050).
  * Added: kill option for market contract (#1049).
    This implements destroying of contract. It also returns all frozen funds
    to owner multisig.
    Needs to prevent funds locking while some bug found if any.
  * Changed: reworked benchmarks in market (#964).
    Now we can place orders with any count of benchmarks, but still not more
    than we support.
  * Changed: store netflags in dynamic array on market (#971).
    Now netflags stores in dynamic array. We can update num of netflags without
    both breaking API and redeploy market.
  * Changed: DWH startup refactoring (#929).
    Fixed an minor bug - DWH could crash with segfault after a SIGINT at the
    very startup.
  * Changed: better logs in worker, while requesting approve (#980).
  * BREAKING Changed: implemented GetBlacklistsContainingUser for DWH.
    This is a BREAKING change.
  * Changed: get profile level from contracts (#989).
  * Changed: variable benchmarks in DWH (#984).
    This allows DWH to track current number of benchmarks on Market and handle
    changes properly.
  * Changed: return relay error to the upper layer (#1007).
    This change allows to see what exactly was wrong when a Relay failed to
    establish a connection.
    In conjunction with the #1006 this greatly improves debugging and system
    reaction.
  * Changed: create change request with only price or only duration (#1019).
    Previously, if a user wants to set the new deal price he was forced to
    explicitly set both params: new price and old duration. This adds able to
    propose changes to only one param of a deal.
  * Changed: emulate TCP reaction when using relay (#1006).
    This change improves reaction for connections established using Relay.
    For servers there is no reconnections (except every 24 hours), while for
    clients there an immediate reaction with human-readable error.
  * Changed: print order's tag if present in order status CLI (#1032).
  * Changed: show message if worker has no active tasks (#1037).
  * Changed: implicitly set allowance for market on sidechain (#1042).
    This hook checks and sets allowance for market to practical infinity on every
    method call which requires allowance.
  * Changed: do not apply whitelist to identified consumers (#1040).
    This takes consumer identity level in concern. If customer has at least
    IDENTIFIED level whitelist checking doesn't take place.
  * BREAKING Changed: specify worker settings in Optimus config (#1054).
    Now it is possible to define some worker specific settings in the autosell
    bot config.
    For example now we can specify epoch interval, where the bot scans
    worker's resources and tries to sell them.
  * Changed: bind ask plan storage key to market address (#1052).
  * Changed: spot-only orders for Optimus (#1061).
    Since now Optimus can sell only for spot deals, with zero duration.
  * Fixed: unwrap error in puncher (#966).
  * Fixed: sort GPU to prevent hash changes and re-benchmarking (#963).
  * Fixed: Optimus should now properly cut minimum RAM (#972).
    This fixes a bug where a minimum number of some criteria (for example) RAM
    was too low than the minimum one by one. This is caused by loosing
    precision while converting to float64 and vice-versa - fixed by ceiling
    the result.
    Also found and fixed a bug which caused the Optimus to over-cut celling
    plans, because of invalid math - I used current benchmarks for calculating
    relational criteria, while lower bounds are calculated against total
    devices. Now we use initial benchmarks for this case.
  * Fixed: ceil everything in Optimus (#974).
    This applies previous changes to every other data consumer in the autosell
    bot, so it prevents losing precision while conversing
    from uint64 -> float -> uint64 while doing math.
  * Fixed: fix and refactor netflags (#962).
    This removes odd bool slices conversions in the netflags providing common
    interface to simple uint64.
  * Fixed: update deal after DealChangeRequestAccepted in DWH.
  * Fixed: rework all arithmetic to safe (#979).
    A common protection from overflow.
  * Fixed: log master addr as string, not bytes (#982).
  * Fixed: remove finished benchmark containers from Overseer (#981).
  * Fixed: update deals constantly to prevent caching stale data (#983).
  * Fixed: proper cli login behaviour (#992).
    This fixes two bugs: now we do not mark the key as default if there is
    only one key is present into keystore.
    Also now `sonmcli login` asking for pass-phrase, then trying to decrypt key
    and mark it as default only if decryption was successful.
  * Fixed: incorrect refund when deal closes in Bill transaction (#991).
  * Fixed: autosell bot should now properly list cut ask plans (#999).
  * Fixed: store certificate id in DWH (#1001).
  * Fixed: allow to search zero benchmarks in DWH (#995).
  * Fixed: possible segfault while checking netflags for converse implication.
  * Fixed: proper image load (#1016).
    This fixes `sonmcli tasks push` handle, by using the proper Docker
    method (Push instead of Import, which respects multiple layers as the
    opposite command `docker save` produces).
    Note that this is a BREAKING change. The CLI must be updated.
  * Fixed: do not spool existing images (#1017).
    This fixes a bug when it's impossible to start a previously pushed image
    without it being in the Docker Registry.
  * Fixed: do not spam warnings when no rendezvous specified (#1005).
    This should remove weird warnings like: `failed to construct a puncher {"error": "failed to connect to []"}`.
  * Fixed: list all images, remove excessive logging (#1018).
    There is a situation when you push 2 images one based on another. In this
    case, docker will count the first one as intermediate image and does not
    include in the listing, this fixes this behavior.
  * Fixed: properly load sigmoid settings from the config in autosell bot (#1025).
  * Fixed: proper sigmoid implementation (#1026).
    Autosell bot should no longer fall into millions of NaNs after calculating
    relative order weights.
  * Fixed: do not null order created timestamp (#1027).
    When DWH was young it was unable to return properly created timestamp, we
    inited it ourselves.
    Now times change, but those empty initialization was forgotten and cause
    strange autosell bot behaviour.
    This removes such initialization.
  * Fixed: notify consumer about the worker availability (#1028).
  * Fixed: make relay IPv6 ready (not really) (#1033).
    In case of being run on IPv6 it improperly answers to a discover request
    with address not surrounded with braces.
  * Fixed: get task list only for consumer's deals (#1024).
    We have a situation when `sonmcli task list` is called from the supplier (or master) key.
    At first, to obtain tasks a client needs to load their active deals.
    And then query a tasks list for each deal. So if you a supplier,
    you cannot receive the list by the deal because of ACLs is applied.
    This PR fixes this case by checking that you're a consumer for active deals,
    otherwise, a client will not use that deal for querying tasks.
  * Fixed: optimus should now track incoming network (#1053).
    Previously autosell bot could match more than a single order with incoming
    network required. Because we do not allow such behaviour it led to
    multiple errors while trying to create sell plans.
    This change explicitly disables incoming network after a first matching
    orders found.
  * Fixed: invalid netflag filtering in Optimus (#1064).
    Now Optimus will check for netflags inclusion using free devices instead of
    just devices.

 -- Evgeny Safronov <division494@gmail.com>  Wed, 20 Jun 2018 13:52:42 +0300

sonm-core (0.4.0-alpha3) unstable; urgency=low

  * Added: quick buy with duration (#957).
  * Changed: pretty-print workers list (#921).
  * Changed: cold-start auto block number in DWH (#930).
    This change makes use of CustomEthereumClient's GetLastBlock() method to
    automatically determine when to build indices in cold start mode.
  * Changed: use blacklists in GetMatchingOrders in DWH (#939).
  * Changed: map gRPC validation error into HTTP invalid argument in REST
    bindings (#952).
  * Changed: attempt to log everything in NPP (#953).
    More logs while connecting using NPP, log details in the Puncher, log
    addresses and protobuf messages as JSON instead of <"\unreadable strings\">.
    NPP errors now filter duplicate error messages, while attempting to punch
    a NAT.
    Also some typos fixed.
  * Changed: extend blacklisting feature (#955).
    Now you can blacklist both master and worker.
  * Fixed: proper logs processing on CLI side (#936).
    This includes proper parsing of hijacked binary logs, restore `type` flag
    functionality and ability to prepend stdout and stderr with corresponding
    prefixes.
  * Fixed: use ask-plan hashing instead of hardware hashing.
    Now we use indexes from ask-plan to determine gpu hash instead of hardware.
    This allows to use GPU indexes as they appear in ask-plan rather than in
    hardware.
  * Fixed: wrong store key in worker config (#941).
  * Fixed: proper format in NetworkSpec printer (#943).
  * Fixed: proper container cleanup on finished deal (#944).
    Fixed a situation when worker did not get deal notification when ask-plan
    was scheduled for deletion.
    Also now worker uses SIGKILL with no regret for tinc as it does not respond
    to ContainerStop anyway.
    This all results in a proper cleanup of the deal containers and resources
    release.
  * Fixed: initialize logger in NPP (#948).
  * Fixed: do not hang on Serve error (#947).
  * Fixed: do not try to use closed deals in Node (#945).
  * Fixed: Node should no longer segfault while working with keystore (#942).
  * Fixed: possible infinite hanging while punching multiple private addresses.
  * Fixed: convert duration to nanoseconds in Optimus (#958).
    Optimus should no longer create ask plans with duration more than one second.
  * Fixed: profile stats and updates in DWH.
    This fixes a bug that happens in the following situation:
      - An order is created for an unknown profile (i.e., AuthorID/MasterID has
        no certificates), so ActiveAsks/ActiveBids is not incremented for that
        profile.
      - A profile is created for that order's AuthorID/MasterID.
      - Order's status changes to INACTIVE, we decrement the already known
        AuthorID/MasterID profile's ActiveAsks/ActiveBids and get a negative
        value.
    The fix goes as follows: when creating a new profile, we count active asks
    and bids and store the new profile with relevant data.
  * Fixed: insert-or-update-validators in DWH (#965).
  * Fixed: GetMatchingOrders Blacklists and CounterpartyID in DWH (#967).

 -- Evgeny Safronov <division494@gmail.com>  Fri, 08 Jun 2018 23:27:48 +0300

sonm-core (0.4.0-alpha2) unstable; urgency=low

  * Added: unimplemented methods of profiles in smart contracts (#923).
  * Added: debug worker via pprof on demand (#928).
  * BREAKING: DWH now saves MasterID field for orders (#912).
    You should recreate your DWH tables if you use your custom installation.
  * BREAKING: simplify tokens api (#920).
    Now the tokens api uses common.Address instead of string.
    It should help with the common string-to-address casting problem.
  * Changed: use custom Ethereum client everywhere in out internal API (#916).
    This allows to obtain the last block number and the receipt of mined
    transaction.
  * Fixed: incorrect work of QuickBuy smart contract function - wrong
    counterparty was used (#906).
  * Fixed: expand ~ ($HOME) while creating accounts (#907).
  * Fixed: worker defaults in the config are now more relevant (#908).
  * Fixed: Optimus should no longer crash when the training set is degenerated (#911).
  * Fixed: NPP puncher should now properly extract incoming connections (#918).
    This fixes infinite connection hanging from Node to Worker.
  * Fixed: save keystore path if overridden by flag (#924).
    Previously when using `sonmcli login --keystore` with no keys in it, a new keystore
    was created with saving its password as a default. But the path itself was not saved.
    This change fixes that issue.
  * Fixed: limit minimum storage bound in Optimus (#926).

 -- Evgeny Safronov <division494@gmail.com>  Sun, 03 Jun 2018 22:17:06 +0300

sonm-core (0.4.0-alpha1) unstable; urgency=low

  * Added: NAT punching.
    This adds the full NAT Punching Protocol implementation, allowing to
    connect Hub and its clients, including workers, even if they are located under
    a single or several NATs.
    Also this commit adds a Rendezvous server, which acts as an intermediate
    metadata exchange point.
    NPP is a protocol aimed to achieve mutual address resolution for both client
    and server. This is especially useful where there is no guarantee
    that both peers are reachable directly, i.e. behind a NAT for example.
    The protocol allows for servers to publish their private network addresses
    while resolving their real remove address. This information is saved under
    some ID until a connection held and heartbeat frames transmitted.
    When a client wants to perform a connection it goes to this server, informs
    about its own private network addresses and starting from this point a
    rendezvous can be achieved.
    Both client and server are informed about remote peers public and private
    addresses and they may perform several attempts to create an actual p2p
    connection.
    By trying to connect to private addresses they can reach each other if and
    only if they're both in the same LAN or VLAN.
    If a peer doesn't have private address, the connection is almost guaranteed
    to be established directly from the private peer to the public one.
    If both of them are located under different NATs, a TCP punching attempt can
    be performed.
    At last, when there is no hope, for example in the case of Symmetric NAT, a
    special relay server can be used to forward the traffic.
    Servers should publish all of possibly reachable endpoints for all protocols
    they support. Its Ethereum ID is determined automatically through our peer
    authentication mechanism.
    Clients should specify the desired protocol and ID for resolution. For both
    server and client their public endpoint is determined automatically.
    Currently only TCP connection establishment is supported.
    The implementation requires the underlying TCP/IP stack to support
    SO_REUSEADDR and SO_REUSEPORT options, because for successful NAT
    traversal it's crucial to reuse the same src ip:port to be routed
    through the same external ip:port each time.
    Thus, the minimum linux kernel version is 3.9. About other platforms
    it's unclear.
    The other hack is the simultaneous TCP open, which unfortunately requires
    tons of fds allocated on each connect attempt, so prepare to enlarge your
    open files limits.
  * Added: overlay networks support for containers using tinc and/or L2TP.
  * Added: tinc overlay driver (#512).
    The tinc is a Virtual Private Network daemon that uses tunnelling and
    encryption to create a secure private network between hosts on the Internet.
    This addition allows to configure overlay network for containers
  * Added: docker l2tp driver (#490).
    This addition allows to configure overlay L2TP network for containers,
    forcing them to join to the specified VPN.
  * Added: allow worker to manage single GPUs (#491).
    This includes adding GPU Tuner that collects and keep info about available GPUs
    and related DRI devices. We use DRI device representation, related /sys/class parsers
    for device discovering, PCI bus ID extractor.
    The tuner now can bind devices into the container by their IDs.
    Also added `lsgpu` tool for GPU fast-checking on a various systems.
  * Added: allow to obtain peers by ethereum id (#507).
  * Added: feat: NPP Relay server.
    This introduces the Relay server as a part of NPP. Also it extends the NPP library to work
    with it transparently like with a typical TCP socket.
    The Relay server is a last resort tool used to penetrate the NAT in case of
    over-paranoid network configurations, such as Symmetrical NAT or manual iptables
    hacks. When NPP gives up it acts as a third-party server which transports TCP
    traffic in the userland.
    Briefly what it allows - is to establish a TCP connection between two hosts with
    private IP addresses.
    There are several components in the Relay server, which allows to unite several
    servers into the single cluster, performing client-side load-balancing with the
    help of servers.
    After discovering the proper Relay endpoint a HANDSHAKE message is sent to
    publish the server. Internally an ETH address provided is verified using
    asymmetrical cryptography based on secp256k1 curves.
    At the other side the peer client performs almost the same steps, instead of its
    own ETH address it specifies the target ETH address the client wants to connect.
    When at least two peers are discovered the relaying process starts by simply
    copying all the TCP payload without inspection. Thus, an authentication between
    two peers is still required to keep the traffic encrypted and avoid MITM attack.
    Several Relays can be united in a single cluster by specifying several endpoints
    of other members in the cluster the user want to join. Internally a SWIM
    protocol is used for fast members discovering and convergence. An optional
    message encryption and members authentication can be specified for security
    reasons.
    Relay servers obviously require to be hosted on machines with public IP address.
    However additionally an announce endpoint can be specified to host Relay servers
    under the NAT, but with configured PMP or other stuff that allows to forward
    incoming traffic to the private network.
  * Added: build deb-package for Rendezvous and Relay (#533).
  * Added: REST interface for node (#535).
    Flexible REST interface build on top of gRPC services reflection.
  * Added: worker's benchmarks (#530).
    This adds able to measure Worker's performance by executing
    a bunch of benchmarks. Some of the benchmarks are present as statically-coded
    functions that can simply pick-up a value from system (how many bytes of RAM
    or CPU cores count). More complex measurement is implemented as Docker-containers
    which must return a JSON string with the results.  It allows implementing
    some amount of custom logic for each hardware group.
    To keep the Worker's state, the boltdb was added as a simple storage.
  * Added: read memory limit from CGroup (#549).
    Previously we used total amount RAM on the host system as an available memory for scheduling.
    But resources for containers may be limited by a parent CGroup settings.
    This changes how available memory amount is measured.
    The lesser value of `total RAM on host, a limit set for CGroup` is used.
  * Added: collect memory amount for GPU devices (#556)
    This adds able to obtain memory size for GPU devices. Discovered values uses as metrics for
    the `mem-gpu` benchmark.
  * Added: new blockchain API (#569).
  * Added: feat: auto request/response validation (#585)
    This commit activates gRPC request/response auto-validation by injecting an interceptor.
    Those requests/responses that require validation can optionally implement an
    implicit `Validate() error` function that will be called before request starts being processed
    and before response passed to the gRPC internals.
  * Added: show devices with benchmarks (#575).
    This improves device list shown to Worker's owner. The list includes new device
    groups (network, storage). Also, benchmarks results for every device group is shown.
  * Added: ask-plan protobuf entity (#583).
    This introduces new AskPlan entity to be used in worker for placing ask orders on market.
    Intended to use instead of slot.
  * Added: ability to join networks using JoinNetwork command (#599).
  * Added: CLI command to show current balance (#608).
  * Added: show network capabilities into worker's devices (#611).
  * Added: DWH (#548). DWH is a traditional abbreviation for Data Warehouse.
    Typically, it is a component that can receive data from various sources, store it, generate
    additional data slices (built from obtained data), and submit this data to external consumers.
    In SONM environment, the DWH is a node that keeps a copy of the data that has passed through
    the Sidechain and provides fast access mechanisms to this data in a convenient way for the end
    user (client applications and other SONM platform infrastructure components).
  * Added: create order from `bid.yaml` (#607).
    This adds able to read BID orders from the yaml spec and place them on Marketplace.
  * Added: deal matcher.
  * Added: ETH load testing tools.
  * Added: master-worker relationships (#775).
  * Added: ability to save cli config (#790).
  * Added: worker admin (#807).
    This commit allows to specify admin ETH key for a worker to be able
    to have access to worker management tools.
  * Added: autosell bot.
    This bot acts as a separate application and attaches to a specified workers, managing them
    by scanning available resources and trying to sell them using marketplace scanning with
    minor help of machine learning.
  * Added: introduce multi-keystore (#785)
    This adds a keystore implementation which can operate on multiple ethereum keys.
  * Added: add oracle contract (#808).
  * Added: CLI can now purge all ask-plans (#818).
  * Added: manage blacklists from Node (#766).
  * Added: container restart policy (#830).
  * Added: able to parse USD price without space (#834).
  * Added: multi-market token (#825).
  * Added: manually allow to expose container ports (#850).
  * Added: collect disk space info (#880).
  * Changed: update configs and binaries location (#504).
    Now we keep all configs into `etc` directory, while all binaries are now located in
    the `target` directory.
    Now deb package with node creates the `sonm` user account on install, node runs under that
    user.
    Also added OS type and arch into target binary name.
  * Changed: integrate hub into miner (#527).
    Previously hub was used for the following reasons: providing access for workers
    without public IP; resource scheduling between workers; account association for
    large installations
    Currently NPP Allows us to work without public IP's, resource scheduling will be
    done on per machine basis with help of blockchain and account integration will be
    done via smart contract, so there is no reason to leave hub as an entity.
  * Changed: merge worker and hub configs (#577).
  * Changed: drop CLI interactors (#518).
  * Changed: drop cluster (#560)
    The `Cluster` entity was removed from the Hub, now `state` operates with
    the `libkv.Storage` itself.
  * Changed: complete Locator extermination (#568).
  * Changed: update go-ethereum api to v.1.8.2 (#601).
  * Changed: improve order and deal printers (#684).
  * Changed: use dealID to detect corresponding worker when using task API (#686).
    This drops supporting for hub address parameter into task API. Now we're using dealID as
    counterpart identifier to resolve addresses and perform requests.
  * Changed: configurable blockchain endpoints (#697).
  * Changed: extend deal info with tasks and resources (#712).
  * Changed: now smart-contracts are located in this repository.
  * Changed: CLI now always requires --config flag (#744).
  * Changed: make CLI commands more consistent (#786).
    This changes CLI sub-commands semantic to follow the "entity-action" commands style.
    Also, using non-plural words for commands names.

 -- Evgeny Safronov <division494@gmail.com>  Fri, 30 May 2018 12:57:02 +0300

sonm-core (0.3.3) unstable; urgency=low

  * Fixed: better logging for ask-plan processing (#469).
  * Fixed: close expired deals (#470).

 -- Evgeny Safronov <division494@gmail.com>  Fri, 09 Feb 2018 16:40:55 +0300

sonm-core (0.3.2) unstable; urgency=low

  * Fixed: listen for SIGTERM to perform correct termination (#460).
  * Fixed: bash-completion script should properly be installed via Debian package (#462).
  * Fixed: disable Hub as a gateway by default (#463).
  * Fixed: enable volumes plugin by default (#464).
  * Fixed: worker should terminate after starting on machines without GPUs (#465).
  * Fixed: fixed build on go 1.9.4 (#466).

 -- Evgeny Safronov <division494@gmail.com>  Fri, 09 Feb 2018 12:40:38 +0300

sonm-core (0.3.1) unstable; urgency=low

  * Break: massive protocol breakage.
    All components with the same version are guaranteed to work, while otherwise - are not.
  * Added: distributed tracing and audit.
    This quite large addition includes utilities for ease debugging and finding out what the hell
    is going on: audit logs and distributed tracing.
    Now all server components are constructed with audit logs interceptor, which writes a record
    when an RPC request finishes. It includes: time spent, tracing info (new feature), peer
    wallet etc.
  * Added: improved the gateway by allowing several reals under the same virtual service (#363).
    Each internal Docker port can now be exposed into several external to avoid ambiguity in the
    case of complex containers which run more than one network service.
  * Added: auto-completion for the sonmcli (#373).
  * Added: auto-refreshing orders in the Market by heart beating (#384).
  * Added: extended deal info (#386).
    Hub now collects an extended info for deal: deal id, order's resources, running tasks, task
    history.
  * Added: collecting Prometheus metrics with Graphana examples.
  * Added: network volumes support.
    Introducing container volumes support. Currently there is only CIFS support, but it will be
    extended later. Volume configuration now can be specified in the task spec.
  * Added: GPU tuners now can check if the required GPU is present on a system.
  * Changed: all prices are now kept internally as a big int.
  * Changed: merged `order.yaml` into a `slot.yaml` (#380).
  * Changed: allowing to publish only public IP addresses via special mode for the Locator (#381).
  * Changed: split proposing deal (#389).
    This change finally splits proposing a deal into the two methods: proposing and approving.
    Pending orders now lives in a shelter. This entity is managed by passive timer, cleaning up
    unapproved orders. Also approving deals requires wallet authorization.
  * Changed: multiple Hub endpoints now can be specified in the Worker's config (#392).
  * Changed: make OpenCL errors eye-candy (#400).
  * Changed: check ETH balance before republishing order (#420).
  * Changed: temporarily disable SINGLE_GPU slot param (#423).
    This deactivates an ability to sell/buy a separate GPUs, leaving a choice: none or all.
  * Fixed: price validations during proposing deal (#356).
  * Fixed: all wallet addresses should now correctly be printed as a hex.
  * Fixed: cancelling an order now stops processing loop (#361).
  * Fixed: forbidding removing ask orders via market api (#362).
  * Fixed: no longer uppercasing the env var keys (#372).
  * Fixed: correct gas price for closing deal (#374).
  * Fixed: check topic length before parsing pending deals (#377).
  * Fixed: the Node should now properly close its connections to Hubs, preventing fd leak (#378).
  * Fixed: check whether an IP is either loopback or link-local before publishing (#382).
  * Fixed: thread-safety by race condition elimination (#383).
  * Fixed: hardware collection now correctly informs about errors via logs (#385).
  * Fixed: the Locator now rejects announcements without ports (#388).
  * Fixed: check whether we can use OpenCL to determine GPU on a platform (#391).
  * Fixed: workers should now be correctly closed without hanging.
  * Fixed: compare order durations during proposing deal.
  * Fixed: republish orders on a market after freeing a deal.
  * Fixed: show error about the balance if there is not enough balance (#398).
  * Fixed: the Node should now properly cancel unapproved deal (#410).
  * Fixed: properly allocate and restrict CPUs using cgroups in tasks (#414).
  * Fixed: proper cleaning up expired deals (#418).
  * Fixed: do not remove container after commit (#416).
    This allows to fetch logs and pull the container unless the associated deal is alive.
  * Fixed: Hub should now less often cause segmentation error while synchronizing with the
    cluster (#441).
  * Fixed: workers should now properly connect to all Hubs (#444).
  * Fixed: only leader serves clients (#447).
    This includes that only leader's client endpoints are announced.

 -- Evgeny Safronov <division494@gmail.com>  Wed, 07 Feb 2018 00:10:37 +0300

sonm-core (0.3) unstable; urgency=low

  * Preparing to MVP

 -- Alex Nikonov <alex@nikonov.tech>  Sat, 23 Dec 2017 11:19:21 +0000

sonm-core (0.2.1) unstable; urgency=low

  * Add Marketplace package
  * Add Locator package

 -- Alex Nikonov <alex@nikonov.tech>  Fri, 06 Oct 2017 12:47:00 +0300

sonm-core (0.1.1) unstable; urgency=low

  * Initial debian package

 -- Anton Tyurin <noxiouz@yandex.ru>  Wed, 06 Sep 2017 20:29:19 +0300
